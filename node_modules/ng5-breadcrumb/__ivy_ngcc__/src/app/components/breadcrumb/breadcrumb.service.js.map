{"version":3,"file":"breadcrumb.service.js","sources":["../../../../../src/app/components/breadcrumb/breadcrumb.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from \"@angular/core\";\n\n@Injectable()\nexport class BreadcrumbService {\n\n    private routesFriendlyNames: Map<string, string> = new Map<string, string>();\n    private routesFriendlyNamesRegex: Map<string, string> = new Map<string, string>();\n    private routesWithCallback: Map<string, (string:string) => string> = new Map<string, (string:string) => string>();\n    private routesWithCallbackRegex: Map<string, (string:string) => string> = new Map<string, (string:string) => string>();\n    private hideRoutes: any = new Array<string>();\n    private hideRoutesRegex: any = new Array<string>();\n\n    /**\n     * Specify a friendly name for the corresponding route.\n     *\n     * @param route\n     * @param name\n     */\n    addFriendlyNameForRoute(route: string, name: string): void {\n        this.routesFriendlyNames.set(route, name);\n    }\n    \n    /**\n     * Specify a friendly name for the corresponding route matching a regular expression.\n     *\n     * @param route\n     * @param name\n     */\n    addFriendlyNameForRouteRegex(routeRegex: string, name: string): void {\n        this.routesFriendlyNamesRegex.set(routeRegex, name);\n    }\n    \n    /**\n     * Specify a callback for the corresponding route.\n     * When a mathing url is navigatedd to, the callback function is invoked to get the name to be displayed in the breadcrumb.\n     */\n    addCallbackForRoute(route: string, callback: (id: string) => string): void {\n        this.routesWithCallback.set(route, callback);\n    }\n    \n    /**\n     * Specify a callback for the corresponding route matching a regular expression.\n     * When a mathing url is navigatedd to, the callback function is invoked to get the name to be displayed in the breadcrumb.\n     */\n    addCallbackForRouteRegex(routeRegex: string, callback: (id: string) => string): void {\n        this.routesWithCallbackRegex.set(routeRegex, callback);\n    }\n\n    /**\n     * Show the friendly name for a given route (url). If no match is found the url (without the leading '/') is shown.\n     *\n     * @param route\n     * @returns {*}\n     */\n    getFriendlyNameForRoute(route: string): string {\n        let routeEnd = route.substr(route.lastIndexOf('/')+1, route.length);\n        let name: string = routeEnd;\n\n        this.routesFriendlyNames.forEach((value, key, map) => {\n            if (key === route) {\n                name = value;\n            }\n        });\n        \n        this.routesFriendlyNamesRegex.forEach((value, key, map) => {\n            if (new RegExp(key).exec(route)) {\n                name = value;\n            }\n        });\n        \n        this.routesWithCallback.forEach((value, key, map) => {\n            if (key === route) {\n                name = value(routeEnd);\n            }\n        });\n        \n        this.routesWithCallbackRegex.forEach((value, key, map) => {\n            if (new RegExp(key).exec(route)) {\n                name = value(routeEnd);\n            }\n        });\n\n        return name;\n    }\n    \n    /**\n     * Specify a route (url) that should not be shown in the breadcrumb.\n     */\n    hideRoute(route: string): void {\n        if (this.hideRoutes.indexOf(route) === -1) {\n            this.hideRoutes.push(route);\n        }\n    }\n    \n    /**\n     * Specify a route (url) regular expression that should not be shown in the breadcrumb.\n     */\n    hideRouteRegex(routeRegex: string): void {\n        if (this.hideRoutesRegex.indexOf(routeRegex) === -1) {\n            this.hideRoutesRegex.push(routeRegex);\n        }\n    }\n    \n    /**\n     * Returns true if a route should be hidden.\n     */\n    isRouteHidden(route: string): boolean {\n        let hide = this.hideRoutes.indexOf(route) > -1;\n        \n        this.hideRoutesRegex.forEach((value:any) => {\n            if (new RegExp(value).exec(route)) {\n                hide = true;\n            }\n        });\n        \n        return hide;\n    }\n}\n"]}