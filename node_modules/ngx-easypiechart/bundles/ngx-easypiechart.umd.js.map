{"version":3,"file":"ngx-easypiechart.umd.js.map","sources":["ng://ngx-easypiechart/lib/ngx-easypiechart.service.ts","ng://ngx-easypiechart/lib/ngx-easypiechart.component.ts","ng://ngx-easypiechart/lib/ngx-easypiechart.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxEasypiechartService {\n\n  constructor() { }\n}\n","import { Component, OnInit, Input, OnChanges, SimpleChanges, ElementRef } from '@angular/core';\ndeclare var EasyPieChart: any;\n\n@Component({\n  selector: 'ngx-easypiechart',\n  template: `<div>Loading ngx-easypiechart...</div>`\n})\nexport class NgxEasypiechartComponent implements OnInit, OnChanges {\n\n  @Input()\n  options: any;\n\n  @Input()\n  percent: number;\n\n  private pieChart: any;\n\n  constructor(private element: ElementRef<HTMLDivElement>) {\n  }\n\n  ngOnInit() {\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    let optionsChanged = false;\n    if (changes.percent) {\n      this.percent = changes.percent.currentValue;\n    }\n    if (changes.options) {\n      this.options = changes.options.currentValue;\n      optionsChanged = true;\n    }\n    this.loadChart(optionsChanged);\n  }\n\n  loadChart(optionsChanged: boolean) {\n    if (this.options && this.percent) {\n      if (optionsChanged) {\n        const node = this.element.nativeElement;\n        // TODO: For some reason , 'EasyPieChart' constructor creates a new chart / canvas everytime it is instantiated.\n        // wish there were a method to update options from an existing 'EasyPieChart' instance / object.\n        // Until then - we remove all existing children under the given div of the component and then recreate altogether if there are new options\n        while (node.hasChildNodes()) {\n          node.removeChild(node.lastChild);\n        }\n        this.pieChart = new EasyPieChart(node, this.options);\n      }\n      if (this.pieChart) {\n        this.pieChart.update(this.percent);\n      }\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxEasypiechartComponent } from './ngx-easypiechart.component';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [NgxEasypiechartComponent],\n  exports: [NgxEasypiechartComponent]\n})\nexport class NgxEasypiechartModule { }\n"],"names":["Injectable","Component","ElementRef","Input","NgModule"],"mappings":";;;;;;;;;;AAAA;QAOE;SAAiB;;oBALlBA,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;qCAJD;KAQC;;;;;;ACRD;QAiBE,kCAAoB,OAAmC;YAAnC,YAAO,GAAP,OAAO,CAA4B;SACtD;;;;QAED,2CAAQ;;;YAAR;aACC;;;;;QAED,8CAAW;;;;YAAX,UAAY,OAAsB;;oBAC5B,cAAc,GAAG,KAAK;gBAC1B,IAAI,OAAO,CAAC,OAAO,EAAE;oBACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC;iBAC7C;gBACD,IAAI,OAAO,CAAC,OAAO,EAAE;oBACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC;oBAC5C,cAAc,GAAG,IAAI,CAAC;iBACvB;gBACD,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;aAChC;;;;;QAED,4CAAS;;;;YAAT,UAAU,cAAuB;gBAC/B,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;oBAChC,IAAI,cAAc,EAAE;;4BACZ,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa;;;;wBAIvC,OAAO,IAAI,CAAC,aAAa,EAAE,EAAE;4BAC3B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;yBAClC;wBACD,IAAI,CAAC,QAAQ,GAAG,IAAI,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;qBACtD;oBACD,IAAI,IAAI,CAAC,QAAQ,EAAE;wBACjB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBACpC;iBACF;aACF;;oBAhDFC,YAAS,SAAC;wBACT,QAAQ,EAAE,kBAAkB;wBAC5B,QAAQ,EAAE,wCAAwC;qBACnD;;;;;wBAN4DC,aAAU;;;;8BASpEC,QAAK;8BAGLA,QAAK;;QAyCR,+BAAC;KAAA;;;;;;ACrDD;QAGA;SAMsC;;oBANrCC,WAAQ,SAAC;wBACR,OAAO,EAAE,EACR;wBACD,YAAY,EAAE,CAAC,wBAAwB,CAAC;wBACxC,OAAO,EAAE,CAAC,wBAAwB,CAAC;qBACpC;;QACoC,4BAAC;KAAA;;;;;;;;;;;;;;;;;;;;;;;;"}
