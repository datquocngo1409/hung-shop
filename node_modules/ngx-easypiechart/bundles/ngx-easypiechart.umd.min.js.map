{"version":3,"sources":["ng://ngx-easypiechart/lib/ngx-easypiechart.service.ts","ng://ngx-easypiechart/lib/ngx-easypiechart.component.ts","ng://ngx-easypiechart/lib/ngx-easypiechart.module.ts"],"names":["NgxEasypiechartService","Injectable","args","providedIn","NgxEasypiechartComponent","element","this","prototype","ngOnInit","ngOnChanges","changes","optionsChanged","percent","currentValue","options","loadChart","node","nativeElement","hasChildNodes","removeChild","lastChild","pieChart","EasyPieChart","update","Component","selector","template","ElementRef","Input","NgxEasypiechartModule","NgModule","imports","declarations","exports"],"mappings":"8QAAA,IAAAA,EAAA,WAOE,SAAAA,gCALDC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,sJAHd,GCAAC,EAAA,WAiBE,SAAAA,EAAoBC,GAAAC,KAAAD,QAAAA,EAoCtB,OAjCED,EAAAG,UAAAC,SAAA,aAGAJ,EAAAG,UAAAE,YAAA,SAAYC,OACNC,GAAiB,EACjBD,EAAQE,UACVN,KAAKM,QAAUF,EAAQE,QAAQC,cAE7BH,EAAQI,UACVR,KAAKQ,QAAUJ,EAAQI,QAAQD,aAC/BF,GAAiB,GAEnBL,KAAKS,UAAUJ,IAGjBP,EAAAG,UAAAQ,UAAA,SAAUJ,GACR,GAAIL,KAAKQ,SAAWR,KAAKM,QAAS,CAChC,GAAID,EAAgB,CAKlB,QAJMK,EAAOV,KAAKD,QAAQY,cAInBD,EAAKE,iBACVF,EAAKG,YAAYH,EAAKI,WAExBd,KAAKe,SAAW,IAAIC,aAAaN,EAAMV,KAAKQ,SAE1CR,KAAKe,UACPf,KAAKe,SAASE,OAAOjB,KAAKM,+BA7CjCY,EAAAA,UAAStB,KAAA,CAAC,CACTuB,SAAU,mBACVC,SAAU,sFALiDC,EAAAA,+CAS1DC,EAAAA,uBAGAA,EAAAA,SAyCHxB,EArDA,GCAAyB,EAAA,WAGA,SAAAA,KAMqC,2BANpCC,EAAAA,SAAQ5B,KAAA,CAAC,CACR6B,QAAS,GAETC,aAAc,CAAC5B,GACf6B,QAAS,CAAC7B,OAEyByB,EATrC","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxEasypiechartService {\n\n  constructor() { }\n}\n","import { Component, OnInit, Input, OnChanges, SimpleChanges, ElementRef } from '@angular/core';\ndeclare var EasyPieChart: any;\n\n@Component({\n  selector: 'ngx-easypiechart',\n  template: `<div>Loading ngx-easypiechart...</div>`\n})\nexport class NgxEasypiechartComponent implements OnInit, OnChanges {\n\n  @Input()\n  options: any;\n\n  @Input()\n  percent: number;\n\n  private pieChart: any;\n\n  constructor(private element: ElementRef<HTMLDivElement>) {\n  }\n\n  ngOnInit() {\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    let optionsChanged = false;\n    if (changes.percent) {\n      this.percent = changes.percent.currentValue;\n    }\n    if (changes.options) {\n      this.options = changes.options.currentValue;\n      optionsChanged = true;\n    }\n    this.loadChart(optionsChanged);\n  }\n\n  loadChart(optionsChanged: boolean) {\n    if (this.options && this.percent) {\n      if (optionsChanged) {\n        const node = this.element.nativeElement;\n        // TODO: For some reason , 'EasyPieChart' constructor creates a new chart / canvas everytime it is instantiated.\n        // wish there were a method to update options from an existing 'EasyPieChart' instance / object.\n        // Until then - we remove all existing children under the given div of the component and then recreate altogether if there are new options\n        while (node.hasChildNodes()) {\n          node.removeChild(node.lastChild);\n        }\n        this.pieChart = new EasyPieChart(node, this.options);\n      }\n      if (this.pieChart) {\n        this.pieChart.update(this.percent);\n      }\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxEasypiechartComponent } from './ngx-easypiechart.component';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [NgxEasypiechartComponent],\n  exports: [NgxEasypiechartComponent]\n})\nexport class NgxEasypiechartModule { }\n"]}