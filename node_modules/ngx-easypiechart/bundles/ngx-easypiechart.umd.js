(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-easypiechart', ['exports', '@angular/core'], factory) :
    (factory((global['ngx-easypiechart'] = {}),global.ng.core));
}(this, (function (exports,i0) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var NgxEasypiechartService = /** @class */ (function () {
        function NgxEasypiechartService() {
        }
        NgxEasypiechartService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        NgxEasypiechartService.ctorParameters = function () { return []; };
        /** @nocollapse */ NgxEasypiechartService.ngInjectableDef = i0.defineInjectable({ factory: function NgxEasypiechartService_Factory() { return new NgxEasypiechartService(); }, token: NgxEasypiechartService, providedIn: "root" });
        return NgxEasypiechartService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var NgxEasypiechartComponent = /** @class */ (function () {
        function NgxEasypiechartComponent(element) {
            this.element = element;
        }
        /**
         * @return {?}
         */
        NgxEasypiechartComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NgxEasypiechartComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                /** @type {?} */
                var optionsChanged = false;
                if (changes.percent) {
                    this.percent = changes.percent.currentValue;
                }
                if (changes.options) {
                    this.options = changes.options.currentValue;
                    optionsChanged = true;
                }
                this.loadChart(optionsChanged);
            };
        /**
         * @param {?} optionsChanged
         * @return {?}
         */
        NgxEasypiechartComponent.prototype.loadChart = /**
         * @param {?} optionsChanged
         * @return {?}
         */
            function (optionsChanged) {
                if (this.options && this.percent) {
                    if (optionsChanged) {
                        /** @type {?} */
                        var node = this.element.nativeElement;
                        // TODO: For some reason , 'EasyPieChart' constructor creates a new chart / canvas everytime it is instantiated.
                        // wish there were a method to update options from an existing 'EasyPieChart' instance / object.
                        // Until then - we remove all existing children under the given div of the component and then recreate altogether if there are new options
                        while (node.hasChildNodes()) {
                            node.removeChild(node.lastChild);
                        }
                        this.pieChart = new EasyPieChart(node, this.options);
                    }
                    if (this.pieChart) {
                        this.pieChart.update(this.percent);
                    }
                }
            };
        NgxEasypiechartComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'ngx-easypiechart',
                        template: "<div>Loading ngx-easypiechart...</div>"
                    },] },
        ];
        /** @nocollapse */
        NgxEasypiechartComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef }
            ];
        };
        NgxEasypiechartComponent.propDecorators = {
            options: [{ type: i0.Input }],
            percent: [{ type: i0.Input }]
        };
        return NgxEasypiechartComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var NgxEasypiechartModule = /** @class */ (function () {
        function NgxEasypiechartModule() {
        }
        NgxEasypiechartModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [],
                        declarations: [NgxEasypiechartComponent],
                        exports: [NgxEasypiechartComponent]
                    },] },
        ];
        return NgxEasypiechartModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.NgxEasypiechartService = NgxEasypiechartService;
    exports.NgxEasypiechartComponent = NgxEasypiechartComponent;
    exports.NgxEasypiechartModule = NgxEasypiechartModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWVhc3lwaWVjaGFydC51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL25neC1lYXN5cGllY2hhcnQvbGliL25neC1lYXN5cGllY2hhcnQuc2VydmljZS50cyIsIm5nOi8vbmd4LWVhc3lwaWVjaGFydC9saWIvbmd4LWVhc3lwaWVjaGFydC5jb21wb25lbnQudHMiLCJuZzovL25neC1lYXN5cGllY2hhcnQvbGliL25neC1lYXN5cGllY2hhcnQubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4RWFzeXBpZWNoYXJ0U2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5kZWNsYXJlIHZhciBFYXN5UGllQ2hhcnQ6IGFueTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LWVhc3lwaWVjaGFydCcsXG4gIHRlbXBsYXRlOiBgPGRpdj5Mb2FkaW5nIG5neC1lYXN5cGllY2hhcnQuLi48L2Rpdj5gXG59KVxuZXhwb3J0IGNsYXNzIE5neEVhc3lwaWVjaGFydENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcblxuICBASW5wdXQoKVxuICBvcHRpb25zOiBhbnk7XG5cbiAgQElucHV0KClcbiAgcGVyY2VudDogbnVtYmVyO1xuXG4gIHByaXZhdGUgcGllQ2hhcnQ6IGFueTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWY8SFRNTERpdkVsZW1lbnQ+KSB7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBsZXQgb3B0aW9uc0NoYW5nZWQgPSBmYWxzZTtcbiAgICBpZiAoY2hhbmdlcy5wZXJjZW50KSB7XG4gICAgICB0aGlzLnBlcmNlbnQgPSBjaGFuZ2VzLnBlcmNlbnQuY3VycmVudFZhbHVlO1xuICAgIH1cbiAgICBpZiAoY2hhbmdlcy5vcHRpb25zKSB7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBjaGFuZ2VzLm9wdGlvbnMuY3VycmVudFZhbHVlO1xuICAgICAgb3B0aW9uc0NoYW5nZWQgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLmxvYWRDaGFydChvcHRpb25zQ2hhbmdlZCk7XG4gIH1cblxuICBsb2FkQ2hhcnQob3B0aW9uc0NoYW5nZWQ6IGJvb2xlYW4pIHtcbiAgICBpZiAodGhpcy5vcHRpb25zICYmIHRoaXMucGVyY2VudCkge1xuICAgICAgaWYgKG9wdGlvbnNDaGFuZ2VkKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICAgICAgLy8gVE9ETzogRm9yIHNvbWUgcmVhc29uICwgJ0Vhc3lQaWVDaGFydCcgY29uc3RydWN0b3IgY3JlYXRlcyBhIG5ldyBjaGFydCAvIGNhbnZhcyBldmVyeXRpbWUgaXQgaXMgaW5zdGFudGlhdGVkLlxuICAgICAgICAvLyB3aXNoIHRoZXJlIHdlcmUgYSBtZXRob2QgdG8gdXBkYXRlIG9wdGlvbnMgZnJvbSBhbiBleGlzdGluZyAnRWFzeVBpZUNoYXJ0JyBpbnN0YW5jZSAvIG9iamVjdC5cbiAgICAgICAgLy8gVW50aWwgdGhlbiAtIHdlIHJlbW92ZSBhbGwgZXhpc3RpbmcgY2hpbGRyZW4gdW5kZXIgdGhlIGdpdmVuIGRpdiBvZiB0aGUgY29tcG9uZW50IGFuZCB0aGVuIHJlY3JlYXRlIGFsdG9nZXRoZXIgaWYgdGhlcmUgYXJlIG5ldyBvcHRpb25zXG4gICAgICAgIHdoaWxlIChub2RlLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQobm9kZS5sYXN0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGllQ2hhcnQgPSBuZXcgRWFzeVBpZUNoYXJ0KG5vZGUsIHRoaXMub3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5waWVDaGFydCkge1xuICAgICAgICB0aGlzLnBpZUNoYXJ0LnVwZGF0ZSh0aGlzLnBlcmNlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmd4RWFzeXBpZWNoYXJ0Q29tcG9uZW50IH0gZnJvbSAnLi9uZ3gtZWFzeXBpZWNoYXJ0LmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbTmd4RWFzeXBpZWNoYXJ0Q29tcG9uZW50XSxcbiAgZXhwb3J0czogW05neEVhc3lwaWVjaGFydENvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgTmd4RWFzeXBpZWNoYXJ0TW9kdWxlIHsgfVxuIl0sIm5hbWVzIjpbIkluamVjdGFibGUiLCJDb21wb25lbnQiLCJFbGVtZW50UmVmIiwiSW5wdXQiLCJOZ01vZHVsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO1FBT0U7U0FBaUI7O29CQUxsQkEsYUFBVSxTQUFDO3dCQUNWLFVBQVUsRUFBRSxNQUFNO3FCQUNuQjs7Ozs7cUNBSkQ7S0FRQzs7Ozs7O0FDUkQ7UUFpQkUsa0NBQW9CLE9BQW1DO1lBQW5DLFlBQU8sR0FBUCxPQUFPLENBQTRCO1NBQ3REOzs7O1FBRUQsMkNBQVE7OztZQUFSO2FBQ0M7Ozs7O1FBRUQsOENBQVc7Ozs7WUFBWCxVQUFZLE9BQXNCOztvQkFDNUIsY0FBYyxHQUFHLEtBQUs7Z0JBQzFCLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtvQkFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztpQkFDN0M7Z0JBQ0QsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO29CQUNuQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO29CQUM1QyxjQUFjLEdBQUcsSUFBSSxDQUFDO2lCQUN2QjtnQkFDRCxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO2FBQ2hDOzs7OztRQUVELDRDQUFTOzs7O1lBQVQsVUFBVSxjQUF1QjtnQkFDL0IsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7b0JBQ2hDLElBQUksY0FBYyxFQUFFOzs0QkFDWixJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhOzs7O3dCQUl2QyxPQUFPLElBQUksQ0FBQyxhQUFhLEVBQUUsRUFBRTs0QkFDM0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7eUJBQ2xDO3dCQUNELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztxQkFDdEQ7b0JBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO3dCQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7cUJBQ3BDO2lCQUNGO2FBQ0Y7O29CQWhERkMsWUFBUyxTQUFDO3dCQUNULFFBQVEsRUFBRSxrQkFBa0I7d0JBQzVCLFFBQVEsRUFBRSx3Q0FBd0M7cUJBQ25EOzs7Ozt3QkFONERDLGFBQVU7Ozs7OEJBU3BFQyxRQUFLOzhCQUdMQSxRQUFLOztRQXlDUiwrQkFBQztLQUFBOzs7Ozs7QUNyREQ7UUFHQTtTQU1zQzs7b0JBTnJDQyxXQUFRLFNBQUM7d0JBQ1IsT0FBTyxFQUFFLEVBQ1I7d0JBQ0QsWUFBWSxFQUFFLENBQUMsd0JBQXdCLENBQUM7d0JBQ3hDLE9BQU8sRUFBRSxDQUFDLHdCQUF3QixDQUFDO3FCQUNwQzs7UUFDb0MsNEJBQUM7S0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9