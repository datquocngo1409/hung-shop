/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, Input, ElementRef } from '@angular/core';
export class NgxEasypiechartComponent {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        let optionsChanged = false;
        if (changes.percent) {
            this.percent = changes.percent.currentValue;
        }
        if (changes.options) {
            this.options = changes.options.currentValue;
            optionsChanged = true;
        }
        this.loadChart(optionsChanged);
    }
    /**
     * @param {?} optionsChanged
     * @return {?}
     */
    loadChart(optionsChanged) {
        if (this.options && this.percent) {
            if (optionsChanged) {
                /** @type {?} */
                const node = this.element.nativeElement;
                // TODO: For some reason , 'EasyPieChart' constructor creates a new chart / canvas everytime it is instantiated.
                // wish there were a method to update options from an existing 'EasyPieChart' instance / object.
                // Until then - we remove all existing children under the given div of the component and then recreate altogether if there are new options
                while (node.hasChildNodes()) {
                    node.removeChild(node.lastChild);
                }
                this.pieChart = new EasyPieChart(node, this.options);
            }
            if (this.pieChart) {
                this.pieChart.update(this.percent);
            }
        }
    }
}
NgxEasypiechartComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-easypiechart',
                template: `<div>Loading ngx-easypiechart...</div>`
            },] },
];
/** @nocollapse */
NgxEasypiechartComponent.ctorParameters = () => [
    { type: ElementRef }
];
NgxEasypiechartComponent.propDecorators = {
    options: [{ type: Input }],
    percent: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgxEasypiechartComponent.prototype.options;
    /** @type {?} */
    NgxEasypiechartComponent.prototype.percent;
    /** @type {?} */
    NgxEasypiechartComponent.prototype.pieChart;
    /** @type {?} */
    NgxEasypiechartComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWVhc3lwaWVjaGFydC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZWFzeXBpZWNoYXJ0LyIsInNvdXJjZXMiOlsibGliL25neC1lYXN5cGllY2hhcnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBNEIsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTy9GLE1BQU0sT0FBTyx3QkFBd0I7Ozs7SUFVbkMsWUFBb0IsT0FBbUM7UUFBbkMsWUFBTyxHQUFQLE9BQU8sQ0FBNEI7SUFDdkQsQ0FBQzs7OztJQUVELFFBQVE7SUFDUixDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxPQUFzQjs7WUFDNUIsY0FBYyxHQUFHLEtBQUs7UUFDMUIsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7U0FDN0M7UUFDRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztZQUM1QyxjQUFjLEdBQUcsSUFBSSxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNqQyxDQUFDOzs7OztJQUVELFNBQVMsQ0FBQyxjQUF1QjtRQUMvQixJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQyxJQUFJLGNBQWMsRUFBRTs7c0JBQ1osSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYTtnQkFDdkMsZ0hBQWdIO2dCQUNoSCxnR0FBZ0c7Z0JBQ2hHLDBJQUEwSTtnQkFDMUksT0FBTyxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUU7b0JBQzNCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2lCQUNsQztnQkFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDdEQ7WUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNwQztTQUNGO0lBQ0gsQ0FBQzs7O1lBaERGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1QixRQUFRLEVBQUUsd0NBQXdDO2FBQ25EOzs7O1lBTjRELFVBQVU7OztzQkFTcEUsS0FBSztzQkFHTCxLQUFLOzs7O0lBSE4sMkNBQ2E7O0lBRWIsMkNBQ2dCOztJQUVoQiw0Q0FBc0I7O0lBRVYsMkNBQTJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmRlY2xhcmUgdmFyIEVhc3lQaWVDaGFydDogYW55O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtZWFzeXBpZWNoYXJ0JyxcbiAgdGVtcGxhdGU6IGA8ZGl2PkxvYWRpbmcgbmd4LWVhc3lwaWVjaGFydC4uLjwvZGl2PmBcbn0pXG5leHBvcnQgY2xhc3MgTmd4RWFzeXBpZWNoYXJ0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuXG4gIEBJbnB1dCgpXG4gIG9wdGlvbnM6IGFueTtcblxuICBASW5wdXQoKVxuICBwZXJjZW50OiBudW1iZXI7XG5cbiAgcHJpdmF0ZSBwaWVDaGFydDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZjxIVE1MRGl2RWxlbWVudD4pIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGxldCBvcHRpb25zQ2hhbmdlZCA9IGZhbHNlO1xuICAgIGlmIChjaGFuZ2VzLnBlcmNlbnQpIHtcbiAgICAgIHRoaXMucGVyY2VudCA9IGNoYW5nZXMucGVyY2VudC5jdXJyZW50VmFsdWU7XG4gICAgfVxuICAgIGlmIChjaGFuZ2VzLm9wdGlvbnMpIHtcbiAgICAgIHRoaXMub3B0aW9ucyA9IGNoYW5nZXMub3B0aW9ucy5jdXJyZW50VmFsdWU7XG4gICAgICBvcHRpb25zQ2hhbmdlZCA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMubG9hZENoYXJ0KG9wdGlvbnNDaGFuZ2VkKTtcbiAgfVxuXG4gIGxvYWRDaGFydChvcHRpb25zQ2hhbmdlZDogYm9vbGVhbikge1xuICAgIGlmICh0aGlzLm9wdGlvbnMgJiYgdGhpcy5wZXJjZW50KSB7XG4gICAgICBpZiAob3B0aW9uc0NoYW5nZWQpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgICAgICAvLyBUT0RPOiBGb3Igc29tZSByZWFzb24gLCAnRWFzeVBpZUNoYXJ0JyBjb25zdHJ1Y3RvciBjcmVhdGVzIGEgbmV3IGNoYXJ0IC8gY2FudmFzIGV2ZXJ5dGltZSBpdCBpcyBpbnN0YW50aWF0ZWQuXG4gICAgICAgIC8vIHdpc2ggdGhlcmUgd2VyZSBhIG1ldGhvZCB0byB1cGRhdGUgb3B0aW9ucyBmcm9tIGFuIGV4aXN0aW5nICdFYXN5UGllQ2hhcnQnIGluc3RhbmNlIC8gb2JqZWN0LlxuICAgICAgICAvLyBVbnRpbCB0aGVuIC0gd2UgcmVtb3ZlIGFsbCBleGlzdGluZyBjaGlsZHJlbiB1bmRlciB0aGUgZ2l2ZW4gZGl2IG9mIHRoZSBjb21wb25lbnQgYW5kIHRoZW4gcmVjcmVhdGUgYWx0b2dldGhlciBpZiB0aGVyZSBhcmUgbmV3IG9wdGlvbnNcbiAgICAgICAgd2hpbGUgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgbm9kZS5yZW1vdmVDaGlsZChub2RlLmxhc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5waWVDaGFydCA9IG5ldyBFYXN5UGllQ2hhcnQobm9kZSwgdGhpcy5vcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnBpZUNoYXJ0KSB7XG4gICAgICAgIHRoaXMucGllQ2hhcnQudXBkYXRlKHRoaXMucGVyY2VudCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==