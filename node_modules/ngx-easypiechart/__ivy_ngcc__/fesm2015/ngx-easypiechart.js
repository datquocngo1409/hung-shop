import { Injectable, Component, Input, ElementRef, NgModule, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
class NgxEasypiechartService {
    constructor() { }
}
NgxEasypiechartService.ɵfac = function NgxEasypiechartService_Factory(t) { return new (t || NgxEasypiechartService)(); };
NgxEasypiechartService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxEasypiechartService, factory: NgxEasypiechartService.ɵfac, providedIn: 'root' });
/** @nocollapse */
NgxEasypiechartService.ctorParameters = () => [];
/** @nocollapse */ NgxEasypiechartService.ngInjectableDef = defineInjectable({ factory: function NgxEasypiechartService_Factory() { return new NgxEasypiechartService(); }, token: NgxEasypiechartService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxEasypiechartService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class NgxEasypiechartComponent {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        let optionsChanged = false;
        if (changes.percent) {
            this.percent = changes.percent.currentValue;
        }
        if (changes.options) {
            this.options = changes.options.currentValue;
            optionsChanged = true;
        }
        this.loadChart(optionsChanged);
    }
    /**
     * @param {?} optionsChanged
     * @return {?}
     */
    loadChart(optionsChanged) {
        if (this.options && this.percent) {
            if (optionsChanged) {
                /** @type {?} */
                const node = this.element.nativeElement;
                // TODO: For some reason , 'EasyPieChart' constructor creates a new chart / canvas everytime it is instantiated.
                // wish there were a method to update options from an existing 'EasyPieChart' instance / object.
                // Until then - we remove all existing children under the given div of the component and then recreate altogether if there are new options
                while (node.hasChildNodes()) {
                    node.removeChild(node.lastChild);
                }
                this.pieChart = new EasyPieChart(node, this.options);
            }
            if (this.pieChart) {
                this.pieChart.update(this.percent);
            }
        }
    }
}
NgxEasypiechartComponent.ɵfac = function NgxEasypiechartComponent_Factory(t) { return new (t || NgxEasypiechartComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef)); };
NgxEasypiechartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxEasypiechartComponent, selectors: [["ngx-easypiechart"]], inputs: { percent: "percent", options: "options" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 0, template: function NgxEasypiechartComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵtext(1, "Loading ngx-easypiechart...");
        ɵngcc0.ɵɵelementEnd();
    } }, encapsulation: 2 });
/** @nocollapse */
NgxEasypiechartComponent.ctorParameters = () => [
    { type: ElementRef }
];
NgxEasypiechartComponent.propDecorators = {
    options: [{ type: Input }],
    percent: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxEasypiechartComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-easypiechart',
                template: `<div>Loading ngx-easypiechart...</div>`
            }]
    }], function () { return [{ type: ElementRef }]; }, { percent: [{
            type: Input
        }], options: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class NgxEasypiechartModule {
}
NgxEasypiechartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxEasypiechartModule });
NgxEasypiechartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxEasypiechartModule_Factory(t) { return new (t || NgxEasypiechartModule)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxEasypiechartModule, { declarations: [NgxEasypiechartComponent], exports: [NgxEasypiechartComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxEasypiechartModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [NgxEasypiechartComponent],
                exports: [NgxEasypiechartComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { NgxEasypiechartService, NgxEasypiechartComponent, NgxEasypiechartModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWVhc3lwaWVjaGFydC5qcyIsInNvdXJjZXMiOlsibmd4LWVhc3lwaWVjaGFydC9saWIvbmd4LWVhc3lwaWVjaGFydC5zZXJ2aWNlLnRzIiwibmd4LWVhc3lwaWVjaGFydC9saWIvbmd4LWVhc3lwaWVjaGFydC5jb21wb25lbnQudHMiLCJuZ3gtZWFzeXBpZWNoYXJ0L2xpYi9uZ3gtZWFzeXBpZWNoYXJ0Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsTUFLYSxzQkFBc0I7QUFDbkMsSUFDRSxpQkFBaUI7QUFDbkI7a0RBTkMsVUFBVSxTQUFDLGtCQUNWLFVBQVUsRUFBRSxNQUFNLGNBQ25CO3NKQUNLO0FBQUM7QUFBbUI7QUFJWDs7Ozs7O2dEQUFpTztBQUFDO0FBQUM7QUFBSTtBQUFrQztBQUFnRjtBQ1R4VyxNQU9hLHdCQUF3QjtBQUFHO0FBQVE7QUFFNUM7QUFDSCxJQU9DLFlBQW9CLE9BQW1DO0FBQ3pELFFBRHNCLFlBQU8sR0FBUCxPQUFPLENBQTRCO0FBQUMsS0FDdkQ7QUFDSDtBQUNPO0FBR0Q7QUFBUSxJQUhaLFFBQVE7QUFDVixLQUFHO0FBQ0g7QUFDTztBQUEwQjtBQUNyQjtBQUFRLElBRGxCLFdBQVcsQ0FBQyxPQUFzQjtBQUNwQztBQUF5QixZQUFqQixjQUFjLEdBQUcsS0FBSztBQUM5QixRQUFJLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtBQUN6QixZQUFNLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDbEQsU0FBSztBQUNMLFFBQUksSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO0FBQ3pCLFlBQU0sSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUNsRCxZQUFNLGNBQWMsR0FBRyxJQUFJLENBQUM7QUFDNUIsU0FBSztBQUNMLFFBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNuQyxLQUFHO0FBQ0g7QUFDTztBQUNOO0FBQW1CO0FBQVEsSUFEMUIsU0FBUyxDQUFDLGNBQXVCO0FBQ25DLFFBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFDdEMsWUFBTSxJQUFJLGNBQWMsRUFBRTtBQUMxQjtBQUFpQyxzQkFBbkIsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYTtBQUMvQztBQUNRO0FBQ1E7QUFDUSxnQkFBaEIsT0FBTyxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUU7QUFDckMsb0JBQVUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDM0MsaUJBQVM7QUFDVCxnQkFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0QsYUFBTztBQUNQLFlBQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQ3pCLGdCQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMzQyxhQUFPO0FBQ1AsU0FBSztBQUNMLEtBQUc7QUFDSDtvREFqREMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxrQkFBa0Isa0JBQzVCLFFBQVEsRUFBRTtvQkFBd0MsY0FDbkQ7Ozs7NkJBQ0s7QUFBQztBQUFtQjtBQUVwQixZQVR1RCxVQUFVO0FBQUc7QUFBRztBQUNwRCxzQkFRdEIsS0FBSztBQUNOLHNCQUVDLEtBQUs7QUFDUDs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQztBQUFDO0FBQUk7QUFFYztBQUtaO0FDcEJYLE1BU2EscUJBQXFCO0FBQUc7aURBTnBDLFFBQVEsU0FBQyxrQkFDUjtJQUFPLEVBQUUsRUFDUixrQkFDRCxZQUFZLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQyxrQkFDeEMsT0FBTyxFQUFFLENBQUMsd0JBQXdCLENBQUMsY0FDcEM7Ozs7Ozs7OzswQkFDSztBQUFDO0FBQUM7QUFBSTtBQUNMO0FBQWdGO0FBQUk7QUFBQztBQUFJO0FBQWtDO0FBQWdGO0FBQUk7QUFBQzs7QUZWQSxBQUtBLEFBQUEsQUFFQSxBQUFBLEFBTEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQ0pBLEFBT0EsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBaERBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQU5BLEFBQUEsQUFTQSxBQUFBLEFBR0EsQUFBQSxBQ1pBLEFBU0EsQUFBQSxBQU5BLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5neEVhc3lwaWVjaGFydFNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuZGVjbGFyZSB2YXIgRWFzeVBpZUNoYXJ0OiBhbnk7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1lYXN5cGllY2hhcnQnLFxuICB0ZW1wbGF0ZTogYDxkaXY+TG9hZGluZyBuZ3gtZWFzeXBpZWNoYXJ0Li4uPC9kaXY+YFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hFYXN5cGllY2hhcnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG5cbiAgQElucHV0KClcbiAgb3B0aW9uczogYW55O1xuXG4gIEBJbnB1dCgpXG4gIHBlcmNlbnQ6IG51bWJlcjtcblxuICBwcml2YXRlIHBpZUNoYXJ0OiBhbnk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxEaXZFbGVtZW50Pikge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgbGV0IG9wdGlvbnNDaGFuZ2VkID0gZmFsc2U7XG4gICAgaWYgKGNoYW5nZXMucGVyY2VudCkge1xuICAgICAgdGhpcy5wZXJjZW50ID0gY2hhbmdlcy5wZXJjZW50LmN1cnJlbnRWYWx1ZTtcbiAgICB9XG4gICAgaWYgKGNoYW5nZXMub3B0aW9ucykge1xuICAgICAgdGhpcy5vcHRpb25zID0gY2hhbmdlcy5vcHRpb25zLmN1cnJlbnRWYWx1ZTtcbiAgICAgIG9wdGlvbnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5sb2FkQ2hhcnQob3B0aW9uc0NoYW5nZWQpO1xuICB9XG5cbiAgbG9hZENoYXJ0KG9wdGlvbnNDaGFuZ2VkOiBib29sZWFuKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucyAmJiB0aGlzLnBlcmNlbnQpIHtcbiAgICAgIGlmIChvcHRpb25zQ2hhbmdlZCkge1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIC8vIFRPRE86IEZvciBzb21lIHJlYXNvbiAsICdFYXN5UGllQ2hhcnQnIGNvbnN0cnVjdG9yIGNyZWF0ZXMgYSBuZXcgY2hhcnQgLyBjYW52YXMgZXZlcnl0aW1lIGl0IGlzIGluc3RhbnRpYXRlZC5cbiAgICAgICAgLy8gd2lzaCB0aGVyZSB3ZXJlIGEgbWV0aG9kIHRvIHVwZGF0ZSBvcHRpb25zIGZyb20gYW4gZXhpc3RpbmcgJ0Vhc3lQaWVDaGFydCcgaW5zdGFuY2UgLyBvYmplY3QuXG4gICAgICAgIC8vIFVudGlsIHRoZW4gLSB3ZSByZW1vdmUgYWxsIGV4aXN0aW5nIGNoaWxkcmVuIHVuZGVyIHRoZSBnaXZlbiBkaXYgb2YgdGhlIGNvbXBvbmVudCBhbmQgdGhlbiByZWNyZWF0ZSBhbHRvZ2V0aGVyIGlmIHRoZXJlIGFyZSBuZXcgb3B0aW9uc1xuICAgICAgICB3aGlsZSAobm9kZS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUubGFzdENoaWxkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBpZUNoYXJ0ID0gbmV3IEVhc3lQaWVDaGFydChub2RlLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucGllQ2hhcnQpIHtcbiAgICAgICAgdGhpcy5waWVDaGFydC51cGRhdGUodGhpcy5wZXJjZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5neEVhc3lwaWVjaGFydENvbXBvbmVudCB9IGZyb20gJy4vbmd4LWVhc3lwaWVjaGFydC5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW05neEVhc3lwaWVjaGFydENvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtOZ3hFYXN5cGllY2hhcnRDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIE5neEVhc3lwaWVjaGFydE1vZHVsZSB7IH1cbiJdfQ==