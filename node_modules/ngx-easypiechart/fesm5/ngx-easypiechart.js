import { Injectable, Component, Input, ElementRef, NgModule, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var NgxEasypiechartService = /** @class */ (function () {
    function NgxEasypiechartService() {
    }
    NgxEasypiechartService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    NgxEasypiechartService.ctorParameters = function () { return []; };
    /** @nocollapse */ NgxEasypiechartService.ngInjectableDef = defineInjectable({ factory: function NgxEasypiechartService_Factory() { return new NgxEasypiechartService(); }, token: NgxEasypiechartService, providedIn: "root" });
    return NgxEasypiechartService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var NgxEasypiechartComponent = /** @class */ (function () {
    function NgxEasypiechartComponent(element) {
        this.element = element;
    }
    /**
     * @return {?}
     */
    NgxEasypiechartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxEasypiechartComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var optionsChanged = false;
        if (changes.percent) {
            this.percent = changes.percent.currentValue;
        }
        if (changes.options) {
            this.options = changes.options.currentValue;
            optionsChanged = true;
        }
        this.loadChart(optionsChanged);
    };
    /**
     * @param {?} optionsChanged
     * @return {?}
     */
    NgxEasypiechartComponent.prototype.loadChart = /**
     * @param {?} optionsChanged
     * @return {?}
     */
    function (optionsChanged) {
        if (this.options && this.percent) {
            if (optionsChanged) {
                /** @type {?} */
                var node = this.element.nativeElement;
                // TODO: For some reason , 'EasyPieChart' constructor creates a new chart / canvas everytime it is instantiated.
                // wish there were a method to update options from an existing 'EasyPieChart' instance / object.
                // Until then - we remove all existing children under the given div of the component and then recreate altogether if there are new options
                while (node.hasChildNodes()) {
                    node.removeChild(node.lastChild);
                }
                this.pieChart = new EasyPieChart(node, this.options);
            }
            if (this.pieChart) {
                this.pieChart.update(this.percent);
            }
        }
    };
    NgxEasypiechartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-easypiechart',
                    template: "<div>Loading ngx-easypiechart...</div>"
                },] },
    ];
    /** @nocollapse */
    NgxEasypiechartComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    NgxEasypiechartComponent.propDecorators = {
        options: [{ type: Input }],
        percent: [{ type: Input }]
    };
    return NgxEasypiechartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var NgxEasypiechartModule = /** @class */ (function () {
    function NgxEasypiechartModule() {
    }
    NgxEasypiechartModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [NgxEasypiechartComponent],
                    exports: [NgxEasypiechartComponent]
                },] },
    ];
    return NgxEasypiechartModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { NgxEasypiechartService, NgxEasypiechartComponent, NgxEasypiechartModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWVhc3lwaWVjaGFydC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmd4LWVhc3lwaWVjaGFydC9saWIvbmd4LWVhc3lwaWVjaGFydC5zZXJ2aWNlLnRzIiwibmc6Ly9uZ3gtZWFzeXBpZWNoYXJ0L2xpYi9uZ3gtZWFzeXBpZWNoYXJ0LmNvbXBvbmVudC50cyIsIm5nOi8vbmd4LWVhc3lwaWVjaGFydC9saWIvbmd4LWVhc3lwaWVjaGFydC5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hFYXN5cGllY2hhcnRTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmRlY2xhcmUgdmFyIEVhc3lQaWVDaGFydDogYW55O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtZWFzeXBpZWNoYXJ0JyxcbiAgdGVtcGxhdGU6IGA8ZGl2PkxvYWRpbmcgbmd4LWVhc3lwaWVjaGFydC4uLjwvZGl2PmBcbn0pXG5leHBvcnQgY2xhc3MgTmd4RWFzeXBpZWNoYXJ0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuXG4gIEBJbnB1dCgpXG4gIG9wdGlvbnM6IGFueTtcblxuICBASW5wdXQoKVxuICBwZXJjZW50OiBudW1iZXI7XG5cbiAgcHJpdmF0ZSBwaWVDaGFydDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZjxIVE1MRGl2RWxlbWVudD4pIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGxldCBvcHRpb25zQ2hhbmdlZCA9IGZhbHNlO1xuICAgIGlmIChjaGFuZ2VzLnBlcmNlbnQpIHtcbiAgICAgIHRoaXMucGVyY2VudCA9IGNoYW5nZXMucGVyY2VudC5jdXJyZW50VmFsdWU7XG4gICAgfVxuICAgIGlmIChjaGFuZ2VzLm9wdGlvbnMpIHtcbiAgICAgIHRoaXMub3B0aW9ucyA9IGNoYW5nZXMub3B0aW9ucy5jdXJyZW50VmFsdWU7XG4gICAgICBvcHRpb25zQ2hhbmdlZCA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMubG9hZENoYXJ0KG9wdGlvbnNDaGFuZ2VkKTtcbiAgfVxuXG4gIGxvYWRDaGFydChvcHRpb25zQ2hhbmdlZDogYm9vbGVhbikge1xuICAgIGlmICh0aGlzLm9wdGlvbnMgJiYgdGhpcy5wZXJjZW50KSB7XG4gICAgICBpZiAob3B0aW9uc0NoYW5nZWQpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgICAgICAvLyBUT0RPOiBGb3Igc29tZSByZWFzb24gLCAnRWFzeVBpZUNoYXJ0JyBjb25zdHJ1Y3RvciBjcmVhdGVzIGEgbmV3IGNoYXJ0IC8gY2FudmFzIGV2ZXJ5dGltZSBpdCBpcyBpbnN0YW50aWF0ZWQuXG4gICAgICAgIC8vIHdpc2ggdGhlcmUgd2VyZSBhIG1ldGhvZCB0byB1cGRhdGUgb3B0aW9ucyBmcm9tIGFuIGV4aXN0aW5nICdFYXN5UGllQ2hhcnQnIGluc3RhbmNlIC8gb2JqZWN0LlxuICAgICAgICAvLyBVbnRpbCB0aGVuIC0gd2UgcmVtb3ZlIGFsbCBleGlzdGluZyBjaGlsZHJlbiB1bmRlciB0aGUgZ2l2ZW4gZGl2IG9mIHRoZSBjb21wb25lbnQgYW5kIHRoZW4gcmVjcmVhdGUgYWx0b2dldGhlciBpZiB0aGVyZSBhcmUgbmV3IG9wdGlvbnNcbiAgICAgICAgd2hpbGUgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgbm9kZS5yZW1vdmVDaGlsZChub2RlLmxhc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5waWVDaGFydCA9IG5ldyBFYXN5UGllQ2hhcnQobm9kZSwgdGhpcy5vcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnBpZUNoYXJ0KSB7XG4gICAgICAgIHRoaXMucGllQ2hhcnQudXBkYXRlKHRoaXMucGVyY2VudCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ3hFYXN5cGllY2hhcnRDb21wb25lbnQgfSBmcm9tICcuL25neC1lYXN5cGllY2hhcnQuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtOZ3hFYXN5cGllY2hhcnRDb21wb25lbnRdLFxuICBleHBvcnRzOiBbTmd4RWFzeXBpZWNoYXJ0Q29tcG9uZW50XVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hFYXN5cGllY2hhcnRNb2R1bGUgeyB9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7SUFPRTtLQUFpQjs7Z0JBTGxCLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7O2lDQUpEO0NBUUM7Ozs7OztBQ1JEO0lBaUJFLGtDQUFvQixPQUFtQztRQUFuQyxZQUFPLEdBQVAsT0FBTyxDQUE0QjtLQUN0RDs7OztJQUVELDJDQUFROzs7SUFBUjtLQUNDOzs7OztJQUVELDhDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjs7WUFDNUIsY0FBYyxHQUFHLEtBQUs7UUFDMUIsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7U0FDN0M7UUFDRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztZQUM1QyxjQUFjLEdBQUcsSUFBSSxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztLQUNoQzs7Ozs7SUFFRCw0Q0FBUzs7OztJQUFULFVBQVUsY0FBdUI7UUFDL0IsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEMsSUFBSSxjQUFjLEVBQUU7O29CQUNaLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWE7Ozs7Z0JBSXZDLE9BQU8sSUFBSSxDQUFDLGFBQWEsRUFBRSxFQUFFO29CQUMzQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztpQkFDbEM7Z0JBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3REO1lBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDcEM7U0FDRjtLQUNGOztnQkFoREYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFFBQVEsRUFBRSx3Q0FBd0M7aUJBQ25EOzs7O2dCQU40RCxVQUFVOzs7MEJBU3BFLEtBQUs7MEJBR0wsS0FBSzs7SUF5Q1IsK0JBQUM7Q0FBQTs7Ozs7O0FDckREO0lBR0E7S0FNc0M7O2dCQU5yQyxRQUFRLFNBQUM7b0JBQ1IsT0FBTyxFQUFFLEVBQ1I7b0JBQ0QsWUFBWSxFQUFFLENBQUMsd0JBQXdCLENBQUM7b0JBQ3hDLE9BQU8sRUFBRSxDQUFDLHdCQUF3QixDQUFDO2lCQUNwQzs7SUFDb0MsNEJBQUM7Q0FBQTs7Ozs7Ozs7Ozs7Ozs7In0=