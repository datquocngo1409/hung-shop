/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/tree.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, EventEmitter, HostListener, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { TreeModel } from '../models/tree.model';
import { TreeDraggedElement } from '../models/tree-dragged-element.model';
import { TreeViewportComponent } from './tree-viewport.component';
import { includes, pick } from 'lodash-es';
export class TreeComponent {
    /**
     * @param {?} treeModel
     * @param {?} treeDraggedElement
     */
    constructor(treeModel, treeDraggedElement) {
        this.treeModel = treeModel;
        this.treeDraggedElement = treeDraggedElement;
        treeModel.eventNames.forEach((/**
         * @param {?} name
         * @return {?}
         */
        (name) => this[name] = new EventEmitter()));
        treeModel.subscribeToState((/**
         * @param {?} state
         * @return {?}
         */
        (state) => this.stateChange.emit(state)));
    }
    // Will be handled in ngOnChanges
    /**
     * @param {?} nodes
     * @return {?}
     */
    set nodes(nodes) {
    }
    ;
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set focused(value) {
        this.treeModel.setFocus(value);
    }
    /**
     * @param {?} state
     * @return {?}
     */
    set state(state) {
        this.treeModel.setState(state);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onKeydown($event) {
        if (!this.treeModel.isFocused)
            return;
        if (includes(['input', 'textarea'], document.activeElement.tagName.toLowerCase()))
            return;
        /** @type {?} */
        const focusedNode = this.treeModel.getFocusedNode();
        this.treeModel.performKeyAction(focusedNode, $event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMousedown($event) {
        /**
         * @param {?} startElement
         * @param {?} nodeName
         * @return {?}
         */
        function isOutsideClick(startElement, nodeName) {
            return !startElement ? true : startElement.localName === nodeName ? false : isOutsideClick(startElement.parentElement, nodeName);
        }
        if (isOutsideClick($event.target, 'tree-root')) {
            this.treeModel.setFocus(false);
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.options || changes.nodes) {
            this.treeModel.setData({
                options: changes.options && changes.options.currentValue,
                nodes: changes.nodes && changes.nodes.currentValue,
                events: pick(this, this.treeModel.eventNames)
            });
        }
    }
    /**
     * @return {?}
     */
    sizeChanged() {
        this.viewportComponent.setViewport();
    }
}
TreeComponent.decorators = [
    { type: Component, args: [{
                selector: 'Tree, tree-root',
                providers: [TreeModel],
                template: `
      <tree-viewport #viewport>
          <div
                  class="angular-tree-component"
                  [class.node-dragging]="treeDraggedElement.isDragging()"
                  [class.angular-tree-component-rtl]="treeModel.options.rtl">
              <tree-node-collection
                      *ngIf="treeModel.roots"
                      [nodes]="treeModel.roots"
                      [treeModel]="treeModel"
                      [templates]="{
            loadingTemplate: loadingTemplate,
            treeNodeTemplate: treeNodeTemplate,
            treeNodeWrapperTemplate: treeNodeWrapperTemplate,
            treeNodeFullTemplate: treeNodeFullTemplate
          }">
              </tree-node-collection>
              <tree-node-drop-slot
                      class="empty-tree-drop-slot"
                      *ngIf="treeModel.isEmptyTree()"
                      [dropIndex]="0"
                      [node]="treeModel.virtualRoot">
              </tree-node-drop-slot>
          </div>
      </tree-viewport>
  `
            }] }
];
/** @nocollapse */
TreeComponent.ctorParameters = () => [
    { type: TreeModel },
    { type: TreeDraggedElement }
];
TreeComponent.propDecorators = {
    loadingTemplate: [{ type: ContentChild, args: ['loadingTemplate', { static: false },] }],
    treeNodeTemplate: [{ type: ContentChild, args: ['treeNodeTemplate', { static: false },] }],
    treeNodeWrapperTemplate: [{ type: ContentChild, args: ['treeNodeWrapperTemplate', { static: false },] }],
    treeNodeFullTemplate: [{ type: ContentChild, args: ['treeNodeFullTemplate', { static: false },] }],
    viewportComponent: [{ type: ViewChild, args: ['viewport', { static: false },] }],
    nodes: [{ type: Input }],
    options: [{ type: Input }],
    focused: [{ type: Input }],
    state: [{ type: Input }],
    toggleExpanded: [{ type: Output }],
    activate: [{ type: Output }],
    deactivate: [{ type: Output }],
    nodeActivate: [{ type: Output }],
    nodeDeactivate: [{ type: Output }],
    select: [{ type: Output }],
    deselect: [{ type: Output }],
    focus: [{ type: Output }],
    blur: [{ type: Output }],
    updateData: [{ type: Output }],
    initialized: [{ type: Output }],
    moveNode: [{ type: Output }],
    copyNode: [{ type: Output }],
    loadNodeChildren: [{ type: Output }],
    changeFilter: [{ type: Output }],
    event: [{ type: Output }],
    stateChange: [{ type: Output }],
    onKeydown: [{ type: HostListener, args: ['body: keydown', ['$event'],] }],
    onMousedown: [{ type: HostListener, args: ['body: mousedown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    TreeComponent.prototype._nodes;
    /** @type {?} */
    TreeComponent.prototype._options;
    /** @type {?} */
    TreeComponent.prototype.loadingTemplate;
    /** @type {?} */
    TreeComponent.prototype.treeNodeTemplate;
    /** @type {?} */
    TreeComponent.prototype.treeNodeWrapperTemplate;
    /** @type {?} */
    TreeComponent.prototype.treeNodeFullTemplate;
    /** @type {?} */
    TreeComponent.prototype.viewportComponent;
    /** @type {?} */
    TreeComponent.prototype.toggleExpanded;
    /** @type {?} */
    TreeComponent.prototype.activate;
    /** @type {?} */
    TreeComponent.prototype.deactivate;
    /** @type {?} */
    TreeComponent.prototype.nodeActivate;
    /** @type {?} */
    TreeComponent.prototype.nodeDeactivate;
    /** @type {?} */
    TreeComponent.prototype.select;
    /** @type {?} */
    TreeComponent.prototype.deselect;
    /** @type {?} */
    TreeComponent.prototype.focus;
    /** @type {?} */
    TreeComponent.prototype.blur;
    /** @type {?} */
    TreeComponent.prototype.updateData;
    /** @type {?} */
    TreeComponent.prototype.initialized;
    /** @type {?} */
    TreeComponent.prototype.moveNode;
    /** @type {?} */
    TreeComponent.prototype.copyNode;
    /** @type {?} */
    TreeComponent.prototype.loadNodeChildren;
    /** @type {?} */
    TreeComponent.prototype.changeFilter;
    /** @type {?} */
    TreeComponent.prototype.event;
    /** @type {?} */
    TreeComponent.prototype.stateChange;
    /** @type {?} */
    TreeComponent.prototype.treeModel;
    /** @type {?} */
    TreeComponent.prototype.treeDraggedElement;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,