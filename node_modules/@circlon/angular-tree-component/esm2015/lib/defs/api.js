/**
 * @fileoverview added by tsickle
 * Generated from: lib/defs/api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function IAllowDropFn() { }
/**
 * @record
 */
export function INodeHeightFn() { }
/**
 * @record
 */
export function IAllowDragFn() { }
/**
 * @record
 */
export function ITreeState() { }
if (false) {
    /** @type {?|undefined} */
    ITreeState.prototype.expandedNodeIds;
    /** @type {?|undefined} */
    ITreeState.prototype.selectedNodeIds;
    /** @type {?|undefined} */
    ITreeState.prototype.activeNodeIds;
    /** @type {?|undefined} */
    ITreeState.prototype.hiddenNodeIds;
    /** @type {?|undefined} */
    ITreeState.prototype.selectedLeafNodeIds;
    /** @type {?|undefined} */
    ITreeState.prototype.focusedNodeId;
}
/**
 * @record
 */
export function ITreeOptions() { }
if (false) {
    /**
     * A string representing the attribute of the node that indicates whether there are child nodes.
     * **Default value: `hasChildren`.**
     * For example, if your nodes have an `isDirectory` attribute that indicates whether there are children, use:
     * ```
     * options = { hasChildrenField: 'isDirectory' }
     * ```
     * @type {?|undefined}
     */
    ITreeOptions.prototype.hasChildrenField;
    /**
     * A string representing the attribute of the node that contains the array of children.
     * **Default value: `children`.**
     * For example, if your nodes have a `nodes` attribute, that contains the children, use:
     * ```
     * options = { childrenField: 'nodes' }
     * ```
     * @type {?|undefined}
     */
    ITreeOptions.prototype.childrenField;
    /**
     * A string representing the attribute of the node to display.
     * **Default value: `name`**
     * For example, if your nodes have a `title` attribute that should be displayed, use:
     * ```
     * options = { displayField: 'title' }
     * ```
     * @type {?|undefined}
     */
    ITreeOptions.prototype.displayField;
    /**
     * A string representing the attribute of the node that contains the unique ID.
     * This will be used to construct the `path`, which is an array of IDs that point to the node.
     * **Default value: `id`.**
     * For example, if your nodes have a `uuid` attribute, that contains the unique key, use:
     * ```
     * options = { idField: 'uuid' }
     * ```
     * @type {?|undefined}
     */
    ITreeOptions.prototype.idField;
    /**
     * A string representing the attribute of the node that contains whether the node starts as expanded.
     * **Default value: `isExpanded`.**
     * For example, if your nodes have an `expanded` attribute, that contains a boolean value, use:
     * ```
     * options = { isExpandedField: 'expanded' }
     * ```
     * @type {?|undefined}
     */
    ITreeOptions.prototype.isExpandedField;
    /**
     * Function for loading a node's children.
     * The function receives a TreeNode, and returns a value or a promise that resolves to the node's children.
     * This function will be called whenever a node is expanded, the `hasChildren` (`options.hasChildrenField`)
     * field is true, and the `children` field is empty.
     * The result will be loaded into the node's children attribute.
     * Example:
     * ```
     * options = {
     *   getChildren: (node:TreeNode) => {
     *     return request('/api/children/' + node.id);
     *   }
     * }
     * ```
     * @type {?|undefined}
     */
    ITreeOptions.prototype.getChildren;
    /**
     * Rewire which trigger causes which action using this attribute, or create custom actions / event bindings.
     * See the [Action Mapping Section](https://angular2-tree.readme.io/docs/action-mapping) for more details.
     * @type {?|undefined}
     */
    ITreeOptions.prototype.actionMapping;
    /**
     * Specify if dragging tree nodes is allowed.
     * This could be a boolean, or a function that receives a TreeNode and returns a boolean
     * **Default value: false**
     * Example:
     * ```
     * options = {
     *  allowDrag: true
     * }
     * ```
     * @type {?|undefined}
     */
    ITreeOptions.prototype.allowDrag;
    /**
     * Specify whether dropping inside the tree is allowed. Optional types:
     *  - boolean
     *  - (element:any, to:{parent:TreeNode, index:number}):boolean
     * A function that receives the dragged element, and the drop location (parent node and index inside the parent),
     * and returns true or false.
     * **Default Value: true**
     * example:
     * ```
     * options = {
     *  allowDrop: (element, {parent, index}) => parent.isLeaf
     * }
     * ```
     * @type {?|undefined}
     */
    ITreeOptions.prototype.allowDrop;
    /**
     * Boolean flag to allow adding and removing is-dragging-over and is-dragging-over-disabled classes.
     * If set to false it will not add the above mentioned classes and you should handle the styling yourself with css and in
     * the actionMapping -> mouse -> dragEnter, dragLeave
     * **Default Value: true**
     * example:
     * ```
     * options = {
     *   allowDrop: true,
     *   allowDragoverStyling: false
     * }
     * ```
     * @type {?|undefined}
     */
    ITreeOptions.prototype.allowDragoverStyling;
    /**
     * Specify padding per node (integer).
     * Each node will have padding-left value of level * levelPadding, instead of using the default padding for children.
     * This option is good for example for allowing whole row selection, etc.
     * You can alternatively use the tree-node-level-X classes to give padding on a per-level basis.
     * **Default value: 0**
     * @type {?|undefined}
     */
    ITreeOptions.prototype.levelPadding;
    /**
     * Specify a function that returns a class per node. Useful for styling the nodes individually.
     * Example:
     * ```
     * options = {
     *   nodeClass: (node:TreeNode) => {
     *     return 'icon-' + node.data.icon;
     *   }
     * }
     * ```
     * @type {?|undefined}
     */
    ITreeOptions.prototype.nodeClass;
    /**
     * Boolean flag to use the virtual scroll option.
     * To use this option, you must supply the height of the container, and the height of each node in the tree.
     * You can also specify height for the dropSlot which is located between nodes.
     * **Default Value: false**
     * example:
     * ```
     * options = {
     *   useVirtualScroll: true,
     *   nodeHeight: (node: TreeNode) => node.myHeight,
     *   dropSlotHeight: 3
     * }
     * ```
     * @type {?|undefined}
     */
    ITreeOptions.prototype.useVirtualScroll;
    /**
     * For use with `useVirtualScroll` option.
     * Specify a height for nodes in pixels. Could be either:
     * - number
     * - (node: TreeNode) => number
     * **Default Value: 22**
     * @type {?|undefined}
     */
    ITreeOptions.prototype.nodeHeight;
    /**
     * For use with `useVirtualScroll` option.
     * Specify a height for drop slots (located between nodes) in pixels
     * **Default Value: 2**
     * @type {?|undefined}
     */
    ITreeOptions.prototype.dropSlotHeight;
    /**
     * Boolean whether or not to animate expand / collapse of nodes.
     * **Default Value: false**
     * @type {?|undefined}
     */
    ITreeOptions.prototype.animateExpand;
    /**
     * Speed of expand animation (described in pixels per 17 ms).
     * **Default Value: 30**
     * @type {?|undefined}
     */
    ITreeOptions.prototype.animateSpeed;
    /**
     * Increase of expand animation speed (described in multiply per 17 ms).
     * **Default Value: 1.2**
     * @type {?|undefined}
     */
    ITreeOptions.prototype.animateAcceleration;
    /**
     * Whether to scroll to the node to make it visible when it is activated.
     * **Default Value: true**
     * @type {?|undefined}
     */
    ITreeOptions.prototype.scrollOnActivate;
    /**
     * Function to clone a node.
     * Receives a TreeNode object, and returns a node object (only the data).
     * This callback will be called when copying a node inside the tree,
     * by either calling copyNode, or by dragging and holding the ctrl key
     *
     * For example:
     * ```
     * options: ITreeOptions = {
     * getNodeClone: (node) => ({
     * ...node.data,
     * id: uuid.v4(),
     * name: `copy of ${node.data.name}`
     * })
     * };
     * ```
     *
     * **Default Value: clone the node using Object.assign, and remove 'id' property**
     * @type {?|undefined}
     */
    ITreeOptions.prototype.getNodeClone;
    /**
     * Makes the tree right-to-left.
     * This include direction, expander style, and change key binding (right key collapse and left key expands instead of vice-versa)
     * @type {?|undefined}
     */
    ITreeOptions.prototype.rtl;
    /**
     * Specifies id of root node (virtualRoot)
     * @type {?|undefined}
     */
    ITreeOptions.prototype.rootId;
    /**
     * Whether to display a checkbox next to the node or not
     * @type {?|undefined}
     */
    ITreeOptions.prototype.useCheckbox;
    /**
     * Whether to use master checkboxes mechanism if the useCheckbox is set to true
     * @type {?|undefined}
     */
    ITreeOptions.prototype.useTriState;
    /**
     * The HTML element that is the scroll container for the tree.
     * The default behaviour is to wrap the tree with a container that has overflow: hidden,
     * and then the scrolling container is the viewport inside the tree component
     * @type {?|undefined}
     */
    ITreeOptions.prototype.scrollContainer;
}
/**
 * @record
 */
export function ITreeNode() { }
if (false) {
    /**
     * Parent node
     * @type {?}
     */
    ITreeNode.prototype.parent;
    /**
     * The value of the node's field that is used for displaying its content.
     * By default 'name', unless stated otherwise in the options
     * @type {?}
     */
    ITreeNode.prototype.displayField;
    /**
     * The children of the node.
     * By default is determined by 'node.data.children', unless stated otherwise in the options
     * @type {?}
     */
    ITreeNode.prototype.children;
    /**
     * Pointer to the original data.
     * @type {?}
     */
    ITreeNode.prototype.data;
    /**
     * Pointer to the ElementRef of the TreeNodeComponent that's displaying this node
     * @type {?}
     */
    ITreeNode.prototype.elementRef;
    /**
     * Level in the tree (starts from 1).
     * @type {?}
     */
    ITreeNode.prototype.level;
    /**
     * Path in the tree: Array of IDs.
     * @type {?}
     */
    ITreeNode.prototype.path;
    /**
     * index of the node inside its parent's children
     * @type {?}
     */
    ITreeNode.prototype.index;
    /**
     * A unique key of this node among its siblings.
     * By default it's the 'id' of the original node, unless stated otherwise in options.idField
     * @type {?}
     */
    ITreeNode.prototype.id;
    /** @type {?} */
    ITreeNode.prototype.isExpanded;
    /** @type {?} */
    ITreeNode.prototype.isActive;
    /** @type {?} */
    ITreeNode.prototype.isFocused;
    /** @type {?} */
    ITreeNode.prototype.isCollapsed;
    /** @type {?} */
    ITreeNode.prototype.isLeaf;
    /** @type {?} */
    ITreeNode.prototype.hasChildren;
    /** @type {?} */
    ITreeNode.prototype.isRoot;
    /**
     * @param {?} skipHidden whether to skip hidden nodes
     * @return {?} next sibling (or null)
     */
    ITreeNode.prototype.findNextSibling = function (skipHidden) { };
    /**
     * @param {?} skipHidden whether to skip hidden nodes
     * @return {?} previous sibling (or null)
     */
    ITreeNode.prototype.findPreviousSibling = function (skipHidden) { };
    /**
     * @param {?} skipHidden whether to skip hidden nodes
     * @return {?} first child (or null)
     */
    ITreeNode.prototype.getFirstChild = function (skipHidden) { };
    /**
     * @param {?} skipHidden whether to skip hidden nodes
     * @return {?} last child (or null)
     */
    ITreeNode.prototype.getLastChild = function (skipHidden) { };
    /**
     * Finds the visually next node in the tree.
     * @param {?} goInside whether to look for children or just siblings
     * @return {?} next node.
     */
    ITreeNode.prototype.findNextNode = function (goInside) { };
    /**
     * Finds the visually previous node in the tree.
     * @param {?} skipHidden whether to skip hidden nodes
     * @return {?} previous node.
     */
    ITreeNode.prototype.findPreviousNode = function (skipHidden) { };
    /**
     * @param {?} node
     * @return {?} true if this node is a descendant of the parameter node
     */
    ITreeNode.prototype.isDescendantOf = function (node) { };
    /**
     * @return {?} in case levelPadding option is supplied, returns the current node's padding
     */
    ITreeNode.prototype.getNodePadding = function () { };
    /**
     * @return {?} in case nodeClass option is supplied, returns the current node's class
     */
    ITreeNode.prototype.getClass = function () { };
    /**
     * Expands / Collapses the node
     * @return {?}
     */
    ITreeNode.prototype.toggleExpanded = function () { };
    /**
     * Expands the node
     * @return {?}
     */
    ITreeNode.prototype.expand = function () { };
    /**
     * Collapses the node
     * @return {?}
     */
    ITreeNode.prototype.collapse = function () { };
    /**
     * Expands all ancestors of the node
     * @return {?}
     */
    ITreeNode.prototype.ensureVisible = function () { };
    /**
     * Activates / Deactivates the node (selects / deselects)
     * @param {?} multi
     * @return {?}
     */
    ITreeNode.prototype.toggleActivated = function (multi) { };
    /**
     * Focus on the node
     * @return {?}
     */
    ITreeNode.prototype.focus = function () { };
    /**
     * Blur (unfocus) the node
     * @return {?}
     */
    ITreeNode.prototype.blur = function () { };
    /**
     * Hides the node
     * @return {?}
     */
    ITreeNode.prototype.hide = function () { };
    /**
     * Makes the node visible
     * @return {?}
     */
    ITreeNode.prototype.show = function () { };
    /**
     * @param {?} value  if true makes the node hidden, otherwise visible
     * @return {?}
     */
    ITreeNode.prototype.setIsHidden = function (value) { };
    /**
     * Scroll the screen to make the node visible
     * @return {?}
     */
    ITreeNode.prototype.scrollIntoView = function () { };
    /**
     * Fire an event to the renderer of the tree (if it was registered)
     * @param {?} event
     * @return {?}
     */
    ITreeNode.prototype.fireEvent = function (event) { };
    /**
     * Invokes a method for every node under this one - depth first
     * @param {?} fn  a function that receives the node
     * @return {?}
     */
    ITreeNode.prototype.doForAll = function (fn) { };
    /**
     * expand all nodes under this one
     * @return {?}
     */
    ITreeNode.prototype.expandAll = function () { };
    /**
     * collapse all nodes under this one
     * @return {?}
     */
    ITreeNode.prototype.collapseAll = function () { };
    /**
     * sets the node to active / inactive according to the value.
     * If multi is true (default false) - does a multiselect.
     * @param {?} value
     * @param {?=} multi
     * @return {?}
     */
    ITreeNode.prototype.setIsActive = function (value, multi) { };
    /**
     * sets the node to be active and makes sure it's visible by expanding all nodes above it and scrolling it into view.
     * Very similar to calling `activate`, `ensureVisible` and `scrollIntoView` methods.
     * If multi is true (default false) - does a multiselect.
     * @param {?} multi
     * @return {?}
     */
    ITreeNode.prototype.setActiveAndVisible = function (multi) { };
}
/**
 * @record
 */
export function ITreeModel() { }
if (false) {
    /**
     * All root nodes
     * @type {?}
     */
    ITreeModel.prototype.roots;
    /**
     * Current focused node
     * @type {?}
     */
    ITreeModel.prototype.focusedNode;
    /**
     * Options that were passed to the tree component
     * @type {?}
     */
    ITreeModel.prototype.options;
    /**
     * Is the tree currently focused
     * @type {?}
     */
    ITreeModel.prototype.isFocused;
    /**
     * \@return Current active nodes
     * @type {?}
     */
    ITreeModel.prototype.activeNodes;
    /**
     * \@return Current expanded nodes
     * @type {?}
     */
    ITreeModel.prototype.expandedNodes;
    /**
     * @return {?} Current active node. If multiple nodes are active - returns the first one.
     */
    ITreeModel.prototype.getActiveNode = function () { };
    /**
     * @return {?} Current focused node (either hovered or traversed with keys)
     */
    ITreeModel.prototype.getFocusedNode = function () { };
    /**
     * Set focus on a node
     * @param {?} node
     * @return {?}
     */
    ITreeModel.prototype.setFocusedNode = function (node) { };
    /**
     * @param {?=} skipHidden  true or false - whether to skip hidden nodes
     * @return {?} first root of the tree
     */
    ITreeModel.prototype.getFirstRoot = function (skipHidden) { };
    /**
     * @param {?=} skipHidden  true or false - whether to skip hidden nodes
     * @return {?} last root of the tree
     */
    ITreeModel.prototype.getLastRoot = function (skipHidden) { };
    /**
     * @return {?} true if the tree is empty
     */
    ITreeModel.prototype.isEmptyTree = function () { };
    /**
     * @return {?} All root nodes that pass the current filter
     */
    ITreeModel.prototype.getVisibleRoots = function () { };
    /**
     * @param {?} path  array of node IDs to be traversed respectively
     * @param {?=} startNode
     * @return {?} The node, if found - null otherwise
     */
    ITreeModel.prototype.getNodeByPath = function (path, startNode) { };
    /**
     * @param {?} id  node ID to find
     * @return {?} The node, if found - null otherwise
     */
    ITreeModel.prototype.getNodeById = function (id) { };
    /**
     * @param {?} predicate - either an object or a function, used as a test condition on all nodes.
     *            Could be every predicate that's supported by lodash's `find` method
     * @param {?=} startNode
     * @return {?} First node that matches the predicate, if found - null otherwise
     */
    ITreeModel.prototype.getNodeBy = function (predicate, startNode) { };
    /**
     * get tree state
     * @return {?}
     */
    ITreeModel.prototype.getState = function () { };
    /**
     * Focuses or blurs the tree
     * @param {?} value  true or false - whether to set focus or blur.
     * @return {?}
     */
    ITreeModel.prototype.setFocus = function (value) { };
    /**
     * Focuses on the next node in the tree (same as down arrow)
     * @return {?}
     */
    ITreeModel.prototype.focusNextNode = function () { };
    /**
     * Focuses on the previous node in the tree (same as up arrow)
     * @return {?}
     */
    ITreeModel.prototype.focusPreviousNode = function () { };
    /**
     * Focuses on the inner child of the current focused node (same as right arrow on an expanded node)
     * @return {?}
     */
    ITreeModel.prototype.focusDrillDown = function () { };
    /**
     * Focuses on the parent of the current focused node (same as left arrow on a collapsed node)
     * @return {?}
     */
    ITreeModel.prototype.focusDrillUp = function () { };
    /**
     * Marks isHidden field in all nodes recursively according to the filter param.
     * If a node is marked visible, all of its ancestors will be marked visible as well.
     * @param {?} filter  either a string or a function.
     *   In case it's a string, it will be searched case insensitively in the node's display attribute
     *   In case it's a function, it will be passed the node, and should return true if the node should be visible, false otherwise
     * @param {?=} autoShow  if true, make sure all nodes that passed the filter are visible
     * @return {?}
     */
    ITreeModel.prototype.filterNodes = function (filter, autoShow) { };
    /**
     * Marks all nodes isHidden = false
     * @return {?}
     */
    ITreeModel.prototype.clearFilter = function () { };
    /**
     * moves a node from one location in the tree to another
     * @param {?} node describes which node needs to be moved
     * @param {?} to describes where to move the node to.
     * @param {?} from describes where to move the node from.
     * Contains a 'parent' node, an 'index', and a 'dropOnNode' - to distinguish between dropping between nodes or on the node
     * @return {?}
     */
    ITreeModel.prototype.moveNode = function (node, to, from) { };
    /**
     * Invokes a method for every node of the tree - depth first
     * @param {?} fn  a function that receives the node
     * @return {?}
     */
    ITreeModel.prototype.doForAll = function (fn) { };
    /**
     * expand all nodes
     * @return {?}
     */
    ITreeModel.prototype.expandAll = function () { };
    /**
     * collapse all nodes
     * @return {?}
     */
    ITreeModel.prototype.collapseAll = function () { };
    /**
     * set tree state
     * @param {?} state
     * @return {?}
     */
    ITreeModel.prototype.setState = function (state) { };
    /**
     * @param {?} fn
     * @return {?}
     */
    ITreeModel.prototype.subscribeToState = function (fn) { };
}
/**
 * This is the interface of the TreeNodeDrag service
 * @record
 */
export function ITreeNodeDrag() { }
if (false) {
    /**
     * Gets the current dragged node. Useful for overriding the drop action.
     * @return {?}
     */
    ITreeNodeDrag.prototype.getDragNode = function () { };
}
//# sourceMappingURL=data:application/json;base64,