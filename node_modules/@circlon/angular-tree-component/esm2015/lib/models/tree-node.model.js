var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/tree-node.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { observable, computed, reaction, action } from 'mobx';
import { TREE_EVENTS } from '../constants/events';
import { first, last, some, every } from 'lodash-es';
export class TreeNode {
    /**
     * @param {?} data
     * @param {?} parent
     * @param {?} treeModel
     * @param {?} index
     */
    constructor(data, parent, treeModel, index) {
        this.data = data;
        this.parent = parent;
        this.treeModel = treeModel;
        this.position = 0;
        this.allowDrop = (/**
         * @param {?} element
         * @param {?=} $event
         * @return {?}
         */
        (element, $event) => {
            return this.options.allowDrop(element, { parent: this, index: 0 }, $event);
        });
        this.allowDragoverStyling = (/**
         * @return {?}
         */
        () => {
            return this.options.allowDragoverStyling;
        });
        if (this.id === undefined || this.id === null) {
            this.id = uuid();
        } // Make sure there's a unique id without overriding existing ids to work with immutable data structures
        this.index = index;
        if (this.getField('children')) {
            this._initChildren();
        }
        this.autoLoadChildren();
    }
    /**
     * @return {?}
     */
    get isHidden() { return this.treeModel.isHidden(this); }
    ;
    /**
     * @return {?}
     */
    get isExpanded() { return this.treeModel.isExpanded(this); }
    ;
    /**
     * @return {?}
     */
    get isActive() { return this.treeModel.isActive(this); }
    ;
    /**
     * @return {?}
     */
    get isFocused() { return this.treeModel.isNodeFocused(this); }
    ;
    /**
     * @return {?}
     */
    get isSelected() {
        if (this.isSelectable()) {
            return this.treeModel.isSelected(this);
        }
        else {
            return some(this.children, (/**
             * @param {?} node
             * @return {?}
             */
            (node) => node.isSelected));
        }
    }
    ;
    /**
     * @return {?}
     */
    get isAllSelected() {
        if (this.isSelectable()) {
            return this.treeModel.isSelected(this);
        }
        else {
            return every(this.children, (/**
             * @param {?} node
             * @return {?}
             */
            (node) => node.isAllSelected));
        }
    }
    ;
    /**
     * @return {?}
     */
    get isPartiallySelected() {
        return this.isSelected && !this.isAllSelected;
    }
    /**
     * @return {?}
     */
    get level() {
        return this.parent ? this.parent.level + 1 : 0;
    }
    /**
     * @return {?}
     */
    get path() {
        return this.parent ? [...this.parent.path, this.id] : [];
    }
    /**
     * @return {?}
     */
    get elementRef() {
        throw `Element Ref is no longer supported since introducing virtual scroll\n
      You may use a template to obtain a reference to the element`;
    }
    /**
     * @return {?}
     */
    get originalNode() { return this._originalNode; }
    ;
    // helper get functions:
    /**
     * @return {?}
     */
    get hasChildren() {
        return !!(this.getField('hasChildren') || (this.children && this.children.length > 0));
    }
    /**
     * @return {?}
     */
    get isCollapsed() { return !this.isExpanded; }
    /**
     * @return {?}
     */
    get isLeaf() { return !this.hasChildren; }
    /**
     * @return {?}
     */
    get isRoot() { return this.parent.data.virtual; }
    /**
     * @return {?}
     */
    get realParent() { return this.isRoot ? null : this.parent; }
    // proxy functions:
    /**
     * @return {?}
     */
    get options() { return this.treeModel.options; }
    /**
     * @param {?} event
     * @return {?}
     */
    fireEvent(event) { this.treeModel.fireEvent(event); }
    // field accessors:
    /**
     * @return {?}
     */
    get displayField() {
        return this.getField('display');
    }
    /**
     * @return {?}
     */
    get id() {
        return this.getField('id');
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set id(value) {
        this.setField('id', value);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getField(key) {
        return this.data[this.options[`${key}Field`]];
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setField(key, value) {
        this.data[this.options[`${key}Field`]] = value;
    }
    // traversing:
    /**
     * @param {?} steps
     * @param {?=} skipHidden
     * @return {?}
     */
    _findAdjacentSibling(steps, skipHidden = false) {
        /** @type {?} */
        const siblings = this._getParentsChildren(skipHidden);
        /** @type {?} */
        const index = siblings.indexOf(this);
        return siblings.length > index + steps ? siblings[index + steps] : null;
    }
    /**
     * @param {?=} skipHidden
     * @return {?}
     */
    findNextSibling(skipHidden = false) {
        return this._findAdjacentSibling(+1, skipHidden);
    }
    /**
     * @param {?=} skipHidden
     * @return {?}
     */
    findPreviousSibling(skipHidden = false) {
        return this._findAdjacentSibling(-1, skipHidden);
    }
    /**
     * @return {?}
     */
    getVisibleChildren() {
        return this.visibleChildren;
    }
    /**
     * @return {?}
     */
    get visibleChildren() {
        return (this.children || []).filter((/**
         * @param {?} node
         * @return {?}
         */
        (node) => !node.isHidden));
    }
    /**
     * @param {?=} skipHidden
     * @return {?}
     */
    getFirstChild(skipHidden = false) {
        /** @type {?} */
        let children = skipHidden ? this.visibleChildren : this.children;
        return first(children || []);
    }
    /**
     * @param {?=} skipHidden
     * @return {?}
     */
    getLastChild(skipHidden = false) {
        /** @type {?} */
        let children = skipHidden ? this.visibleChildren : this.children;
        return last(children || []);
    }
    /**
     * @param {?=} goInside
     * @param {?=} skipHidden
     * @return {?}
     */
    findNextNode(goInside = true, skipHidden = false) {
        return goInside && this.isExpanded && this.getFirstChild(skipHidden) ||
            this.findNextSibling(skipHidden) ||
            this.parent && this.parent.findNextNode(false, skipHidden);
    }
    /**
     * @param {?=} skipHidden
     * @return {?}
     */
    findPreviousNode(skipHidden = false) {
        /** @type {?} */
        let previousSibling = this.findPreviousSibling(skipHidden);
        if (!previousSibling) {
            return this.realParent;
        }
        return previousSibling._getLastOpenDescendant(skipHidden);
    }
    /**
     * @param {?=} skipHidden
     * @return {?}
     */
    _getLastOpenDescendant(skipHidden = false) {
        /** @type {?} */
        const lastChild = this.getLastChild(skipHidden);
        return (this.isCollapsed || !lastChild)
            ? this
            : lastChild._getLastOpenDescendant(skipHidden);
    }
    /**
     * @private
     * @param {?=} skipHidden
     * @return {?}
     */
    _getParentsChildren(skipHidden = false) {
        /** @type {?} */
        const children = this.parent &&
            (skipHidden ? this.parent.getVisibleChildren() : this.parent.children);
        return children || [];
    }
    /**
     * @private
     * @param {?=} skipHidden
     * @return {?}
     */
    getIndexInParent(skipHidden = false) {
        return this._getParentsChildren(skipHidden).indexOf(this);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    isDescendantOf(node) {
        if (this === node)
            return true;
        else
            return this.parent && this.parent.isDescendantOf(node);
    }
    /**
     * @return {?}
     */
    getNodePadding() {
        return this.options.levelPadding * (this.level - 1) + 'px';
    }
    /**
     * @return {?}
     */
    getClass() {
        return [this.options.nodeClass(this), `tree-node-level-${this.level}`].join(' ');
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onDrop($event) {
        this.mouseAction('drop', $event.event, {
            from: $event.element,
            to: { parent: this, index: 0, dropOnNode: true }
        });
    }
    /**
     * @return {?}
     */
    allowDrag() {
        return this.options.allowDrag(this);
    }
    // helper methods:
    /**
     * @return {?}
     */
    loadNodeChildren() {
        if (!this.options.getChildren) {
            return Promise.resolve(); // Not getChildren method - for using redux
        }
        return Promise.resolve(this.options.getChildren(this))
            .then((/**
         * @param {?} children
         * @return {?}
         */
        (children) => {
            if (children) {
                this.setField('children', children);
                this._initChildren();
                if (this.options.useTriState && this.treeModel.isSelected(this)) {
                    this.setIsSelected(true);
                }
                this.children.forEach((/**
                 * @param {?} child
                 * @return {?}
                 */
                (child) => {
                    if (child.getField('isExpanded') && child.hasChildren) {
                        child.expand();
                    }
                }));
            }
        })).then((/**
         * @return {?}
         */
        () => {
            this.fireEvent({
                eventName: TREE_EVENTS.loadNodeChildren,
                node: this
            });
        }));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    expand() {
        if (!(/** @type {?} */ (this)).isExpanded) {
            (/** @type {?} */ (this)).toggleExpanded();
        }
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    collapse() {
        if ((/** @type {?} */ (this)).isExpanded) {
            (/** @type {?} */ (this)).toggleExpanded();
        }
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    doForAll(fn) {
        Promise.resolve(fn(this)).then((/**
         * @return {?}
         */
        () => {
            if (this.children) {
                this.children.forEach((/**
                 * @param {?} child
                 * @return {?}
                 */
                (child) => child.doForAll(fn)));
            }
        }));
    }
    /**
     * @return {?}
     */
    expandAll() {
        this.doForAll((/**
         * @param {?} node
         * @return {?}
         */
        (node) => node.expand()));
    }
    /**
     * @return {?}
     */
    collapseAll() {
        this.doForAll((/**
         * @param {?} node
         * @return {?}
         */
        (node) => node.collapse()));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    ensureVisible() {
        if ((/** @type {?} */ (this)).realParent) {
            (/** @type {?} */ (this)).realParent.expand();
            (/** @type {?} */ (this)).realParent.ensureVisible();
        }
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    toggleExpanded() {
        (/** @type {?} */ (this)).setIsExpanded(!(/** @type {?} */ (this)).isExpanded);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @return {THIS}
     */
    setIsExpanded(value) {
        if ((/** @type {?} */ (this)).hasChildren) {
            (/** @type {?} */ (this)).treeModel.setExpandedNode((/** @type {?} */ (this)), value);
        }
        return (/** @type {?} */ (this));
    }
    ;
    /**
     * @return {?}
     */
    autoLoadChildren() {
        this.handler =
            reaction((/**
             * @return {?}
             */
            () => this.isExpanded), (/**
             * @param {?} isExpanded
             * @return {?}
             */
            (isExpanded) => {
                if (!this.children && this.hasChildren && isExpanded) {
                    this.loadNodeChildren();
                }
            }), { fireImmediately: true });
    }
    /**
     * @return {?}
     */
    dispose() {
        if (this.children) {
            this.children.forEach((/**
             * @param {?} child
             * @return {?}
             */
            (child) => child.dispose()));
        }
        if (this.handler) {
            this.handler();
        }
        this.parent = null;
        this.children = null;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @param {?=} multi
     * @return {THIS}
     */
    setIsActive(value, multi = false) {
        (/** @type {?} */ (this)).treeModel.setActiveNode((/** @type {?} */ (this)), value, multi);
        if (value) {
            (/** @type {?} */ (this)).focus((/** @type {?} */ (this)).options.scrollOnActivate);
        }
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    isSelectable() {
        return this.isLeaf || !this.children || !this.options.useTriState;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @return {THIS}
     */
    setIsSelected(value) {
        if ((/** @type {?} */ (this)).isSelectable()) {
            (/** @type {?} */ (this)).treeModel.setSelectedNode((/** @type {?} */ (this)), value);
        }
        else {
            (/** @type {?} */ (this)).visibleChildren.forEach((/**
             * @param {?} child
             * @return {?}
             */
            (child) => child.setIsSelected(value)));
        }
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    toggleSelected() {
        (/** @type {?} */ (this)).setIsSelected(!(/** @type {?} */ (this)).isSelected);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} multi
     * @return {THIS}
     */
    toggleActivated(multi = false) {
        (/** @type {?} */ (this)).setIsActive(!(/** @type {?} */ (this)).isActive, multi);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} multi
     * @return {THIS}
     */
    setActiveAndVisible(multi = false) {
        (/** @type {?} */ (this)).setIsActive(true, multi)
            .ensureVisible();
        setTimeout((/** @type {?} */ (this)).scrollIntoView.bind((/** @type {?} */ (this))));
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?=} force
     * @return {?}
     */
    scrollIntoView(force = false) {
        this.treeModel.virtualScroll.scrollIntoView(this, force);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} scroll
     * @return {THIS}
     */
    focus(scroll = true) {
        /** @type {?} */
        let previousNode = (/** @type {?} */ (this)).treeModel.getFocusedNode();
        (/** @type {?} */ (this)).treeModel.setFocusedNode((/** @type {?} */ (this)));
        if (scroll) {
            (/** @type {?} */ (this)).scrollIntoView();
        }
        if (previousNode) {
            (/** @type {?} */ (this)).fireEvent({ eventName: TREE_EVENTS.blur, node: previousNode });
        }
        (/** @type {?} */ (this)).fireEvent({ eventName: TREE_EVENTS.focus, node: (/** @type {?} */ (this)) });
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    blur() {
        /** @type {?} */
        let previousNode = (/** @type {?} */ (this)).treeModel.getFocusedNode();
        (/** @type {?} */ (this)).treeModel.setFocusedNode(null);
        if (previousNode) {
            (/** @type {?} */ (this)).fireEvent({ eventName: TREE_EVENTS.blur, node: (/** @type {?} */ (this)) });
        }
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setIsHidden(value) {
        this.treeModel.setIsHidden(this, value);
    }
    /**
     * @return {?}
     */
    hide() {
        this.setIsHidden(true);
    }
    /**
     * @return {?}
     */
    show() {
        this.setIsHidden(false);
    }
    /**
     * @param {?} actionName
     * @param {?} $event
     * @param {?=} data
     * @return {?}
     */
    mouseAction(actionName, $event, data = null) {
        this.treeModel.setFocus(true);
        /** @type {?} */
        const actionMapping = this.options.actionMapping.mouse;
        /** @type {?} */
        const action = actionMapping[actionName];
        if (action) {
            action(this.treeModel, this, $event, data);
        }
    }
    /**
     * @return {?}
     */
    getSelfHeight() {
        return this.options.nodeHeight(this);
    }
    /**
     * @return {?}
     */
    _initChildren() {
        this.children = this.getField('children')
            .map((/**
         * @param {?} c
         * @param {?} index
         * @return {?}
         */
        (c, index) => new TreeNode(c, this, this.treeModel, index)));
    }
}
__decorate([
    computed,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], TreeNode.prototype, "isHidden", null);
__decorate([
    computed,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], TreeNode.prototype, "isExpanded", null);
__decorate([
    computed,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], TreeNode.prototype, "isActive", null);
__decorate([
    computed,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], TreeNode.prototype, "isFocused", null);
__decorate([
    computed,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], TreeNode.prototype, "isSelected", null);
__decorate([
    computed,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], TreeNode.prototype, "isAllSelected", null);
__decorate([
    computed,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], TreeNode.prototype, "isPartiallySelected", null);
__decorate([
    observable,
    __metadata("design:type", Array)
], TreeNode.prototype, "children", void 0);
__decorate([
    observable,
    __metadata("design:type", Number)
], TreeNode.prototype, "index", void 0);
__decorate([
    observable,
    __metadata("design:type", Object)
], TreeNode.prototype, "position", void 0);
__decorate([
    observable,
    __metadata("design:type", Number)
], TreeNode.prototype, "height", void 0);
__decorate([
    computed,
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [])
], TreeNode.prototype, "level", null);
__decorate([
    computed,
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [])
], TreeNode.prototype, "path", null);
__decorate([
    computed,
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], TreeNode.prototype, "visibleChildren", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], TreeNode.prototype, "setIsSelected", null);
__decorate([
    action,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TreeNode.prototype, "_initChildren", null);
if (false) {
    /**
     * @type {?}
     * @private
     */
    TreeNode.prototype.handler;
    /** @type {?} */
    TreeNode.prototype.children;
    /** @type {?} */
    TreeNode.prototype.index;
    /** @type {?} */
    TreeNode.prototype.position;
    /** @type {?} */
    TreeNode.prototype.height;
    /**
     * @type {?}
     * @private
     */
    TreeNode.prototype._originalNode;
    /** @type {?} */
    TreeNode.prototype.allowDrop;
    /** @type {?} */
    TreeNode.prototype.allowDragoverStyling;
    /** @type {?} */
    TreeNode.prototype.data;
    /** @type {?} */
    TreeNode.prototype.parent;
    /** @type {?} */
    TreeNode.prototype.treeModel;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
/**
 * @return {?}
 */
function uuid() {
    return Math.floor(Math.random() * 10000000000000);
}
//# sourceMappingURL=data:application/json;base64,