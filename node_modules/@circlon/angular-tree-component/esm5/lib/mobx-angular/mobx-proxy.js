var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
/**
 * @fileoverview added by tsickle
 * Generated from: lib/mobx-angular/mobx-proxy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { action as mobxAction } from 'mobx';
import { computed as mobxComputed } from 'mobx';
import { observable as mobxObservable } from 'mobx';
// Re-export mobx operators to be able to use inside components with AOT:
/**
 * @param {...?} args
 * @return {?}
 */
export function actionInternal() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return ((/** @type {?} */ (mobxAction))).apply(void 0, __spread(args));
}
/** @type {?} */
export var action = (/** @type {?} */ (Object.assign(actionInternal, mobxAction)));
/**
 * @param {...?} args
 * @return {?}
 */
function computedInternal() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return ((/** @type {?} */ (mobxComputed))).apply(void 0, __spread(args));
}
/** @type {?} */
export var computed = (/** @type {?} */ (Object.assign(computedInternal, mobxComputed)));
/**
 * @param {...?} args
 * @return {?}
 */
function observableInternal() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return ((/** @type {?} */ (mobxObservable))).apply(void 0, __spread(args));
}
/** @type {?} */
export var observable = (/** @type {?} */ (Object.assign(observableInternal, mobxObservable)));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ieC1wcm94eS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjaXJjbG9uL2FuZ3VsYXItdHJlZS1jb21wb25lbnQvIiwic291cmNlcyI6WyJsaWIvbW9ieC1hbmd1bGFyL21vYngtcHJveHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLElBQUksVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzVDLE9BQU8sRUFBRSxRQUFRLElBQUksWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBRSxVQUFVLElBQUksY0FBYyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7Ozs7QUFHcEQsTUFBTSxVQUFVLGNBQWM7SUFBQyxjQUFPO1NBQVAsVUFBTyxFQUFQLHFCQUFPLEVBQVAsSUFBTztRQUFQLHlCQUFPOztJQUNwQyxPQUFPLENBQUMsbUJBQUEsVUFBVSxFQUFPLENBQUMsd0JBQUksSUFBSSxHQUFFO0FBQ3RDLENBQUM7O0FBQ0QsTUFBTSxLQUFPLE1BQU0sR0FBc0IsbUJBQUEsTUFBTSxDQUFDLE1BQU0sQ0FDcEQsY0FBYyxFQUNkLFVBQVUsQ0FDWCxFQUFPOzs7OztBQUVSLFNBQVMsZ0JBQWdCO0lBQUMsY0FBTztTQUFQLFVBQU8sRUFBUCxxQkFBTyxFQUFQLElBQU87UUFBUCx5QkFBTzs7SUFDL0IsT0FBTyxDQUFDLG1CQUFBLFlBQVksRUFBTyxDQUFDLHdCQUFJLElBQUksR0FBRTtBQUN4QyxDQUFDOztBQUNELE1BQU0sS0FBTyxRQUFRLEdBQXdCLG1CQUFBLE1BQU0sQ0FBQyxNQUFNLENBQ3hELGdCQUFnQixFQUNoQixZQUFZLENBQ2IsRUFBTzs7Ozs7QUFFUixTQUFTLGtCQUFrQjtJQUFDLGNBQU87U0FBUCxVQUFPLEVBQVAscUJBQU8sRUFBUCxJQUFPO1FBQVAseUJBQU87O0lBQ2pDLE9BQU8sQ0FBQyxtQkFBQSxjQUFjLEVBQU8sQ0FBQyx3QkFBSSxJQUFJLEdBQUU7QUFDMUMsQ0FBQzs7QUFFRCxNQUFNLEtBQU8sVUFBVSxHQUEwQixtQkFBQSxNQUFNLENBQUMsTUFBTSxDQUM1RCxrQkFBa0IsRUFDbEIsY0FBYyxDQUNmLEVBQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhY3Rpb24gYXMgbW9ieEFjdGlvbiB9IGZyb20gJ21vYngnO1xyXG5pbXBvcnQgeyBjb21wdXRlZCBhcyBtb2J4Q29tcHV0ZWQgfSBmcm9tICdtb2J4JztcclxuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBtb2J4T2JzZXJ2YWJsZSB9IGZyb20gJ21vYngnO1xyXG5cclxuLy8gUmUtZXhwb3J0IG1vYnggb3BlcmF0b3JzIHRvIGJlIGFibGUgdG8gdXNlIGluc2lkZSBjb21wb25lbnRzIHdpdGggQU9UOlxyXG5leHBvcnQgZnVuY3Rpb24gYWN0aW9uSW50ZXJuYWwoLi4uYXJncykge1xyXG4gIHJldHVybiAobW9ieEFjdGlvbiBhcyBhbnkpKC4uLmFyZ3MpO1xyXG59XHJcbmV4cG9ydCBjb25zdCBhY3Rpb246IHR5cGVvZiBtb2J4QWN0aW9uID0gT2JqZWN0LmFzc2lnbihcclxuICBhY3Rpb25JbnRlcm5hbCxcclxuICBtb2J4QWN0aW9uXHJcbikgYXMgYW55O1xyXG5cclxuZnVuY3Rpb24gY29tcHV0ZWRJbnRlcm5hbCguLi5hcmdzKSB7XHJcbiAgcmV0dXJuIChtb2J4Q29tcHV0ZWQgYXMgYW55KSguLi5hcmdzKTtcclxufVxyXG5leHBvcnQgY29uc3QgY29tcHV0ZWQ6IHR5cGVvZiBtb2J4Q29tcHV0ZWQgPSBPYmplY3QuYXNzaWduKFxyXG4gIGNvbXB1dGVkSW50ZXJuYWwsXHJcbiAgbW9ieENvbXB1dGVkXHJcbikgYXMgYW55O1xyXG5cclxuZnVuY3Rpb24gb2JzZXJ2YWJsZUludGVybmFsKC4uLmFyZ3MpIHtcclxuICByZXR1cm4gKG1vYnhPYnNlcnZhYmxlIGFzIGFueSkoLi4uYXJncyk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBvYnNlcnZhYmxlOiB0eXBlb2YgbW9ieE9ic2VydmFibGUgPSBPYmplY3QuYXNzaWduKFxyXG4gIG9ic2VydmFibGVJbnRlcm5hbCxcclxuICBtb2J4T2JzZXJ2YWJsZVxyXG4pIGFzIGFueTtcclxuIl19