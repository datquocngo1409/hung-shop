var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/tree.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { observable, computed, action, autorun } from 'mobx';
import { TreeNode } from './tree-node.model';
import { TreeOptions } from './tree-options.model';
import { TREE_EVENTS } from '../constants/events';
import { first, last, compact, find, isString, isFunction } from 'lodash-es';
var TreeModel = /** @class */ (function () {
    function TreeModel() {
        this.options = new TreeOptions();
        this.eventNames = Object.keys(TREE_EVENTS);
        this.expandedNodeIds = {};
        this.selectedLeafNodeIds = {};
        this.activeNodeIds = {};
        this.hiddenNodeIds = {};
        this.focusedNodeId = null;
        this.firstUpdate = true;
        this.subscriptions = [];
    }
    // events
    // events
    /**
     * @param {?} event
     * @return {?}
     */
    TreeModel.prototype.fireEvent = 
    // events
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.treeModel = this;
        this.events[event.eventName].emit(event);
        this.events.event.emit(event);
    };
    /**
     * @param {?} eventName
     * @param {?} fn
     * @return {?}
     */
    TreeModel.prototype.subscribe = /**
     * @param {?} eventName
     * @param {?} fn
     * @return {?}
     */
    function (eventName, fn) {
        /** @type {?} */
        var subscription = this.events[eventName].subscribe(fn);
        this.subscriptions.push(subscription);
    };
    // getters
    // getters
    /**
     * @return {?}
     */
    TreeModel.prototype.getFocusedNode = 
    // getters
    /**
     * @return {?}
     */
    function () {
        return this.focusedNode;
    };
    /**
     * @return {?}
     */
    TreeModel.prototype.getActiveNode = /**
     * @return {?}
     */
    function () {
        return this.activeNodes[0];
    };
    /**
     * @return {?}
     */
    TreeModel.prototype.getActiveNodes = /**
     * @return {?}
     */
    function () {
        return this.activeNodes;
    };
    /**
     * @return {?}
     */
    TreeModel.prototype.getVisibleRoots = /**
     * @return {?}
     */
    function () {
        return this.virtualRoot.visibleChildren;
    };
    /**
     * @param {?=} skipHidden
     * @return {?}
     */
    TreeModel.prototype.getFirstRoot = /**
     * @param {?=} skipHidden
     * @return {?}
     */
    function (skipHidden) {
        if (skipHidden === void 0) { skipHidden = false; }
        return first(skipHidden ? this.getVisibleRoots() : this.roots);
    };
    /**
     * @param {?=} skipHidden
     * @return {?}
     */
    TreeModel.prototype.getLastRoot = /**
     * @param {?=} skipHidden
     * @return {?}
     */
    function (skipHidden) {
        if (skipHidden === void 0) { skipHidden = false; }
        return last(skipHidden ? this.getVisibleRoots() : this.roots);
    };
    Object.defineProperty(TreeModel.prototype, "isFocused", {
        get: /**
         * @return {?}
         */
        function () {
            return TreeModel.focusedTree === this;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} node
     * @return {?}
     */
    TreeModel.prototype.isNodeFocused = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return this.focusedNode === node;
    };
    /**
     * @return {?}
     */
    TreeModel.prototype.isEmptyTree = /**
     * @return {?}
     */
    function () {
        return this.roots && this.roots.length === 0;
    };
    Object.defineProperty(TreeModel.prototype, "focusedNode", {
        get: /**
         * @return {?}
         */
        function () {
            return this.focusedNodeId ? this.getNodeById(this.focusedNodeId) : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeModel.prototype, "expandedNodes", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var nodes = Object.keys(this.expandedNodeIds)
                .filter((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return _this.expandedNodeIds[id]; }))
                .map((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return _this.getNodeById(id); }));
            return compact(nodes);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeModel.prototype, "activeNodes", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var nodes = Object.keys(this.activeNodeIds)
                .filter((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return _this.activeNodeIds[id]; }))
                .map((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return _this.getNodeById(id); }));
            return compact(nodes);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeModel.prototype, "hiddenNodes", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var nodes = Object.keys(this.hiddenNodeIds)
                .filter((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return _this.hiddenNodeIds[id]; }))
                .map((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return _this.getNodeById(id); }));
            return compact(nodes);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeModel.prototype, "selectedLeafNodes", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var nodes = Object.keys(this.selectedLeafNodeIds)
                .filter((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return _this.selectedLeafNodeIds[id]; }))
                .map((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return _this.getNodeById(id); }));
            return compact(nodes);
        },
        enumerable: true,
        configurable: true
    });
    // locating nodes
    // locating nodes
    /**
     * @param {?} path
     * @param {?=} startNode
     * @return {?}
     */
    TreeModel.prototype.getNodeByPath = 
    // locating nodes
    /**
     * @param {?} path
     * @param {?=} startNode
     * @return {?}
     */
    function (path, startNode) {
        if (startNode === void 0) { startNode = null; }
        if (!path)
            return null;
        startNode = startNode || this.virtualRoot;
        if (path.length === 0)
            return startNode;
        if (!startNode.children)
            return null;
        /** @type {?} */
        var childId = path.shift();
        /** @type {?} */
        var childNode = find(startNode.children, { id: childId });
        if (!childNode)
            return null;
        return this.getNodeByPath(path, childNode);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    TreeModel.prototype.getNodeById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var idStr = id.toString();
        return this.getNodeBy((/**
         * @param {?} node
         * @return {?}
         */
        function (node) { return node.id.toString() === idStr; }));
    };
    /**
     * @param {?} predicate
     * @param {?=} startNode
     * @return {?}
     */
    TreeModel.prototype.getNodeBy = /**
     * @param {?} predicate
     * @param {?=} startNode
     * @return {?}
     */
    function (predicate, startNode) {
        var e_1, _a;
        if (startNode === void 0) { startNode = null; }
        startNode = startNode || this.virtualRoot;
        if (!startNode.children)
            return null;
        /** @type {?} */
        var found = find(startNode.children, predicate);
        if (found) { // found in children
            return found;
        }
        else { // look in children's children
            try {
                for (var _b = __values(startNode.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var child = _c.value;
                    /** @type {?} */
                    var foundInChildren = this.getNodeBy(predicate, child);
                    if (foundInChildren)
                        return foundInChildren;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    TreeModel.prototype.isExpanded = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return this.expandedNodeIds[node.id];
    };
    /**
     * @param {?} node
     * @return {?}
     */
    TreeModel.prototype.isHidden = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return this.hiddenNodeIds[node.id];
    };
    /**
     * @param {?} node
     * @return {?}
     */
    TreeModel.prototype.isActive = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return this.activeNodeIds[node.id];
    };
    /**
     * @param {?} node
     * @return {?}
     */
    TreeModel.prototype.isSelected = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return this.selectedLeafNodeIds[node.id];
    };
    /**
     * @return {?}
     */
    TreeModel.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.dispose();
        this.unsubscribeAll();
    };
    /**
     * @return {?}
     */
    TreeModel.prototype.dispose = /**
     * @return {?}
     */
    function () {
        // Dispose reactions of the replaced nodes
        if (this.virtualRoot) {
            this.virtualRoot.dispose();
        }
    };
    /**
     * @return {?}
     */
    TreeModel.prototype.unsubscribeAll = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) { return subscription.unsubscribe(); }));
        this.subscriptions = [];
    };
    // actions
    // actions
    /**
     * @param {?} __0
     * @return {?}
     */
    TreeModel.prototype.setData = 
    // actions
    /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var nodes = _a.nodes, _b = _a.options, options = _b === void 0 ? null : _b, _c = _a.events, events = _c === void 0 ? null : _c;
        if (options) {
            this.options = new TreeOptions(options);
        }
        if (events) {
            this.events = events;
        }
        if (nodes) {
            this.nodes = nodes;
        }
        this.update();
    };
    /**
     * @return {?}
     */
    TreeModel.prototype.update = /**
     * @return {?}
     */
    function () {
        var _a;
        // Rebuild tree:
        /** @type {?} */
        var virtualRootConfig = (_a = {
                id: this.options.rootId,
                virtual: true
            },
            _a[this.options.childrenField] = this.nodes,
            _a);
        this.dispose();
        this.virtualRoot = new TreeNode(virtualRootConfig, null, this, 0);
        this.roots = this.virtualRoot.children;
        // Fire event:
        if (this.firstUpdate) {
            if (this.roots) {
                this.firstUpdate = false;
                this._calculateExpandedNodes();
            }
        }
        else {
            this.fireEvent({ eventName: TREE_EVENTS.updateData });
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    TreeModel.prototype.setFocusedNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.focusedNodeId = node ? node.id : null;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TreeModel.prototype.setFocus = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        TreeModel.focusedTree = value ? this : null;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TreeModel.prototype.doForAll = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.roots.forEach((/**
         * @param {?} root
         * @return {?}
         */
        function (root) { return root.doForAll(fn); }));
    };
    /**
     * @return {?}
     */
    TreeModel.prototype.focusNextNode = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var previousNode = this.getFocusedNode();
        /** @type {?} */
        var nextNode = previousNode ? previousNode.findNextNode(true, true) : this.getFirstRoot(true);
        if (nextNode)
            nextNode.focus();
    };
    /**
     * @return {?}
     */
    TreeModel.prototype.focusPreviousNode = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var previousNode = this.getFocusedNode();
        /** @type {?} */
        var nextNode = previousNode ? previousNode.findPreviousNode(true) : this.getLastRoot(true);
        if (nextNode)
            nextNode.focus();
    };
    /**
     * @return {?}
     */
    TreeModel.prototype.focusDrillDown = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var previousNode = this.getFocusedNode();
        if (previousNode && previousNode.isCollapsed && previousNode.hasChildren) {
            previousNode.toggleExpanded();
        }
        else {
            /** @type {?} */
            var nextNode = previousNode ? previousNode.getFirstChild(true) : this.getFirstRoot(true);
            if (nextNode)
                nextNode.focus();
        }
    };
    /**
     * @return {?}
     */
    TreeModel.prototype.focusDrillUp = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var previousNode = this.getFocusedNode();
        if (!previousNode)
            return;
        if (previousNode.isExpanded) {
            previousNode.toggleExpanded();
        }
        else {
            /** @type {?} */
            var nextNode = previousNode.realParent;
            if (nextNode)
                nextNode.focus();
        }
    };
    /**
     * @param {?} node
     * @param {?} value
     * @param {?=} multi
     * @return {?}
     */
    TreeModel.prototype.setActiveNode = /**
     * @param {?} node
     * @param {?} value
     * @param {?=} multi
     * @return {?}
     */
    function (node, value, multi) {
        if (multi === void 0) { multi = false; }
        if (multi) {
            this._setActiveNodeMulti(node, value);
        }
        else {
            this._setActiveNodeSingle(node, value);
        }
        if (value) {
            node.focus(this.options.scrollOnActivate);
            this.fireEvent({ eventName: TREE_EVENTS.activate, node: node });
            this.fireEvent({ eventName: TREE_EVENTS.nodeActivate, node: node }); // For IE11
        }
        else {
            this.fireEvent({ eventName: TREE_EVENTS.deactivate, node: node });
            this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node: node }); // For IE11
        }
    };
    /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    TreeModel.prototype.setSelectedNode = /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    function (node, value) {
        var _a;
        this.selectedLeafNodeIds = Object.assign({}, this.selectedLeafNodeIds, (_a = {}, _a[node.id] = value, _a));
        if (value) {
            node.focus();
            this.fireEvent({ eventName: TREE_EVENTS.select, node: node });
        }
        else {
            this.fireEvent({ eventName: TREE_EVENTS.deselect, node: node });
        }
    };
    /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    TreeModel.prototype.setExpandedNode = /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    function (node, value) {
        var _a;
        this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, (_a = {}, _a[node.id] = value, _a));
        this.fireEvent({ eventName: TREE_EVENTS.toggleExpanded, node: node, isExpanded: value });
    };
    /**
     * @return {?}
     */
    TreeModel.prototype.expandAll = /**
     * @return {?}
     */
    function () {
        this.roots.forEach((/**
         * @param {?} root
         * @return {?}
         */
        function (root) { return root.expandAll(); }));
    };
    /**
     * @return {?}
     */
    TreeModel.prototype.collapseAll = /**
     * @return {?}
     */
    function () {
        this.roots.forEach((/**
         * @param {?} root
         * @return {?}
         */
        function (root) { return root.collapseAll(); }));
    };
    /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    TreeModel.prototype.setIsHidden = /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    function (node, value) {
        var _a;
        this.hiddenNodeIds = Object.assign({}, this.hiddenNodeIds, (_a = {}, _a[node.id] = value, _a));
    };
    /**
     * @param {?} nodeIds
     * @return {?}
     */
    TreeModel.prototype.setHiddenNodeIds = /**
     * @param {?} nodeIds
     * @return {?}
     */
    function (nodeIds) {
        this.hiddenNodeIds = nodeIds.reduce((/**
         * @param {?} hiddenNodeIds
         * @param {?} id
         * @return {?}
         */
        function (hiddenNodeIds, id) {
            var _a;
            return Object.assign(hiddenNodeIds, (_a = {},
                _a[id] = true,
                _a));
        }), {});
    };
    /**
     * @param {?} node
     * @param {?} $event
     * @return {?}
     */
    TreeModel.prototype.performKeyAction = /**
     * @param {?} node
     * @param {?} $event
     * @return {?}
     */
    function (node, $event) {
        /** @type {?} */
        var action = this.options.actionMapping.keys[$event.keyCode];
        if (action) {
            $event.preventDefault();
            action(this, node, $event);
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} filter
     * @param {?=} autoShow
     * @return {?}
     */
    TreeModel.prototype.filterNodes = /**
     * @param {?} filter
     * @param {?=} autoShow
     * @return {?}
     */
    function (filter, autoShow) {
        var _this = this;
        if (autoShow === void 0) { autoShow = true; }
        /** @type {?} */
        var filterFn;
        if (!filter) {
            return this.clearFilter();
        }
        // support function and string filter
        if (isString(filter)) {
            filterFn = (/**
             * @param {?} node
             * @return {?}
             */
            function (node) { return node.displayField.toLowerCase().indexOf(filter.toLowerCase()) !== -1; });
        }
        else if (isFunction(filter)) {
            filterFn = filter;
        }
        else {
            console.error('Don\'t know what to do with filter', filter);
            console.error('Should be either a string or function');
            return;
        }
        /** @type {?} */
        var ids = {};
        this.roots.forEach((/**
         * @param {?} node
         * @return {?}
         */
        function (node) { return _this._filterNode(ids, node, filterFn, autoShow); }));
        this.hiddenNodeIds = ids;
        this.fireEvent({ eventName: TREE_EVENTS.changeFilter });
    };
    /**
     * @return {?}
     */
    TreeModel.prototype.clearFilter = /**
     * @return {?}
     */
    function () {
        this.hiddenNodeIds = {};
        this.fireEvent({ eventName: TREE_EVENTS.changeFilter });
    };
    /**
     * @param {?} node
     * @param {?} to
     * @return {?}
     */
    TreeModel.prototype.moveNode = /**
     * @param {?} node
     * @param {?} to
     * @return {?}
     */
    function (node, to) {
        /** @type {?} */
        var fromIndex = node.getIndexInParent();
        /** @type {?} */
        var fromParent = node.parent;
        if (!this.canMoveNode(node, to, fromIndex))
            return;
        /** @type {?} */
        var fromChildren = fromParent.getField('children');
        // If node doesn't have children - create children array
        if (!to.parent.getField('children')) {
            to.parent.setField('children', []);
        }
        /** @type {?} */
        var toChildren = to.parent.getField('children');
        /** @type {?} */
        var originalNode = fromChildren.splice(fromIndex, 1)[0];
        // Compensate for index if already removed from parent:
        /** @type {?} */
        var toIndex = (fromParent === to.parent && to.index > fromIndex) ? to.index - 1 : to.index;
        toChildren.splice(toIndex, 0, originalNode);
        fromParent.treeModel.update();
        if (to.parent.treeModel !== fromParent.treeModel) {
            to.parent.treeModel.update();
        }
        this.fireEvent({
            eventName: TREE_EVENTS.moveNode,
            node: originalNode,
            to: { parent: to.parent.data, index: toIndex },
            from: { parent: fromParent.data, index: fromIndex }
        });
    };
    /**
     * @param {?} node
     * @param {?} to
     * @return {?}
     */
    TreeModel.prototype.copyNode = /**
     * @param {?} node
     * @param {?} to
     * @return {?}
     */
    function (node, to) {
        /** @type {?} */
        var fromIndex = node.getIndexInParent();
        if (!this.canMoveNode(node, to, fromIndex))
            return;
        // If node doesn't have children - create children array
        if (!to.parent.getField('children')) {
            to.parent.setField('children', []);
        }
        /** @type {?} */
        var toChildren = to.parent.getField('children');
        /** @type {?} */
        var nodeCopy = this.options.getNodeClone(node);
        toChildren.splice(to.index, 0, nodeCopy);
        node.treeModel.update();
        if (to.parent.treeModel !== node.treeModel) {
            to.parent.treeModel.update();
        }
        this.fireEvent({ eventName: TREE_EVENTS.copyNode, node: nodeCopy, to: { parent: to.parent.data, index: to.index } });
    };
    /**
     * @return {?}
     */
    TreeModel.prototype.getState = /**
     * @return {?}
     */
    function () {
        return {
            expandedNodeIds: this.expandedNodeIds,
            selectedLeafNodeIds: this.selectedLeafNodeIds,
            activeNodeIds: this.activeNodeIds,
            hiddenNodeIds: this.hiddenNodeIds,
            focusedNodeId: this.focusedNodeId
        };
    };
    /**
     * @param {?} state
     * @return {?}
     */
    TreeModel.prototype.setState = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        if (!state)
            return;
        Object.assign(this, {
            expandedNodeIds: state.expandedNodeIds || {},
            selectedLeafNodeIds: state.selectedLeafNodeIds || {},
            activeNodeIds: state.activeNodeIds || {},
            hiddenNodeIds: state.hiddenNodeIds || {},
            focusedNodeId: state.focusedNodeId
        });
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TreeModel.prototype.subscribeToState = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var _this = this;
        autorun((/**
         * @return {?}
         */
        function () { return fn(_this.getState()); }));
    };
    /**
     * @param {?} node
     * @param {?} to
     * @param {?=} fromIndex
     * @return {?}
     */
    TreeModel.prototype.canMoveNode = /**
     * @param {?} node
     * @param {?} to
     * @param {?=} fromIndex
     * @return {?}
     */
    function (node, to, fromIndex) {
        if (fromIndex === void 0) { fromIndex = undefined; }
        /** @type {?} */
        var fromNodeIndex = fromIndex || node.getIndexInParent();
        // same node:
        if (node.parent === to.parent && fromIndex === to.index) {
            return false;
        }
        return !to.parent.isDescendantOf(node);
    };
    /**
     * @return {?}
     */
    TreeModel.prototype.calculateExpandedNodes = /**
     * @return {?}
     */
    function () {
        this._calculateExpandedNodes();
    };
    // private methods
    // private methods
    /**
     * @private
     * @param {?} ids
     * @param {?} node
     * @param {?} filterFn
     * @param {?} autoShow
     * @return {?}
     */
    TreeModel.prototype._filterNode = 
    // private methods
    /**
     * @private
     * @param {?} ids
     * @param {?} node
     * @param {?} filterFn
     * @param {?} autoShow
     * @return {?}
     */
    function (ids, node, filterFn, autoShow) {
        var _this = this;
        // if node passes function then it's visible
        /** @type {?} */
        var isVisible = filterFn(node);
        if (node.children) {
            // if one of node's children passes filter then this node is also visible
            node.children.forEach((/**
             * @param {?} child
             * @return {?}
             */
            function (child) {
                if (_this._filterNode(ids, child, filterFn, autoShow)) {
                    isVisible = true;
                }
            }));
        }
        // mark node as hidden
        if (!isVisible) {
            ids[node.id] = true;
        }
        // auto expand parents to make sure the filtered nodes are visible
        if (autoShow && isVisible) {
            node.ensureVisible();
        }
        return isVisible;
    };
    /**
     * @private
     * @param {?=} startNode
     * @return {?}
     */
    TreeModel.prototype._calculateExpandedNodes = /**
     * @private
     * @param {?=} startNode
     * @return {?}
     */
    function (startNode) {
        var _a;
        var _this = this;
        if (startNode === void 0) { startNode = null; }
        startNode = startNode || this.virtualRoot;
        if (startNode.data[this.options.isExpandedField]) {
            this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, (_a = {}, _a[startNode.id] = true, _a));
        }
        if (startNode.children) {
            startNode.children.forEach((/**
             * @param {?} child
             * @return {?}
             */
            function (child) { return _this._calculateExpandedNodes(child); }));
        }
    };
    /**
     * @private
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    TreeModel.prototype._setActiveNodeSingle = /**
     * @private
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    function (node, value) {
        var _a;
        var _this = this;
        // Deactivate all other nodes:
        this.activeNodes
            .filter((/**
         * @param {?} activeNode
         * @return {?}
         */
        function (activeNode) { return activeNode !== node; }))
            .forEach((/**
         * @param {?} activeNode
         * @return {?}
         */
        function (activeNode) {
            _this.fireEvent({ eventName: TREE_EVENTS.deactivate, node: activeNode });
            _this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node: activeNode }); // For IE11
        }));
        if (value) {
            this.activeNodeIds = (_a = {}, _a[node.id] = true, _a);
        }
        else {
            this.activeNodeIds = {};
        }
    };
    /**
     * @private
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    TreeModel.prototype._setActiveNodeMulti = /**
     * @private
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    function (node, value) {
        var _a;
        this.activeNodeIds = Object.assign({}, this.activeNodeIds, (_a = {}, _a[node.id] = value, _a));
    };
    TreeModel.focusedTree = null;
    TreeModel.decorators = [
        { type: Injectable }
    ];
    __decorate([
        observable,
        __metadata("design:type", Array)
    ], TreeModel.prototype, "roots", void 0);
    __decorate([
        observable,
        __metadata("design:type", Object)
    ], TreeModel.prototype, "expandedNodeIds", void 0);
    __decorate([
        observable,
        __metadata("design:type", Object)
    ], TreeModel.prototype, "selectedLeafNodeIds", void 0);
    __decorate([
        observable,
        __metadata("design:type", Object)
    ], TreeModel.prototype, "activeNodeIds", void 0);
    __decorate([
        observable,
        __metadata("design:type", Object)
    ], TreeModel.prototype, "hiddenNodeIds", void 0);
    __decorate([
        observable,
        __metadata("design:type", Object)
    ], TreeModel.prototype, "focusedNodeId", void 0);
    __decorate([
        observable,
        __metadata("design:type", TreeNode)
    ], TreeModel.prototype, "virtualRoot", void 0);
    __decorate([
        computed,
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], TreeModel.prototype, "focusedNode", null);
    __decorate([
        computed,
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], TreeModel.prototype, "expandedNodes", null);
    __decorate([
        computed,
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], TreeModel.prototype, "activeNodes", null);
    __decorate([
        computed,
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], TreeModel.prototype, "hiddenNodes", null);
    __decorate([
        computed,
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], TreeModel.prototype, "selectedLeafNodes", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "setData", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "update", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "setFocusedNode", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "setFocus", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "doForAll", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "focusNextNode", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "focusPreviousNode", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "focusDrillDown", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "focusDrillUp", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object, Object]),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "setActiveNode", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "setSelectedNode", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "setExpandedNode", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "expandAll", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "collapseAll", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "setIsHidden", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "setHiddenNodeIds", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "filterNodes", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "clearFilter", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "moveNode", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "copyNode", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], TreeModel.prototype, "setState", null);
    return TreeModel;
}());
export { TreeModel };
if (false) {
    /** @type {?} */
    TreeModel.focusedTree;
    /** @type {?} */
    TreeModel.prototype.options;
    /** @type {?} */
    TreeModel.prototype.nodes;
    /** @type {?} */
    TreeModel.prototype.eventNames;
    /** @type {?} */
    TreeModel.prototype.virtualScroll;
    /** @type {?} */
    TreeModel.prototype.roots;
    /** @type {?} */
    TreeModel.prototype.expandedNodeIds;
    /** @type {?} */
    TreeModel.prototype.selectedLeafNodeIds;
    /** @type {?} */
    TreeModel.prototype.activeNodeIds;
    /** @type {?} */
    TreeModel.prototype.hiddenNodeIds;
    /** @type {?} */
    TreeModel.prototype.focusedNodeId;
    /** @type {?} */
    TreeModel.prototype.virtualRoot;
    /**
     * @type {?}
     * @private
     */
    TreeModel.prototype.firstUpdate;
    /**
     * @type {?}
     * @private
     */
    TreeModel.prototype.events;
    /**
     * @type {?}
     * @private
     */
    TreeModel.prototype.subscriptions;
}
//# sourceMappingURL=data:application/json;base64,