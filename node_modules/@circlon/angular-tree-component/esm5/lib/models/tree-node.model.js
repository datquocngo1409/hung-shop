var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/tree-node.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { observable, computed, reaction, action } from 'mobx';
import { TREE_EVENTS } from '../constants/events';
import { first, last, some, every } from 'lodash-es';
var TreeNode = /** @class */ (function () {
    function TreeNode(data, parent, treeModel, index) {
        var _this = this;
        this.data = data;
        this.parent = parent;
        this.treeModel = treeModel;
        this.position = 0;
        this.allowDrop = (/**
         * @param {?} element
         * @param {?=} $event
         * @return {?}
         */
        function (element, $event) {
            return _this.options.allowDrop(element, { parent: _this, index: 0 }, $event);
        });
        this.allowDragoverStyling = (/**
         * @return {?}
         */
        function () {
            return _this.options.allowDragoverStyling;
        });
        if (this.id === undefined || this.id === null) {
            this.id = uuid();
        } // Make sure there's a unique id without overriding existing ids to work with immutable data structures
        this.index = index;
        if (this.getField('children')) {
            this._initChildren();
        }
        this.autoLoadChildren();
    }
    Object.defineProperty(TreeNode.prototype, "isHidden", {
        get: /**
         * @return {?}
         */
        function () { return this.treeModel.isHidden(this); },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(TreeNode.prototype, "isExpanded", {
        get: /**
         * @return {?}
         */
        function () { return this.treeModel.isExpanded(this); },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(TreeNode.prototype, "isActive", {
        get: /**
         * @return {?}
         */
        function () { return this.treeModel.isActive(this); },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(TreeNode.prototype, "isFocused", {
        get: /**
         * @return {?}
         */
        function () { return this.treeModel.isNodeFocused(this); },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(TreeNode.prototype, "isSelected", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.isSelectable()) {
                return this.treeModel.isSelected(this);
            }
            else {
                return some(this.children, (/**
                 * @param {?} node
                 * @return {?}
                 */
                function (node) { return node.isSelected; }));
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(TreeNode.prototype, "isAllSelected", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.isSelectable()) {
                return this.treeModel.isSelected(this);
            }
            else {
                return every(this.children, (/**
                 * @param {?} node
                 * @return {?}
                 */
                function (node) { return node.isAllSelected; }));
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(TreeNode.prototype, "isPartiallySelected", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isSelected && !this.isAllSelected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "level", {
        get: /**
         * @return {?}
         */
        function () {
            return this.parent ? this.parent.level + 1 : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "path", {
        get: /**
         * @return {?}
         */
        function () {
            return this.parent ? __spread(this.parent.path, [this.id]) : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "elementRef", {
        get: /**
         * @return {?}
         */
        function () {
            throw "Element Ref is no longer supported since introducing virtual scroll\n\n      You may use a template to obtain a reference to the element";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "originalNode", {
        get: /**
         * @return {?}
         */
        function () { return this._originalNode; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(TreeNode.prototype, "hasChildren", {
        // helper get functions:
        get: 
        // helper get functions:
        /**
         * @return {?}
         */
        function () {
            return !!(this.getField('hasChildren') || (this.children && this.children.length > 0));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "isCollapsed", {
        get: /**
         * @return {?}
         */
        function () { return !this.isExpanded; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "isLeaf", {
        get: /**
         * @return {?}
         */
        function () { return !this.hasChildren; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "isRoot", {
        get: /**
         * @return {?}
         */
        function () { return this.parent.data.virtual; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "realParent", {
        get: /**
         * @return {?}
         */
        function () { return this.isRoot ? null : this.parent; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "options", {
        // proxy functions:
        get: 
        // proxy functions:
        /**
         * @return {?}
         */
        function () { return this.treeModel.options; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    TreeNode.prototype.fireEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) { this.treeModel.fireEvent(event); };
    Object.defineProperty(TreeNode.prototype, "displayField", {
        // field accessors:
        get: 
        // field accessors:
        /**
         * @return {?}
         */
        function () {
            return this.getField('display');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getField('id');
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setField('id', value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} key
     * @return {?}
     */
    TreeNode.prototype.getField = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.data[this.options[key + "Field"]];
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    TreeNode.prototype.setField = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        this.data[this.options[key + "Field"]] = value;
    };
    // traversing:
    // traversing:
    /**
     * @param {?} steps
     * @param {?=} skipHidden
     * @return {?}
     */
    TreeNode.prototype._findAdjacentSibling = 
    // traversing:
    /**
     * @param {?} steps
     * @param {?=} skipHidden
     * @return {?}
     */
    function (steps, skipHidden) {
        if (skipHidden === void 0) { skipHidden = false; }
        /** @type {?} */
        var siblings = this._getParentsChildren(skipHidden);
        /** @type {?} */
        var index = siblings.indexOf(this);
        return siblings.length > index + steps ? siblings[index + steps] : null;
    };
    /**
     * @param {?=} skipHidden
     * @return {?}
     */
    TreeNode.prototype.findNextSibling = /**
     * @param {?=} skipHidden
     * @return {?}
     */
    function (skipHidden) {
        if (skipHidden === void 0) { skipHidden = false; }
        return this._findAdjacentSibling(+1, skipHidden);
    };
    /**
     * @param {?=} skipHidden
     * @return {?}
     */
    TreeNode.prototype.findPreviousSibling = /**
     * @param {?=} skipHidden
     * @return {?}
     */
    function (skipHidden) {
        if (skipHidden === void 0) { skipHidden = false; }
        return this._findAdjacentSibling(-1, skipHidden);
    };
    /**
     * @return {?}
     */
    TreeNode.prototype.getVisibleChildren = /**
     * @return {?}
     */
    function () {
        return this.visibleChildren;
    };
    Object.defineProperty(TreeNode.prototype, "visibleChildren", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.children || []).filter((/**
             * @param {?} node
             * @return {?}
             */
            function (node) { return !node.isHidden; }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} skipHidden
     * @return {?}
     */
    TreeNode.prototype.getFirstChild = /**
     * @param {?=} skipHidden
     * @return {?}
     */
    function (skipHidden) {
        if (skipHidden === void 0) { skipHidden = false; }
        /** @type {?} */
        var children = skipHidden ? this.visibleChildren : this.children;
        return first(children || []);
    };
    /**
     * @param {?=} skipHidden
     * @return {?}
     */
    TreeNode.prototype.getLastChild = /**
     * @param {?=} skipHidden
     * @return {?}
     */
    function (skipHidden) {
        if (skipHidden === void 0) { skipHidden = false; }
        /** @type {?} */
        var children = skipHidden ? this.visibleChildren : this.children;
        return last(children || []);
    };
    /**
     * @param {?=} goInside
     * @param {?=} skipHidden
     * @return {?}
     */
    TreeNode.prototype.findNextNode = /**
     * @param {?=} goInside
     * @param {?=} skipHidden
     * @return {?}
     */
    function (goInside, skipHidden) {
        if (goInside === void 0) { goInside = true; }
        if (skipHidden === void 0) { skipHidden = false; }
        return goInside && this.isExpanded && this.getFirstChild(skipHidden) ||
            this.findNextSibling(skipHidden) ||
            this.parent && this.parent.findNextNode(false, skipHidden);
    };
    /**
     * @param {?=} skipHidden
     * @return {?}
     */
    TreeNode.prototype.findPreviousNode = /**
     * @param {?=} skipHidden
     * @return {?}
     */
    function (skipHidden) {
        if (skipHidden === void 0) { skipHidden = false; }
        /** @type {?} */
        var previousSibling = this.findPreviousSibling(skipHidden);
        if (!previousSibling) {
            return this.realParent;
        }
        return previousSibling._getLastOpenDescendant(skipHidden);
    };
    /**
     * @param {?=} skipHidden
     * @return {?}
     */
    TreeNode.prototype._getLastOpenDescendant = /**
     * @param {?=} skipHidden
     * @return {?}
     */
    function (skipHidden) {
        if (skipHidden === void 0) { skipHidden = false; }
        /** @type {?} */
        var lastChild = this.getLastChild(skipHidden);
        return (this.isCollapsed || !lastChild)
            ? this
            : lastChild._getLastOpenDescendant(skipHidden);
    };
    /**
     * @private
     * @param {?=} skipHidden
     * @return {?}
     */
    TreeNode.prototype._getParentsChildren = /**
     * @private
     * @param {?=} skipHidden
     * @return {?}
     */
    function (skipHidden) {
        if (skipHidden === void 0) { skipHidden = false; }
        /** @type {?} */
        var children = this.parent &&
            (skipHidden ? this.parent.getVisibleChildren() : this.parent.children);
        return children || [];
    };
    /**
     * @private
     * @param {?=} skipHidden
     * @return {?}
     */
    TreeNode.prototype.getIndexInParent = /**
     * @private
     * @param {?=} skipHidden
     * @return {?}
     */
    function (skipHidden) {
        if (skipHidden === void 0) { skipHidden = false; }
        return this._getParentsChildren(skipHidden).indexOf(this);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    TreeNode.prototype.isDescendantOf = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (this === node)
            return true;
        else
            return this.parent && this.parent.isDescendantOf(node);
    };
    /**
     * @return {?}
     */
    TreeNode.prototype.getNodePadding = /**
     * @return {?}
     */
    function () {
        return this.options.levelPadding * (this.level - 1) + 'px';
    };
    /**
     * @return {?}
     */
    TreeNode.prototype.getClass = /**
     * @return {?}
     */
    function () {
        return [this.options.nodeClass(this), "tree-node-level-" + this.level].join(' ');
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    TreeNode.prototype.onDrop = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.mouseAction('drop', $event.event, {
            from: $event.element,
            to: { parent: this, index: 0, dropOnNode: true }
        });
    };
    /**
     * @return {?}
     */
    TreeNode.prototype.allowDrag = /**
     * @return {?}
     */
    function () {
        return this.options.allowDrag(this);
    };
    // helper methods:
    // helper methods:
    /**
     * @return {?}
     */
    TreeNode.prototype.loadNodeChildren = 
    // helper methods:
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.options.getChildren) {
            return Promise.resolve(); // Not getChildren method - for using redux
        }
        return Promise.resolve(this.options.getChildren(this))
            .then((/**
         * @param {?} children
         * @return {?}
         */
        function (children) {
            if (children) {
                _this.setField('children', children);
                _this._initChildren();
                if (_this.options.useTriState && _this.treeModel.isSelected(_this)) {
                    _this.setIsSelected(true);
                }
                _this.children.forEach((/**
                 * @param {?} child
                 * @return {?}
                 */
                function (child) {
                    if (child.getField('isExpanded') && child.hasChildren) {
                        child.expand();
                    }
                }));
            }
        })).then((/**
         * @return {?}
         */
        function () {
            _this.fireEvent({
                eventName: TREE_EVENTS.loadNodeChildren,
                node: _this
            });
        }));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    TreeNode.prototype.expand = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        if (!(/** @type {?} */ (this)).isExpanded) {
            (/** @type {?} */ (this)).toggleExpanded();
        }
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    TreeNode.prototype.collapse = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        if ((/** @type {?} */ (this)).isExpanded) {
            (/** @type {?} */ (this)).toggleExpanded();
        }
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TreeNode.prototype.doForAll = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var _this = this;
        Promise.resolve(fn(this)).then((/**
         * @return {?}
         */
        function () {
            if (_this.children) {
                _this.children.forEach((/**
                 * @param {?} child
                 * @return {?}
                 */
                function (child) { return child.doForAll(fn); }));
            }
        }));
    };
    /**
     * @return {?}
     */
    TreeNode.prototype.expandAll = /**
     * @return {?}
     */
    function () {
        this.doForAll((/**
         * @param {?} node
         * @return {?}
         */
        function (node) { return node.expand(); }));
    };
    /**
     * @return {?}
     */
    TreeNode.prototype.collapseAll = /**
     * @return {?}
     */
    function () {
        this.doForAll((/**
         * @param {?} node
         * @return {?}
         */
        function (node) { return node.collapse(); }));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    TreeNode.prototype.ensureVisible = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        if ((/** @type {?} */ (this)).realParent) {
            (/** @type {?} */ (this)).realParent.expand();
            (/** @type {?} */ (this)).realParent.ensureVisible();
        }
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    TreeNode.prototype.toggleExpanded = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).setIsExpanded(!(/** @type {?} */ (this)).isExpanded);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @return {THIS}
     */
    TreeNode.prototype.setIsExpanded = /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @return {THIS}
     */
    function (value) {
        if ((/** @type {?} */ (this)).hasChildren) {
            (/** @type {?} */ (this)).treeModel.setExpandedNode((/** @type {?} */ (this)), value);
        }
        return (/** @type {?} */ (this));
    };
    ;
    /**
     * @return {?}
     */
    TreeNode.prototype.autoLoadChildren = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.handler =
            reaction((/**
             * @return {?}
             */
            function () { return _this.isExpanded; }), (/**
             * @param {?} isExpanded
             * @return {?}
             */
            function (isExpanded) {
                if (!_this.children && _this.hasChildren && isExpanded) {
                    _this.loadNodeChildren();
                }
            }), { fireImmediately: true });
    };
    /**
     * @return {?}
     */
    TreeNode.prototype.dispose = /**
     * @return {?}
     */
    function () {
        if (this.children) {
            this.children.forEach((/**
             * @param {?} child
             * @return {?}
             */
            function (child) { return child.dispose(); }));
        }
        if (this.handler) {
            this.handler();
        }
        this.parent = null;
        this.children = null;
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @param {?=} multi
     * @return {THIS}
     */
    TreeNode.prototype.setIsActive = /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @param {?=} multi
     * @return {THIS}
     */
    function (value, multi) {
        if (multi === void 0) { multi = false; }
        (/** @type {?} */ (this)).treeModel.setActiveNode((/** @type {?} */ (this)), value, multi);
        if (value) {
            (/** @type {?} */ (this)).focus((/** @type {?} */ (this)).options.scrollOnActivate);
        }
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    TreeNode.prototype.isSelectable = /**
     * @return {?}
     */
    function () {
        return this.isLeaf || !this.children || !this.options.useTriState;
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @return {THIS}
     */
    TreeNode.prototype.setIsSelected = /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @return {THIS}
     */
    function (value) {
        if ((/** @type {?} */ (this)).isSelectable()) {
            (/** @type {?} */ (this)).treeModel.setSelectedNode((/** @type {?} */ (this)), value);
        }
        else {
            (/** @type {?} */ (this)).visibleChildren.forEach((/**
             * @param {?} child
             * @return {?}
             */
            function (child) { return child.setIsSelected(value); }));
        }
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    TreeNode.prototype.toggleSelected = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).setIsSelected(!(/** @type {?} */ (this)).isSelected);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} multi
     * @return {THIS}
     */
    TreeNode.prototype.toggleActivated = /**
     * @template THIS
     * @this {THIS}
     * @param {?=} multi
     * @return {THIS}
     */
    function (multi) {
        if (multi === void 0) { multi = false; }
        (/** @type {?} */ (this)).setIsActive(!(/** @type {?} */ (this)).isActive, multi);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} multi
     * @return {THIS}
     */
    TreeNode.prototype.setActiveAndVisible = /**
     * @template THIS
     * @this {THIS}
     * @param {?=} multi
     * @return {THIS}
     */
    function (multi) {
        if (multi === void 0) { multi = false; }
        (/** @type {?} */ (this)).setIsActive(true, multi)
            .ensureVisible();
        setTimeout((/** @type {?} */ (this)).scrollIntoView.bind((/** @type {?} */ (this))));
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?=} force
     * @return {?}
     */
    TreeNode.prototype.scrollIntoView = /**
     * @param {?=} force
     * @return {?}
     */
    function (force) {
        if (force === void 0) { force = false; }
        this.treeModel.virtualScroll.scrollIntoView(this, force);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} scroll
     * @return {THIS}
     */
    TreeNode.prototype.focus = /**
     * @template THIS
     * @this {THIS}
     * @param {?=} scroll
     * @return {THIS}
     */
    function (scroll) {
        if (scroll === void 0) { scroll = true; }
        /** @type {?} */
        var previousNode = (/** @type {?} */ (this)).treeModel.getFocusedNode();
        (/** @type {?} */ (this)).treeModel.setFocusedNode((/** @type {?} */ (this)));
        if (scroll) {
            (/** @type {?} */ (this)).scrollIntoView();
        }
        if (previousNode) {
            (/** @type {?} */ (this)).fireEvent({ eventName: TREE_EVENTS.blur, node: previousNode });
        }
        (/** @type {?} */ (this)).fireEvent({ eventName: TREE_EVENTS.focus, node: (/** @type {?} */ (this)) });
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    TreeNode.prototype.blur = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        /** @type {?} */
        var previousNode = (/** @type {?} */ (this)).treeModel.getFocusedNode();
        (/** @type {?} */ (this)).treeModel.setFocusedNode(null);
        if (previousNode) {
            (/** @type {?} */ (this)).fireEvent({ eventName: TREE_EVENTS.blur, node: (/** @type {?} */ (this)) });
        }
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TreeNode.prototype.setIsHidden = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.treeModel.setIsHidden(this, value);
    };
    /**
     * @return {?}
     */
    TreeNode.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.setIsHidden(true);
    };
    /**
     * @return {?}
     */
    TreeNode.prototype.show = /**
     * @return {?}
     */
    function () {
        this.setIsHidden(false);
    };
    /**
     * @param {?} actionName
     * @param {?} $event
     * @param {?=} data
     * @return {?}
     */
    TreeNode.prototype.mouseAction = /**
     * @param {?} actionName
     * @param {?} $event
     * @param {?=} data
     * @return {?}
     */
    function (actionName, $event, data) {
        if (data === void 0) { data = null; }
        this.treeModel.setFocus(true);
        /** @type {?} */
        var actionMapping = this.options.actionMapping.mouse;
        /** @type {?} */
        var action = actionMapping[actionName];
        if (action) {
            action(this.treeModel, this, $event, data);
        }
    };
    /**
     * @return {?}
     */
    TreeNode.prototype.getSelfHeight = /**
     * @return {?}
     */
    function () {
        return this.options.nodeHeight(this);
    };
    /**
     * @return {?}
     */
    TreeNode.prototype._initChildren = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.children = this.getField('children')
            .map((/**
         * @param {?} c
         * @param {?} index
         * @return {?}
         */
        function (c, index) { return new TreeNode(c, _this, _this.treeModel, index); }));
    };
    __decorate([
        computed,
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], TreeNode.prototype, "isHidden", null);
    __decorate([
        computed,
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], TreeNode.prototype, "isExpanded", null);
    __decorate([
        computed,
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], TreeNode.prototype, "isActive", null);
    __decorate([
        computed,
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], TreeNode.prototype, "isFocused", null);
    __decorate([
        computed,
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], TreeNode.prototype, "isSelected", null);
    __decorate([
        computed,
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], TreeNode.prototype, "isAllSelected", null);
    __decorate([
        computed,
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], TreeNode.prototype, "isPartiallySelected", null);
    __decorate([
        observable,
        __metadata("design:type", Array)
    ], TreeNode.prototype, "children", void 0);
    __decorate([
        observable,
        __metadata("design:type", Number)
    ], TreeNode.prototype, "index", void 0);
    __decorate([
        observable,
        __metadata("design:type", Object)
    ], TreeNode.prototype, "position", void 0);
    __decorate([
        observable,
        __metadata("design:type", Number)
    ], TreeNode.prototype, "height", void 0);
    __decorate([
        computed,
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [])
    ], TreeNode.prototype, "level", null);
    __decorate([
        computed,
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [])
    ], TreeNode.prototype, "path", null);
    __decorate([
        computed,
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], TreeNode.prototype, "visibleChildren", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], TreeNode.prototype, "setIsSelected", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], TreeNode.prototype, "_initChildren", null);
    return TreeNode;
}());
export { TreeNode };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TreeNode.prototype.handler;
    /** @type {?} */
    TreeNode.prototype.children;
    /** @type {?} */
    TreeNode.prototype.index;
    /** @type {?} */
    TreeNode.prototype.position;
    /** @type {?} */
    TreeNode.prototype.height;
    /**
     * @type {?}
     * @private
     */
    TreeNode.prototype._originalNode;
    /** @type {?} */
    TreeNode.prototype.allowDrop;
    /** @type {?} */
    TreeNode.prototype.allowDragoverStyling;
    /** @type {?} */
    TreeNode.prototype.data;
    /** @type {?} */
    TreeNode.prototype.parent;
    /** @type {?} */
    TreeNode.prototype.treeModel;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
/**
 * @return {?}
 */
function uuid() {
    return Math.floor(Math.random() * 10000000000000);
}
//# sourceMappingURL=data:application/json;base64,