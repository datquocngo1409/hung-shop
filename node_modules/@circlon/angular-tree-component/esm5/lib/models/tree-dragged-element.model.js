/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/tree-dragged-element.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var TreeDraggedElement = /** @class */ (function () {
    function TreeDraggedElement() {
        this._draggedElement = null;
    }
    /**
     * @param {?} draggedElement
     * @return {?}
     */
    TreeDraggedElement.prototype.set = /**
     * @param {?} draggedElement
     * @return {?}
     */
    function (draggedElement) {
        this._draggedElement = draggedElement;
    };
    /**
     * @return {?}
     */
    TreeDraggedElement.prototype.get = /**
     * @return {?}
     */
    function () {
        return this._draggedElement;
    };
    /**
     * @return {?}
     */
    TreeDraggedElement.prototype.isDragging = /**
     * @return {?}
     */
    function () {
        return !!this.get();
    };
    TreeDraggedElement.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ TreeDraggedElement.ɵprov = i0.ɵɵdefineInjectable({ factory: function TreeDraggedElement_Factory() { return new TreeDraggedElement(); }, token: TreeDraggedElement, providedIn: "root" });
    return TreeDraggedElement;
}());
export { TreeDraggedElement };
if (false) {
    /** @type {?} */
    TreeDraggedElement.prototype._draggedElement;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1kcmFnZ2VkLWVsZW1lbnQubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2lyY2xvbi9hbmd1bGFyLXRyZWUtY29tcG9uZW50LyIsInNvdXJjZXMiOlsibGliL21vZGVscy90cmVlLWRyYWdnZWQtZWxlbWVudC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRTNDO0lBQUE7UUFJRSxvQkFBZSxHQUFRLElBQUksQ0FBQztLQWE3Qjs7Ozs7SUFYQyxnQ0FBRzs7OztJQUFILFVBQUksY0FBbUI7UUFDckIsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUM7SUFDeEMsQ0FBQzs7OztJQUVELGdDQUFHOzs7SUFBSDtRQUNFLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDOzs7O0lBRUQsdUNBQVU7OztJQUFWO1FBQ0UsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7O2dCQWhCRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7NkJBSkQ7Q0FtQkMsQUFqQkQsSUFpQkM7U0FkWSxrQkFBa0I7OztJQUM3Qiw2Q0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUcmVlRHJhZ2dlZEVsZW1lbnQge1xyXG4gIF9kcmFnZ2VkRWxlbWVudDogYW55ID0gbnVsbDtcclxuXHJcbiAgc2V0KGRyYWdnZWRFbGVtZW50OiBhbnkpIHtcclxuICAgIHRoaXMuX2RyYWdnZWRFbGVtZW50ID0gZHJhZ2dlZEVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBnZXQoKTogYW55IHtcclxuICAgIHJldHVybiB0aGlzLl9kcmFnZ2VkRWxlbWVudDtcclxuICB9XHJcblxyXG4gIGlzRHJhZ2dpbmcoKSB7XHJcbiAgICByZXR1cm4gISF0aGlzLmdldCgpO1xyXG4gIH1cclxufVxyXG4iXX0=