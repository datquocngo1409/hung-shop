{"version":3,"sources":["ng://@circlon/angular-tree-component/lib/mobx-angular/tree-mobx-autorun.directive.ts","ng://@circlon/angular-tree-component/lib/constants/keys.ts","ng://@circlon/angular-tree-component/lib/models/tree-options.model.ts","ng://@circlon/angular-tree-component/lib/constants/events.ts","ng://@circlon/angular-tree-component/lib/models/tree-node.model.ts","ng://@circlon/angular-tree-component/lib/models/tree.model.ts","ng://@circlon/angular-tree-component/lib/models/tree-dragged-element.model.ts","ng://@circlon/angular-tree-component/lib/models/tree-virtual-scroll.model.ts","ng://@circlon/angular-tree-component/lib/components/loading.component.ts","ng://@circlon/angular-tree-component/lib/components/tree-viewport.component.ts","ng://@circlon/angular-tree-component/lib/components/tree.component.ts","ng://@circlon/angular-tree-component/lib/components/tree-node.component.ts","ng://@circlon/angular-tree-component/lib/components/tree-node-content.component.ts","ng://@circlon/angular-tree-component/lib/components/tree-node-drop-slot.component.ts","ng://@circlon/angular-tree-component/lib/components/tree-node-expander.component.ts","ng://@circlon/angular-tree-component/lib/components/tree-node-children.component.ts","ng://@circlon/angular-tree-component/lib/mobx-angular/mobx-proxy.ts","ng://@circlon/angular-tree-component/lib/components/tree-node-collection.component.ts","ng://@circlon/angular-tree-component/lib/components/tree-node-wrapper.component.ts","ng://@circlon/angular-tree-component/lib/components/tree-node-checkbox.component.ts","ng://@circlon/angular-tree-component/lib/directives/tree-drop.directive.ts","ng://@circlon/angular-tree-component/lib/directives/tree-drag.directive.ts","ng://@circlon/angular-tree-component/lib/directives/tree-animate-open.directive.ts","ng://@circlon/angular-tree-component/lib/vendor/closest.ts","ng://@circlon/angular-tree-component/lib/angular-tree-component.module.ts"],"names":["TreeMobxAutorunDirective","templateRef","viewContainer","this","templateBindings","prototype","ngOnInit","view","createEmbeddedView","dispose","shouldDetach","detach","autoDetect","treeMobxAutorun","autorun","detectChanges","ngOnDestroy","Directive","args","selector","TemplateRef","ViewContainerRef","Input","KEYS","LEFT","UP","RIGHT","DOWN","ENTER","SPACE","CONTEXT_MENU","TREE_ACTIONS","TOGGLE_ACTIVE","tree","node","$event","toggleActivated","TOGGLE_ACTIVE_MULTI","TOGGLE_SELECTED","toggleSelected","ACTIVATE","setIsActive","DEACTIVATE","SELECT","setIsSelected","DESELECT","FOCUS","focus","TOGGLE_EXPANDED","hasChildren","toggleExpanded","EXPAND","expand","COLLAPSE","collapse","DRILL_DOWN","focusDrillDown","DRILL_UP","focusDrillUp","NEXT_NODE","focusNextNode","PREVIOUS_NODE","focusPreviousNode","MOVE_NODE","_a","from","to","ctrlKey","copyNode","moveNode","defaultActionMapping","mouse","click","dblClick","contextMenu","expanderClick","checkboxClick","drop","keys","TreeOptions","options","actionMapping","defaultsDeep","rtl","get","Object","defineProperty","hasChildrenField","childrenField","displayField","idField","isExpandedField","getChildren","levelPadding","useVirtualScroll","animateExpand","animateSpeed","animateAcceleration","undefined","scrollOnActivate","rootId","useCheckbox","useTriState","scrollContainer","allowDragoverStyling","getNodeClone","omit","assign","data","allowDrop","element","Function","allowDrag","nodeClass","nodeHeight","virtual","index","dropSlotHeight","isNumber","TREE_EVENTS","activate","deactivate","nodeActivate","nodeDeactivate","select","deselect","blur","initialized","updateData","event","loadNodeChildren","changeFilter","stateChange","TreeNode","parent","treeModel","_this","position","id","Math","floor","random","getField","_initChildren","autoLoadChildren","isHidden","isExpanded","isActive","isNodeFocused","isSelectable","isSelected","some","children","every","isAllSelected","level","__spread","path","_originalNode","length","isRoot","fireEvent","value","setField","key","_findAdjacentSibling","steps","skipHidden","siblings","_getParentsChildren","indexOf","findNextSibling","findPreviousSibling","getVisibleChildren","visibleChildren","filter","getFirstChild","first","getLastChild","last","findNextNode","goInside","findPreviousNode","previousSibling","_getLastOpenDescendant","realParent","lastChild","isCollapsed","getIndexInParent","isDescendantOf","getNodePadding","getClass","join","onDrop","mouseAction","dropOnNode","Promise","resolve","then","forEach","child","eventName","doForAll","fn","expandAll","collapseAll","ensureVisible","setIsExpanded","setExpandedNode","handler","reaction","fireImmediately","multi","setActiveNode","isLeaf","setSelectedNode","setActiveAndVisible","setTimeout","scrollIntoView","bind","force","virtualScroll","scroll","previousNode","getFocusedNode","setFocusedNode","setIsHidden","hide","show","actionName","setFocus","action","getSelfHeight","map","c","__decorate","computed","observable","TreeModel","eventNames","expandedNodeIds","selectedLeafNodeIds","activeNodeIds","hiddenNodeIds","focusedNodeId","firstUpdate","subscriptions","events","emit","subscribe","subscription","push","focusedNode","getActiveNode","activeNodes","getActiveNodes","getVisibleRoots","virtualRoot","getFirstRoot","roots","getLastRoot","focusedTree","isEmptyTree","getNodeById","nodes","compact","getNodeByPath","startNode","childId","shift","childNode","find","idStr","toString","getNodeBy","predicate","found","_b","__values","_c","next","done","foundInChildren","unsubscribeAll","unsubscribe","setData","update","virtualRootConfig","_calculateExpandedNodes","root","nextNode","_setActiveNodeMulti","_setActiveNodeSingle","setHiddenNodeIds","nodeIds","reduce","performKeyAction","keyCode","preventDefault","filterNodes","autoShow","filterFn","clearFilter","isString","toLowerCase","isFunction","console","error","ids","_filterNode","fromIndex","fromParent","canMoveNode","fromChildren","toChildren","originalNode","splice","toIndex","nodeCopy","getState","setState","state","subscribeToState","calculateExpandedNodes","isVisible","activeNode","Injectable","TreeDraggedElement","_draggedElement","set","draggedElement","isDragging","providedIn","TreeVirtualScroll","yBlocks","x","viewportHeight","viewport","_dispose","fixScroll","height","init","recalcPositions","__spread$1","isEnabled","_setYBlocks","_getPositionAfter","startPos","_getPositionAfterNode","clear","d","setViewport","scrollLeft","round","scrollTop","getBoundingClientRect","scrollToMiddle","scrollContainerHeight","scrollContainerTop","top","nodeTop","y","getViewportNodes","visibleNodes","firstIndex","binarySearch","lastIndex","viewportNodes","Y_OFFSET","i","maxY","max","totalHeight","condition","midIndex","LoadingComponent","Component","encapsulation","ViewEncapsulation","None","template","TreeViewportComponent","elementRef","ngZone","throttle","nativeElement","scrollEventHandler","ngAfterViewInit","el","runOutsideAngular","addEventListener","removeEventListener","getTotalHeight","providers","ElementRef","NgZone","TreeComponent","treeDraggedElement","name","EventEmitter","onKeydown","isFocused","includes","document","activeElement","tagName","onMousedown","isOutsideClick","startElement","nodeName","localName","parentElement","target","ngOnChanges","changes","currentValue","pick","sizeChanged","viewportComponent","ContentChild","static","ViewChild","Output","HostListener","TreeNodeComponent","TreeNodeContent","TreeNodeDropSlot","dropIndex","TreeNodeExpanderComponent","TreeNodeChildrenComponent","actionInternal","_i","arguments","mobxAction","apply","__spread$2","mobxComputed","mobxObservable","TreeNodeCollectionComponent","_nodes","setNodes","firstNode","n","nodeIndexes","compareStructural","trackNode","TreeNodeWrapperComponent","TreeNodeCheckboxComponent","TreeDropDirective","renderer","onDropCallback","onDragOverCallback","onDragLeaveCallback","onDragEnterCallback","_allowDrop","dragOverEventHandler","onDragOver","dragEnterEventHandler","onDragEnter","dragLeaveEventHandler","onDragLeave","addDisabledClass","addClass","removeDisabledClass","removeClass","Renderer2","TreeDragDirective","dragEventHandler","onDrag","ngDoCheck","setAttribute","treeDragEnabled","onDragStart","ev","dataTransfer","onDragEnd","TreeAnimateOpenDirective","viewContainerRef","_show","_isOpen","_animateOpen","_animateClose","_hide","innerElement","rootNodes","delta","ease","maxHeight","setStyle","setInterval","clearInterval","roundedMaxHeight","Element","matches","msMatchesSelector","webkitMatchesSelector","elements","ownerDocument","querySelectorAll","Boolean","nodeType","parentNode","TreeModule","NgModule","declarations","exports","imports","CommonModule"],"mappings":"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","sourcesContent":["import {\r\n  Directive,\r\n  ViewContainerRef,\r\n  TemplateRef,\r\n  OnInit,\r\n  OnDestroy,\r\n  Input,\r\n  EmbeddedViewRef\r\n} from '@angular/core';\r\nimport { autorun } from 'mobx';\r\n\r\n@Directive({ selector: '[treeMobxAutorun]' })\r\nexport class TreeMobxAutorunDirective implements OnInit, OnDestroy {\r\n  protected templateBindings = {};\r\n  protected dispose: any;\r\n  protected view: EmbeddedViewRef<any>;\r\n  @Input() treeMobxAutorun;\r\n\r\n  constructor(\r\n    protected templateRef: TemplateRef<any>,\r\n    protected viewContainer: ViewContainerRef\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.view = this.viewContainer.createEmbeddedView(this.templateRef);\r\n\r\n    if (this.dispose) {\r\n      this.dispose();\r\n    }\r\n\r\n    if (this.shouldDetach()) {\r\n      this.view.detach();\r\n    }\r\n    this.autoDetect(this.view);\r\n  }\r\n\r\n  shouldDetach() {\r\n    return this.treeMobxAutorun && this.treeMobxAutorun.detach;\r\n  }\r\n\r\n  autoDetect(view: EmbeddedViewRef<any>) {\r\n    this.dispose = autorun(() => view.detectChanges());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.dispose) {\r\n      this.dispose();\r\n    }\r\n  }\r\n}\r\n","export const KEYS = {\r\n  LEFT: 37,\r\n  UP: 38,\r\n  RIGHT: 39,\r\n  DOWN: 40,\r\n  ENTER: 13,\r\n  SPACE: 32,\r\n  CONTEXT_MENU: 32\r\n};\r\n","import { TreeNode } from './tree-node.model';\r\nimport { TreeModel } from './tree.model';\r\nimport { KEYS } from '../constants/keys';\r\nimport { ITreeOptions } from '../defs/api';\r\n\r\nimport { defaultsDeep, get, omit, isNumber } from 'lodash-es';\r\n\r\nexport interface IActionHandler {\r\n  (tree: TreeModel, node: TreeNode, $event: any, ...rest);\r\n}\r\n\r\nexport const TREE_ACTIONS = {\r\n  TOGGLE_ACTIVE: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleActivated(),\r\n  TOGGLE_ACTIVE_MULTI: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleActivated(true),\r\n  TOGGLE_SELECTED: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleSelected(),\r\n  ACTIVATE: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsActive(true),\r\n  DEACTIVATE: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsActive(false),\r\n  SELECT: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsSelected(true),\r\n  DESELECT: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsSelected(false),\r\n  FOCUS: (tree: TreeModel, node: TreeNode, $event: any) => node.focus(),\r\n  TOGGLE_EXPANDED: (tree: TreeModel, node: TreeNode, $event: any) => node.hasChildren && node.toggleExpanded(),\r\n  EXPAND: (tree: TreeModel, node: TreeNode, $event: any) => node.expand(),\r\n  COLLAPSE: (tree: TreeModel, node: TreeNode, $event: any) => node.collapse(),\r\n  DRILL_DOWN: (tree: TreeModel, node: TreeNode, $event: any) => tree.focusDrillDown(),\r\n  DRILL_UP: (tree: TreeModel, node: TreeNode, $event: any) => tree.focusDrillUp(),\r\n  NEXT_NODE: (tree: TreeModel, node: TreeNode, $event: any) =>  tree.focusNextNode(),\r\n  PREVIOUS_NODE: (tree: TreeModel, node: TreeNode, $event: any) =>  tree.focusPreviousNode(),\r\n  MOVE_NODE: (tree: TreeModel, node: TreeNode, $event: any, {from , to}: {from: any, to: any}) => {\r\n    // default action assumes from = node, to = {parent, index}\r\n    if ($event.ctrlKey) {\r\n      tree.copyNode(from, to);\r\n    } else {\r\n      tree.moveNode(from, to);\r\n    }\r\n  }\r\n};\r\n\r\nconst defaultActionMapping: IActionMapping = {\r\n  mouse: {\r\n    click: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n    dblClick: null,\r\n    contextMenu: null,\r\n    expanderClick: TREE_ACTIONS.TOGGLE_EXPANDED,\r\n    checkboxClick: TREE_ACTIONS.TOGGLE_SELECTED,\r\n    drop: TREE_ACTIONS.MOVE_NODE\r\n  },\r\n  keys: {\r\n    [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,\r\n    [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,\r\n    [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,\r\n    [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,\r\n    [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n    [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE\r\n  }\r\n};\r\n\r\nexport interface IActionMapping {\r\n  mouse?: {\r\n    click?: IActionHandler,\r\n    dblClick?: IActionHandler,\r\n    contextMenu?: IActionHandler,\r\n    expanderClick?: IActionHandler,\r\n    checkboxClick?: IActionHandler,\r\n    dragStart?: IActionHandler,\r\n    drag?: IActionHandler,\r\n    dragEnd?: IActionHandler,\r\n    dragOver?: IActionHandler,\r\n    dragLeave?: IActionHandler,\r\n    dragEnter?: IActionHandler,\r\n    drop?: IActionHandler,\r\n    mouseOver?: IActionHandler,\r\n    mouseOut?: IActionHandler\r\n  };\r\n  keys?: {\r\n    [key: number]: IActionHandler\r\n  };\r\n}\r\n\r\nexport class TreeOptions {\r\n  get hasChildrenField(): string { return this.options.hasChildrenField || 'hasChildren'; }\r\n  get childrenField(): string { return this.options.childrenField || 'children'; }\r\n  get displayField(): string { return this.options.displayField || 'name'; }\r\n  get idField(): string { return this.options.idField || 'id'; }\r\n  get isExpandedField(): string { return this.options.isExpandedField || 'isExpanded'; }\r\n  get getChildren(): any { return this.options.getChildren; }\r\n  get levelPadding(): number { return this.options.levelPadding || 0; }\r\n  get useVirtualScroll(): boolean { return this.options.useVirtualScroll; }\r\n  get animateExpand(): boolean { return this.options.animateExpand; }\r\n  get animateSpeed(): number { return this.options.animateSpeed || 1; }\r\n  get animateAcceleration(): number { return this.options.animateAcceleration || 1.2; }\r\n  get scrollOnActivate(): boolean { return this.options.scrollOnActivate === undefined ? true : this.options.scrollOnActivate; }\r\n  get rtl(): boolean { return !!this.options.rtl; }\r\n  get rootId(): any {return this.options.rootId; }\r\n  get useCheckbox(): boolean { return this.options.useCheckbox; }\r\n  get useTriState(): boolean { return this.options.useTriState === undefined ? true : this.options.useTriState; }\r\n  get scrollContainer(): HTMLElement { return this.options.scrollContainer; }\r\n  get allowDragoverStyling(): boolean { return this.options.allowDragoverStyling === undefined ? true : this.options.allowDragoverStyling; }\r\n  actionMapping: IActionMapping;\r\n\r\n  constructor(private options: ITreeOptions = {}) {\r\n    this.actionMapping = defaultsDeep({}, this.options.actionMapping, defaultActionMapping);\r\n    if (options.rtl) {\r\n      this.actionMapping.keys[KEYS.RIGHT] = <IActionHandler>get(options, ['actionMapping', 'keys', KEYS.RIGHT]) || TREE_ACTIONS.DRILL_UP;\r\n      this.actionMapping.keys[KEYS.LEFT] = <IActionHandler>get(options, ['actionMapping', 'keys', KEYS.LEFT]) || TREE_ACTIONS.DRILL_DOWN;\r\n    }\r\n  }\r\n\r\n  getNodeClone(node: TreeNode): any {\r\n    if (this.options.getNodeClone) {\r\n      return this.options.getNodeClone(node);\r\n    }\r\n\r\n    return omit(Object.assign({}, node.data), ['id']);\r\n  }\r\n\r\n  allowDrop(element, to, $event?): boolean {\r\n    if (this.options.allowDrop instanceof Function) {\r\n      return this.options.allowDrop(element, to, $event);\r\n    }\r\n    else {\r\n      return this.options.allowDrop === undefined ? true : this.options.allowDrop;\r\n    }\r\n  }\r\n\r\n  allowDrag(node: TreeNode): boolean {\r\n    if (this.options.allowDrag instanceof Function) {\r\n      return this.options.allowDrag(node);\r\n    } else {\r\n      return this.options.allowDrag;\r\n    }\r\n  }\r\n\r\n  nodeClass(node: TreeNode): string {\r\n    return this.options.nodeClass ? this.options.nodeClass(node) : '';\r\n  }\r\n\r\n  nodeHeight(node: TreeNode): number {\r\n    if (node.data.virtual) {\r\n      return 0;\r\n    }\r\n\r\n    let nodeHeight = this.options.nodeHeight || 22;\r\n\r\n    if (typeof nodeHeight === 'function') {\r\n      nodeHeight = nodeHeight(node);\r\n    }\r\n\r\n    // account for drop slots:\r\n    return nodeHeight + (node.index === 0 ?  2 : 1) * this.dropSlotHeight;\r\n  }\r\n\r\n  get dropSlotHeight(): number {\r\n    return isNumber(this.options.dropSlotHeight) ? this.options.dropSlotHeight : 2;\r\n  }\r\n}\r\n","export const TREE_EVENTS = {\r\n  toggleExpanded: 'toggleExpanded',\r\n  activate: 'activate',\r\n  deactivate: 'deactivate',\r\n  nodeActivate: 'nodeActivate',\r\n  nodeDeactivate: 'nodeDeactivate',\r\n  select: 'select',\r\n  deselect: 'deselect',\r\n  focus: 'focus',\r\n  blur: 'blur',\r\n  initialized: 'initialized',\r\n  updateData: 'updateData',\r\n  moveNode: 'moveNode',\r\n  copyNode: 'copyNode',\r\n  event: 'event',\r\n  loadNodeChildren: 'loadNodeChildren',\r\n  changeFilter: 'changeFilter',\r\n  stateChange: 'stateChange'\r\n};\r\n","import { observable, computed, reaction, autorun, action, IReactionDisposer } from 'mobx';\r\nimport { TreeModel } from './tree.model';\r\nimport { TreeOptions } from './tree-options.model';\r\nimport { ITreeNode } from '../defs/api';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\nimport { first, last, some, every } from 'lodash-es';\r\n\r\nexport class TreeNode implements ITreeNode {\r\n  private handler: IReactionDisposer;\r\n  @computed get isHidden() { return this.treeModel.isHidden(this); };\r\n  @computed get isExpanded() { return this.treeModel.isExpanded(this); };\r\n  @computed get isActive() { return this.treeModel.isActive(this); };\r\n  @computed get isFocused() { return this.treeModel.isNodeFocused(this); };\r\n  @computed get isSelected() {\r\n    if (this.isSelectable()) {\r\n        return this.treeModel.isSelected(this);\r\n    } else {\r\n      return some(this.children, (node: TreeNode) => node.isSelected);\r\n    }\r\n  };\r\n  @computed get isAllSelected() {\r\n    if (this.isSelectable()) {\r\n      return this.treeModel.isSelected(this);\r\n    } else {\r\n      return every(this.children, (node: TreeNode) => node.isAllSelected);\r\n    }\r\n  };\r\n  @computed get isPartiallySelected() {\r\n    return this.isSelected && !this.isAllSelected;\r\n  }\r\n\r\n  @observable children: TreeNode[];\r\n  @observable index: number;\r\n  @observable position = 0;\r\n  @observable height: number;\r\n  @computed get level(): number {\r\n    return this.parent ? this.parent.level + 1 : 0;\r\n  }\r\n  @computed get path(): string[] {\r\n    return this.parent ? [...this.parent.path, this.id] : [];\r\n  }\r\n\r\n  get elementRef(): any {\r\n    throw `Element Ref is no longer supported since introducing virtual scroll\\n\r\n      You may use a template to obtain a reference to the element`;\r\n  }\r\n\r\n  private _originalNode: any;\r\n  get originalNode() { return this._originalNode; };\r\n\r\n  constructor(public data: any, public parent: TreeNode, public treeModel: TreeModel, index: number) {\r\n    if (this.id === undefined || this.id === null) {\r\n      this.id = uuid();\r\n    } // Make sure there's a unique id without overriding existing ids to work with immutable data structures\r\n    this.index = index;\r\n\r\n    if (this.getField('children')) {\r\n      this._initChildren();\r\n    }\r\n    this.autoLoadChildren();\r\n  }\r\n\r\n  // helper get functions:\r\n  get hasChildren(): boolean {\r\n    return !!(this.getField('hasChildren') || (this.children && this.children.length > 0));\r\n  }\r\n  get isCollapsed(): boolean { return !this.isExpanded; }\r\n  get isLeaf(): boolean { return !this.hasChildren; }\r\n  get isRoot(): boolean { return this.parent.data.virtual; }\r\n  get realParent(): TreeNode { return this.isRoot ? null : this.parent; }\r\n\r\n  // proxy functions:\r\n  get options(): TreeOptions { return this.treeModel.options; }\r\n  fireEvent(event) { this.treeModel.fireEvent(event); }\r\n\r\n  // field accessors:\r\n  get displayField() {\r\n    return this.getField('display');\r\n  }\r\n\r\n  get id() {\r\n    return this.getField('id');\r\n  }\r\n\r\n  set id(value) {\r\n    this.setField('id', value);\r\n  }\r\n\r\n  getField(key) {\r\n    return this.data[this.options[`${key}Field`]];\r\n  }\r\n\r\n  setField(key, value) {\r\n    this.data[this.options[`${key}Field`]] = value;\r\n  }\r\n\r\n  // traversing:\r\n  _findAdjacentSibling(steps, skipHidden = false) {\r\n    const siblings = this._getParentsChildren(skipHidden);\r\n    const index = siblings.indexOf(this);\r\n\r\n    return siblings.length > index + steps ? siblings[index + steps] : null;\r\n  }\r\n\r\n  findNextSibling(skipHidden = false) {\r\n    return this._findAdjacentSibling(+1, skipHidden);\r\n  }\r\n\r\n  findPreviousSibling(skipHidden = false) {\r\n    return this._findAdjacentSibling(-1, skipHidden);\r\n  }\r\n\r\n  getVisibleChildren() {\r\n    return this.visibleChildren;\r\n  }\r\n\r\n  @computed get visibleChildren() {\r\n    return (this.children || []).filter((node) => !node.isHidden);\r\n  }\r\n\r\n  getFirstChild(skipHidden = false) {\r\n    let children = skipHidden ? this.visibleChildren : this.children;\r\n\r\n    return first(children || []);\r\n  }\r\n\r\n  getLastChild(skipHidden = false) {\r\n    let children = skipHidden ? this.visibleChildren : this.children;\r\n\r\n    return last(children || []);\r\n  }\r\n\r\n  findNextNode(goInside = true, skipHidden = false) {\r\n    return goInside && this.isExpanded && this.getFirstChild(skipHidden) ||\r\n           this.findNextSibling(skipHidden) ||\r\n           this.parent && this.parent.findNextNode(false, skipHidden);\r\n  }\r\n\r\n  findPreviousNode(skipHidden = false) {\r\n    let previousSibling = this.findPreviousSibling(skipHidden);\r\n    if (!previousSibling) {\r\n      return this.realParent;\r\n    }\r\n    return previousSibling._getLastOpenDescendant(skipHidden);\r\n  }\r\n\r\n  _getLastOpenDescendant(skipHidden = false) {\r\n    const lastChild = this.getLastChild(skipHidden);\r\n    return (this.isCollapsed || !lastChild)\r\n      ? this\r\n      : lastChild._getLastOpenDescendant(skipHidden);\r\n  }\r\n\r\n  private _getParentsChildren(skipHidden = false): any[] {\r\n    const children = this.parent &&\r\n      (skipHidden ? this.parent.getVisibleChildren() : this.parent.children);\r\n\r\n    return children || [];\r\n  }\r\n\r\n  private getIndexInParent(skipHidden = false) {\r\n    return this._getParentsChildren(skipHidden).indexOf(this);\r\n  }\r\n\r\n  isDescendantOf(node: TreeNode) {\r\n    if (this === node) return true;\r\n    else return this.parent && this.parent.isDescendantOf(node);\r\n  }\r\n\r\n  getNodePadding(): string {\r\n    return this.options.levelPadding * (this.level - 1) + 'px';\r\n  }\r\n\r\n  getClass(): string {\r\n    return [this.options.nodeClass(this), `tree-node-level-${ this.level }`].join(' ');\r\n  }\r\n\r\n  onDrop($event) {\r\n    this.mouseAction('drop', $event.event, {\r\n      from: $event.element,\r\n      to: { parent: this, index: 0, dropOnNode: true }\r\n    });\r\n  }\r\n\r\n  allowDrop = (element, $event?) => {\r\n    return this.options.allowDrop(element, { parent: this, index: 0 }, $event);\r\n  }\r\n\r\n  allowDragoverStyling = () => {\r\n    return this.options.allowDragoverStyling;\r\n  }\r\n\r\n  allowDrag() {\r\n    return this.options.allowDrag(this);\r\n  }\r\n\r\n\r\n  // helper methods:\r\n  loadNodeChildren() {\r\n    if (!this.options.getChildren) {\r\n      return Promise.resolve(); // Not getChildren method - for using redux\r\n    }\r\n    return Promise.resolve(this.options.getChildren(this))\r\n      .then((children) => {\r\n        if (children) {\r\n          this.setField('children', children);\r\n          this._initChildren();\r\n          if (this.options.useTriState && this.treeModel.isSelected(this)) {\r\n            this.setIsSelected(true);\r\n          }\r\n          this.children.forEach((child) => {\r\n            if (child.getField('isExpanded') && child.hasChildren) {\r\n              child.expand();\r\n            }\r\n          });\r\n      }}).then(() => {\r\n        this.fireEvent({\r\n          eventName: TREE_EVENTS.loadNodeChildren,\r\n          node: this\r\n        });\r\n      });\r\n  }\r\n\r\n  expand() {\r\n    if (!this.isExpanded) {\r\n      this.toggleExpanded();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  collapse() {\r\n    if (this.isExpanded) {\r\n      this.toggleExpanded();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  doForAll(fn: (node: ITreeNode) => any) {\r\n    Promise.resolve(fn(this)).then(() => {\r\n      if (this.children) {\r\n        this.children.forEach((child) => child.doForAll(fn));\r\n      }\r\n    });\r\n  }\r\n\r\n  expandAll() {\r\n    this.doForAll((node) => node.expand());\r\n  }\r\n\r\n  collapseAll() {\r\n    this.doForAll((node) => node.collapse());\r\n  }\r\n\r\n  ensureVisible() {\r\n    if (this.realParent) {\r\n      this.realParent.expand();\r\n      this.realParent.ensureVisible();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleExpanded() {\r\n    this.setIsExpanded(!this.isExpanded);\r\n\r\n    return this;\r\n  }\r\n\r\n  setIsExpanded(value) {\r\n    if (this.hasChildren) {\r\n      this.treeModel.setExpandedNode(this, value);\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  autoLoadChildren() {\r\n    this.handler =\r\n      reaction(\r\n        () => this.isExpanded,\r\n        (isExpanded) => {\r\n          if (!this.children && this.hasChildren && isExpanded) {\r\n            this.loadNodeChildren();\r\n          }\r\n        },\r\n        { fireImmediately: true }\r\n      );\r\n  }\r\n\r\n  dispose() {\r\n    if (this.children) {\r\n      this.children.forEach((child) => child.dispose());\r\n    }\r\n    if (this.handler) {\r\n      this.handler();\r\n    }\r\n    this.parent = null;\r\n    this.children = null;\r\n  }\r\n\r\n  setIsActive(value, multi = false) {\r\n    this.treeModel.setActiveNode(this, value, multi);\r\n    if (value) {\r\n      this.focus(this.options.scrollOnActivate);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  isSelectable() {\r\n    return this.isLeaf || !this.children || !this.options.useTriState;\r\n  }\r\n\r\n  @action setIsSelected(value) {\r\n    if (this.isSelectable()) {\r\n      this.treeModel.setSelectedNode(this, value);\r\n    } else {\r\n      this.visibleChildren.forEach((child) => child.setIsSelected(value));\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleSelected() {\r\n    this.setIsSelected(!this.isSelected);\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleActivated(multi = false) {\r\n    this.setIsActive(!this.isActive, multi);\r\n\r\n    return this;\r\n  }\r\n\r\n  setActiveAndVisible(multi = false) {\r\n    this.setIsActive(true, multi)\r\n      .ensureVisible();\r\n\r\n    setTimeout(this.scrollIntoView.bind(this));\r\n\r\n    return this;\r\n  }\r\n\r\n  scrollIntoView(force = false) {\r\n    this.treeModel.virtualScroll.scrollIntoView(this, force);\r\n  }\r\n\r\n  focus(scroll = true) {\r\n    let previousNode = this.treeModel.getFocusedNode();\r\n    this.treeModel.setFocusedNode(this);\r\n    if (scroll) {\r\n      this.scrollIntoView();\r\n    }\r\n    if (previousNode) {\r\n      this.fireEvent({ eventName: TREE_EVENTS.blur, node: previousNode });\r\n    }\r\n    this.fireEvent({ eventName: TREE_EVENTS.focus, node: this });\r\n\r\n    return this;\r\n  }\r\n\r\n  blur() {\r\n    let previousNode = this.treeModel.getFocusedNode();\r\n    this.treeModel.setFocusedNode(null);\r\n    if (previousNode) {\r\n      this.fireEvent({ eventName: TREE_EVENTS.blur, node: this });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  setIsHidden(value) {\r\n    this.treeModel.setIsHidden(this, value);\r\n  }\r\n\r\n  hide() {\r\n    this.setIsHidden(true);\r\n  }\r\n\r\n  show() {\r\n    this.setIsHidden(false);\r\n  }\r\n\r\n  mouseAction(actionName: string, $event, data: any = null) {\r\n    this.treeModel.setFocus(true);\r\n\r\n    const actionMapping = this.options.actionMapping.mouse;\r\n    const action = actionMapping[actionName];\r\n\r\n    if (action) {\r\n      action(this.treeModel, this, $event, data);\r\n    }\r\n  }\r\n\r\n  getSelfHeight() {\r\n    return this.options.nodeHeight(this);\r\n  }\r\n\r\n  @action _initChildren() {\r\n    this.children = this.getField('children')\r\n      .map((c, index) => new TreeNode(c, this, this.treeModel, index));\r\n  }\r\n}\r\n\r\nfunction uuid() {\r\n  return Math.floor(Math.random() * 10000000000000);\r\n}\r\n","import { Injectable, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { observable, computed, action, autorun } from 'mobx';\r\nimport { Subscription } from 'rxjs';\r\nimport { TreeNode } from './tree-node.model';\r\nimport { TreeOptions } from './tree-options.model';\r\nimport { TreeVirtualScroll } from './tree-virtual-scroll.model';\r\nimport { ITreeModel, IDType, IDTypeDictionary } from '../defs/api';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\nimport { first, last, compact, find, isString, isFunction } from 'lodash-es';\r\n\r\n@Injectable()\r\nexport class TreeModel implements ITreeModel, OnDestroy {\r\n  static focusedTree = null;\r\n\r\n  options: TreeOptions = new TreeOptions();\r\n  nodes: any[];\r\n  eventNames = Object.keys(TREE_EVENTS);\r\n  virtualScroll: TreeVirtualScroll;\r\n\r\n  @observable roots: TreeNode[];\r\n  @observable expandedNodeIds: IDTypeDictionary = {};\r\n  @observable selectedLeafNodeIds: IDTypeDictionary = {};\r\n  @observable activeNodeIds: IDTypeDictionary = {};\r\n  @observable hiddenNodeIds: IDTypeDictionary = {};\r\n  @observable focusedNodeId: IDType = null;\r\n  @observable virtualRoot: TreeNode;\r\n\r\n  private firstUpdate = true;\r\n  private events: any;\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  // events\r\n  fireEvent(event) {\r\n    event.treeModel = this;\r\n    this.events[event.eventName].emit(event);\r\n    this.events.event.emit(event);\r\n  }\r\n\r\n  subscribe(eventName, fn) {\r\n    const subscription = this.events[eventName].subscribe(fn);\r\n    this.subscriptions.push(subscription);\r\n  }\r\n\r\n\r\n  // getters\r\n  getFocusedNode(): TreeNode {\r\n    return this.focusedNode;\r\n  }\r\n\r\n\r\n  getActiveNode(): TreeNode {\r\n    return this.activeNodes[0];\r\n  }\r\n\r\n  getActiveNodes(): TreeNode[] {\r\n    return this.activeNodes;\r\n  }\r\n\r\n  getVisibleRoots() {\r\n    return this.virtualRoot.visibleChildren;\r\n  }\r\n\r\n  getFirstRoot(skipHidden = false) {\r\n    return first(skipHidden ? this.getVisibleRoots() : this.roots);\r\n  }\r\n\r\n  getLastRoot(skipHidden = false) {\r\n    return last(skipHidden ? this.getVisibleRoots() : this.roots);\r\n  }\r\n\r\n  get isFocused() {\r\n    return TreeModel.focusedTree === this;\r\n  }\r\n\r\n  isNodeFocused(node) {\r\n    return this.focusedNode === node;\r\n  }\r\n\r\n  isEmptyTree(): boolean {\r\n    return this.roots && this.roots.length === 0;\r\n  }\r\n\r\n  @computed get focusedNode() {\r\n    return this.focusedNodeId ? this.getNodeById(this.focusedNodeId) : null;\r\n  }\r\n\r\n  @computed get expandedNodes() {\r\n    const nodes = Object.keys(this.expandedNodeIds)\r\n      .filter((id) => this.expandedNodeIds[id])\r\n      .map((id) => this.getNodeById(id));\r\n\r\n    return compact(nodes);\r\n  }\r\n\r\n  @computed get activeNodes() {\r\n    const nodes = Object.keys(this.activeNodeIds)\r\n      .filter((id) => this.activeNodeIds[id])\r\n      .map((id) => this.getNodeById(id));\r\n\r\n    return compact(nodes);\r\n  }\r\n\r\n  @computed get hiddenNodes() {\r\n    const nodes = Object.keys(this.hiddenNodeIds)\r\n        .filter((id) => this.hiddenNodeIds[id])\r\n        .map((id) => this.getNodeById(id));\r\n\r\n    return compact(nodes);\r\n  }\r\n\r\n  @computed get selectedLeafNodes() {\r\n    const nodes = Object.keys(this.selectedLeafNodeIds)\r\n        .filter((id) => this.selectedLeafNodeIds[id])\r\n        .map((id) => this.getNodeById(id));\r\n\r\n    return compact(nodes);\r\n  }\r\n\r\n  // locating nodes\r\n  getNodeByPath(path: any[], startNode= null): TreeNode {\r\n    if (!path) return null;\r\n\r\n    startNode = startNode || this.virtualRoot;\r\n    if (path.length === 0) return startNode;\r\n\r\n    if (!startNode.children) return null;\r\n\r\n    const childId = path.shift();\r\n    const childNode = find(startNode.children, { id: childId });\r\n\r\n    if (!childNode) return null;\r\n\r\n    return this.getNodeByPath(path, childNode);\r\n  }\r\n\r\n  getNodeById(id) {\r\n    const idStr = id.toString();\r\n\r\n    return this.getNodeBy((node) => node.id.toString() === idStr);\r\n  }\r\n\r\n  getNodeBy(predicate, startNode = null) {\r\n    startNode = startNode || this.virtualRoot;\r\n\r\n    if (!startNode.children) return null;\r\n\r\n    const found = find(startNode.children, predicate);\r\n\r\n    if (found) { // found in children\r\n      return found;\r\n    } else { // look in children's children\r\n      for (let child of startNode.children) {\r\n        const foundInChildren = this.getNodeBy(predicate, child);\r\n        if (foundInChildren) return foundInChildren;\r\n      }\r\n    }\r\n  }\r\n\r\n  isExpanded(node) {\r\n    return this.expandedNodeIds[node.id];\r\n  }\r\n\r\n  isHidden(node) {\r\n    return this.hiddenNodeIds[node.id];\r\n  }\r\n\r\n  isActive(node) {\r\n    return this.activeNodeIds[node.id];\r\n  }\r\n\r\n  isSelected(node) {\r\n    return this.selectedLeafNodeIds[node.id];\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dispose();\r\n    this.unsubscribeAll();\r\n  }\r\n\r\n  dispose() {\r\n    // Dispose reactions of the replaced nodes\r\n    if (this.virtualRoot) {\r\n      this.virtualRoot.dispose();\r\n    }\r\n  }\r\n\r\n  unsubscribeAll() {\r\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    this.subscriptions = [];\r\n  }\r\n\r\n  // actions\r\n  @action setData({ nodes, options = null, events = null }: {nodes: any, options: any, events: any}) {\r\n    if (options) {\r\n      this.options = new TreeOptions(options);\r\n    }\r\n    if (events) {\r\n      this.events = events;\r\n    }\r\n    if (nodes) {\r\n      this.nodes = nodes;\r\n    }\r\n\r\n    this.update();\r\n  }\r\n\r\n  @action update() {\r\n    // Rebuild tree:\r\n    let virtualRootConfig = {\r\n      id: this.options.rootId,\r\n      virtual: true,\r\n      [this.options.childrenField]: this.nodes\r\n    };\r\n\r\n    this.dispose();\r\n\r\n    this.virtualRoot = new TreeNode(virtualRootConfig, null, this, 0);\r\n\r\n    this.roots = this.virtualRoot.children;\r\n\r\n    // Fire event:\r\n    if (this.firstUpdate) {\r\n      if (this.roots) {\r\n        this.firstUpdate = false;\r\n        this._calculateExpandedNodes();\r\n      }\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.updateData });\r\n    }\r\n  }\r\n\r\n\r\n  @action setFocusedNode(node) {\r\n    this.focusedNodeId = node ? node.id : null;\r\n  }\r\n\r\n  @action setFocus(value) {\r\n    TreeModel.focusedTree = value ? this : null;\r\n  }\r\n\r\n  @action doForAll(fn) {\r\n    this.roots.forEach((root) => root.doForAll(fn));\r\n  }\r\n\r\n  @action focusNextNode() {\r\n    let previousNode = this.getFocusedNode();\r\n    let nextNode = previousNode ? previousNode.findNextNode(true, true) : this.getFirstRoot(true);\r\n    if (nextNode) nextNode.focus();\r\n  }\r\n\r\n  @action focusPreviousNode() {\r\n    let previousNode = this.getFocusedNode();\r\n    let nextNode = previousNode ? previousNode.findPreviousNode(true) : this.getLastRoot(true);\r\n    if (nextNode) nextNode.focus();\r\n  }\r\n\r\n  @action focusDrillDown() {\r\n    let previousNode = this.getFocusedNode();\r\n    if (previousNode && previousNode.isCollapsed && previousNode.hasChildren) {\r\n      previousNode.toggleExpanded();\r\n    }\r\n    else {\r\n      let nextNode = previousNode ? previousNode.getFirstChild(true) : this.getFirstRoot(true);\r\n      if (nextNode) nextNode.focus();\r\n    }\r\n  }\r\n\r\n  @action focusDrillUp() {\r\n    let previousNode = this.getFocusedNode();\r\n    if (!previousNode) return;\r\n    if (previousNode.isExpanded) {\r\n      previousNode.toggleExpanded();\r\n    }\r\n    else {\r\n      let nextNode = previousNode.realParent;\r\n      if (nextNode) nextNode.focus();\r\n    }\r\n  }\r\n\r\n  @action setActiveNode(node, value, multi = false) {\r\n    if (multi) {\r\n      this._setActiveNodeMulti(node, value);\r\n    }\r\n    else {\r\n      this._setActiveNodeSingle(node, value);\r\n    }\r\n\r\n    if (value) {\r\n      node.focus(this.options.scrollOnActivate);\r\n      this.fireEvent({ eventName: TREE_EVENTS.activate, node });\r\n      this.fireEvent({ eventName: TREE_EVENTS.nodeActivate, node }); // For IE11\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.deactivate, node });\r\n      this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node }); // For IE11\r\n    }\r\n  }\r\n\r\n  @action setSelectedNode(node, value) {\r\n    this.selectedLeafNodeIds = Object.assign({}, this.selectedLeafNodeIds, {[node.id]: value});\r\n\r\n    if (value) {\r\n      node.focus();\r\n      this.fireEvent({ eventName: TREE_EVENTS.select, node });\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.deselect, node });\r\n    }\r\n  }\r\n\r\n  @action setExpandedNode(node, value) {\r\n    this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, {[node.id]: value});\r\n    this.fireEvent({ eventName: TREE_EVENTS.toggleExpanded, node, isExpanded: value });\r\n  }\r\n\r\n  @action expandAll() {\r\n    this.roots.forEach((root) => root.expandAll());\r\n  }\r\n\r\n  @action collapseAll() {\r\n    this.roots.forEach((root) => root.collapseAll());\r\n  }\r\n\r\n  @action setIsHidden(node, value) {\r\n    this.hiddenNodeIds = Object.assign({}, this.hiddenNodeIds, {[node.id]: value});\r\n  }\r\n\r\n  @action setHiddenNodeIds(nodeIds) {\r\n    this.hiddenNodeIds = nodeIds.reduce((hiddenNodeIds, id) => Object.assign(hiddenNodeIds, {\r\n      [id]: true\r\n    }), {});\r\n  }\r\n\r\n  performKeyAction(node, $event) {\r\n    const action = this.options.actionMapping.keys[$event.keyCode];\r\n    if (action) {\r\n      $event.preventDefault();\r\n      action(this, node, $event);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  @action filterNodes(filter, autoShow = true) {\r\n    let filterFn;\r\n\r\n    if (!filter) {\r\n      return this.clearFilter();\r\n    }\r\n\r\n    // support function and string filter\r\n    if (isString(filter)) {\r\n      filterFn = (node) => node.displayField.toLowerCase().indexOf(filter.toLowerCase()) !== -1;\r\n    }\r\n    else if (isFunction(filter)) {\r\n       filterFn = filter;\r\n    }\r\n    else {\r\n      console.error('Don\\'t know what to do with filter', filter);\r\n      console.error('Should be either a string or function');\r\n      return;\r\n    }\r\n\r\n    const ids = {};\r\n    this.roots.forEach((node) => this._filterNode(ids, node, filterFn, autoShow));\r\n    this.hiddenNodeIds = ids;\r\n    this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\r\n  }\r\n\r\n  @action clearFilter() {\r\n    this.hiddenNodeIds = {};\r\n    this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\r\n  }\r\n\r\n  @action moveNode(node, to) {\r\n    const fromIndex = node.getIndexInParent();\r\n    const fromParent = node.parent;\r\n\r\n    if (!this.canMoveNode(node, to, fromIndex)) return;\r\n\r\n    const fromChildren = fromParent.getField('children');\r\n\r\n    // If node doesn't have children - create children array\r\n    if (!to.parent.getField('children')) {\r\n      to.parent.setField('children', []);\r\n    }\r\n    const toChildren = to.parent.getField('children');\r\n\r\n    const originalNode = fromChildren.splice(fromIndex, 1)[0];\r\n\r\n    // Compensate for index if already removed from parent:\r\n    let toIndex = (fromParent === to.parent && to.index > fromIndex) ? to.index - 1 : to.index;\r\n\r\n    toChildren.splice(toIndex, 0, originalNode);\r\n\r\n    fromParent.treeModel.update();\r\n    if (to.parent.treeModel !== fromParent.treeModel) {\r\n      to.parent.treeModel.update();\r\n    }\r\n\r\n    this.fireEvent({\r\n      eventName: TREE_EVENTS.moveNode,\r\n      node: originalNode,\r\n      to: { parent: to.parent.data, index: toIndex },\r\n      from: { parent: fromParent.data, index: fromIndex}\r\n    });\r\n  }\r\n\r\n  @action copyNode(node, to) {\r\n    const fromIndex = node.getIndexInParent();\r\n\r\n    if (!this.canMoveNode(node, to, fromIndex)) return;\r\n\r\n    // If node doesn't have children - create children array\r\n    if (!to.parent.getField('children')) {\r\n      to.parent.setField('children', []);\r\n    }\r\n    const toChildren = to.parent.getField('children');\r\n\r\n    const nodeCopy = this.options.getNodeClone(node);\r\n\r\n    toChildren.splice(to.index, 0, nodeCopy);\r\n\r\n    node.treeModel.update();\r\n    if (to.parent.treeModel !== node.treeModel) {\r\n      to.parent.treeModel.update();\r\n    }\r\n\r\n    this.fireEvent({ eventName: TREE_EVENTS.copyNode, node: nodeCopy, to: { parent: to.parent.data, index: to.index } });\r\n  }\r\n\r\n  getState() {\r\n    return {\r\n      expandedNodeIds: this.expandedNodeIds,\r\n      selectedLeafNodeIds: this.selectedLeafNodeIds,\r\n      activeNodeIds: this.activeNodeIds,\r\n      hiddenNodeIds: this.hiddenNodeIds,\r\n      focusedNodeId: this.focusedNodeId\r\n    };\r\n  }\r\n\r\n  @action setState(state) {\r\n    if (!state) return;\r\n\r\n    Object.assign(this, {\r\n      expandedNodeIds: state.expandedNodeIds || {},\r\n      selectedLeafNodeIds: state.selectedLeafNodeIds || {},\r\n      activeNodeIds: state.activeNodeIds || {},\r\n      hiddenNodeIds: state.hiddenNodeIds || {},\r\n      focusedNodeId: state.focusedNodeId\r\n    });\r\n  }\r\n\r\n  subscribeToState(fn) {\r\n    autorun(() => fn(this.getState()));\r\n  }\r\n\r\n  canMoveNode(node, to, fromIndex = undefined) {\r\n    const fromNodeIndex = fromIndex || node.getIndexInParent();\r\n\r\n    // same node:\r\n    if (node.parent === to.parent && fromIndex === to.index) {\r\n      return false;\r\n    }\r\n\r\n    return !to.parent.isDescendantOf(node);\r\n  }\r\n\r\n  calculateExpandedNodes() {\r\n      this._calculateExpandedNodes();\r\n  }\r\n\r\n  // private methods\r\n  private _filterNode(ids, node, filterFn, autoShow) {\r\n    // if node passes function then it's visible\r\n    let isVisible = filterFn(node);\r\n\r\n    if (node.children) {\r\n      // if one of node's children passes filter then this node is also visible\r\n      node.children.forEach((child) => {\r\n        if (this._filterNode(ids, child, filterFn, autoShow)) {\r\n          isVisible = true;\r\n        }\r\n      });\r\n    }\r\n\r\n    // mark node as hidden\r\n    if (!isVisible) {\r\n      ids[node.id] = true;\r\n    }\r\n    // auto expand parents to make sure the filtered nodes are visible\r\n    if (autoShow && isVisible) {\r\n      node.ensureVisible();\r\n    }\r\n    return isVisible;\r\n  }\r\n\r\n  private _calculateExpandedNodes(startNode = null) {\r\n    startNode = startNode || this.virtualRoot;\r\n\r\n    if (startNode.data[this.options.isExpandedField]) {\r\n      this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, {[startNode.id]: true});\r\n    }\r\n    if (startNode.children) {\r\n      startNode.children.forEach((child) => this._calculateExpandedNodes(child));\r\n    }\r\n  }\r\n\r\n  private _setActiveNodeSingle(node, value) {\r\n    // Deactivate all other nodes:\r\n    this.activeNodes\r\n      .filter((activeNode) => activeNode !== node)\r\n      .forEach((activeNode) => {\r\n        this.fireEvent({ eventName: TREE_EVENTS.deactivate, node: activeNode });\r\n        this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node: activeNode }); // For IE11\r\n      });\r\n\r\n    if (value) {\r\n      this.activeNodeIds = {[node.id]: true};\r\n    }\r\n    else {\r\n      this.activeNodeIds = {};\r\n    }\r\n  }\r\n\r\n  private _setActiveNodeMulti(node, value) {\r\n    this.activeNodeIds = Object.assign({}, this.activeNodeIds, {[node.id]: value});\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TreeDraggedElement {\r\n  _draggedElement: any = null;\r\n\r\n  set(draggedElement: any) {\r\n    this._draggedElement = draggedElement;\r\n  }\r\n\r\n  get(): any {\r\n    return this._draggedElement;\r\n  }\r\n\r\n  isDragging() {\r\n    return !!this.get();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { observable, computed, action, autorun, reaction } from 'mobx';\r\nimport { TreeModel } from './tree.model';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\nconst Y_OFFSET = 500; // Extra pixels outside the viewport, in each direction, to render nodes in\r\nconst Y_EPSILON = 150; // Minimum pixel change required to recalculate the rendered nodes\r\n\r\n@Injectable()\r\nexport class TreeVirtualScroll {\r\n  private _dispose: any;\r\n\r\n  @observable yBlocks = 0;\r\n  @observable x = 0;\r\n  @observable viewportHeight = null;\r\n  viewport = null;\r\n\r\n  @computed get y() {\r\n    return this.yBlocks * Y_EPSILON;\r\n  }\r\n\r\n  @computed get totalHeight() {\r\n    return this.treeModel.virtualRoot ? this.treeModel.virtualRoot.height : 0;\r\n  }\r\n\r\n  constructor(private treeModel: TreeModel) {\r\n    treeModel.virtualScroll = this;\r\n    this._dispose = [autorun(() => this.fixScroll())];\r\n  }\r\n\r\n  fireEvent(event) {\r\n    this.treeModel.fireEvent(event);\r\n  }\r\n\r\n  init() {\r\n    const fn = this.recalcPositions.bind(this);\r\n\r\n    fn();\r\n    this._dispose = [\r\n      ...this._dispose,\r\n      reaction(() => this.treeModel.roots, fn),\r\n      reaction(() => this.treeModel.expandedNodeIds, fn),\r\n      reaction(() => this.treeModel.hiddenNodeIds, fn)\r\n    ];\r\n    this.treeModel.subscribe(TREE_EVENTS.loadNodeChildren, fn);\r\n  }\r\n\r\n  isEnabled() {\r\n    return this.treeModel.options.useVirtualScroll;\r\n  }\r\n\r\n  @action private _setYBlocks(value) {\r\n    this.yBlocks = value;\r\n  }\r\n\r\n  @action recalcPositions() {\r\n    this.treeModel.virtualRoot.height = this._getPositionAfter(this.treeModel.getVisibleRoots(), 0);\r\n  }\r\n\r\n  private _getPositionAfter(nodes, startPos) {\r\n    let position = startPos;\r\n\r\n    nodes.forEach((node) => {\r\n      node.position = position;\r\n      position = this._getPositionAfterNode(node, position);\r\n    });\r\n    return position;\r\n  }\r\n\r\n  private _getPositionAfterNode(node, startPos) {\r\n    let position = node.getSelfHeight() + startPos;\r\n\r\n    if (node.children && node.isExpanded) { // TBD: consider loading component as well\r\n      position = this._getPositionAfter(node.visibleChildren, position);\r\n    }\r\n    node.height = position - startPos;\r\n    return position;\r\n  }\r\n\r\n\r\n  clear() {\r\n    this._dispose.forEach((d) => d());\r\n  }\r\n\r\n  @action setViewport(viewport) {\r\n    Object.assign(this, {\r\n      viewport,\r\n      x: viewport.scrollLeft,\r\n      yBlocks: Math.round(viewport.scrollTop / Y_EPSILON),\r\n      viewportHeight: viewport.getBoundingClientRect ? viewport.getBoundingClientRect().height : 0\r\n    });\r\n  }\r\n\r\n  @action scrollIntoView(node, force, scrollToMiddle = true) {\r\n    if (node.options.scrollContainer) {\r\n      const scrollContainer = node.options.scrollContainer;\r\n      const scrollContainerHeight = scrollContainer.getBoundingClientRect().height;\r\n      const scrollContainerTop = scrollContainer.getBoundingClientRect().top;\r\n      const nodeTop = this.viewport.getBoundingClientRect().top + node.position - scrollContainerTop;\r\n\r\n      if (force || // force scroll to node\r\n        nodeTop < scrollContainer.scrollTop || // node is above scroll container\r\n        nodeTop + node.getSelfHeight() > scrollContainer.scrollTop + scrollContainerHeight) { // node is below container\r\n        scrollContainer.scrollTop = scrollToMiddle ?\r\n          nodeTop - scrollContainerHeight / 2 : // scroll to middle\r\n          nodeTop; // scroll to start\r\n      }\r\n    } else {\r\n      if (force || // force scroll to node\r\n        node.position < this.y || // node is above viewport\r\n        node.position + node.getSelfHeight() > this.y + this.viewportHeight) { // node is below viewport\r\n        if (this.viewport) {\r\n          this.viewport.scrollTop = scrollToMiddle ?\r\n          node.position - this.viewportHeight / 2 : // scroll to middle\r\n          node.position; // scroll to start\r\n\r\n          this._setYBlocks(Math.floor(this.viewport.scrollTop / Y_EPSILON));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getViewportNodes(nodes) {\r\n    if (!nodes) return [];\r\n\r\n    const visibleNodes = nodes.filter((node) => !node.isHidden);\r\n\r\n    if (!this.isEnabled()) return visibleNodes;\r\n\r\n    if (!this.viewportHeight || !visibleNodes.length) return [];\r\n\r\n    // Search for first node in the viewport using binary search\r\n    // Look for first node that starts after the beginning of the viewport (with buffer)\r\n    // Or that ends after the beginning of the viewport\r\n    const firstIndex = binarySearch(visibleNodes, (node) => {\r\n      return (node.position + Y_OFFSET > this.y) ||\r\n             (node.position + node.height > this.y);\r\n    });\r\n\r\n    // Search for last node in the viewport using binary search\r\n    // Look for first node that starts after the end of the viewport (with buffer)\r\n    const lastIndex = binarySearch(visibleNodes, (node) => {\r\n      return node.position - Y_OFFSET > this.y + this.viewportHeight;\r\n    }, firstIndex);\r\n\r\n    const viewportNodes = [];\r\n\r\n    // Loading async top nodes' children is too long.\r\n    // It happens when first node is visible withing viewport range (including Y_OFFSET).\r\n    // In that case firstIndex == 0 and lastIndex == visibleNodes.length - 1 (e.g. 1000),\r\n    // which means that it loops through every visibleNodes item and push them into viewportNodes array.\r\n    // lastIndex should not equal visibleNodes.length - 1, but something around 50-100 (depending on the viewport)\r\n    const nodeHeight = visibleNodes[0].treeModel.options.options.nodeHeight;\r\n    const renderedNodesMaxLength = (Y_OFFSET * 2 + this.viewportHeight) / nodeHeight;\r\n\r\n    // Something is probably wrong, prevent nodes from being pushed to an array.\r\n    if (lastIndex - firstIndex > renderedNodesMaxLength) {\r\n      return [];\r\n    }\r\n\r\n    for (let i = firstIndex; i <= lastIndex; i++) {\r\n      viewportNodes.push(visibleNodes[i]);\r\n    }\r\n\r\n    return viewportNodes;\r\n  }\r\n\r\n  fixScroll() {\r\n    const maxY = Math.max(0, this.totalHeight - this.viewportHeight);\r\n\r\n    if (this.y < 0) this._setYBlocks(0);\r\n    if (this.y > maxY) this._setYBlocks(maxY / Y_EPSILON);\r\n  }\r\n}\r\n\r\nfunction binarySearch(nodes, condition, firstIndex = 0) {\r\n  let index = firstIndex;\r\n  let toIndex = nodes.length - 1;\r\n\r\n  while (index !== toIndex) {\r\n    let midIndex = Math.floor((index + toIndex) / 2);\r\n\r\n    if (condition(nodes[midIndex])) {\r\n      toIndex = midIndex;\r\n    }\r\n    else {\r\n      if (index === midIndex) index = toIndex;\r\n      else index = midIndex;\r\n    }\r\n  }\r\n  return index;\r\n}\r\n","import { Component, Input, TemplateRef, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  encapsulation: ViewEncapsulation.None,\r\n  selector: 'tree-loading-component',\r\n  template: `\r\n    <span *ngIf=\"!template\">loading...</span>\r\n    <ng-container\r\n      [ngTemplateOutlet]=\"template\"\r\n      [ngTemplateOutletContext]=\"{ $implicit: node }\">\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class LoadingComponent {\r\n  @Input() template: TemplateRef<any>;\r\n  @Input() node: TreeNode;\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  ViewEncapsulation,\r\n  AfterViewInit,\r\n  OnInit,\r\n  OnDestroy,\r\n  NgZone\r\n} from '@angular/core';\r\nimport { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';\r\nimport { TREE_EVENTS } from '../constants/events';\r\nimport { throttle } from 'lodash-es';\r\n\r\n@Component({\r\n  selector: 'tree-viewport',\r\n  styles: [],\r\n  providers: [TreeVirtualScroll],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div [style.height]=\"getTotalHeight()\">\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeViewportComponent implements AfterViewInit, OnInit, OnDestroy {\r\n  setViewport = throttle(() => {\r\n    this.virtualScroll.setViewport(this.elementRef.nativeElement);\r\n  }, 17);\r\n  private readonly scrollEventHandler: ($event: Event) => void;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    private ngZone: NgZone,\r\n    public virtualScroll: TreeVirtualScroll\r\n  ) {\r\n    this.scrollEventHandler = this.setViewport.bind(this);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.virtualScroll.init();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    setTimeout(() => {\r\n      this.setViewport();\r\n      this.virtualScroll.fireEvent({ eventName: TREE_EVENTS.initialized });\r\n    });\r\n    let el: HTMLElement = this.elementRef.nativeElement;\r\n    this.ngZone.runOutsideAngular(() => {\r\n      el.addEventListener('scroll', this.scrollEventHandler);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.virtualScroll.clear();\r\n    let el: HTMLElement = this.elementRef.nativeElement;\r\n    el.removeEventListener('scroll', this.scrollEventHandler);\r\n  }\r\n\r\n  getTotalHeight() {\r\n    return (\r\n      (this.virtualScroll.isEnabled() &&\r\n        this.virtualScroll.totalHeight + 'px') ||\r\n      'auto'\r\n    );\r\n  }\r\n}\r\n","import { Component, ContentChild, EventEmitter, HostListener, Input, OnChanges, Output, TemplateRef, ViewChild } from '@angular/core';\r\nimport { TreeModel } from '../models/tree.model';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\nimport { TreeOptions } from '../models/tree-options.model';\r\nimport { ITreeOptions } from '../defs/api';\r\nimport { TreeViewportComponent } from './tree-viewport.component';\r\n\r\nimport { includes, pick } from 'lodash-es';\r\n\r\n@Component({\r\n  selector: 'Tree, tree-root',\r\n  providers: [TreeModel],\r\n  styles: [],\r\n  template: `\r\n      <tree-viewport #viewport>\r\n          <div\r\n                  class=\"angular-tree-component\"\r\n                  [class.node-dragging]=\"treeDraggedElement.isDragging()\"\r\n                  [class.angular-tree-component-rtl]=\"treeModel.options.rtl\">\r\n              <tree-node-collection\r\n                      *ngIf=\"treeModel.roots\"\r\n                      [nodes]=\"treeModel.roots\"\r\n                      [treeModel]=\"treeModel\"\r\n                      [templates]=\"{\r\n            loadingTemplate: loadingTemplate,\r\n            treeNodeTemplate: treeNodeTemplate,\r\n            treeNodeWrapperTemplate: treeNodeWrapperTemplate,\r\n            treeNodeFullTemplate: treeNodeFullTemplate\r\n          }\">\r\n              </tree-node-collection>\r\n              <tree-node-drop-slot\r\n                      class=\"empty-tree-drop-slot\"\r\n                      *ngIf=\"treeModel.isEmptyTree()\"\r\n                      [dropIndex]=\"0\"\r\n                      [node]=\"treeModel.virtualRoot\">\r\n              </tree-node-drop-slot>\r\n          </div>\r\n      </tree-viewport>\r\n  `\r\n})\r\nexport class TreeComponent implements OnChanges {\r\n  _nodes: any[];\r\n  _options: TreeOptions;\r\n\r\n  @ContentChild('loadingTemplate', { static: false }) loadingTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeTemplate', { static: false }) treeNodeTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeWrapperTemplate', { static: false }) treeNodeWrapperTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeFullTemplate', { static: false }) treeNodeFullTemplate: TemplateRef<any>;\r\n  @ViewChild('viewport', { static: false }) viewportComponent: TreeViewportComponent;\r\n\r\n  // Will be handled in ngOnChanges\r\n  @Input() set nodes(nodes: any[]) {\r\n  };\r\n\r\n  @Input() set options(options: ITreeOptions) {\r\n  };\r\n\r\n  @Input() set focused(value: boolean) {\r\n    this.treeModel.setFocus(value);\r\n  }\r\n\r\n  @Input() set state(state) {\r\n    this.treeModel.setState(state);\r\n  }\r\n\r\n  @Output() toggleExpanded;\r\n  @Output() activate;\r\n  @Output() deactivate;\r\n  @Output() nodeActivate;\r\n  @Output() nodeDeactivate;\r\n  @Output() select;\r\n  @Output() deselect;\r\n  @Output() focus;\r\n  @Output() blur;\r\n  @Output() updateData;\r\n  @Output() initialized;\r\n  @Output() moveNode;\r\n  @Output() copyNode;\r\n  @Output() loadNodeChildren;\r\n  @Output() changeFilter;\r\n  @Output() event;\r\n  @Output() stateChange;\r\n\r\n  constructor(\r\n    public treeModel: TreeModel,\r\n    public treeDraggedElement: TreeDraggedElement) {\r\n\r\n    treeModel.eventNames.forEach((name) => this[name] = new EventEmitter());\r\n    treeModel.subscribeToState((state) => this.stateChange.emit(state));\r\n  }\r\n\r\n  @HostListener('body: keydown', ['$event'])\r\n  onKeydown($event) {\r\n    if (!this.treeModel.isFocused) return;\r\n    if (includes(['input', 'textarea'],\r\n      document.activeElement.tagName.toLowerCase())) return;\r\n\r\n    const focusedNode = this.treeModel.getFocusedNode();\r\n\r\n    this.treeModel.performKeyAction(focusedNode, $event);\r\n  }\r\n\r\n  @HostListener('body: mousedown', ['$event'])\r\n  onMousedown($event) {\r\n    function isOutsideClick(startElement: Element, nodeName: string) {\r\n      return !startElement ? true : startElement.localName === nodeName ? false : isOutsideClick(startElement.parentElement, nodeName);\r\n    }\r\n\r\n    if (isOutsideClick($event.target, 'tree-root')) {\r\n      this.treeModel.setFocus(false);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.options || changes.nodes) {\r\n      this.treeModel.setData({\r\n        options: changes.options && changes.options.currentValue,\r\n        nodes: changes.nodes && changes.nodes.currentValue,\r\n        events: pick(this, this.treeModel.eventNames)\r\n      });\r\n    }\r\n  }\r\n\r\n  sizeChanged() {\r\n    this.viewportComponent.setViewport();\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'TreeNode, tree-node',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div\r\n        *ngIf=\"!templates.treeNodeFullTemplate\"\r\n        [class]=\"node.getClass()\"\r\n        [class.tree-node]=\"true\"\r\n        [class.tree-node-expanded]=\"node.isExpanded && node.hasChildren\"\r\n        [class.tree-node-collapsed]=\"node.isCollapsed && node.hasChildren\"\r\n        [class.tree-node-leaf]=\"node.isLeaf\"\r\n        [class.tree-node-active]=\"node.isActive\"\r\n        [class.tree-node-focused]=\"node.isFocused\"\r\n      >\r\n        <tree-node-drop-slot\r\n          *ngIf=\"index === 0\"\r\n          [dropIndex]=\"node.index\"\r\n          [node]=\"node.parent\"\r\n        ></tree-node-drop-slot>\r\n\r\n        <tree-node-wrapper\r\n          [node]=\"node\"\r\n          [index]=\"index\"\r\n          [templates]=\"templates\"\r\n        ></tree-node-wrapper>\r\n\r\n        <tree-node-children\r\n          [node]=\"node\"\r\n          [templates]=\"templates\"\r\n        ></tree-node-children>\r\n        <tree-node-drop-slot\r\n          [dropIndex]=\"node.index + 1\"\r\n          [node]=\"node.parent\"\r\n        ></tree-node-drop-slot>\r\n      </div>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"templates.treeNodeFullTemplate\"\r\n        [ngTemplateOutletContext]=\"{\r\n          $implicit: node,\r\n          node: node,\r\n          index: index,\r\n          templates: templates\r\n        }\"\r\n      >\r\n      </ng-container>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeComponent {\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() templates: any;\r\n}\r\n","import { Component, Input, ViewEncapsulation, TemplateRef } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-content',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n  <span *ngIf=\"!template\">{{ node.displayField }}</span>\r\n  <ng-container\r\n    [ngTemplateOutlet]=\"template\"\r\n    [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index }\">\r\n  </ng-container>`,\r\n})\r\nexport class TreeNodeContent {\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() template: TemplateRef<any>;\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'TreeNodeDropSlot, tree-node-drop-slot',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <div\r\n      class=\"node-drop-slot\"\r\n      (treeDrop)=\"onDrop($event)\"\r\n      [treeAllowDrop]=\"allowDrop.bind(this)\"\r\n      [allowDragoverStyling]=\"true\">\r\n    </div>\r\n  `\r\n})\r\nexport class TreeNodeDropSlot {\r\n  @Input() node: TreeNode;\r\n  @Input() dropIndex: number;\r\n\r\n  onDrop($event) {\r\n    this.node.mouseAction('drop', $event.event, {\r\n      from: $event.element,\r\n      to: { parent: this.node, index: this.dropIndex }\r\n    });\r\n  }\r\n\r\n  allowDrop(element, $event) {\r\n    return this.node.options.allowDrop(element, { parent: this.node, index: this.dropIndex }, $event);\r\n  }\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-expander',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <span\r\n        *ngIf=\"node.hasChildren\"\r\n        [class.toggle-children-wrapper-expanded]=\"node.isExpanded\"\r\n        [class.toggle-children-wrapper-collapsed]=\"node.isCollapsed\"\r\n        class=\"toggle-children-wrapper\"\r\n        (click)=\"node.mouseAction('expanderClick', $event)\"\r\n      >\r\n        <span class=\"toggle-children\"></span>\r\n      </span>\r\n      <span *ngIf=\"!node.hasChildren\" class=\"toggle-children-placeholder\">\r\n      </span>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeExpanderComponent {\r\n  @Input() node: TreeNode;\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-children',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div\r\n        [class.tree-children]=\"true\"\r\n        [class.tree-children-no-padding]=\"node.options.levelPadding\"\r\n        *treeAnimateOpen=\"\r\n          node.isExpanded;\r\n          speed: node.options.animateSpeed;\r\n          acceleration: node.options.animateAcceleration;\r\n          enabled: node.options.animateExpand\r\n        \"\r\n      >\r\n        <tree-node-collection\r\n          *ngIf=\"node.children\"\r\n          [nodes]=\"node.children\"\r\n          [templates]=\"templates\"\r\n          [treeModel]=\"node.treeModel\"\r\n        >\r\n        </tree-node-collection>\r\n        <tree-loading-component\r\n          [style.padding-left]=\"node.getNodePadding()\"\r\n          class=\"tree-node-loading\"\r\n          *ngIf=\"!node.children\"\r\n          [template]=\"templates.loadingTemplate\"\r\n          [node]=\"node\"\r\n        ></tree-loading-component>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeChildrenComponent {\r\n  @Input() node: TreeNode;\r\n  @Input() templates: any;\r\n}\r\n","import { action as mobxAction } from 'mobx';\r\nimport { computed as mobxComputed } from 'mobx';\r\nimport { observable as mobxObservable } from 'mobx';\r\n\r\n// Re-export mobx operators to be able to use inside components with AOT:\r\nexport function actionInternal(...args) {\r\n  return (mobxAction as any)(...args);\r\n}\r\nexport const action: typeof mobxAction = Object.assign(\r\n  actionInternal,\r\n  mobxAction\r\n) as any;\r\n\r\nfunction computedInternal(...args) {\r\n  return (mobxComputed as any)(...args);\r\n}\r\nexport const computed: typeof mobxComputed = Object.assign(\r\n  computedInternal,\r\n  mobxComputed\r\n) as any;\r\n\r\nfunction observableInternal(...args) {\r\n  return (mobxObservable as any)(...args);\r\n}\r\n\r\nexport const observable: typeof mobxObservable = Object.assign(\r\n  observableInternal,\r\n  mobxObservable\r\n) as any;\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { reaction } from 'mobx';\r\nimport { observable, computed, action } from '../mobx-angular/mobx-proxy';\r\nimport { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';\r\nimport { TreeNode } from '../models/tree-node.model';\r\nimport { TreeModel } from '../models/tree.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-collection',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div [style.margin-top]=\"marginTop\">\r\n        <tree-node\r\n          *ngFor=\"let node of viewportNodes; let i = index; trackBy: trackNode\"\r\n          [node]=\"node\"\r\n          [index]=\"i\"\r\n          [templates]=\"templates\"\r\n        >\r\n        </tree-node>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeCollectionComponent implements OnInit, OnDestroy {\r\n  @Input()\r\n  get nodes() {\r\n    return this._nodes;\r\n  }\r\n  set nodes(nodes) {\r\n    this.setNodes(nodes);\r\n  }\r\n\r\n  @Input() treeModel: TreeModel;\r\n\r\n  @observable _nodes;\r\n  private virtualScroll: TreeVirtualScroll; // Cannot inject this, because we might be inside treeNodeTemplateFull\r\n  @Input() templates;\r\n\r\n  @observable viewportNodes: TreeNode[];\r\n\r\n  @computed get marginTop(): string {\r\n    const firstNode =\r\n      this.viewportNodes && this.viewportNodes.length && this.viewportNodes[0];\r\n    const relativePosition =\r\n      firstNode && firstNode.parent\r\n        ? firstNode.position -\r\n          firstNode.parent.position -\r\n          firstNode.parent.getSelfHeight()\r\n        : 0;\r\n\r\n    return `${relativePosition}px`;\r\n  }\r\n\r\n  _dispose = [];\r\n\r\n  @action setNodes(nodes) {\r\n    this._nodes = nodes;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.virtualScroll = this.treeModel.virtualScroll;\r\n    this._dispose = [\r\n      // return node indexes so we can compare structurally,\r\n      reaction(\r\n        () => {\r\n          return this.virtualScroll\r\n            .getViewportNodes(this.nodes)\r\n            .map(n => n.index);\r\n        },\r\n        nodeIndexes => {\r\n          this.viewportNodes = nodeIndexes.map(i => this.nodes[i]);\r\n        },\r\n        { compareStructural: true, fireImmediately: true } as any\r\n      ),\r\n      reaction(\r\n        () => this.nodes,\r\n        nodes => {\r\n          this.viewportNodes = this.virtualScroll.getViewportNodes(nodes);\r\n        }\r\n      )\r\n    ];\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._dispose.forEach(d => d());\r\n  }\r\n\r\n  trackNode(index, node) {\r\n    return node.id;\r\n  }\r\n}\r\n","import { Component , Input , ViewEncapsulation , TemplateRef } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-wrapper' ,\r\n  encapsulation: ViewEncapsulation.None ,\r\n  styles: [] ,\r\n  template: `\r\n      <div *ngIf=\"!templates.treeNodeWrapperTemplate\" class=\"node-wrapper\" [style.padding-left]=\"node.getNodePadding()\">\r\n          <tree-node-checkbox *ngIf=\"node.options.useCheckbox\" [node]=\"node\"></tree-node-checkbox>\r\n          <tree-node-expander [node]=\"node\"></tree-node-expander>\r\n          <div class=\"node-content-wrapper\"\r\n               [class.node-content-wrapper-active]=\"node.isActive\"\r\n               [class.node-content-wrapper-focused]=\"node.isFocused\"\r\n               (click)=\"node.mouseAction('click', $event)\"\r\n               (dblclick)=\"node.mouseAction('dblClick', $event)\"\r\n               (mouseover)=\"node.mouseAction('mouseOver', $event)\"\r\n               (mouseout)=\"node.mouseAction('mouseOut', $event)\"\r\n               (contextmenu)=\"node.mouseAction('contextMenu', $event)\"\r\n               (treeDrop)=\"node.onDrop($event)\"\r\n               (treeDropDragOver)=\"node.mouseAction('dragOver', $event)\"\r\n               (treeDropDragLeave)=\"node.mouseAction('dragLeave', $event)\"\r\n               (treeDropDragEnter)=\"node.mouseAction('dragEnter', $event)\"\r\n               [treeAllowDrop]=\"node.allowDrop\"\r\n               [allowDragoverStyling]=\"node.allowDragoverStyling()\"\r\n               [treeDrag]=\"node\"\r\n               [treeDragEnabled]=\"node.allowDrag()\">\r\n\r\n              <tree-node-content [node]=\"node\" [index]=\"index\" [template]=\"templates.treeNodeTemplate\">\r\n              </tree-node-content>\r\n          </div>\r\n      </div>\r\n      <ng-container\r\n              [ngTemplateOutlet]=\"templates.treeNodeWrapperTemplate\"\r\n              [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index, templates: templates }\">\r\n      </ng-container>\r\n  `\r\n})\r\n\r\nexport class TreeNodeWrapperComponent {\r\n\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() templates: any;\r\n\r\n  constructor() {\r\n  }\r\n\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-checkbox',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <input\r\n        class=\"tree-node-checkbox\"\r\n        type=\"checkbox\"\r\n        (click)=\"node.mouseAction('checkboxClick', $event)\"\r\n        [checked]=\"node.isSelected\"\r\n        [indeterminate]=\"node.isPartiallySelected\"\r\n      />\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeCheckboxComponent {\r\n  @Input() node: TreeNode;\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Output,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\n\r\nconst DRAG_OVER_CLASS = 'is-dragging-over';\r\nconst DRAG_DISABLED_CLASS = 'is-dragging-over-disabled';\r\n\r\n@Directive({\r\n  selector: '[treeDrop]'\r\n})\r\nexport class TreeDropDirective implements AfterViewInit, OnDestroy {\r\n  @Input() allowDragoverStyling = true;\r\n  @Output('treeDrop') onDropCallback = new EventEmitter();\r\n  @Output('treeDropDragOver') onDragOverCallback = new EventEmitter();\r\n  @Output('treeDropDragLeave') onDragLeaveCallback = new EventEmitter();\r\n  @Output('treeDropDragEnter') onDragEnterCallback = new EventEmitter();\r\n  private readonly dragOverEventHandler: (ev: DragEvent) => void;\r\n  private readonly dragEnterEventHandler: (ev: DragEvent) => void;\r\n  private readonly dragLeaveEventHandler: (ev: DragEvent) => void;\r\n\r\n  private _allowDrop = (element, $event) => true;\r\n\r\n  @Input() set treeAllowDrop(allowDrop) {\r\n    if (allowDrop instanceof Function) {\r\n      this._allowDrop = allowDrop;\r\n    }\r\n    else this._allowDrop = (element, $event) => allowDrop;\r\n  }\r\n\r\n  allowDrop($event) {\r\n    return this._allowDrop(this.treeDraggedElement.get(), $event);\r\n  }\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2, private treeDraggedElement: TreeDraggedElement, private ngZone: NgZone) {\r\n    this.dragOverEventHandler = this.onDragOver.bind(this);\r\n    this.dragEnterEventHandler = this.onDragEnter.bind(this);\r\n    this.dragLeaveEventHandler = this.onDragLeave.bind(this);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    this.ngZone.runOutsideAngular(() => {\r\n      el.addEventListener('dragover', this.dragOverEventHandler);\r\n      el.addEventListener('dragenter', this.dragEnterEventHandler);\r\n      el.addEventListener('dragleave', this.dragLeaveEventHandler);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    el.removeEventListener('dragover', this.dragOverEventHandler);\r\n    el.removeEventListener('dragenter', this.dragEnterEventHandler);\r\n    el.removeEventListener('dragleave', this.dragLeaveEventHandler);\r\n  }\r\n\r\n  onDragOver($event) {\r\n    if (!this.allowDrop($event)) {\r\n      if (this.allowDragoverStyling) {\r\n        return this.addDisabledClass();\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.onDragOverCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    $event.preventDefault();\r\n    if (this.allowDragoverStyling) {\r\n      this.addClass();\r\n    }\r\n  }\r\n\r\n  onDragEnter($event) {\r\n    if (!this.allowDrop($event)) return;\r\n\r\n    $event.preventDefault();\r\n    this.onDragEnterCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n  }\r\n\r\n  onDragLeave($event) {\r\n    if (!this.allowDrop($event)) {\r\n      if (this.allowDragoverStyling) {\r\n        return this.removeDisabledClass();\r\n      }\r\n      return;\r\n    }\r\n    this.onDragLeaveCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    if (this.allowDragoverStyling) {\r\n      this.removeClass();\r\n    }\r\n  }\r\n\r\n  @HostListener('drop', ['$event']) onDrop($event) {\r\n    if (!this.allowDrop($event)) return;\r\n\r\n    $event.preventDefault();\r\n    this.onDropCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    if (this.allowDragoverStyling) {\r\n      this.removeClass();\r\n    }\r\n    this.treeDraggedElement.set(null);\r\n  }\r\n\r\n  private addClass() {\r\n    this.renderer.addClass(this.el.nativeElement, DRAG_OVER_CLASS);\r\n  }\r\n\r\n  private removeClass() {\r\n    this.renderer.removeClass(this.el.nativeElement, DRAG_OVER_CLASS);\r\n  }\r\n\r\n  private addDisabledClass() {\r\n    this.renderer.addClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\r\n  }\r\n\r\n  private removeDisabledClass() {\r\n    this.renderer.removeClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\r\n  }\r\n}\r\n","import { AfterViewInit, Directive, DoCheck, ElementRef, HostListener, Input, NgZone, OnDestroy, Renderer2 } from '@angular/core';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\n\r\nconst DRAG_OVER_CLASS = 'is-dragging-over';\r\n\r\n@Directive({\r\n  selector: '[treeDrag]'\r\n})\r\nexport class TreeDragDirective implements AfterViewInit, DoCheck, OnDestroy {\r\n  @Input('treeDrag') draggedElement;\r\n  @Input() treeDragEnabled;\r\n  private readonly dragEventHandler: (ev: DragEvent) => void;\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2, private treeDraggedElement: TreeDraggedElement, private ngZone: NgZone) {\r\n    this.dragEventHandler = this.onDrag.bind(this);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    this.ngZone.runOutsideAngular(() => {\r\n      el.addEventListener('drag', this.dragEventHandler);\r\n    });\r\n  }\r\n\r\n  ngDoCheck() {\r\n    this.renderer.setAttribute(this.el.nativeElement, 'draggable', this.treeDragEnabled ? 'true' : 'false');\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    el.removeEventListener('drag', this.dragEventHandler);\r\n  }\r\n\r\n  @HostListener('dragstart', ['$event']) onDragStart(ev) {\r\n    // setting the data is required by firefox\r\n    ev.dataTransfer.setData('text', ev.target.id);\r\n    this.treeDraggedElement.set(this.draggedElement);\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('dragStart', ev);\r\n    }\r\n  }\r\n\r\n  onDrag(ev) {\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('drag', ev);\r\n    }\r\n  }\r\n\r\n  @HostListener('dragend') onDragEnd() {\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('dragEnd');\r\n    }\r\n    this.treeDraggedElement.set(null);\r\n  }\r\n}\r\n","import { Directive, Input, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\nconst EASE_ACCELERATION = 1.005;\r\n\r\n@Directive({\r\n  selector: '[treeAnimateOpen]'\r\n})\r\nexport class TreeAnimateOpenDirective {\r\n  private _isOpen: boolean;\r\n\r\n  @Input('treeAnimateOpenSpeed') animateSpeed: number;\r\n  @Input('treeAnimateOpenAcceleration') animateAcceleration: number;\r\n  @Input('treeAnimateOpenEnabled') isEnabled: boolean;\r\n\r\n  @Input('treeAnimateOpen')\r\n  set isOpen(value: boolean) {\r\n    if (value) {\r\n      this._show();\r\n      if (this.isEnabled && this._isOpen === false) {\r\n        this._animateOpen();\r\n      }\r\n    } else {\r\n      this.isEnabled ? this._animateClose() : this._hide();\r\n    }\r\n    this._isOpen = !!value;\r\n  };\r\n\r\n  private innerElement: any;\r\n\r\n  constructor(\r\n    private renderer: Renderer2,\r\n    private templateRef: TemplateRef<any>,\r\n    private viewContainerRef: ViewContainerRef) {\r\n  }\r\n\r\n  private _show() {\r\n    if (this.innerElement) return;\r\n\r\n    // create child view\r\n    this.innerElement = this.viewContainerRef.createEmbeddedView(this.templateRef).rootNodes[0];\r\n  }\r\n\r\n  private _hide() {\r\n    this.viewContainerRef.clear();\r\n    this.innerElement = null;\r\n  }\r\n\r\n  private _animateOpen() {\r\n    let delta = this.animateSpeed;\r\n    let ease = this.animateAcceleration;\r\n    let maxHeight = 0;\r\n\r\n    // set height to 0\r\n    this.renderer.setStyle(this.innerElement, 'max-height', `0`);\r\n\r\n    // increase maxHeight until height doesn't change\r\n    setTimeout(() => { // Allow inner element to create its content\r\n      const i = setInterval(() => {\r\n        if (!this._isOpen || !this.innerElement) return clearInterval(i);\r\n\r\n        maxHeight += delta;\r\n        const roundedMaxHeight = Math.round(maxHeight);\r\n\r\n        this.renderer.setStyle(this.innerElement, 'max-height', `${roundedMaxHeight}px`);\r\n        const height = this.innerElement.getBoundingClientRect ? this.innerElement.getBoundingClientRect().height : 0; // TBD use renderer\r\n\r\n        delta *= ease;\r\n        ease *= EASE_ACCELERATION;\r\n        if (height < roundedMaxHeight) {\r\n          // Make maxHeight auto because animation finished and container might change height later on\r\n          this.renderer.setStyle(this.innerElement, 'max-height', null);\r\n          clearInterval(i);\r\n        }\r\n      }, 17);\r\n    });\r\n  }\r\n\r\n  private _animateClose() {\r\n    if (!this.innerElement) return;\r\n\r\n    let delta = this.animateSpeed;\r\n    let ease = this.animateAcceleration;\r\n    let height = this.innerElement.getBoundingClientRect().height; // TBD use renderer\r\n\r\n    // slowly decrease maxHeight to 0, starting from current height\r\n    const i = setInterval(() => {\r\n      if (this._isOpen || !this.innerElement) return clearInterval(i);\r\n\r\n      height -= delta;\r\n      this.renderer.setStyle(this.innerElement, 'max-height', `${height}px`);\r\n      delta *= ease;\r\n      ease *= EASE_ACCELERATION;\r\n\r\n      if (height <= 0) {\r\n        // after animation complete - remove child element\r\n        this.viewContainerRef.clear();\r\n        this.innerElement = null;\r\n        clearInterval(i);\r\n      }\r\n    }, 17);\r\n  }\r\n}\r\n","// element-closest | CC0-1.0 | github.com/jonathantneal/closest\r\nif (typeof Element !== 'undefined') {\r\n  if (typeof Element.prototype.matches !== 'function') {\r\n    Element.prototype.matches = (Element.prototype as any).msMatchesSelector ||\r\n        Element.prototype['mozMatchesSelector'] ||\r\n        Element.prototype.webkitMatchesSelector ||\r\n        function matches(selector) {\r\n          let element = this;\r\n          let elements = (element.document || element.ownerDocument).querySelectorAll(selector);\r\n          let index = 0;\r\n\r\n          while (elements[index] && elements[index] !== element) {\r\n            ++index;\r\n          }\r\n\r\n          return Boolean(elements[index]);\r\n        };\r\n  }\r\n\r\n  if (typeof Element.prototype['closest'] !== 'function') {\r\n    Element.prototype['closest'] = function closest(selector) {\r\n      let element = this;\r\n\r\n      while (element && element.nodeType === 1) {\r\n        if (element.matches(selector)) {\r\n          return element;\r\n        }\r\n\r\n        element = element.parentNode;\r\n      }\r\n\r\n      return null;\r\n    };\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TreeMobxAutorunDirective } from './mobx-angular/tree-mobx-autorun.directive';\r\n\r\nimport {\r\n  IActionHandler,\r\n  IActionMapping,\r\n  TREE_ACTIONS\r\n} from './models/tree-options.model';\r\nimport {\r\n  IAllowDragFn,\r\n  IAllowDropFn,\r\n  ITreeOptions,\r\n  ITreeState\r\n} from './defs/api';\r\nimport { KEYS } from './constants/keys';\r\nimport { TreeModel } from './models/tree.model';\r\nimport { TreeNode } from './models/tree-node.model';\r\nimport { TreeDraggedElement } from './models/tree-dragged-element.model';\r\nimport { TreeVirtualScroll } from './models/tree-virtual-scroll.model';\r\nimport { LoadingComponent } from './components/loading.component';\r\nimport { TreeComponent } from './components/tree.component';\r\nimport { TreeNodeComponent } from './components/tree-node.component';\r\nimport { TreeNodeContent } from './components/tree-node-content.component';\r\nimport { TreeNodeDropSlot } from './components/tree-node-drop-slot.component';\r\nimport { TreeNodeExpanderComponent } from './components/tree-node-expander.component';\r\nimport { TreeNodeChildrenComponent } from './components/tree-node-children.component';\r\nimport { TreeNodeCollectionComponent } from './components/tree-node-collection.component';\r\nimport { TreeNodeWrapperComponent } from './components/tree-node-wrapper.component';\r\nimport { TreeViewportComponent } from './components/tree-viewport.component';\r\nimport { TreeNodeCheckboxComponent } from './components/tree-node-checkbox.component';\r\nimport { TreeDropDirective } from './directives/tree-drop.directive';\r\nimport { TreeDragDirective } from './directives/tree-drag.directive';\r\nimport { TreeAnimateOpenDirective } from './directives/tree-animate-open.directive';\r\n\r\nimport './polyfills';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TreeComponent,\r\n    TreeNodeComponent,\r\n    TreeNodeContent,\r\n    LoadingComponent,\r\n    TreeDropDirective,\r\n    TreeDragDirective,\r\n    TreeNodeExpanderComponent,\r\n    TreeNodeChildrenComponent,\r\n    TreeNodeDropSlot,\r\n    TreeNodeCollectionComponent,\r\n    TreeViewportComponent,\r\n    TreeNodeWrapperComponent,\r\n    TreeNodeCheckboxComponent,\r\n    TreeAnimateOpenDirective,\r\n    TreeMobxAutorunDirective\r\n  ],\r\n  exports: [\r\n    TreeComponent,\r\n    TreeNodeComponent,\r\n    TreeNodeContent,\r\n    LoadingComponent,\r\n    TreeDropDirective,\r\n    TreeDragDirective,\r\n    TreeNodeExpanderComponent,\r\n    TreeNodeChildrenComponent,\r\n    TreeNodeDropSlot,\r\n    TreeNodeCollectionComponent,\r\n    TreeViewportComponent,\r\n    TreeNodeWrapperComponent,\r\n    TreeNodeCheckboxComponent,\r\n    TreeAnimateOpenDirective,\r\n    TreeMobxAutorunDirective\r\n  ],\r\n  imports: [CommonModule],\r\n  providers: []\r\n})\r\nexport class TreeModule {\r\n}\r\n\r\nexport {\r\n  TreeModel,\r\n  TreeNode,\r\n  TreeDraggedElement,\r\n  TreeVirtualScroll,\r\n  ITreeOptions,\r\n  TREE_ACTIONS,\r\n  KEYS,\r\n  IActionMapping,\r\n  IActionHandler,\r\n  IAllowDropFn,\r\n  IAllowDragFn,\r\n  LoadingComponent,\r\n  TreeAnimateOpenDirective,\r\n  TreeComponent,\r\n  TreeNodeComponent,\r\n  TreeNodeWrapperComponent,\r\n  TreeNodeContent,\r\n  TreeDropDirective,\r\n  TreeDragDirective,\r\n  TreeNodeExpanderComponent,\r\n  TreeNodeChildrenComponent,\r\n  TreeNodeDropSlot,\r\n  TreeNodeCollectionComponent,\r\n  TreeViewportComponent,\r\n  TreeNodeCheckboxComponent,\r\n  ITreeState\r\n};\r\n"]}