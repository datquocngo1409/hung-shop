{"ast":null,"code":"import { Injectable } from \"@angular/core\";\nimport * as ɵngcc0 from '@angular/core';\n\nvar BreadcrumbService = function () {\n  function BreadcrumbService() {\n    this.routesFriendlyNames = new Map();\n    this.routesFriendlyNamesRegex = new Map();\n    this.routesWithCallback = new Map();\n    this.routesWithCallbackRegex = new Map();\n    this.hideRoutes = new Array();\n    this.hideRoutesRegex = new Array();\n  }\n  /**\n   * Specify a friendly name for the corresponding route.\n   *\n   * @param route\n   * @param name\n   */\n\n  /**\n       * Specify a friendly name for the corresponding route.\n       *\n       * @param route\n       * @param name\n       */\n\n\n  BreadcrumbService.prototype.addFriendlyNameForRoute =\n  /**\n  * Specify a friendly name for the corresponding route.\n  *\n  * @param route\n  * @param name\n  */\n  function (route, name) {\n    this.routesFriendlyNames.set(route, name);\n  };\n  /**\n   * Specify a friendly name for the corresponding route matching a regular expression.\n   *\n   * @param route\n   * @param name\n   */\n\n  /**\n       * Specify a friendly name for the corresponding route matching a regular expression.\n       *\n       * @param route\n       * @param name\n       */\n\n\n  BreadcrumbService.prototype.addFriendlyNameForRouteRegex =\n  /**\n  * Specify a friendly name for the corresponding route matching a regular expression.\n  *\n  * @param route\n  * @param name\n  */\n  function (routeRegex, name) {\n    this.routesFriendlyNamesRegex.set(routeRegex, name);\n  };\n  /**\n   * Specify a callback for the corresponding route.\n   * When a mathing url is navigatedd to, the callback function is invoked to get the name to be displayed in the breadcrumb.\n   */\n\n  /**\n       * Specify a callback for the corresponding route.\n       * When a mathing url is navigatedd to, the callback function is invoked to get the name to be displayed in the breadcrumb.\n       */\n\n\n  BreadcrumbService.prototype.addCallbackForRoute =\n  /**\n  * Specify a callback for the corresponding route.\n  * When a mathing url is navigatedd to, the callback function is invoked to get the name to be displayed in the breadcrumb.\n  */\n  function (route, callback) {\n    this.routesWithCallback.set(route, callback);\n  };\n  /**\n   * Specify a callback for the corresponding route matching a regular expression.\n   * When a mathing url is navigatedd to, the callback function is invoked to get the name to be displayed in the breadcrumb.\n   */\n\n  /**\n       * Specify a callback for the corresponding route matching a regular expression.\n       * When a mathing url is navigatedd to, the callback function is invoked to get the name to be displayed in the breadcrumb.\n       */\n\n\n  BreadcrumbService.prototype.addCallbackForRouteRegex =\n  /**\n  * Specify a callback for the corresponding route matching a regular expression.\n  * When a mathing url is navigatedd to, the callback function is invoked to get the name to be displayed in the breadcrumb.\n  */\n  function (routeRegex, callback) {\n    this.routesWithCallbackRegex.set(routeRegex, callback);\n  };\n  /**\n   * Show the friendly name for a given route (url). If no match is found the url (without the leading '/') is shown.\n   *\n   * @param route\n   * @returns {*}\n   */\n\n  /**\n       * Show the friendly name for a given route (url). If no match is found the url (without the leading '/') is shown.\n       *\n       * @param route\n       * @returns {*}\n       */\n\n\n  BreadcrumbService.prototype.getFriendlyNameForRoute =\n  /**\n  * Show the friendly name for a given route (url). If no match is found the url (without the leading '/') is shown.\n  *\n  * @param route\n  * @returns {*}\n  */\n  function (route) {\n    var routeEnd = route.substr(route.lastIndexOf('/') + 1, route.length);\n    var name = routeEnd;\n    this.routesFriendlyNames.forEach(function (value, key, map) {\n      if (key === route) {\n        name = value;\n      }\n    });\n    this.routesFriendlyNamesRegex.forEach(function (value, key, map) {\n      if (new RegExp(key).exec(route)) {\n        name = value;\n      }\n    });\n    this.routesWithCallback.forEach(function (value, key, map) {\n      if (key === route) {\n        name = value(routeEnd);\n      }\n    });\n    this.routesWithCallbackRegex.forEach(function (value, key, map) {\n      if (new RegExp(key).exec(route)) {\n        name = value(routeEnd);\n      }\n    });\n    return name;\n  };\n  /**\n   * Specify a route (url) that should not be shown in the breadcrumb.\n   */\n\n  /**\n       * Specify a route (url) that should not be shown in the breadcrumb.\n       */\n\n\n  BreadcrumbService.prototype.hideRoute =\n  /**\n  * Specify a route (url) that should not be shown in the breadcrumb.\n  */\n  function (route) {\n    if (this.hideRoutes.indexOf(route) === -1) {\n      this.hideRoutes.push(route);\n    }\n  };\n  /**\n   * Specify a route (url) regular expression that should not be shown in the breadcrumb.\n   */\n\n  /**\n       * Specify a route (url) regular expression that should not be shown in the breadcrumb.\n       */\n\n\n  BreadcrumbService.prototype.hideRouteRegex =\n  /**\n  * Specify a route (url) regular expression that should not be shown in the breadcrumb.\n  */\n  function (routeRegex) {\n    if (this.hideRoutesRegex.indexOf(routeRegex) === -1) {\n      this.hideRoutesRegex.push(routeRegex);\n    }\n  };\n  /**\n   * Returns true if a route should be hidden.\n   */\n\n  /**\n       * Returns true if a route should be hidden.\n       */\n\n\n  BreadcrumbService.prototype.isRouteHidden =\n  /**\n  * Returns true if a route should be hidden.\n  */\n  function (route) {\n    var hide = this.hideRoutes.indexOf(route) > -1;\n    this.hideRoutesRegex.forEach(function (value) {\n      if (new RegExp(value).exec(route)) {\n        hide = true;\n      }\n    });\n    return hide;\n  };\n  /** @nocollapse */\n\n\n  BreadcrumbService.ctorParameters = function () {\n    return [];\n  };\n\n  BreadcrumbService.ɵfac = function BreadcrumbService_Factory(t) {\n    return new (t || BreadcrumbService)();\n  };\n\n  BreadcrumbService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: BreadcrumbService,\n    factory: function factory(t) {\n      return BreadcrumbService.ɵfac(t);\n    }\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(BreadcrumbService, [{\n      type: Injectable\n    }], function () {\n      return [];\n    }, null);\n  })();\n\n  return BreadcrumbService;\n}();\n\nexport { BreadcrumbService };","map":{"version":3,"sources":["../../../../../src/app/components/breadcrumb/breadcrumb.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from \"@angular/core\";\n\n@Injectable()\nexport class BreadcrumbService {\n\n    private routesFriendlyNames: Map<string, string> = new Map<string, string>();\n    private routesFriendlyNamesRegex: Map<string, string> = new Map<string, string>();\n    private routesWithCallback: Map<string, (string:string) => string> = new Map<string, (string:string) => string>();\n    private routesWithCallbackRegex: Map<string, (string:string) => string> = new Map<string, (string:string) => string>();\n    private hideRoutes: any = new Array<string>();\n    private hideRoutesRegex: any = new Array<string>();\n\n    /**\n     * Specify a friendly name for the corresponding route.\n     *\n     * @param route\n     * @param name\n     */\n    addFriendlyNameForRoute(route: string, name: string): void {\n        this.routesFriendlyNames.set(route, name);\n    }\n    \n    /**\n     * Specify a friendly name for the corresponding route matching a regular expression.\n     *\n     * @param route\n     * @param name\n     */\n    addFriendlyNameForRouteRegex(routeRegex: string, name: string): void {\n        this.routesFriendlyNamesRegex.set(routeRegex, name);\n    }\n    \n    /**\n     * Specify a callback for the corresponding route.\n     * When a mathing url is navigatedd to, the callback function is invoked to get the name to be displayed in the breadcrumb.\n     */\n    addCallbackForRoute(route: string, callback: (id: string) => string): void {\n        this.routesWithCallback.set(route, callback);\n    }\n    \n    /**\n     * Specify a callback for the corresponding route matching a regular expression.\n     * When a mathing url is navigatedd to, the callback function is invoked to get the name to be displayed in the breadcrumb.\n     */\n    addCallbackForRouteRegex(routeRegex: string, callback: (id: string) => string): void {\n        this.routesWithCallbackRegex.set(routeRegex, callback);\n    }\n\n    /**\n     * Show the friendly name for a given route (url). If no match is found the url (without the leading '/') is shown.\n     *\n     * @param route\n     * @returns {*}\n     */\n    getFriendlyNameForRoute(route: string): string {\n        let routeEnd = route.substr(route.lastIndexOf('/')+1, route.length);\n        let name: string = routeEnd;\n\n        this.routesFriendlyNames.forEach((value, key, map) => {\n            if (key === route) {\n                name = value;\n            }\n        });\n        \n        this.routesFriendlyNamesRegex.forEach((value, key, map) => {\n            if (new RegExp(key).exec(route)) {\n                name = value;\n            }\n        });\n        \n        this.routesWithCallback.forEach((value, key, map) => {\n            if (key === route) {\n                name = value(routeEnd);\n            }\n        });\n        \n        this.routesWithCallbackRegex.forEach((value, key, map) => {\n            if (new RegExp(key).exec(route)) {\n                name = value(routeEnd);\n            }\n        });\n\n        return name;\n    }\n    \n    /**\n     * Specify a route (url) that should not be shown in the breadcrumb.\n     */\n    hideRoute(route: string): void {\n        if (this.hideRoutes.indexOf(route) === -1) {\n            this.hideRoutes.push(route);\n        }\n    }\n    \n    /**\n     * Specify a route (url) regular expression that should not be shown in the breadcrumb.\n     */\n    hideRouteRegex(routeRegex: string): void {\n        if (this.hideRoutesRegex.indexOf(routeRegex) === -1) {\n            this.hideRoutesRegex.push(routeRegex);\n        }\n    }\n    \n    /**\n     * Returns true if a route should be hidden.\n     */\n    isRouteHidden(route: string): boolean {\n        let hide = this.hideRoutes.indexOf(route) > -1;\n        \n        this.hideRoutesRegex.forEach((value:any) => {\n            if (new RegExp(value).exec(route)) {\n                hide = true;\n            }\n        });\n        \n        return hide;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}