{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport withGeometry from '../mixins/with-geometry';\nimport Element from './element';\nimport paintable from '../mixins/paintable';\nimport measurable from '../mixins/measurable';\nimport GeometryRect from '../geometry/rect';\nimport { defined } from '../util';\n\nvar Rect = /*#__PURE__*/function (_paintable) {\n  _inherits(Rect, _paintable);\n\n  var _super = _createSuper(Rect);\n\n  _createClass(Rect, [{\n    key: \"nodeType\",\n    get: function get() {\n      return \"Rect\";\n    }\n  }]);\n\n  function Rect() {\n    var _this;\n\n    var geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new GeometryRect();\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Rect);\n\n    _this = _super.call(this, options);\n\n    _this.geometry(geometry);\n\n    if (!defined(_this.options.stroke)) {\n      _this.stroke(\"#000\");\n    }\n\n    return _this;\n  }\n\n  _createClass(Rect, [{\n    key: \"_bbox\",\n    value: function _bbox(matrix) {\n      return this._geometry.bbox(matrix);\n    }\n  }, {\n    key: \"rawBBox\",\n    value: function rawBBox() {\n      return this._geometry.bbox();\n    }\n  }, {\n    key: \"_containsPoint\",\n    value: function _containsPoint(point) {\n      return this._geometry.containsPoint(point);\n    }\n  }, {\n    key: \"_isOnPath\",\n    value: function _isOnPath(point) {\n      return this.geometry()._isOnPath(point, this.options.stroke.width / 2);\n    }\n  }]);\n\n  return Rect;\n}(paintable(measurable(withGeometry(Element))));\n\nexport default Rect;","map":{"version":3,"sources":["/home/datquocngo/Project/UET/gts-fe/node_modules/@progress/kendo-drawing/dist/es2015/shapes/rect.js"],"names":["withGeometry","Element","paintable","measurable","GeometryRect","defined","Rect","geometry","options","stroke","matrix","_geometry","bbox","point","containsPoint","_isOnPath","width"],"mappings":";;;;AAAA,OAAOA,YAAP,MAAyB,yBAAzB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,SAAxB;;IAGMC,I;;;;;;;wBACa;AACX,aAAO,MAAP;AACH;;;AAED,kBAAyD;AAAA;;AAAA,QAA7CC,QAA6C,uEAAlC,IAAIH,YAAJ,EAAkC;AAAA,QAAdI,OAAc,uEAAJ,EAAI;;AAAA;;AACrD,8BAAMA,OAAN;;AAEA,UAAKD,QAAL,CAAcA,QAAd;;AAEA,QAAI,CAACF,OAAO,CAAC,MAAKG,OAAL,CAAaC,MAAd,CAAZ,EAAmC;AAC/B,YAAKA,MAAL,CAAY,MAAZ;AACH;;AAPoD;AAQxD;;;;0BAEKC,M,EAAQ;AACV,aAAO,KAAKC,SAAL,CAAeC,IAAf,CAAoBF,MAApB,CAAP;AACH;;;8BAES;AACN,aAAO,KAAKC,SAAL,CAAeC,IAAf,EAAP;AACH;;;mCAEcC,K,EAAO;AAClB,aAAO,KAAKF,SAAL,CAAeG,aAAf,CAA6BD,KAA7B,CAAP;AACH;;;8BAESA,K,EAAO;AACb,aAAO,KAAKN,QAAL,GAAgBQ,SAAhB,CAA0BF,KAA1B,EAAiC,KAAKL,OAAL,CAAaC,MAAb,CAAoBO,KAApB,GAA4B,CAA7D,CAAP;AACH;;;;EA7Bcd,SAAS,CAACC,UAAU,CAACH,YAAY,CAACC,OAAD,CAAb,CAAX,C;;AAgC5B,eAAeK,IAAf","sourcesContent":["import withGeometry from '../mixins/with-geometry';\nimport Element from './element';\nimport paintable from '../mixins/paintable';\nimport measurable from '../mixins/measurable';\nimport GeometryRect from '../geometry/rect';\nimport { defined } from '../util';\n\n\nclass Rect extends paintable(measurable(withGeometry(Element))) {\n    get nodeType() {\n        return \"Rect\";\n    }\n\n    constructor(geometry = new GeometryRect(), options = {}) {\n        super(options);\n\n        this.geometry(geometry);\n\n        if (!defined(this.options.stroke)) {\n            this.stroke(\"#000\");\n        }\n    }\n\n    _bbox(matrix) {\n        return this._geometry.bbox(matrix);\n    }\n\n    rawBBox() {\n        return this._geometry.bbox();\n    }\n\n    _containsPoint(point) {\n        return this._geometry.containsPoint(point);\n    }\n\n    _isOnPath(point) {\n        return this.geometry()._isOnPath(point, this.options.stroke.width / 2);\n    }\n}\n\nexport default Rect;\n"]},"metadata":{},"sourceType":"module"}