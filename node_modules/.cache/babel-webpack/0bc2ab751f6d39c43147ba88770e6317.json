{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _createClass from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Injectable, NgModule, Component, Input, defineInjectable } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction NgxDonutChartComponent__svg_path_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"path\", 6);\n  }\n\n  if (rf & 2) {\n    var arc_r3 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"d\", arc_r3.d)(\"stroke\", arc_r3.color)(\"stroke-width\", ctx_r0.thickness);\n  }\n}\n\nvar _c0 = function _c0(a0, a1) {\n  return {\n    \"width\": a0,\n    \"height\": a1\n  };\n};\n\nfunction NgxDonutChartComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵnamespaceHTML();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 7);\n    ɵngcc0.ɵɵelement(1, \"div\", 8);\n    ɵngcc0.ɵɵelement(2, \"div\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction2(4, _c0, ctx_r1.width, ctx_r1.height));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r1.totalClass)(\"innerText\", ctx_r1.total);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerText\", ctx_r1.title);\n  }\n}\n\nvar _c1 = function _c1(a0) {\n  return {\n    \"background-color\": a0\n  };\n};\n\nfunction NgxDonutChartComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 10);\n    ɵngcc0.ɵɵelement(1, \"div\", 11);\n    ɵngcc0.ɵɵelement(2, \"div\", 12);\n    ɵngcc0.ɵɵelement(3, \"div\", 13);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r4 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(3, _c1, item_r4.color));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerText\", item_r4.label);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerText\", item_r4.percentage);\n  }\n}\n\nvar _c2 = function _c2(a0) {\n  return {\n    \"width\": a0\n  };\n};\n\nvar NgxDonutChartService = function NgxDonutChartService() {\n  _classCallCheck(this, NgxDonutChartService);\n};\n\nNgxDonutChartService.ɵfac = function NgxDonutChartService_Factory(t) {\n  return new (t || NgxDonutChartService)();\n};\n\nNgxDonutChartService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: NgxDonutChartService,\n  factory: NgxDonutChartService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nNgxDonutChartService.ctorParameters = function () {\n  return [];\n};\n/** @nocollapse */\n\n\nNgxDonutChartService.ngInjectableDef = defineInjectable({\n  factory: function NgxDonutChartService_Factory() {\n    return new NgxDonutChartService();\n  },\n  token: NgxDonutChartService,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgxDonutChartService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar NgxDonutChartComponent = /*#__PURE__*/function () {\n  function NgxDonutChartComponent() {\n    _classCallCheck(this, NgxDonutChartComponent);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(NgxDonutChartComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.setDefaults();\n      /** @type {?} */\n\n      var angles = this._calculateAngles(this.data);\n      /** @type {?} */\n\n\n      var ArchPoints = this._calculateArcPoints(this.data);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDefaults\",\n    value: function setDefaults() {\n      this.arcs = [];\n      this.radius = this.radius || 200;\n      this.margin = this.margin || 10;\n      this.thickness = this.thickness || 8;\n      this.totalClass = this.totalClass || 'c-donutchart__title';\n      this.origin = {\n        x: this.radius,\n        y: this.radius\n      };\n      this.width = 2 * this.radius + 2 * this.margin + 'px';\n      this.height = 2 * this.radius + 2 * this.margin + 'px';\n    }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateArcPoints\",\n    value: function _calculateArcPoints(data) {\n      /** @type {?} */\n      var archPoints = [];\n      archPoints.push({\n        x: this.radius,\n        y: 0\n      });\n      /** @type {?} */\n\n      var startAngle = 0;\n      /** @type {?} */\n\n      var endAngle;\n      /** @type {?} */\n\n      var startX = this.origin.x;\n      /** @type {?} */\n\n      var startY = this.origin.y;\n\n      var _iterator = _createForOfIteratorHelper(data),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n          endAngle = (startAngle + item.angle) % 360;\n          startAngle += 8;\n          /** @type {?} */\n\n          var arc = this._describeArc(startX, startY, this.radius, startAngle, endAngle, item.color);\n\n          this.arcs.push(arc);\n          startAngle = endAngle;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * @param {?} x\n     * @param {?} y\n     * @param {?} radius\n     * @param {?} startAngle\n     * @param {?} endAngle\n     * @param {?} color\n     * @return {?}\n     */\n\n  }, {\n    key: \"_describeArc\",\n    value: function _describeArc(x, y, radius, startAngle, endAngle, color) {\n      /** @type {?} */\n      var start = this._polarToCartesian(x, y, radius, startAngle);\n      /** @type {?} */\n\n\n      var end = this._polarToCartesian(x, y, radius, endAngle);\n      /** @type {?} */\n\n\n      var arcSweep = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n      /** @type {?} */\n\n      var d = [\"M\", start.x, start.y, \"A\", radius, radius, 0, arcSweep, 1, end.x, end.y].join(\" \");\n      return {\n        d: d,\n        end: end,\n        color: color\n      };\n    }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateAngles\",\n    value: function _calculateAngles(data) {\n      /** @type {?} */\n      var angles = [];\n      /** @type {?} */\n\n      var total = this._getTotal(data);\n\n      this.total = total;\n\n      for (var i = 0; i < data.length; i++) {\n        /** @type {?} */\n        var dataItem = data[i];\n        /** @type {?} */\n\n        var angle = dataItem.value / total * 360.0;\n        dataItem.angle = angle;\n        dataItem.percentage = (dataItem.value / total * 100.0).toFixed(2) + '%';\n        angles.push(angle);\n      }\n\n      return angles;\n    }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getTotal\",\n    value: function _getTotal(data) {\n      return data.reduce(function (a, b) {\n        return {\n          value: a.value + b.value\n        };\n      }).value;\n    }\n    /**\n     * @param {?} centerX\n     * @param {?} centerY\n     * @param {?} radius\n     * @param {?} angleInDegrees\n     * @return {?}\n     */\n\n  }, {\n    key: \"_polarToCartesian\",\n    value: function _polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n      /** @type {?} */\n      var angleInRadians = angleInDegrees * Math.PI / 180.0;\n      return {\n        x: centerX + radius * Math.cos(angleInRadians) + this.margin,\n        y: centerY + radius * Math.sin(angleInRadians) + this.margin\n      };\n    }\n  }]);\n\n  return NgxDonutChartComponent;\n}();\n\nNgxDonutChartComponent.ɵfac = function NgxDonutChartComponent_Factory(t) {\n  return new (t || NgxDonutChartComponent)();\n};\n\nNgxDonutChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NgxDonutChartComponent,\n  selectors: [[\"ngx-donut-chart\"]],\n  inputs: {\n    radius: \"radius\",\n    margin: \"margin\",\n    thickness: \"thickness\",\n    totalClass: \"totalClass\",\n    data: \"data\",\n    title: \"title\"\n  },\n  decls: 6,\n  vars: 10,\n  consts: [[1, \"c-donutchart\", 3, \"ngStyle\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", 3, \"ngStyle\"], [\"fill\", \"transparent\", \"fill-opacity\", \"0.5\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"c-donutchart__text\", 3, \"ngStyle\", 4, \"ngIf\"], [1, \"c-donutchart__legends\"], [\"class\", \"c-donutchart__legend\", 4, \"ngFor\", \"ngForOf\"], [\"fill\", \"transparent\", \"fill-opacity\", \"0.5\"], [1, \"c-donutchart__text\", 3, \"ngStyle\"], [3, \"ngClass\", \"innerText\"], [3, \"innerText\"], [1, \"c-donutchart__legend\"], [1, \"c-donutchart__legend-bar\", 3, \"ngStyle\"], [1, \"c-donutchart__legend-title\", 3, \"innerText\"], [1, \"c-donutchart__legend-percentage\", 3, \"innerText\"]],\n  template: function NgxDonutChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"svg\", 1);\n      ɵngcc0.ɵɵtemplate(2, NgxDonutChartComponent__svg_path_2_Template, 1, 3, \"path\", 2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(3, NgxDonutChartComponent_div_3_Template, 3, 7, \"div\", 3);\n      ɵngcc0.ɵɵnamespaceHTML();\n      ɵngcc0.ɵɵelementStart(4, \"div\", 4);\n      ɵngcc0.ɵɵtemplate(5, NgxDonutChartComponent_div_5_Template, 4, 5, \"div\", 5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(5, _c2, ctx.width));\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction2(7, _c0, ctx.width, ctx.height));\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.arcs);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.title);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.data);\n    }\n  },\n  directives: [ɵngcc1.NgStyle, ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc1.NgClass],\n  styles: [\".c-donutchart[_ngcontent-%COMP%]{position:relative}.c-donutchart[_ngcontent-%COMP%]   .c-donutchart__text[_ngcontent-%COMP%]{position:absolute;top:0;left:0;display:flex;flex-flow:column;align-items:center;justify-content:center}.c-donutchart[_ngcontent-%COMP%]   .c-donutchart__title[_ngcontent-%COMP%]{font-size:40px}.c-donutchart[_ngcontent-%COMP%]   .c-donutchart__legends[_ngcontent-%COMP%]{display:flex;justify-content:center}.c-donutchart[_ngcontent-%COMP%]   .c-donutchart__legend[_ngcontent-%COMP%]{display:flex;flex-flow:column;align-items:center;margin:16px 8px}.c-donutchart[_ngcontent-%COMP%]   .c-donutchart__legend-bar[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;margin-bottom:8px;width:40px;height:8px;border-radius:4px;background-color:#dc143c}.c-donutchart[_ngcontent-%COMP%]   .c-donutchart__legend-percentage[_ngcontent-%COMP%], .c-donutchart[_ngcontent-%COMP%]   .c-donutchart__legend-title[_ngcontent-%COMP%]{text-align:center}\"]\n});\n/** @nocollapse */\n\nNgxDonutChartComponent.ctorParameters = function () {\n  return [];\n};\n\nNgxDonutChartComponent.propDecorators = {\n  data: [{\n    type: Input\n  }],\n  radius: [{\n    type: Input\n  }],\n  margin: [{\n    type: Input\n  }],\n  title: [{\n    type: Input\n  }],\n  thickness: [{\n    type: Input\n  }],\n  totalClass: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgxDonutChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-donut-chart',\n      template: \"<div\\n  class=\\\"c-donutchart\\\"\\n  [ngStyle]=\\\"{'width': width}\\\">\\n  <svg\\n    [ngStyle]=\\\"{'width': width, 'height': height}\\\"\\n    xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n    <!-- <path [attr.d]=\\\"pathD\\\" stroke=\\\"black\\\" fill=\\\"transparent\\\" stroke-width=\\\"8\\\" fill-opacity=\\\"0.5\\\"/> -->\\n    <path\\n      *ngFor=\\\"let arc of arcs\\\"\\n      [attr.d]=\\\"arc.d\\\"\\n      [attr.stroke]=\\\"arc.color\\\"\\n      fill=\\\"transparent\\\"\\n      [attr.stroke-width]=\\\"thickness\\\"\\n      fill-opacity=\\\"0.5\\\"/>\\n  </svg>\\n\\n  <div\\n    class=\\\"c-donutchart__text\\\"\\n    *ngIf=\\\"title\\\"\\n    [ngStyle]=\\\"{'width': width, 'height': height}\\\">\\n    <div\\n      [ngClass]=\\\"totalClass\\\"\\n      [innerText]=\\\"total\\\"></div>\\n    <div [innerText]=\\\"title\\\"></div>\\n  </div>\\n\\n  <div class=\\\"c-donutchart__legends\\\">\\n    <div\\n      class=\\\"c-donutchart__legend\\\"\\n      *ngFor=\\\"let item of data\\\">\\n      <div\\n        class=\\\"c-donutchart__legend-bar\\\"\\n        [ngStyle]=\\\"{'background-color': item.color}\\\">\\n      </div>\\n\\n      <div\\n        class=\\\"c-donutchart__legend-title\\\"\\n        [innerText]=\\\"item.label\\\">\\n      </div>\\n\\n      <div\\n        class=\\\"c-donutchart__legend-percentage\\\"\\n        [innerText]=\\\"item.percentage\\\">\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\",\n      styles: [\".c-donutchart{position:relative}.c-donutchart .c-donutchart__text{position:absolute;top:0;left:0;display:flex;flex-flow:column;align-items:center;justify-content:center}.c-donutchart .c-donutchart__title{font-size:40px}.c-donutchart .c-donutchart__legends{display:flex;justify-content:center}.c-donutchart .c-donutchart__legend{display:flex;flex-flow:column;align-items:center;margin:16px 8px}.c-donutchart .c-donutchart__legend-bar{display:flex;align-items:center;justify-content:center;margin-bottom:8px;width:40px;height:8px;border-radius:4px;background-color:#dc143c}.c-donutchart .c-donutchart__legend-percentage,.c-donutchart .c-donutchart__legend-title{text-align:center}\"]\n    }]\n  }], function () {\n    return [];\n  }, {\n    radius: [{\n      type: Input\n    }],\n    margin: [{\n      type: Input\n    }],\n    thickness: [{\n      type: Input\n    }],\n    totalClass: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar NgxDonutChartModule = function NgxDonutChartModule() {\n  _classCallCheck(this, NgxDonutChartModule);\n};\n\nNgxDonutChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NgxDonutChartModule\n});\nNgxDonutChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NgxDonutChartModule_Factory(t) {\n    return new (t || NgxDonutChartModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxDonutChartModule, {\n    declarations: function declarations() {\n      return [NgxDonutChartComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [NgxDonutChartComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgxDonutChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [NgxDonutChartComponent],\n      exports: [NgxDonutChartComponent]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { NgxDonutChartService, NgxDonutChartComponent, NgxDonutChartModule };","map":{"version":3,"sources":["ngx-doughnut-chart/lib/ngx-donut-chart.service.ts","ngx-doughnut-chart/lib/ngx-donut-chart.component.ts","ngx-doughnut-chart/lib/ngx-donut-chart.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxDonutChartService {\n\n  constructor() { }\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'ngx-donut-chart',\n  template: `<div\n  class=\"c-donutchart\"\n  [ngStyle]=\"{'width': width}\">\n  <svg\n    [ngStyle]=\"{'width': width, 'height': height}\"\n    xmlns=\"http://www.w3.org/2000/svg\">\n    <!-- <path [attr.d]=\"pathD\" stroke=\"black\" fill=\"transparent\" stroke-width=\"8\" fill-opacity=\"0.5\"/> -->\n    <path\n      *ngFor=\"let arc of arcs\"\n      [attr.d]=\"arc.d\"\n      [attr.stroke]=\"arc.color\"\n      fill=\"transparent\"\n      [attr.stroke-width]=\"thickness\"\n      fill-opacity=\"0.5\"/>\n  </svg>\n\n  <div\n    class=\"c-donutchart__text\"\n    *ngIf=\"title\"\n    [ngStyle]=\"{'width': width, 'height': height}\">\n    <div\n      [ngClass]=\"totalClass\"\n      [innerText]=\"total\"></div>\n    <div [innerText]=\"title\"></div>\n  </div>\n\n  <div class=\"c-donutchart__legends\">\n    <div\n      class=\"c-donutchart__legend\"\n      *ngFor=\"let item of data\">\n      <div\n        class=\"c-donutchart__legend-bar\"\n        [ngStyle]=\"{'background-color': item.color}\">\n      </div>\n\n      <div\n        class=\"c-donutchart__legend-title\"\n        [innerText]=\"item.label\">\n      </div>\n\n      <div\n        class=\"c-donutchart__legend-percentage\"\n        [innerText]=\"item.percentage\">\n      </div>\n    </div>\n  </div>\n</div>\n`,\n  styles: [`.c-donutchart{position:relative}.c-donutchart .c-donutchart__text{position:absolute;top:0;left:0;display:flex;flex-flow:column;align-items:center;justify-content:center}.c-donutchart .c-donutchart__title{font-size:40px}.c-donutchart .c-donutchart__legends{display:flex;justify-content:center}.c-donutchart .c-donutchart__legend{display:flex;flex-flow:column;align-items:center;margin:16px 8px}.c-donutchart .c-donutchart__legend-bar{display:flex;align-items:center;justify-content:center;margin-bottom:8px;width:40px;height:8px;border-radius:4px;background-color:#dc143c}.c-donutchart .c-donutchart__legend-percentage,.c-donutchart .c-donutchart__legend-title{text-align:center}`]\n})\nexport class NgxDonutChartComponent implements OnInit {\n  @Input() data: [{any}];\n  @Input() radius: number;\n  @Input() margin: number;\n  @Input() title: string;\n  @Input() thickness: number;\n  @Input() totalClass: string;\n  width: string;\n  height: string;\n  origin: {x: number, y: number};\n  arcs: any[];\n  total: number;\n  constructor() { }\n\n  ngOnInit() {\n    this.setDefaults();\n    let angles = this._calculateAngles(this.data);\n    let ArchPoints = this._calculateArcPoints(this.data);\n  }\n\n  setDefaults() {\n    this.arcs = [];\n    this.radius = this.radius || 200;\n    this.margin = this.margin || 10;\n    this.thickness = this.thickness || 8;\n    this.totalClass = this.totalClass || 'c-donutchart__title';\n    this.origin = {\n      x: this.radius,\n      y: this.radius,\n    };\n    this.width = ((2 * this.radius) + (2 * this.margin)) + 'px';\n    this.height = ((2 * this.radius) + (2 * this.margin)) + 'px';\n  }\n\n  _calculateArcPoints(data) {\n    let archPoints = [];\n    archPoints.push({\n      x: this.radius,\n      y: 0,\n    });\n\n    let startAngle = 0;\n    let endAngle;\n    let startX = this.origin.x;\n    let startY = this.origin.y;\n\n    for (let item of data) {\n      endAngle = (startAngle + item.angle) % 360;\n      startAngle += 8;\n      // endAngle -=5;\n\n      let arc = this._describeArc(startX, startY, this.radius, startAngle, endAngle, item.color);\n      this.arcs.push(arc);\n\n      startAngle = endAngle;\n    }\n  }\n\n  _describeArc(x, y, radius, startAngle, endAngle, color){\n    let start = this._polarToCartesian(x, y, radius, startAngle);\n    let end = this._polarToCartesian(x, y, radius, endAngle);\n    let arcSweep = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n\n    let d = [\n        \"M\", start.x, start.y,\n        \"A\", radius, radius, 0, arcSweep, 1, end.x, end.y,\n        // \"L\", x,y,\n        // \"L\", start.x, start.y\n    ].join(\" \");\n\n    return {\n      d: d,\n      end: end,\n      color: color,\n    };\n  }\n\n  _calculateAngles(data) {\n    let angles = [];\n    let total = this._getTotal(data);\n    this.total = total;\n    for(let i = 0; i < data.length; i++) {\n      let dataItem = data[i];\n      let angle = (dataItem.value / total) * 360.0;\n      dataItem.angle = angle;\n      dataItem.percentage = ((dataItem.value / total) * 100.0).toFixed(2) + '%';\n      angles.push(angle);\n    }\n\n    return angles;\n  }\n\n  _getTotal(data) {\n    return data.reduce((a, b) => ({ value : a.value + b.value })).value;\n  }\n\n  _polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n    let angleInRadians = (angleInDegrees) * Math.PI / 180.0;\n\n    return {\n      x: centerX + (radius * Math.cos(angleInRadians)) + this.margin,\n      y: centerY + (radius * Math.sin(angleInRadians)) + this.margin,\n    };\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgxDonutChartComponent } from './ngx-donut-chart.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [NgxDonutChartComponent],\n  exports: [NgxDonutChartComponent]\n})\nexport class NgxDonutChartModule { }\n"]},"metadata":{},"sourceType":"module"}