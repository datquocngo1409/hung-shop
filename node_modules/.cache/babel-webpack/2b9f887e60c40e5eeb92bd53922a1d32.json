{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Injectable, Inject, Optional, PLATFORM_ID, NgZone, ɵɵdefineInjectable, ɵɵinject, NgModule } from '@angular/core';\nimport { of, Observable, from } from 'rxjs';\nimport { observeOn, switchMap, map, shareReplay, first } from 'rxjs/operators';\nimport { ɵAngularFireSchedulers, ɵkeepUnstableUntilFirstFactory, ɵfirebaseAppFactory, ɵlazySDKProxy, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// WARNING: interface has both a type and a value, skipping emit\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar AngularFireAuth =\n/**\n * @param {?} options\n * @param {?} nameOrConfig\n * @param {?} platformId\n * @param {?} zone\n */\nfunction AngularFireAuth(options, nameOrConfig, // tslint:disable-next-line:ban-types\nplatformId, zone) {\n  _classCallCheck(this, AngularFireAuth);\n\n  /** @type {?} */\n  var schedulers = new ɵAngularFireSchedulers(zone);\n  /** @type {?} */\n\n  var keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(schedulers);\n  /** @type {?} */\n\n  var auth = of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap(\n  /**\n  * @return {?}\n  */\n  function () {\n    return zone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    function () {\n      return import('firebase/auth');\n    });\n  }), map(\n  /**\n  * @return {?}\n  */\n  function () {\n    return ɵfirebaseAppFactory(options, zone, nameOrConfig);\n  }), map(\n  /**\n  * @param {?} app\n  * @return {?}\n  */\n  function (app) {\n    return zone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    function () {\n      return app.auth();\n    });\n  }), shareReplay({\n    bufferSize: 1,\n    refCount: false\n  })); // HACK, as we're exporting auth.Auth, rather than auth, developers importing firebase.auth\n  //       (e.g, `import { auth } from 'firebase/app'`) are getting an undefined auth object unexpectedly\n  //       as we're completely lazy. Let's eagerly load the Auth SDK here.\n  //       There could potentially be race conditions still... but this greatly decreases the odds while\n  //       we reevaluate the API.\n\n  /** @type {?} */\n\n  var _ = auth.pipe(first()).subscribe();\n\n  this.authState = auth.pipe(switchMap(\n  /**\n  * @param {?} auth\n  * @return {?}\n  */\n  function (auth) {\n    return zone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    function () {\n      return new Observable(auth.onAuthStateChanged.bind(auth));\n    });\n  }), keepUnstableUntilFirst);\n  this.user = auth.pipe(switchMap(\n  /**\n  * @param {?} auth\n  * @return {?}\n  */\n  function (auth) {\n    return zone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    function () {\n      return new Observable(auth.onIdTokenChanged.bind(auth));\n    });\n  }), keepUnstableUntilFirst);\n  this.idToken = this.user.pipe(switchMap(\n  /**\n  * @param {?} user\n  * @return {?}\n  */\n  function (user) {\n    return user ? from(user.getIdToken()) : of(null);\n  }));\n  this.idTokenResult = this.user.pipe(switchMap(\n  /**\n  * @param {?} user\n  * @return {?}\n  */\n  function (user) {\n    return user ? from(user.getIdTokenResult()) : of(null);\n  }));\n  return ɵlazySDKProxy(this, auth, zone);\n};\n\nAngularFireAuth.ɵfac = function AngularFireAuth_Factory(t) {\n  return new (t || AngularFireAuth)(ɵngcc0.ɵɵinject(FIREBASE_OPTIONS), ɵngcc0.ɵɵinject(FIREBASE_APP_NAME, 8), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(NgZone));\n};\n/** @nocollapse */\n\n\nAngularFireAuth.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [FIREBASE_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [FIREBASE_APP_NAME]\n    }]\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: NgZone\n  }];\n};\n/** @nocollapse */\n\n\nAngularFireAuth.ɵprov = ɵɵdefineInjectable({\n  factory: function AngularFireAuth_Factory() {\n    return new AngularFireAuth(ɵɵinject(FIREBASE_OPTIONS), ɵɵinject(FIREBASE_APP_NAME, 8), ɵɵinject(PLATFORM_ID), ɵɵinject(NgZone));\n  },\n  token: AngularFireAuth,\n  providedIn: \"any\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AngularFireAuth, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [FIREBASE_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FIREBASE_APP_NAME]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: NgZone\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * Observable of authentication state; as of Firebase 4.0 this is only triggered via sign-in/out\n   * @type {?}\n   */\n  AngularFireAuth.prototype.authState;\n  /**\n   * Observable of the currently signed-in user's JWT token used to identify the user to a Firebase service (or null).\n   * @type {?}\n   */\n\n  AngularFireAuth.prototype.idToken;\n  /**\n   * Observable of the currently signed-in user (or null).\n   * @type {?}\n   */\n\n  AngularFireAuth.prototype.user;\n  /**\n   * Observable of the currently signed-in user's IdTokenResult object which contains the ID token JWT string and other\n   * helper properties for getting different data associated with the token as well as all the decoded payload claims\n   * (or null).\n   * @type {?}\n   */\n\n  AngularFireAuth.prototype.idTokenResult;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar AngularFireAuthModule = function AngularFireAuthModule() {\n  _classCallCheck(this, AngularFireAuthModule);\n};\n\nAngularFireAuthModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: AngularFireAuthModule\n});\nAngularFireAuthModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function AngularFireAuthModule_Factory(t) {\n    return new (t || AngularFireAuthModule)();\n  },\n  providers: [AngularFireAuth]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AngularFireAuthModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AngularFireAuth]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { AngularFireAuth, AngularFireAuthModule };","map":{"version":3,"sources":["../../../src/auth/auth.ts","../../../src/auth/auth.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject, Optional, NgZone, PLATFORM_ID } from '@angular/core';\nimport { Observable, of, from } from 'rxjs';\nimport { switchMap, map, observeOn, shareReplay, first } from 'rxjs/operators';\nimport {\n  FIREBASE_OPTIONS,\n  FIREBASE_APP_NAME,\n  FirebaseOptions,\n  FirebaseAppConfig,\n  ɵPromiseProxy,\n  ɵlazySDKProxy,\n  ɵfirebaseAppFactory,\n  ɵAngularFireSchedulers,\n  ɵkeepUnstableUntilFirstFactory\n} from '@angular/fire';\nimport { User, auth } from 'firebase/app';\n\nexport interface AngularFireAuth extends ɵPromiseProxy<auth.Auth> {}\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireAuth {\n\n  /**\n   * Observable of authentication state; as of Firebase 4.0 this is only triggered via sign-in/out\n   */\n  public readonly authState: Observable<User|null>;\n\n  /**\n   * Observable of the currently signed-in user's JWT token used to identify the user to a Firebase service (or null).\n   */\n  public readonly idToken: Observable<string|null>;\n\n  /**\n   * Observable of the currently signed-in user (or null).\n   */\n  public readonly user: Observable<User|null>;\n\n  /**\n   * Observable of the currently signed-in user's IdTokenResult object which contains the ID token JWT string and other\n   * helper properties for getting different data associated with the token as well as all the decoded payload claims\n   * (or null).\n   */\n  public readonly idTokenResult: Observable<auth.IdTokenResult|null>;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options: FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig: string|FirebaseAppConfig|null|undefined,\n    // tslint:disable-next-line:ban-types\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone\n  ) {\n    const schedulers = new ɵAngularFireSchedulers(zone);\n    const keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(schedulers);\n\n    const auth = of(undefined).pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(() => zone.runOutsideAngular(() => import('firebase/auth'))),\n      map(() => ɵfirebaseAppFactory(options, zone, nameOrConfig)),\n      map(app => zone.runOutsideAngular(() => app.auth())),\n      shareReplay({ bufferSize: 1, refCount: false }),\n    );\n\n    // HACK, as we're exporting auth.Auth, rather than auth, developers importing firebase.auth\n    //       (e.g, `import { auth } from 'firebase/app'`) are getting an undefined auth object unexpectedly\n    //       as we're completely lazy. Let's eagerly load the Auth SDK here.\n    //       There could potentially be race conditions still... but this greatly decreases the odds while\n    //       we reevaluate the API.\n    const _ = auth.pipe(first()).subscribe();\n\n    this.authState = auth.pipe(\n      switchMap(auth => zone.runOutsideAngular(() => new Observable<User|null>(auth.onAuthStateChanged.bind(auth)))),\n      keepUnstableUntilFirst\n    );\n\n    this.user = auth.pipe(\n      switchMap(auth => zone.runOutsideAngular(() => new Observable<User|null>(auth.onIdTokenChanged.bind(auth)))),\n      keepUnstableUntilFirst\n    );\n\n    this.idToken = this.user.pipe(\n      switchMap(user => user ? from(user.getIdToken()) : of(null))\n    );\n\n    this.idTokenResult = this.user.pipe(\n      switchMap(user => user ? from(user.getIdTokenResult()) : of(null))\n    );\n\n    return ɵlazySDKProxy(this, auth, zone);\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { AngularFireAuth } from './auth';\n\n@NgModule({\n  providers: [ AngularFireAuth ]\n})\nexport class AngularFireAuthModule { }\n"]},"metadata":{},"sourceType":"module"}