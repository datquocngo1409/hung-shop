{"ast":null,"code":"import _slicedToArray from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _get from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _taggedTemplateLiteral from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _defineProperty from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _inherits from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\":kendo.textbox.clear|The title for the **Clear** button in the TextBox.\\u241Fe6edd360fd0d3c873c0d94a3aecd3c407d31da5a\\u241F2651889799249671820:Clear\"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\":kendo.numerictextbox.decrement|The title for the **Decrement** button in the NumericTextBox\\u241Fdf4751834075bf970c77d0da2c960b4e19a6b0dd\\u241F3960022057994897997:Decrease value\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\":kendo.numerictextbox.increment|The title for the **Increment** button in the NumericTextBox\\u241F0fc68540ffa04fdc246cf6cf8a1fed085f8b19a5\\u241F4467784268438010275:Increase value\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\":kendo.switch.off|The **Off** label of the Switch.\\u241F79df1a6d2b35c32b2948e3cee56dd3ffe28127bc\\u241F759820891948194060:OFF\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\":kendo.switch.on|The **On** label of the Switch.\\u241F155f0a38198ffbf0429c5dbf9765e74f246a8617\\u241F818154782831456441:ON\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\":kendo.rangeslider.dragHandleEnd|The title of the **End** drag handle of the Slider.\\u241Fd6af522570cc1aff06104cee4b7780d6835e01d1\\u241F6915505327582510906:Drag\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\":kendo.rangeslider.dragHandleStart|The title of the **Start** drag handle of the Slider.\\u241F4487c64285c2d8cdb336be783b6cb9304ce86007\\u241F1512034289801794423:Drag\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\":kendo.slider.dragHandle|The title of the drag handle of the Slider.\\u241F481eb98e9cd8ef8e8b22051796441901e883763d\\u241F9117416417579607469:Drag\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\":kendo.slider.decrement|The title of the **Decrease** button of the Slider.\\u241F042c26f68d78afd6834ea46a5f7533850fe8c800\\u241F652458644240352212:decrement\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\":kendo.slider.increment|The title of the **Increase** button of the Slider.\\u241F0fa71630d40c425b9c366afd7f6c3cecc5bef59d\\u241F8302125540024939132:increment\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n/**-----------------------------------------------------------------------------------------\n* Copyright © 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { isDevMode, Directive, TemplateRef, Optional, EventEmitter, Input, Output, HostBinding, ViewChild, ElementRef, ContentChild, Component, forwardRef, Injector, Renderer2, NgZone, ChangeDetectorRef, Inject, Injectable, HostListener, ViewChildren, NgModule, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR, NG_VALIDATORS, RadioControlValueAccessor } from '@angular/forms';\nimport { Subscription, fromEvent, interval, merge, Observable } from 'rxjs';\nimport { take, filter, concatMap, startWith, takeUntil, skip, debounceTime } from 'rxjs/operators';\nimport { LocalizationService, L10N_PREFIX, RTL, ComponentMessages } from '@progress/kendo-angular-l10n';\nimport { Keys, guid, hasObservers, anyChanged, isDocumentAvailable, KendoInput, isChanged, DraggableModule, EventsModule, ResizeSensorModule } from '@progress/kendo-angular-common';\nimport { browser, mobileOS } from '@progress/kendo-common';\nimport { IntlService } from '@progress/kendo-angular-intl';\nimport { CommonModule } from '@angular/common';\nimport { PopupService, PopupModule } from '@progress/kendo-angular-popup';\nimport { Color, parseColor, namedColors } from '@progress/kendo-drawing';\n/**\n * @hidden\n *\n * Checks if the value is `null` or `undefined`. Falsy values like '', 0, false, NaN, etc. are regarded as present.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@progress/kendo-angular-common';\nimport * as ɵngcc2 from '@angular/common';\nvar _c0 = [\"wrap\"];\nvar _c1 = [\"track\"];\nvar _c2 = [\"sliderSelection\"];\nvar _c3 = [\"ticks\"];\nvar _c4 = [\"draghandle\"];\nvar _c5 = [\"decreaseButton\"];\nvar _c6 = [\"increaseButton\"];\n\nfunction SliderComponent_a_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"a\", 14, 15);\n    ɵngcc0.ɵɵelement(2, \"span\", 16);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"title\", ctx_r1.decrementMessage);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r1.decrementMessage);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵclassProp(\"k-i-arrow-w\", !ctx_r1.vertical)(\"k-i-arrow-s\", ctx_r1.vertical);\n  }\n}\n\nfunction SliderComponent_a_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"a\", 17, 18);\n    ɵngcc0.ɵɵelement(2, \"span\", 16);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"title\", ctx_r2.incrementMessage);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r2.incrementMessage);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵclassProp(\"k-i-arrow-e\", !ctx_r2.vertical)(\"k-i-arrow-n\", ctx_r2.vertical);\n  }\n}\n\nfunction SliderComponent_ul_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"ul\", 19, 20);\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"tickTitle\", ctx_r3.title)(\"vertical\", ctx_r3.vertical)(\"step\", ctx_r3.smallStep)(\"largeStep\", ctx_r3.largeStep)(\"min\", ctx_r3.min)(\"max\", ctx_r3.max)(\"labelTemplate\", ctx_r3.labelTemplate == null ? null : ctx_r3.labelTemplate.templateRef);\n  }\n}\n\nvar _c13 = function _c13(a0, a1, a2, a3) {\n  return {\n    focus: a0,\n    blur: a1,\n    click: a2,\n    keydown: a3\n  };\n};\n\nvar _c14 = [\"draghandleStart\"];\nvar _c15 = [\"draghandleEnd\"];\n\nfunction RangeSliderComponent_ul_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"ul\", 13, 14);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"tickTitle\", ctx_r1.title)(\"vertical\", ctx_r1.vertical)(\"step\", ctx_r1.smallStep)(\"largeStep\", ctx_r1.largeStep)(\"min\", ctx_r1.min)(\"max\", ctx_r1.max)(\"labelTemplate\", ctx_r1.labelTemplate == null ? null : ctx_r1.labelTemplate.templateRef);\n  }\n}\n\nvar _c20 = function _c20(a0, a1) {\n  return {\n    click: a0,\n    keydown: a1\n  };\n};\n\nvar _c21 = [\"wrapper\"];\n\nvar _c26 = function _c26(a0, a1, a2, a3) {\n  return {\n    click: a0,\n    keydown: a1,\n    focus: a2,\n    blur: a3\n  };\n};\n\nfunction TextBoxContainerComponent_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"label\", 1);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"for\", ctx_r0.id);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.floatingLabel);\n  }\n}\n\nvar _c27 = [\"*\"];\nvar _c28 = [\"numericInput\"];\nvar _c29 = [\"numericWrap\"];\n\nvar _c34 = function _c34(a0, a1) {\n  return {\n    mouseup: a0,\n    mouseleave: a1\n  };\n};\n\nvar _c35 = function _c35(a0) {\n  return {\n    mousedown: a0\n  };\n};\n\nfunction NumericTextBoxComponent_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 7);\n    ɵngcc0.ɵɵelementStart(1, \"span\", 8);\n    ɵngcc0.ɵɵelement(2, \"span\", 9);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"span\", 10);\n    ɵngcc0.ɵɵelement(4, \"span\", 11);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"kendoEventsOutsideAngular\", ɵngcc0.ɵɵpureFunction2(11, _c34, ctx_r2.releaseArrow, ctx_r2.releaseArrow));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"k-state-active\", ctx_r2.arrowDirection === ctx_r2.ArrowDirection.Up);\n    ɵngcc0.ɵɵproperty(\"kendoEventsOutsideAngular\", ɵngcc0.ɵɵpureFunction1(14, _c35, ctx_r2.increasePress))(\"title\", ctx_r2.incrementTitle);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r2.incrementTitle);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵclassProp(\"k-state-active\", ctx_r2.arrowDirection === ctx_r2.ArrowDirection.Down);\n    ɵngcc0.ɵɵproperty(\"kendoEventsOutsideAngular\", ɵngcc0.ɵɵpureFunction1(16, _c35, ctx_r2.decreasePress))(\"title\", ctx_r2.decrementTitle);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r2.decrementTitle);\n  }\n}\n\nvar _c36 = function _c36(a0, a1) {\n  return {\n    mousewheel: a0,\n    DOMMouseScroll: a1\n  };\n};\n\nvar _c37 = function _c37(a0, a1, a2, a3, a4, a5, a6) {\n  return {\n    mousedown: a0,\n    dragenter: a1,\n    keydown: a2,\n    input: a3,\n    focus: a4,\n    blur: a5,\n    paste: a6\n  };\n};\n\nvar _c38 = [\"input\"];\n\nvar _c39 = function _c39(a0, a1, a2, a3, a4) {\n  return {\n    focus: a0,\n    blur: a1,\n    click: a2,\n    dragstart: a3,\n    drop: a4\n  };\n};\n\nvar _c40 = [\"tickElement\"];\nvar _c41 = [\"kendoSliderTicks\", \"\"];\n\nfunction SliderTicksComponent_li_0_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 7);\n    ɵngcc0.ɵɵelementContainer(1, 8);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var tick_r3 = ɵngcc0.ɵɵnextContext().$implicit;\n    var ctx_r5 = ɵngcc0.ɵɵnextContext();\n\n    var _r1 = ɵngcc0.ɵɵreference(2);\n\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r5.labelTemplate || _r1)(\"ngTemplateOutletContext\", tick_r3);\n  }\n}\n\nfunction SliderTicksComponent_li_0_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1, \"\\xA0\");\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction SliderTicksComponent_li_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"li\", 2, 3);\n    ɵngcc0.ɵɵelementContainerStart(2, 4);\n    ɵngcc0.ɵɵtemplate(3, SliderTicksComponent_li_0_span_3_Template, 2, 2, \"span\", 5);\n    ɵngcc0.ɵɵtemplate(4, SliderTicksComponent_li_0_ng_container_4_Template, 2, 0, \"ng-container\", 6);\n    ɵngcc0.ɵɵelementContainerEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var tick_r3 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵpropertyInterpolate(\"title\", ctx_r0.tickTitle(tick_r3.value));\n    ɵngcc0.ɵɵproperty(\"ngClass\", tick_r3.classes);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", tick_r3.large);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n  }\n}\n\nfunction SliderTicksComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    var value_r8 = ctx.value;\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r2.tickTitle(value_r8), \" \");\n  }\n}\n\nfunction TextBoxComponent_3_ng_template_0_Template(rf, ctx) {}\n\nfunction TextBoxComponent_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, TextBoxComponent_3_ng_template_0_Template, 0, 0, \"ng-template\", 9);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.prefixTemplate == null ? null : ctx_r0.prefixTemplate.templateRef);\n  }\n}\n\nfunction TextBoxComponent_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 10);\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r2.errorIconClasses);\n  }\n}\n\nfunction TextBoxComponent_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 10);\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r3.successIconClasses);\n  }\n}\n\nfunction TextBoxComponent_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"span\", 11);\n    ɵngcc0.ɵɵlistener(\"click\", function TextBoxComponent_span_9_Template_span_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      var ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.clearValue();\n    })(\"mousedown\", function TextBoxComponent_span_9_Template_span_mousedown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      return $event.preventDefault();\n    })(\"keydown.enter\", function TextBoxComponent_span_9_Template_span_keydown_enter_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      var ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.clearValue();\n    })(\"keydown.space\", function TextBoxComponent_span_9_Template_span_keydown_space_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      var ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.clearValue();\n    });\n    ɵngcc0.ɵɵelement(1, \"span\", 10);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"tabindex\", ctx_r4.tabIndex)(\"title\", ctx_r4.clearTitle());\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r4.clearTitle());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.clearButtonClasses);\n  }\n}\n\nfunction TextBoxComponent_10_ng_template_0_Template(rf, ctx) {}\n\nfunction TextBoxComponent_10_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, TextBoxComponent_10_ng_template_0_Template, 0, 0, \"ng-template\", 9);\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r5.suffixTemplate == null ? null : ctx_r5.suffixTemplate.templateRef);\n  }\n}\n\nvar _c44 = function _c44(a0, a1, a2) {\n  return {\n    focus: a0,\n    blur: a1,\n    input: a2\n  };\n};\n\nvar _c45 = [\"palette\"];\nvar _c46 = [\"container\"];\nvar _c47 = [\"popupTemplate\"];\n\nfunction ColorPickerComponent_span_2_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 10);\n  }\n}\n\nfunction ColorPickerComponent_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵlistener(\"click\", function ColorPickerComponent_span_2_Template_span_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      var ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.handleActiveColorClick();\n    });\n    ɵngcc0.ɵɵtemplate(1, ColorPickerComponent_span_2_span_1_Template, 1, 0, \"span\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"background-color\", ctx_r1.value);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r1.value);\n  }\n}\n\nfunction ColorPickerComponent_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"span\", 11);\n    ɵngcc0.ɵɵlistener(\"click\", function ColorPickerComponent_span_3_Template_span_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.handleActiveColorClick();\n    });\n    ɵngcc0.ɵɵelement(1, \"span\", 12);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r2.iconStyles);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"background-color\", ctx_r2.value);\n  }\n}\n\nfunction ColorPickerComponent_ng_template_6_kendo_colorgradient_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r14 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"kendo-colorgradient\", 15);\n    ɵngcc0.ɵɵlistener(\"focusout\", function ColorPickerComponent_ng_template_6_kendo_colorgradient_0_Template_kendo_colorgradient_focusout_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r14);\n      var ctx_r13 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r13.handlePopupBlur($event);\n    })(\"valueChange\", function ColorPickerComponent_ng_template_6_kendo_colorgradient_0_Template_kendo_colorgradient_valueChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r14);\n      var ctx_r15 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r15.handleValueChange($event, false);\n    })(\"keydown\", function ColorPickerComponent_ng_template_6_kendo_colorgradient_0_Template_kendo_colorgradient_keydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r14);\n      var ctx_r16 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r16.handlePopupKeyDown($event.keyCode);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r11 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"value\", ctx_r11.value)(\"format\", ctx_r11.format)(\"opacity\", ctx_r11.gradientSettings.opacity)(\"clearButton\", ctx_r11.gradientSettings.clearButton);\n  }\n}\n\nfunction ColorPickerComponent_ng_template_6_kendo_colorpalette_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r19 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"kendo-colorpalette\", 16, 17);\n    ɵngcc0.ɵɵlistener(\"blur\", function ColorPickerComponent_ng_template_6_kendo_colorpalette_1_Template_kendo_colorpalette_blur_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r19);\n      var ctx_r18 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r18.handlePopupBlur($event);\n    })(\"cellSelection\", function ColorPickerComponent_ng_template_6_kendo_colorpalette_1_Template_kendo_colorpalette_cellSelection_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r19);\n      var ctx_r20 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r20.handleValueChange($event, true);\n    })(\"mousedown\", function ColorPickerComponent_ng_template_6_kendo_colorpalette_1_Template_kendo_colorpalette_mousedown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r19);\n      return $event.preventDefault();\n    })(\"keydown\", function ColorPickerComponent_ng_template_6_kendo_colorpalette_1_Template_kendo_colorpalette_keydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r19);\n      var ctx_r22 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r22.handlePopupKeyDown($event.keyCode);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r12 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"palette\", ctx_r12.paletteSettings.palette)(\"columns\", ctx_r12.paletteSettings.columns)(\"tileSize\", ctx_r12.paletteSettings.tileSize)(\"format\", ctx_r12.format)(\"value\", ctx_r12.value);\n  }\n}\n\nfunction ColorPickerComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, ColorPickerComponent_ng_template_6_kendo_colorgradient_0_Template, 1, 4, \"kendo-colorgradient\", 13);\n    ɵngcc0.ɵɵtemplate(1, ColorPickerComponent_ng_template_6_kendo_colorpalette_1_Template, 2, 5, \"kendo-colorpalette\", 14);\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r4.view === \"gradient\" || ctx_r4.view === \"combo\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r4.view === \"palette\" || ctx_r4.view === \"combo\");\n  }\n}\n\nvar _c48 = function _c48(a1, a2, a3) {\n  return {\n    \"k-picker-wrap\": true,\n    \"k-state-default\": a1,\n    \"k-state-disabled\": a2,\n    \"k-state-focused\": a3\n  };\n};\n\nvar _c49 = function _c49(a0, a1, a2, a3) {\n  return {\n    backgroundColor: a0,\n    width: a1,\n    height: a2,\n    minWidth: a3\n  };\n};\n\nfunction ColorPaletteComponent_tr_3_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"td\", 5);\n    ɵngcc0.ɵɵlistener(\"click\", function ColorPaletteComponent_tr_3_td_1_Template_td_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      var color_r4 = ctx.$implicit;\n      var colIndex_r5 = ctx.index;\n      var rowIndex_r2 = ɵngcc0.ɵɵnextContext().index;\n      var ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.handleCellSelection(color_r4, {\n        row: rowIndex_r2,\n        col: colIndex_r5\n      });\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var color_r4 = ctx.$implicit;\n    var colIndex_r5 = ctx.index;\n    var rowIndex_r2 = ɵngcc0.ɵɵnextContext().index;\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"k-state-selected\", (ctx_r3.focusedCell == null ? null : ctx_r3.focusedCell.row) === rowIndex_r2 && (ctx_r3.focusedCell == null ? null : ctx_r3.focusedCell.col) === colIndex_r5);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction4(4, _c49, color_r4, ctx_r3.tileLayout.width + \"px\", ctx_r3.tileLayout.height + \"px\", ctx_r3.tileLayout.width + \"px\"));\n    ɵngcc0.ɵɵattribute(\"value\", color_r4);\n  }\n}\n\nfunction ColorPaletteComponent_tr_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"tr\", 3);\n    ɵngcc0.ɵɵtemplate(1, ColorPaletteComponent_tr_3_td_1_Template, 1, 9, \"td\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var row_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", row_r1);\n  }\n}\n\nvar _c50 = [\"alphaSlider\"];\nvar _c51 = [\"gradientWrapper\"];\nvar _c52 = [\"dragHandle\"];\n\nfunction ColorGradientComponent_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"span\", 10);\n    ɵngcc0.ɵɵlistener(\"click\", function ColorGradientComponent_span_7_Template_span_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.reset();\n    });\n    ɵngcc0.ɵɵelement(1, \"span\", 11);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction ColorGradientComponent_kendo_slider_9_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"kendo-slider\", 12, 13);\n    ɵngcc0.ɵɵlistener(\"valueChange\", function ColorGradientComponent_kendo_slider_9_Template_kendo_slider_valueChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      var ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.handleAlphaSliderChange($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"disabled\", ctx_r3.disabled)(\"readonly\", ctx_r3.readonly)(\"showButtons\", false)(\"tickPlacement\", \"none\")(\"vertical\", true)(\"min\", 0)(\"max\", 100)(\"smallStep\", 1)(\"largeStep\", 10)(\"value\", ctx_r3.alphaSliderValue);\n  }\n}\n\nfunction ColorInputComponent_kendo_numerictextbox_6_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"kendo-numerictextbox\", 9);\n    ɵngcc0.ɵɵlistener(\"valueChange\", function ColorInputComponent_kendo_numerictextbox_6_Template_kendo_numerictextbox_valueChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.rgba.a = $event;\n    })(\"blur\", function ColorInputComponent_kendo_numerictextbox_6_Template_kendo_numerictextbox_blur_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.handleRgbaInputBlur();\n    })(\"valueChange\", function ColorInputComponent_kendo_numerictextbox_6_Template_kendo_numerictextbox_valueChange_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.handleRgbaValueChange();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"disabled\", ctx_r1.disabled)(\"readonly\", ctx_r1.readonly)(\"min\", 0)(\"max\", 1)(\"value\", ctx_r1.rgba.a)(\"autoCorrect\", true)(\"spinners\", false)(\"step\", 0.01)(\"format\", \"n2\")(\"decimals\", 2);\n  }\n}\n\nfunction ColorInputComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtext(1, \"a\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction FormFieldComponent_ng_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 2, [\"*ngIf\", \"hasHints\"]);\n  }\n}\n\nfunction FormFieldComponent_ng_content_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 3, [\"*ngIf\", \"hasErrors\"]);\n  }\n}\n\nvar _c53 = [[[\"label\"], [\"kendo-label\"]], \"*\", [[\"kendo-formhint\"]], [[\"kendo-formerror\"]]];\nvar _c54 = [\"label, kendo-label\", \"*\", \"kendo-formhint\", \"kendo-formerror\"];\n\nvar isPresent = function isPresent(value) {\n  return value !== null && value !== undefined;\n};\n/**\n * @hidden\n */\n\n\nvar areSame = function areSame(value1, value2) {\n  return value1 === value2 || value1 === null && value2 === undefined || value1 === undefined && value2 === null;\n};\n/**\n * @hidden\n */\n\n\nvar requiresZoneOnBlur = function requiresZoneOnBlur(ngControl) {\n  return ngControl && (!ngControl.touched || ngControl.control && ngControl.control.updateOn === 'blur');\n};\n/**\n * @hidden\n *\n * Fits the contender number into the specified bounds. If the number is NaN or null, the min is returned.\n *\n * @param contender Represents the number you want to fit into specified bounds.\n * @param min The inclusive lower bound number.\n * @param max The inclusive upper bound number.\n */\n\n\nvar fitIntoBounds = function fitIntoBounds(contender, min, max) {\n  if (!isPresent(contender) || isNaN(contender)) {\n    return min;\n  }\n\n  return contender <= min ? min : contender >= max ? max : contender;\n};\n/**\n * @hidden\n */\n\n\nvar MAX_PRECISION = 20;\n/**\n * @hidden\n */\n\nvar limitPrecision = function limitPrecision(precision) {\n  return Math.min(precision, MAX_PRECISION);\n};\n/**\n * @hidden\n */\n\n\nvar fractionLength = function fractionLength(value) {\n  return (String(value).split('.')[1] || \"\").length;\n};\n\nvar maxFractionLength = function maxFractionLength(value1, value2) {\n  return Math.max(fractionLength(value1), fractionLength(value2));\n};\n/**\n * @hidden\n */\n\n\nvar toFixedPrecision = function toFixedPrecision(value, precision) {\n  var maxPrecision = limitPrecision(precision);\n  return parseFloat(value.toFixed(maxPrecision));\n};\n/**\n * @hidden\n */\n\n\nvar add = function add(value1, value2) {\n  var maxPrecision = maxFractionLength(value1, value2);\n  return toFixedPrecision(value1 + value2, maxPrecision);\n};\n/**\n * @hidden\n */\n\n\nvar subtract = function subtract(value1, value2) {\n  return add(value1, -value2);\n};\n/**\n * @hidden\n */\n\n\nvar multiply = function multiply(value1, value2) {\n  var maxPrecision = fractionLength(value1) + fractionLength(value2);\n  return toFixedPrecision(value1 * value2, maxPrecision);\n};\n/**\n * @hidden\n */\n\n\nvar divide = function divide(dividend, divisor) {\n  if (divisor === 0) {\n    return NaN;\n  }\n\n  var power = maxFractionLength(dividend, divisor);\n  var correctionValue = Math.pow(10, power);\n  return correctionValue * dividend / (correctionValue * divisor);\n};\n/**\n * @hidden\n */\n\n\nvar remainder = function remainder(dividend, divisor) {\n  return Math.abs(subtract(dividend, multiply(divisor, Math.floor(divide(dividend, divisor)))));\n};\n/**\n * @hidden\n */\n\n\nvar calculateFixedTrackSize = function calculateFixedTrackSize(_ref) {\n  var max = _ref.max,\n      min = _ref.min,\n      smallStep = _ref.smallStep,\n      fixedTickWidth = _ref.fixedTickWidth;\n  return (max - min) / smallStep * fixedTickWidth;\n};\n/**\n * @hidden\n */\n\n\nvar calculateTrackSize = function calculateTrackSize(wrapperWidth, offset) {\n  var showButtons = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var BUTTONS_COUNT = 2;\n  var trackOffset = showButtons ? parseFloat(offset) * BUTTONS_COUNT : 0;\n  var trackWidth = wrapperWidth - trackOffset;\n  return Math.floor(trackWidth);\n};\n/**\n * @hidden\n */\n\n\nvar calculateTicksCount = function calculateTicksCount() {\n  var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var smallStep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (smallStep <= 0) {\n    throw new Error('Invalid argument: smallStep must be a positive number');\n  }\n\n  var adjustedRange = Math.abs(subtract(max, min));\n  var adjustedRatio = Math.floor(divide(adjustedRange, smallStep));\n  var result = add(adjustedRatio, 1);\n  return result;\n};\n/**\n * @hidden\n */\n\n\nvar calculateValueFromTick = function calculateValueFromTick(index, _ref2) {\n  var max = _ref2.max,\n      min = _ref2.min,\n      smallStep = _ref2.smallStep,\n      reverse = _ref2.reverse,\n      vertical = _ref2.vertical;\n  var value = add(min, multiply(index, smallStep));\n  return vertical || reverse ? Math.abs(subtract(value, max)) : value;\n};\n/**\n * @hidden\n */\n\n\nvar calculateHandlePosition = function calculateHandlePosition(_ref3) {\n  var handleWidth = _ref3.handleWidth,\n      trackWidth = _ref3.trackWidth,\n      min = _ref3.min,\n      max = _ref3.max,\n      reverse = _ref3.reverse,\n      value = _ref3.value;\n  var halfHandleWidth = Math.floor(handleWidth / 2);\n  var step = trackWidth / Math.abs(max - min);\n  var pos = isPresent(value) ? step * (value - min) : min;\n\n  if (reverse) {\n    pos = trackWidth - pos;\n  }\n\n  return Math.floor(pos - halfHandleWidth);\n};\n/**\n * @hidden\n */\n\n\nvar decreaseValueToStep = function decreaseValueToStep(value, _ref4) {\n  var max = _ref4.max,\n      min = _ref4.min,\n      smallStep = _ref4.smallStep,\n      largeStep = _ref4.largeStep;\n  var large = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var step = large && largeStep ? multiply(smallStep, largeStep) : smallStep;\n  var stepValue = subtract(value, min);\n  var result;\n  var stepRemainder = remainder(stepValue, step);\n\n  if (stepRemainder === 0) {\n    result = subtract(stepValue, step);\n  } else {\n    result = subtract(stepValue, stepRemainder);\n  }\n\n  return limitValue(add(result, min), min, max);\n};\n/**\n * @hidden\n */\n\n\nvar increaseValueToStep = function increaseValueToStep(value, _ref5) {\n  var max = _ref5.max,\n      min = _ref5.min,\n      smallStep = _ref5.smallStep,\n      largeStep = _ref5.largeStep;\n  var large = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var step = large && largeStep ? multiply(smallStep, largeStep) : smallStep;\n  var stepValue = subtract(value, min);\n  var stepRemainder = remainder(stepValue, step);\n  var result = add(subtract(stepValue, stepRemainder), step);\n  return limitValue(add(result, min), min, max);\n};\n/**\n * @hidden\n */\n\n\nvar isStartHandle = function isStartHandle(dragHandle) {\n  return dragHandle.id.indexOf('k-start-handle') > -1;\n};\n/**\n * @hidden\n */\n\n\nvar snapValue = function snapValue(value, options) {\n  var smallStep = options.smallStep,\n      min = options.min,\n      max = options.max;\n  var limited = limitValue(value, min, max);\n\n  if (value !== limited) {\n    return limited;\n  }\n\n  var left = decreaseValueToStep(value, options);\n  var right = increaseValueToStep(value, options);\n\n  if ((value - min) % smallStep === 0) {\n    return value;\n  }\n\n  if (right - value <= (right - left) / 2) {\n    return right;\n  }\n\n  return left;\n};\n/**\n * @hidden\n */\n\n\nvar trimValue = function trimValue(max, min, value) {\n  if (value > max) {\n    return max;\n  }\n\n  if (value < min) {\n    return min;\n  }\n\n  return value;\n};\n/**\n * @hidden\n */\n\n\nvar trimValueRange = function trimValueRange(max, min, value) {\n  return value ? [trimValue(max, min, value[0]), trimValue(max, min, value[1])] : [min, min];\n};\n/**\n * @hidden\n */\n\n\nvar identity = function identity(value) {\n  return value;\n};\n/**\n * @hidden\n */\n\n\nvar isSameRange = function isSameRange(value1, value2) {\n  return areSame(value1[0], value2[0]) && areSame(value1[1], value2[1]);\n};\n/**\n * @hidden\n */\n\n\nvar elementOffset = function elementOffset(element) {\n  var box = element.getBoundingClientRect();\n  var documentElement = document.documentElement;\n  return {\n    left: box.left + (window.pageXOffset || documentElement.scrollLeft) - (documentElement.clientLeft || 0),\n    top: box.top + (window.pageYOffset || documentElement.scrollTop) - (documentElement.clientTop || 0)\n  };\n};\n/**\n * @hidden\n */\n\n\nvar limitValue = function limitValue(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n};\n/**\n * @hidden\n */\n\n\nvar eventValue = function eventValue(eventArgs, scaleElement, options) {\n  var min = options.min,\n      max = options.max,\n      vertical = options.vertical,\n      rtl = options.rtl;\n  var trackOffset = elementOffset(scaleElement);\n  var offset = vertical ? eventArgs.pageY - trackOffset.top : eventArgs.pageX - trackOffset.left;\n  var scale = (max - min) / (vertical ? scaleElement.clientHeight : scaleElement.clientWidth);\n  var offsetValue = offset * scale;\n  var value = rtl || vertical ? max - offsetValue : min + offsetValue;\n  var stepFractionLength = fractionLength(options.smallStep);\n  value = toFixedPrecision(value, stepFractionLength + 1);\n  return snapValue(value, options);\n};\n/**\n * @hidden\n */\n\n\nvar isButton = function isButton(element) {\n  return element.className.indexOf('k-button-increase') >= 0 || element.className.indexOf('k-button-decrease') >= 0;\n};\n/**\n * @hidden\n */\n\n\nvar increment = function increment(options) {\n  return increaseValueToStep(options.value, options);\n};\n/**\n * @hidden\n */\n\n\nvar decrement = function decrement(options) {\n  return decreaseValueToStep(options.value, options);\n};\n/**\n * @hidden\n */\n\n\nvar incrementLarge = function incrementLarge(options) {\n  return increaseValueToStep(options.value, options, true);\n};\n/**\n * @hidden\n */\n\n\nvar decrementLarge = function decrementLarge(options) {\n  return decreaseValueToStep(options.value, options, true);\n};\n/**\n * @hidden\n */\n\n\nvar validateValue = function validateValue(value) {\n  if (isDevMode && value && value[0] > value[1]) {\n    throw new Error('[RangeSlider] The start value should not be greater than the end value.');\n  }\n};\n/**\n * @hidden\n */\n\n\nvar SliderModelBase = /*#__PURE__*/function () {\n  function SliderModelBase(props, wrapper, track, renderer) {\n    _classCallCheck(this, SliderModelBase);\n\n    this.props = props;\n    this.wrapper = wrapper;\n    this.track = track;\n    this.renderer = renderer;\n    this.props = props;\n    this.wrapper = wrapper;\n    this.track = track;\n    this.tickSizes = this.getTickSizes();\n  }\n\n  _createClass(SliderModelBase, [{\n    key: \"resizeTrack\",\n    value: function resizeTrack() {\n      var orientation = this.props.vertical ? 'height' : 'width';\n      var trackWidth = this.trackWidth();\n      this.track.style[orientation] = \"\".concat(trackWidth, \"px\");\n    }\n  }, {\n    key: \"resizeTicks\",\n    value: function resizeTicks(ticksContainer, ticks) {\n      var _this = this;\n\n      var dimension = this.props.vertical ? \"height\" : \"width\";\n\n      _toConsumableArray(ticks).map(function (tick, index) {\n        return tick.style[dimension] = \"\".concat(_this.tickSizes[index], \"px\");\n      });\n\n      if (this.props.vertical) {\n        this.adjustPadding(ticksContainer);\n      }\n    }\n  }, {\n    key: \"resizeWrapper\",\n    value: function resizeWrapper() {\n      var dimension = this.props.vertical ? \"height\" : \"width\";\n      var wrapperSize = this.elementSize(this.wrapper);\n      var trackWidth = calculateTrackSize(wrapperSize, this.elementOffset(this.track));\n      var fixedTrackWidth = calculateFixedTrackSize(this.props);\n      var wrapperParentEl = this.wrapper.parentElement;\n\n      if (trackWidth > fixedTrackWidth) {\n        wrapperParentEl.style[dimension] = \"\".concat(wrapperSize - (trackWidth - fixedTrackWidth), \"px\");\n      } else {\n        wrapperParentEl.style[dimension] = \"\".concat(wrapperSize + (fixedTrackWidth - trackWidth), \"px\");\n      }\n    }\n  }, {\n    key: \"trackWidth\",\n    value: function trackWidth() {\n      if (this.props.fixedTickWidth) {\n        return calculateFixedTrackSize(this.props);\n      }\n\n      return calculateTrackSize(this.elementSize(this.wrapper), this.elementOffset(this.track), this.props.buttons);\n    }\n  }, {\n    key: \"getTickSizes\",\n    value: function getTickSizes() {\n      var _this$props = this.props,\n          min = _this$props.min,\n          max = _this$props.max,\n          smallStep = _this$props.smallStep;\n      var count = calculateTicksCount(min, max, smallStep);\n      var trackSize = this.trackWidth();\n      var distStep = trackSize / subtract(max, min);\n      var result = [];\n      var usedSpace = 0;\n      var endPoint = 0;\n\n      for (var i = 0; i < count; i++) {\n        if (i === 0 || i === count - 1) {\n          endPoint += smallStep / 2 * distStep;\n        } else {\n          endPoint += smallStep * distStep;\n        } // ensure that the sum of the tick sizes does not exceed the track width\n\n\n        endPoint = +endPoint.toFixed(2) - 0.01;\n        var size = Math.round(endPoint - usedSpace);\n        result.push(size);\n        usedSpace += size;\n      }\n\n      if (usedSpace >= trackSize) {\n        result[result.length - 1] -= 1;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"adjustPadding\",\n    value: function adjustPadding(ticksContainer) {\n      var totalTickSize = this.tickSizes.reduce(function (prev, curr) {\n        return prev + curr;\n      }, 0);\n      var trackWidth = this.trackWidth();\n      var reminder = trackWidth - totalTickSize;\n\n      if (reminder !== 0) {\n        var padding = reminder + this.elementOffset(this.track);\n        ticksContainer.style.paddingTop = \"\".concat(padding, \"px\");\n      }\n    }\n  }, {\n    key: \"elementOffset\",\n    value: function elementOffset(element) {\n      var vertical = this.props.vertical;\n      var style = getComputedStyle(element);\n      return parseInt(vertical ? style.bottom : style.left, 10);\n    }\n  }, {\n    key: \"elementSize\",\n    value: function elementSize(element) {\n      var vertical = this.props.vertical;\n      return vertical ? element.clientHeight : element.clientWidth;\n    }\n  }]);\n\n  return SliderModelBase;\n}();\n/**\n * @hidden\n */\n\n\nvar SliderModel = /*#__PURE__*/function (_SliderModelBase) {\n  _inherits(SliderModel, _SliderModelBase);\n\n  var _super = _createSuper(SliderModel);\n\n  function SliderModel() {\n    _classCallCheck(this, SliderModel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SliderModel, [{\n    key: \"positionHandle\",\n    value: function positionHandle(dragHandle) {\n      var _this$props2 = this.props,\n          max = _this$props2.max,\n          min = _this$props2.min,\n          reverse = _this$props2.reverse,\n          vertical = _this$props2.vertical;\n      var position = vertical ? 'bottom' : 'left';\n      var trackWidth = this.trackWidth();\n      var value = trimValue(max, min, this.props.value);\n      this.handlePosition = calculateHandlePosition({\n        min: min,\n        max: max,\n        reverse: reverse,\n        value: value,\n        trackWidth: trackWidth,\n        handleWidth: dragHandle.offsetWidth\n      });\n      this.renderer.setStyle(dragHandle, position, \"\".concat(this.handlePosition, \"px\"));\n    }\n  }, {\n    key: \"positionSelection\",\n    value: function positionSelection(dragHandle, selection) {\n      var _this$props3 = this.props,\n          reverse = _this$props3.reverse,\n          vertical = _this$props3.vertical;\n      var dimension = vertical ? 'height' : 'width';\n      var handleWidth = Math.floor(dragHandle.offsetWidth / 2);\n      var size = this.handlePosition + handleWidth;\n\n      if (reverse) {\n        size = this.trackWidth() - size;\n      }\n\n      this.renderer.setStyle(selection, dimension, \"\".concat(size, \"px\"));\n    }\n  }]);\n\n  return SliderModel;\n}(SliderModelBase);\n\nvar UNTOUCHED = 'ng-untouched';\n\nvar toClassList = function toClassList(classNames) {\n  return String(classNames).trim().split(' ');\n};\n/**\n * @hidden\n */\n\n\nvar hasClass = function hasClass(element, className) {\n  return Boolean(toClassList(element.className).find(function (name) {\n    return name === className;\n  }));\n};\n/**\n * @hidden\n */\n\n\nfunction invokeElementMethod(element, name) {\n  if (element && element.nativeElement) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    return element.nativeElement[name].apply(element.nativeElement, args);\n  }\n}\n/**\n * @hidden\n */\n\n\nvar isUntouched = function isUntouched(element) {\n  return element && element.nativeElement && hasClass(element.nativeElement, UNTOUCHED);\n};\n/**\n * @hidden\n */\n\n\nvar containsFocus = function containsFocus(hostElement, contender) {\n  return hostElement && contender && (hostElement === contender || hostElement.contains(contender));\n};\n/**\n * @hidden\n */\n\n\nvar closest = function closest(node, predicate) {\n  while (node && !predicate(node)) {\n    node = node.parentNode;\n  }\n\n  return node;\n};\n/**\n * Represents the template for the labels of the Slider.\n * To define the labels template, nest an `<ng-template>` tag with the `kendoSliderLabelTemplate` directive inside\n * the `<kendo-slider>` tag. The template context is passed to the `label` value.\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *         <kendo-slider [largeStep]=\"2\">\n *           <ng-template kendoSliderLabelTemplate let-value=\"value\">\n *             <b>{{value}}</b>\n *           </ng-template>\n *         </kendo-slider>\n *     `\n * })\n *\n * class AppComponent {\n * }\n *\n * ```\n */\n\n\nvar LabelTemplateDirective = function LabelTemplateDirective(templateRef) {\n  _classCallCheck(this, LabelTemplateDirective);\n\n  this.templateRef = templateRef;\n};\n\nLabelTemplateDirective.ɵfac = function LabelTemplateDirective_Factory(t) {\n  return new (t || LabelTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(TemplateRef, 8));\n};\n\nLabelTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: LabelTemplateDirective,\n  selectors: [[\"\", \"kendoSliderLabelTemplate\", \"\"]]\n});\n/** @nocollapse */\n\nLabelTemplateDirective.ctorParameters = function () {\n  return [{\n    type: TemplateRef,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LabelTemplateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoSliderLabelTemplate]'\n    }]\n  }], function () {\n    return [{\n      type: TemplateRef,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @hidden\n */\n\n\nvar SliderBase = /*#__PURE__*/function () {\n  function SliderBase(localizationService, injector, renderer, ngZone, changeDetector, hostElement) {\n    var _this2 = this;\n\n    _classCallCheck(this, SliderBase);\n\n    this.localizationService = localizationService;\n    this.injector = injector;\n    this.renderer = renderer;\n    this.ngZone = ngZone;\n    this.changeDetector = changeDetector;\n    this.hostElement = hostElement;\n    /**\n     * Defines the title of the ticks ([see example]({% slug ticks_slider %}#toc-titles)). The default title\n     * for each tick is its Slider value. If you use a callback function, the function accepts an argument\n     * that holds the value of the component and returns a string with the new title.\n     */\n\n    this.title = identity;\n    /**\n     * Denotes the location of the tick marks in the Slider ([see example]({% slug ticks_slider %}#toc-placement)).\n     *\n     * The available options are:\n     * * `before`&mdash;The tick marks are located to the top side of the horizontal track or to the left side of a vertical track.\n     * * `after`&mdash;The tick marks are located to the bottom side of the horizontal track or to the right side of the vertical track.\n     * * `both`&mdash; (Default) The tick marks are located on both sides of the track.\n     * * `none`&mdash;The tick marks are not visible. The actual elements are not added to the DOM tree.\n     */\n\n    this.tickPlacement = 'both';\n    /**\n     * If `vertical` is set to `true`, the orientation of the Slider changes from horizontal to vertical\n     * ([see example]({% slug orientation_slider %})).\n     */\n\n    this.vertical = false;\n    /**\n     * The minimum value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).\n     * The attribute accepts both integers and floating-point numbers.\n     */\n\n    this.min = 0;\n    /**\n     * The maximum value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).\n     * The attribute accepts both integers and floating-point numbers.\n     */\n\n    this.max = 10;\n    /**\n     * The step value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).\n     * Accepts positive values only. Can be an integer or a floating-point number.\n     */\n\n    this.smallStep = 1;\n    /**\n     * Specifies that every n<sup>th</sup> tick will be large and will have a label\n     * ([see example]({% slug predefinedsteps_slider %}#toc-large-steps)).\n     * Accepts positive integer values only.\n     */\n\n    this.largeStep = null;\n    /**\n     * Determines whether the Slider is disabled ([see example]({% slug disabledstate_slider %})).\n     */\n\n    this.disabled = false;\n    /**\n     * Determines whether the Slider is in its read-only state ([see example]({% slug readonly_slider %})).\n     */\n\n    this.readonly = false;\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the Slider.\n     */\n\n    this.tabindex = 0;\n    /**\n     * Fires each time the user focuses the component.\n     */\n\n    this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n\n    /**\n     * Fires each time the component is blurred.\n     */\n\n    this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n\n    /**\n     * Fires each time the user selects a new value.\n     */\n\n    this.valueChange = new EventEmitter();\n    this.sliderClass = true;\n    this.widgetClass = true;\n    this.stateDefaultClass = true;\n    this.subscriptions = new Subscription();\n    /**\n     * @hidden\n     */\n\n    this.ifEnabled = function (callback, event) {\n      if (!_this2.isDisabled) {\n        callback.call(_this2, event);\n      }\n    };\n\n    this.direction = localizationService.rtl ? 'rtl' : 'ltr';\n  }\n\n  _createClass(SliderBase, [{\n    key: \"setDisabledState\",\n\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     *\n     * @param isDisabled\n     */\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this3 = this;\n\n      this.subscriptions.add(this.localizationService.changes.subscribe(function (_ref6) {\n        var rtl = _ref6.rtl;\n        _this3.direction = rtl ? 'rtl' : 'ltr';\n\n        _this3.sizeComponent();\n      }));\n\n      if (this.hostElement) {\n        this.renderer.removeAttribute(this.hostElement.nativeElement, \"tabindex\");\n      }\n\n      this.control = this.injector.get(NgControl, null);\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"isEmpty\",\n\n    /**\n     * @hidden\n     * Used by the FloatingLabel to determine if the component is empty.\n     */\n    value: function isEmpty() {\n      return false;\n    }\n  }, {\n    key: \"resetStyles\",\n    value: function resetStyles(elements) {\n      var _this4 = this;\n\n      elements.forEach(function (el) {\n        if (el) {\n          if (_this4.vertical) {\n            _this4.renderer.removeStyle(el, 'width');\n\n            _this4.renderer.removeStyle(el, 'left');\n\n            _this4.renderer.removeStyle(el, 'right');\n          } else {\n            _this4.renderer.removeStyle(el, 'height');\n\n            _this4.renderer.removeStyle(el, 'bottom');\n          }\n\n          _this4.renderer.removeStyle(el, 'padding-top');\n        }\n      });\n    }\n  }, {\n    key: \"horizontalClass\",\n    get: function get() {\n      return !this.vertical;\n    }\n  }, {\n    key: \"verticalClass\",\n    get: function get() {\n      return this.vertical;\n    }\n  }, {\n    key: \"disabledClass\",\n    get: function get() {\n      return this.disabled;\n    }\n  }, {\n    key: \"isDisabled\",\n    get: function get() {\n      return this.disabled || this.readonly;\n    }\n  }, {\n    key: \"reverse\",\n    get: function get() {\n      return this.localizationService.rtl && !this.vertical;\n    }\n  }, {\n    key: \"keyBinding\",\n    get: function get() {\n      var _ref9;\n\n      var reverse = this.reverse;\n      return _ref9 = {}, _defineProperty(_ref9, Keys.ArrowLeft, reverse ? increment : decrement), _defineProperty(_ref9, Keys.ArrowRight, reverse ? decrement : increment), _defineProperty(_ref9, Keys.ArrowDown, decrement), _defineProperty(_ref9, Keys.ArrowUp, increment), _defineProperty(_ref9, Keys.PageUp, incrementLarge), _defineProperty(_ref9, Keys.PageDown, decrementLarge), _defineProperty(_ref9, Keys.Home, function (_ref7) {\n        var min = _ref7.min;\n        return min;\n      }), _defineProperty(_ref9, Keys.End, function (_ref8) {\n        var max = _ref8.max;\n        return max;\n      }), _ref9;\n    }\n  }]);\n\n  return SliderBase;\n}();\n\nSliderBase.ɵfac = function SliderBase_Factory(t) {\n  ɵngcc0.ɵɵinvalidFactory();\n};\n\nSliderBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: SliderBase,\n  contentQueries: function SliderBase_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, LabelTemplateDirective, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.labelTemplate = _t.first);\n    }\n  },\n  viewQuery: function SliderBase_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵstaticViewQuery(_c0, true);\n      ɵngcc0.ɵɵstaticViewQuery(_c1, true);\n      ɵngcc0.ɵɵstaticViewQuery(_c2, true);\n      ɵngcc0.ɵɵviewQuery(_c3, true, ElementRef);\n      ɵngcc0.ɵɵviewQuery(_c3, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.wrapper = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.track = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.sliderSelection = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ticksContainer = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ticks = _t.first);\n    }\n  },\n  hostVars: 13,\n  hostBindings: function SliderBase_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"dir\", ctx.direction);\n      ɵngcc0.ɵɵclassProp(\"k-slider\", ctx.sliderClass)(\"k-widget\", ctx.widgetClass)(\"k-state-default\", ctx.stateDefaultClass)(\"k-slider-horizontal\", ctx.horizontalClass)(\"k-slider-vertical\", ctx.verticalClass)(\"k-state-disabled\", ctx.disabledClass);\n    }\n  },\n  inputs: {\n    title: \"title\",\n    tickPlacement: \"tickPlacement\",\n    vertical: \"vertical\",\n    min: \"min\",\n    max: \"max\",\n    smallStep: \"smallStep\",\n    largeStep: \"largeStep\",\n    disabled: \"disabled\",\n    readonly: \"readonly\",\n    tabindex: \"tabindex\",\n    fixedTickWidth: \"fixedTickWidth\"\n  },\n  outputs: {\n    onFocus: \"focus\",\n    onBlur: \"blur\",\n    valueChange: \"valueChange\"\n  }\n});\nSliderBase.propDecorators = {\n  title: [{\n    type: Input\n  }],\n  tickPlacement: [{\n    type: Input\n  }],\n  vertical: [{\n    type: Input\n  }],\n  min: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  smallStep: [{\n    type: Input\n  }],\n  largeStep: [{\n    type: Input\n  }],\n  fixedTickWidth: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }],\n  tabindex: [{\n    type: Input\n  }],\n  onFocus: [{\n    type: Output,\n    args: ['focus']\n  }],\n  onBlur: [{\n    type: Output,\n    args: ['blur']\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  direction: [{\n    type: HostBinding,\n    args: ['attr.dir']\n  }],\n  horizontalClass: [{\n    type: HostBinding,\n    args: ['class.k-slider-horizontal']\n  }],\n  verticalClass: [{\n    type: HostBinding,\n    args: ['class.k-slider-vertical']\n  }],\n  sliderClass: [{\n    type: HostBinding,\n    args: ['class.k-slider']\n  }],\n  widgetClass: [{\n    type: HostBinding,\n    args: ['class.k-widget']\n  }],\n  stateDefaultClass: [{\n    type: HostBinding,\n    args: ['class.k-state-default']\n  }],\n  disabledClass: [{\n    type: HostBinding,\n    args: ['class.k-state-disabled']\n  }],\n  wrapper: [{\n    type: ViewChild,\n    args: ['wrap', {\n      static: true\n    }]\n  }],\n  track: [{\n    type: ViewChild,\n    args: ['track', {\n      static: true\n    }]\n  }],\n  sliderSelection: [{\n    type: ViewChild,\n    args: ['sliderSelection', {\n      static: true\n    }]\n  }],\n  ticksContainer: [{\n    type: ViewChild,\n    args: ['ticks', {\n      read: ElementRef\n    }]\n  }],\n  ticks: [{\n    type: ViewChild,\n    args: ['ticks']\n  }],\n  labelTemplate: [{\n    type: ContentChild,\n    args: [LabelTemplateDirective]\n  }]\n};\nvar FOCUSED = 'k-state-focused';\nvar PRESSED = 'k-pressed';\n/**\n * Represents the [Kendo UI Slider component for Angular]({% slug overview_slider %}).\n */\n\nvar SliderComponent = /*#__PURE__*/function (_SliderBase) {\n  _inherits(SliderComponent, _SliderBase);\n\n  var _super2 = _createSuper(SliderComponent);\n\n  function SliderComponent(localization, injector, renderer, ngZone, changeDetector, hostElement) {\n    var _this5;\n\n    _classCallCheck(this, SliderComponent);\n\n    _this5 = _super2.call(this, localization, injector, renderer, ngZone, changeDetector, hostElement);\n    _this5.localization = localization;\n    _this5.injector = injector;\n    _this5.renderer = renderer;\n    _this5.ngZone = ngZone;\n    _this5.changeDetector = changeDetector;\n    _this5.hostElement = hostElement;\n    /**\n     * @hidden\n     */\n\n    _this5.focusableId = \"k-\".concat(guid());\n    /**\n     * Determines if the animation will be played on value change.\n     * Regardless of this setting, no animation will be played during the initial rendering.\n     */\n\n    _this5.animate = true;\n    /**\n     * Renders the arrow side buttons of the Slider ([see example]({% slug sidebuttons_slider %}#toc-hidden-state)).\n     * When `showButtons` is set to `false`, the buttons are not displayed.\n     */\n\n    _this5.showButtons = true;\n    /**\n     * The current value of the Slider when it is initially displayed.\n     * The component can use either NgModel or the `value` binding but not both of them at the same time.\n     */\n\n    _this5.value = _this5.min;\n    /**\n     * @hidden\n     */\n\n    _this5.handleFocus = function () {\n      _this5.focused = true;\n\n      if (hasObservers(_this5.onFocus)) {\n        _this5.ngZone.run(function () {\n          _this5.onFocus.emit();\n        });\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this5.handleBlur = function () {\n      _this5.changeDetector.markForCheck();\n\n      _this5.focused = false;\n\n      if (hasObservers(_this5.onBlur) || requiresZoneOnBlur(_this5.control)) {\n        _this5.ngZone.run(function () {\n          _this5.ngTouched();\n\n          _this5.onBlur.emit();\n        });\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this5.onWrapClick = function (args) {\n      var target = args.target;\n\n      if (!_this5.isDisabled && !(isButton(target) || isButton(target.parentNode))) {\n        var value = eventValue(args, _this5.track.nativeElement, _this5.getProps());\n\n        _this5.changeValue(value);\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this5.onKeyDown = function (e) {\n      var options = _this5.getProps();\n\n      var max = options.max,\n          min = options.min;\n      var handler = _this5.keyBinding[e.keyCode];\n\n      if (_this5.isDisabled || !handler) {\n        return;\n      }\n\n      var value = handler(options);\n\n      _this5.changeValue(trimValue(max, min, value));\n\n      e.preventDefault();\n    };\n\n    _this5.ngChange = function (_) {};\n\n    _this5.ngTouched = function () {};\n\n    _this5.decreaseValue = function () {\n      _this5.changeValue(decreaseValueToStep(_this5.value, _this5.getProps()));\n    };\n\n    _this5.increaseValue = function () {\n      _this5.changeValue(increaseValueToStep(_this5.value, _this5.getProps()));\n    };\n\n    return _this5;\n  }\n  /**\n   * @hidden\n   */\n\n\n  _createClass(SliderComponent, [{\n    key: \"focus\",\n\n    /**\n     * Focuses the Slider.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"slider.focus()\">Focus</button>\n     *  <kendo-slider #slider></kendo-slider>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    value: function focus() {\n      invokeElementMethod(this.wrapper, 'focus');\n    }\n    /**\n     * Blurs the Slider.\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      invokeElementMethod(this.wrapper, 'blur');\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var _this6 = this;\n\n      if (anyChanged(['value', 'fixedTickWidth', 'tickPlacement'], changes, true)) {\n        this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n          _this6.sizeComponent(false);\n        });\n      }\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this7 = this;\n\n      if (!isDocumentAvailable()) {\n        return;\n      }\n\n      if (this.showButtons) {\n        this.setValueChangeInterval(this.increaseButton.nativeElement, function () {\n          return _this7.increaseValue();\n        });\n        this.setValueChangeInterval(this.decreaseButton.nativeElement, function () {\n          return _this7.decreaseValue();\n        });\n      }\n\n      this.sizeComponent(false);\n\n      if (this.ticks) {\n        this.ticks.tickElements.changes.subscribe(function () {\n          return _this7.sizeComponent(false);\n        });\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.subscriptions.unsubscribe();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"handleDragPress\",\n\n    /**\n     * @hidden\n     */\n    value: function handleDragPress(args) {\n      if (args.originalEvent) {\n        args.originalEvent.preventDefault();\n      }\n\n      this.focus();\n      this.renderer.removeClass(this.hostElement.nativeElement, 'k-slider-transitions');\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"onHandleDrag\",\n    value: function onHandleDrag(args) {\n      this.dragging = true;\n      this.changeValue(eventValue(args, this.track.nativeElement, this.getProps()));\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"onHandleRelease\",\n    value: function onHandleRelease() {\n      this.dragging = false; //needed for animation\n\n      this.renderer.addClass(this.hostElement.nativeElement, 'k-slider-transitions');\n    } //ngModel binding\n\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n      this.sizeComponent(this.animate);\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.ngChange = fn;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.ngTouched = fn;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"changeValue\",\n    value: function changeValue(value) {\n      var _this8 = this;\n\n      if (!areSame(this.value, value)) {\n        this.ngZone.run(function () {\n          _this8.value = value;\n\n          _this8.ngChange(value);\n\n          _this8.valueChange.emit(value);\n\n          _this8.sizeComponent(_this8.animate);\n        });\n      }\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"sizeComponent\",\n    value: function sizeComponent(animate) {\n      if (!isDocumentAvailable()) {\n        return;\n      }\n\n      var wrapper = this.wrapper.nativeElement;\n      var track = this.track.nativeElement;\n      var selectionEl = this.sliderSelection.nativeElement;\n      var dragHandleEl = this.draghandle.nativeElement;\n      var ticks = this.ticks ? this.ticksContainer.nativeElement : null;\n\n      if (!animate) {\n        this.renderer.removeClass(this.hostElement.nativeElement, 'k-slider-transitions');\n      }\n\n      this.resetStyles([track, selectionEl, dragHandleEl, ticks, this.hostElement.nativeElement]);\n      var props = this.getProps();\n      var model = new SliderModel(props, wrapper, track, this.renderer);\n      model.resizeTrack();\n\n      if (this.ticks) {\n        //for case when tickPlacement: none\n        model.resizeTicks(this.ticksContainer.nativeElement, this.ticks.tickElements.map(function (element) {\n          return element.nativeElement;\n        }));\n      }\n\n      model.positionHandle(dragHandleEl);\n      model.positionSelection(dragHandleEl, selectionEl);\n\n      if (!animate) {\n        this.hostElement.nativeElement.getBoundingClientRect();\n        this.renderer.addClass(this.hostElement.nativeElement, 'k-slider-transitions');\n      }\n\n      if (this.fixedTickWidth) {\n        model.resizeWrapper();\n      }\n    }\n  }, {\n    key: \"setValueChangeInterval\",\n    value: function setValueChangeInterval(element, callback) {\n      var _this9 = this;\n\n      this.ngZone.runOutsideAngular(function () {\n        var mousedown = fromEvent(element, 'mousedown');\n        var mouseup = fromEvent(element, 'mouseup');\n        var mouseout = fromEvent(element, 'mouseout');\n        var subscription = mousedown.pipe(filter(function (e) {\n          return e.button === 0 && !_this9.isDisabled;\n        }), concatMap(function () {\n          return interval(150).pipe(startWith(-1), takeUntil(merge(mouseup, mouseout)));\n        })).subscribe(function () {\n          _this9.focus();\n\n          callback();\n        });\n\n        _this9.subscriptions.add(subscription);\n      });\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps() {\n      return {\n        buttons: this.showButtons,\n        disabled: this.disabled,\n        fixedTickWidth: this.fixedTickWidth,\n        largeStep: this.largeStep,\n        max: this.max,\n        min: this.min,\n        readonly: this.readonly,\n        reverse: this.reverse,\n        rtl: this.localizationService.rtl,\n        smallStep: this.smallStep,\n        value: trimValue(this.max, this.min, this.value),\n        vertical: this.vertical\n      };\n    }\n  }, {\n    key: \"tabIndex\",\n    set: function set(tabIndex) {\n      this.tabindex = tabIndex;\n    },\n    get: function get() {\n      return this.tabindex;\n    }\n  }, {\n    key: \"incrementMessage\",\n    get: function get() {\n      return this.incrementTitle || this.localizationService.get('increment');\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"decrementMessage\",\n    get: function get() {\n      return this.decrementTitle || this.localizationService.get('decrement');\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"dragHandleMessage\",\n    get: function get() {\n      return this.dragHandleTitle || this.localizationService.get('dragHandle');\n    }\n  }, {\n    key: \"focused\",\n    set: function set(value) {\n      if (this.isFocused !== value && this.hostElement) {\n        var element = this.hostElement.nativeElement;\n\n        if (value) {\n          this.renderer.addClass(element, FOCUSED);\n        } else {\n          this.renderer.removeClass(element, FOCUSED);\n        }\n\n        this.isFocused = value;\n      }\n    }\n  }, {\n    key: \"dragging\",\n    set: function set(value) {\n      if (this.isDragged !== value && this.sliderSelection && this.draghandle) {\n        var sliderSelection = this.sliderSelection.nativeElement;\n        var draghandle = this.draghandle.nativeElement;\n\n        if (value) {\n          this.renderer.addClass(sliderSelection, PRESSED);\n          this.renderer.addClass(draghandle, PRESSED);\n        } else {\n          this.renderer.removeClass(sliderSelection, PRESSED);\n          this.renderer.removeClass(draghandle, PRESSED);\n        }\n\n        this.isDragged = value;\n      }\n    }\n  }]);\n\n  return SliderComponent;\n}(SliderBase);\n\nSliderComponent.ɵfac = function SliderComponent_Factory(t) {\n  return new (t || SliderComponent)(ɵngcc0.ɵɵdirectiveInject(LocalizationService), ɵngcc0.ɵɵdirectiveInject(Injector), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ElementRef));\n};\n\nSliderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: SliderComponent,\n  selectors: [[\"kendo-slider\"]],\n  viewQuery: function SliderComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵstaticViewQuery(_c4, true);\n      ɵngcc0.ɵɵviewQuery(_c5, true);\n      ɵngcc0.ɵɵviewQuery(_c6, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.draghandle = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.decreaseButton = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.increaseButton = _t.first);\n    }\n  },\n  inputs: {\n    focusableId: \"focusableId\",\n    animate: \"animate\",\n    showButtons: \"showButtons\",\n    value: \"value\",\n    tabIndex: \"tabIndex\",\n    dragHandleTitle: \"dragHandleTitle\",\n    incrementTitle: \"incrementTitle\",\n    decrementTitle: \"decrementTitle\"\n  },\n  exportAs: [\"kendoSlider\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([LocalizationService, {\n    provide: L10N_PREFIX,\n    useValue: 'kendo.slider'\n  }, {\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return SliderComponent;\n    })\n  }, {\n    provide: KendoInput,\n    useExisting: forwardRef(function () {\n      return SliderComponent;\n    })\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 14,\n  vars: 26,\n  consts: function consts() {\n    var i18n_7;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\n       * @desc The title of the **Increase** button of the Slider.\n       * @meaning kendo.slider.increment\n       */\n      var MSG_EXTERNAL_8302125540024939132$$DIST_FESM2015_INDEX_JS_8 = goog.getMsg(\"increment\");\n      i18n_7 = MSG_EXTERNAL_8302125540024939132$$DIST_FESM2015_INDEX_JS_8;\n    } else {\n      i18n_7 = $localize(_templateObject());\n    }\n\n    var i18n_9;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\n       * @desc The title of the **Decrease** button of the Slider.\n       * @meaning kendo.slider.decrement\n       */\n      var MSG_EXTERNAL_652458644240352212$$DIST_FESM2015_INDEX_JS_10 = goog.getMsg(\"decrement\");\n      i18n_9 = MSG_EXTERNAL_652458644240352212$$DIST_FESM2015_INDEX_JS_10;\n    } else {\n      i18n_9 = $localize(_templateObject2());\n    }\n\n    var i18n_11;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\n       * @desc The title of the drag handle of the Slider.\n       * @meaning kendo.slider.dragHandle\n       */\n      var MSG_EXTERNAL_9117416417579607469$$DIST_FESM2015_INDEX_JS_12 = goog.getMsg(\"Drag\");\n      i18n_11 = MSG_EXTERNAL_9117416417579607469$$DIST_FESM2015_INDEX_JS_12;\n    } else {\n      i18n_11 = $localize(_templateObject3());\n    }\n\n    return [[\"kendoSliderLocalizedMessages\", \"\", 6, \"increment\", \"decrement\", \"dragHandle\"], [\"increment\", i18n_7, \"decrement\", i18n_9, \"dragHandle\", i18n_11], [1, \"k-slider-wrap\", 3, \"id\", \"kendoEventsOutsideAngular\"], [\"wrap\", \"\"], [\"class\", \"k-button k-button-decrease\", 3, \"title\", 4, \"ngIf\"], [\"class\", \"k-button k-button-increase\", 3, \"title\", 4, \"ngIf\"], [\"kendoSliderTicks\", \"\", 3, \"tickTitle\", \"vertical\", \"step\", \"largeStep\", \"min\", \"max\", \"labelTemplate\", 4, \"ngIf\"], [1, \"k-slider-track\"], [\"track\", \"\"], [1, \"k-slider-selection\"], [\"sliderSelection\", \"\"], [\"role\", \"slider\", \"kendoDraggable\", \"\", 1, \"k-draghandle\", 3, \"title\", \"kendoPress\", \"kendoDrag\", \"kendoRelease\"], [\"draghandle\", \"\"], [3, \"resize\"], [1, \"k-button\", \"k-button-decrease\", 3, \"title\"], [\"decreaseButton\", \"\"], [1, \"k-icon\"], [1, \"k-button\", \"k-button-increase\", 3, \"title\"], [\"increaseButton\", \"\"], [\"kendoSliderTicks\", \"\", 3, \"tickTitle\", \"vertical\", \"step\", \"largeStep\", \"min\", \"max\", \"labelTemplate\"], [\"ticks\", \"\"]];\n  },\n  template: function SliderComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainerStart(0, 0);\n      ɵngcc0.ɵɵi18nAttributes(1, 1);\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n      ɵngcc0.ɵɵtemplate(4, SliderComponent_a_4_Template, 3, 6, \"a\", 4);\n      ɵngcc0.ɵɵtemplate(5, SliderComponent_a_5_Template, 3, 6, \"a\", 5);\n      ɵngcc0.ɵɵtemplate(6, SliderComponent_ul_6_Template, 2, 7, \"ul\", 6);\n      ɵngcc0.ɵɵelementStart(7, \"div\", 7, 8);\n      ɵngcc0.ɵɵelement(9, \"div\", 9, 10);\n      ɵngcc0.ɵɵelementStart(11, \"a\", 11, 12);\n      ɵngcc0.ɵɵlistener(\"kendoPress\", function SliderComponent_Template_a_kendoPress_11_listener($event) {\n        return ctx.ifEnabled(ctx.handleDragPress, $event);\n      })(\"kendoDrag\", function SliderComponent_Template_a_kendoDrag_11_listener($event) {\n        return ctx.ifEnabled(ctx.onHandleDrag, $event);\n      })(\"kendoRelease\", function SliderComponent_Template_a_kendoRelease_11_listener($event) {\n        return ctx.ifEnabled(ctx.onHandleRelease, $event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(13, \"kendo-resize-sensor\", 13);\n      ɵngcc0.ɵɵlistener(\"resize\", function SliderComponent_Template_kendo_resize_sensor_resize_13_listener() {\n        return ctx.sizeComponent(false);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementContainerEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"k-slider-buttons\", ctx.showButtons)(\"k-slider-topleft\", ctx.tickPlacement === \"before\")(\"k-slider-bottomright\", ctx.tickPlacement === \"after\");\n      ɵngcc0.ɵɵproperty(\"id\", ctx.focusableId)(\"kendoEventsOutsideAngular\", ɵngcc0.ɵɵpureFunction4(21, _c13, ctx.handleFocus, ctx.handleBlur, ctx.onWrapClick, ctx.onKeyDown));\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? undefined : ctx.tabIndex);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showButtons);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showButtons);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.tickPlacement !== \"none\");\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵstyleProp(\"touch-action\", ctx.isDisabled ? \"\" : \"none\");\n      ɵngcc0.ɵɵproperty(\"title\", ctx.dragHandleMessage);\n      ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.min)(\"aria-valuemax\", ctx.max)(\"aria-valuenow\", ctx.value)(\"aria-disabled\", ctx.disabled ? true : undefined)(\"aria-readonly\", ctx.readonly ? true : undefined)(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n    }\n  },\n  directives: function directives() {\n    return [LocalizedSliderMessagesDirective, ɵngcc1.EventsOutsideAngularDirective, ɵngcc2.NgIf, ɵngcc1.DraggableDirective, ɵngcc1.ResizeSensorComponent, SliderTicksComponent];\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\n\nSliderComponent.ctorParameters = function () {\n  return [{\n    type: LocalizationService\n  }, {\n    type: Injector\n  }, {\n    type: Renderer2\n  }, {\n    type: NgZone\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }];\n};\n\nSliderComponent.propDecorators = {\n  focusableId: [{\n    type: Input\n  }],\n  dragHandleTitle: [{\n    type: Input\n  }],\n  incrementTitle: [{\n    type: Input\n  }],\n  animate: [{\n    type: Input\n  }],\n  decrementTitle: [{\n    type: Input\n  }],\n  showButtons: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  draghandle: [{\n    type: ViewChild,\n    args: ['draghandle', {\n      static: true\n    }]\n  }],\n  decreaseButton: [{\n    type: ViewChild,\n    args: ['decreaseButton']\n  }],\n  increaseButton: [{\n    type: ViewChild,\n    args: ['increaseButton']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SliderComponent, [{\n    type: Component,\n    args: [{\n      exportAs: 'kendoSlider',\n      providers: [LocalizationService, {\n        provide: L10N_PREFIX,\n        useValue: 'kendo.slider'\n      }, {\n        multi: true,\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return SliderComponent;\n        })\n      }, {\n        provide: KendoInput,\n        useExisting: forwardRef(function () {\n          return SliderComponent;\n        })\n      }],\n      selector: 'kendo-slider',\n      template: \"\\n        <ng-container kendoSliderLocalizedMessages\\n            i18n-increment=\\\"kendo.slider.increment|The title of the **Increase** button of the Slider.\\\"\\n            increment=\\\"increment\\\"\\n            i18n-decrement=\\\"kendo.slider.decrement|The title of the **Decrease** button of the Slider.\\\"\\n            decrement=\\\"decrement\\\"\\n            i18n-dragHandle=\\\"kendo.slider.dragHandle|The title of the drag handle of the Slider.\\\"\\n            dragHandle=\\\"Drag\\\"\\n        >\\n        <div class=\\\"k-slider-wrap\\\" #wrap\\n            [id]=\\\"focusableId\\\"\\n            [class.k-slider-buttons]=\\\"showButtons\\\"\\n            [class.k-slider-topleft]=\\\"tickPlacement === 'before'\\\"\\n            [class.k-slider-bottomright]=\\\"tickPlacement === 'after'\\\"\\n            [attr.tabindex]=\\\"disabled ? undefined : tabIndex\\\"\\n            [kendoEventsOutsideAngular]=\\\"{ focus: handleFocus, blur: handleBlur, click: onWrapClick, keydown: onKeyDown }\\\"\\n            >\\n            <a\\n                #decreaseButton\\n                *ngIf=\\\"showButtons\\\"\\n                class=\\\"k-button k-button-decrease\\\"\\n                [title]=\\\"decrementMessage\\\"\\n                [attr.aria-label]=\\\"decrementMessage\\\"\\n            >\\n                <span class=\\\"k-icon\\\"\\n                    [class.k-i-arrow-w]=\\\"!vertical\\\"\\n                    [class.k-i-arrow-s]=\\\"vertical\\\"\\n                >\\n                </span>\\n            </a>\\n            <a\\n                *ngIf=\\\"showButtons\\\"\\n                #increaseButton\\n                class=\\\"k-button k-button-increase\\\"\\n                [title]=\\\"incrementMessage\\\"\\n                [attr.aria-label]=\\\"incrementMessage\\\"\\n            >\\n                <span class=\\\"k-icon\\\"\\n                    [class.k-i-arrow-e]=\\\"!vertical\\\"\\n                    [class.k-i-arrow-n]=\\\"vertical\\\"\\n                >\\n                </span>\\n            </a>\\n            <ul kendoSliderTicks\\n                #ticks\\n                *ngIf=\\\"tickPlacement !== 'none'\\\"\\n                [tickTitle]=\\\"title\\\"\\n                [vertical]=\\\"vertical\\\"\\n                [step]=\\\"smallStep\\\"\\n                [largeStep]=\\\"largeStep\\\"\\n                [min]=\\\"min\\\"\\n                [max]=\\\"max\\\"\\n                [labelTemplate]=\\\"labelTemplate?.templateRef\\\"\\n            >\\n            </ul>\\n        <div #track class=\\\"k-slider-track\\\">\\n            <div #sliderSelection class=\\\"k-slider-selection\\\">\\n            </div>\\n                <a #draghandle\\n                    role=\\\"slider\\\"\\n                    [attr.aria-valuemin]=\\\"min\\\"\\n                    [attr.aria-valuemax]=\\\"max\\\"\\n                    [attr.aria-valuenow]=\\\"value\\\"\\n                    [attr.aria-disabled]=\\\"disabled ? true : undefined\\\"\\n                    [attr.aria-readonly]=\\\"readonly ? true : undefined\\\"\\n                    [attr.aria-orientation]=\\\"vertical ? 'vertical' : 'horizontal'\\\"\\n                    [style.touch-action]=\\\"isDisabled ? '' : 'none'\\\"\\n                    class=\\\"k-draghandle\\\"\\n                    [title]=\\\"dragHandleMessage\\\"\\n                    kendoDraggable\\n                    (kendoPress)=\\\"ifEnabled(handleDragPress, $event)\\\"\\n                    (kendoDrag)=\\\"ifEnabled(onHandleDrag, $event)\\\"\\n                    (kendoRelease)=\\\"ifEnabled(onHandleRelease, $event)\\\"\\n                ></a>\\n            </div>\\n            <kendo-resize-sensor (resize)=\\\"sizeComponent(false)\\\"></kendo-resize-sensor>\\n        </div>\\n  \"\n    }]\n  }], function () {\n    return [{\n      type: LocalizationService\n    }, {\n      type: Injector\n    }, {\n      type: Renderer2\n    }, {\n      type: NgZone\n    }, {\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }];\n  }, {\n    focusableId: [{\n      type: Input\n    }],\n    animate: [{\n      type: Input\n    }],\n    showButtons: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    dragHandleTitle: [{\n      type: Input\n    }],\n    incrementTitle: [{\n      type: Input\n    }],\n    decrementTitle: [{\n      type: Input\n    }],\n    draghandle: [{\n      type: ViewChild,\n      args: ['draghandle', {\n        static: true\n      }]\n    }],\n    decreaseButton: [{\n      type: ViewChild,\n      args: ['decreaseButton']\n    }],\n    increaseButton: [{\n      type: ViewChild,\n      args: ['increaseButton']\n    }]\n  });\n})();\n/**\n * @hidden\n */\n\n\nvar RangeSliderModel = /*#__PURE__*/function (_SliderModelBase2) {\n  _inherits(RangeSliderModel, _SliderModelBase2);\n\n  var _super3 = _createSuper(RangeSliderModel);\n\n  function RangeSliderModel() {\n    _classCallCheck(this, RangeSliderModel);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(RangeSliderModel, [{\n    key: \"positionHandle\",\n    value: function positionHandle(dragHandle) {\n      if (!dragHandle.id) {\n        return;\n      }\n\n      var _this$props4 = this.props,\n          max = _this$props4.max,\n          min = _this$props4.min,\n          reverse = _this$props4.reverse,\n          vertical = _this$props4.vertical;\n      var position = vertical ? 'bottom' : 'left';\n      var trackWidth = this.trackWidth();\n      var value = isStartHandle(dragHandle) ? trimValueRange(max, min, this.props.value)[0] : trimValueRange(max, min, this.props.value)[1];\n\n      if (isStartHandle(dragHandle)) {\n        this.startHandlePosition = calculateHandlePosition({\n          min: min,\n          max: max,\n          reverse: reverse,\n          value: value,\n          trackWidth: trackWidth,\n          handleWidth: dragHandle.offsetWidth\n        });\n        this.renderer.setStyle(dragHandle, position, \"\".concat(this.startHandlePosition, \"px\"));\n      } else {\n        this.endHandlePosition = calculateHandlePosition({\n          min: min,\n          max: max,\n          reverse: reverse,\n          value: value,\n          trackWidth: trackWidth,\n          handleWidth: dragHandle.offsetWidth\n        });\n        this.renderer.setStyle(dragHandle, position, \"\".concat(this.endHandlePosition, \"px\"));\n      }\n    }\n  }, {\n    key: \"positionSelection\",\n    value: function positionSelection(dragHandle, selection) {\n      var _this$props5 = this.props,\n          reverse = _this$props5.reverse,\n          vertical = _this$props5.vertical;\n      var dimension = vertical ? 'height' : 'width';\n      var position = vertical ? 'bottom' : reverse ? 'right' : 'left';\n      var handleWidth = Math.floor(dragHandle.offsetWidth / 2);\n      var size = Math.abs(this.endHandlePosition - this.startHandlePosition);\n      var currentSelectionPosition = vertical ? dragHandle.style.bottom : dragHandle.style.left;\n      this.renderer.setStyle(selection, dimension, \"\".concat(size, \"px\"));\n      this.renderer.setStyle(selection, position, reverse ? this.trackWidth() - parseFloat(currentSelectionPosition) - handleWidth + 'px' : parseFloat(currentSelectionPosition) + handleWidth + 'px');\n    }\n  }]);\n\n  return RangeSliderModel;\n}(SliderModelBase);\n\nvar PRESSED$1 = 'k-pressed';\n/**\n * Represents the [Kendo UI RangeSlider component for Angular]({% slug overview_rangeslider %}).\n */\n\nvar RangeSliderComponent = /*#__PURE__*/function (_SliderBase2) {\n  _inherits(RangeSliderComponent, _SliderBase2);\n\n  var _super4 = _createSuper(RangeSliderComponent);\n\n  function RangeSliderComponent(localization, injector, renderer, ngZone, changeDetector, hostElement) {\n    var _this10;\n\n    _classCallCheck(this, RangeSliderComponent);\n\n    _this10 = _super4.call(this, localization, injector, renderer, ngZone, changeDetector, hostElement);\n    _this10.localization = localization;\n    _this10.injector = injector;\n    _this10.renderer = renderer;\n    _this10.ngZone = ngZone;\n    _this10.changeDetector = changeDetector;\n    _this10.hostElement = hostElement;\n    /**\n     * @hidden\n     */\n\n    _this10.startHandleId = \"k-start-handle-\".concat(guid());\n    /**\n     * @hidden\n     */\n\n    _this10.endHandleId = \"k-end-handle-\".concat(guid());\n    /**\n     * @hidden\n     */\n\n    _this10.focusableId = _this10.startHandleId;\n    _this10.handleZIndex = 0;\n    _this10.activeHandle = 'startHandle';\n    _this10.focusChangedProgrammatically = false;\n    /**\n     * @hidden\n     */\n\n    _this10.onWrapClick = function (args) {\n      if (!_this10.isDisabled) {\n        _this10.value = _this10.value || [_this10.min, _this10.min];\n        var trackValue = eventValue(args, _this10.track.nativeElement, _this10.getProps());\n        var newRangeValue;\n\n        var _newRangeValue = newRangeValue = _this10.value,\n            _newRangeValue2 = _slicedToArray(_newRangeValue, 2),\n            startValue = _newRangeValue2[0],\n            endValue = _newRangeValue2[1];\n\n        if (trackValue <= startValue) {\n          newRangeValue = [trackValue, endValue];\n          _this10.activeHandle = 'startHandle';\n        } else if (startValue < trackValue && trackValue < endValue) {\n          if (trackValue < (startValue + endValue) / 2) {\n            newRangeValue = [trackValue, endValue];\n            _this10.activeHandle = 'startHandle';\n          } else {\n            newRangeValue = [startValue, trackValue];\n            _this10.activeHandle = 'endHandle';\n          }\n        } else if (trackValue >= endValue) {\n          newRangeValue = [startValue, trackValue];\n          _this10.activeHandle = 'endHandle';\n        }\n\n        var activeHandle = _this10.activeHandle === 'startHandle' ? _this10.draghandleStart : _this10.draghandleEnd;\n        invokeElementMethod(activeHandle, 'focus');\n\n        _this10.changeValue(newRangeValue);\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this10.onKeyDown = function (e) {\n      _this10.value = _this10.value || [_this10.min, _this10.min];\n\n      var options = _this10.getProps();\n\n      var max = options.max,\n          min = options.min;\n      var handler = _this10.keyBinding[e.keyCode];\n\n      if (_this10.isDisabled || !handler) {\n        return;\n      }\n\n      _this10.renderer.setStyle(e.target, 'zIndex', ++_this10.handleZIndex);\n\n      var startHandleIsActive = isStartHandle(e.target);\n      var value = handler(Object.assign({}, options, {\n        value: startHandleIsActive ? _this10.value[0] : _this10.value[1]\n      }));\n\n      if (startHandleIsActive) {\n        if (value > _this10.value[1]) {\n          _this10.value[1] = value;\n        }\n      } else {\n        if (value < _this10.value[0]) {\n          _this10.value[0] = value;\n        }\n      }\n\n      var trimmedValue = trimValue(max, min, value);\n      var newValue = startHandleIsActive ? [trimmedValue, _this10.value[1]] : [_this10.value[0], trimmedValue];\n\n      _this10.changeValue(newValue);\n\n      e.preventDefault();\n    };\n\n    _this10.ngChange = function (_) {};\n\n    _this10.ngTouched = function () {};\n\n    _this10.handleBlur = function () {\n      _this10.changeDetector.markForCheck();\n\n      _this10.focused = false;\n\n      if (hasObservers(_this10.onBlur) || requiresZoneOnBlur(_this10.control)) {\n        _this10.ngZone.run(function () {\n          _this10.ngTouched();\n\n          if (!_this10.focusChangedProgrammatically) {\n            _this10.onBlur.emit();\n          }\n        });\n      }\n    };\n\n    return _this10;\n  }\n  /**\n   * Focuses the RangeSlider.\n   *\n   * @example\n   * ```ts\n   * _@Component({\n   * selector: 'my-app',\n   * template: `\n   *     <div>\n   *         <button class=\"k-button\" (click)=\"slider.focus()\">Focus</button>\n   *     </div>\n   *     <kendo-rangeslider #slider></kendo-rangeslider>\n   * `\n   * })\n   * class AppComponent { }\n   * ```\n   */\n\n\n  _createClass(RangeSliderComponent, [{\n    key: \"focus\",\n    value: function focus() {\n      this.focusChangedProgrammatically = true;\n      invokeElementMethod(this.draghandleStart, 'focus');\n      this.focusChangedProgrammatically = false;\n    }\n    /**\n     * Blurs the RangeSlider.\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.focusChangedProgrammatically = true;\n      var activeHandle = this.activeHandle === 'startHandle' ? this.draghandleStart : this.draghandleEnd;\n      invokeElementMethod(activeHandle, 'blur');\n      this.handleBlur();\n      this.focusChangedProgrammatically = false;\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (!this.value) {\n        this.value = [this.min, this.max];\n      }\n\n      _get(_getPrototypeOf(RangeSliderComponent.prototype), \"ngOnInit\", this).call(this);\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var _this11 = this;\n\n      if (anyChanged(['value', 'fixedTickWidth', 'tickPlacement'], changes, true)) {\n        if (changes.value && changes.value.currentValue) {\n          validateValue(changes.value.currentValue);\n        }\n\n        this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n          _this11.sizeComponent();\n        });\n      }\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this12 = this;\n\n      if (!isDocumentAvailable()) {\n        return;\n      }\n\n      this.sizeComponent();\n\n      if (this.ticks) {\n        this.ticks.tickElements.changes.subscribe(function () {\n          return _this12.sizeComponent();\n        });\n      }\n\n      this.attachElementEventHandlers();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.subscriptions.unsubscribe();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"textFor\",\n    value: function textFor(key) {\n      return this.localization.get(key);\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"handleDragPress\",\n\n    /**\n     * @hidden\n     */\n    value: function handleDragPress(args) {\n      if (args.originalEvent) {\n        args.originalEvent.preventDefault();\n      }\n\n      var target = args.originalEvent.target;\n      this.draggedHandle = target;\n      this.renderer.setStyle(target, 'zIndex', ++this.handleZIndex);\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"onHandleDrag\",\n    value: function onHandleDrag(args) {\n      var _this13 = this;\n\n      this.value = this.value || [this.min, this.min];\n      var target = args.originalEvent.target;\n      var lastCoords = this.draggedHandle.getBoundingClientRect();\n      this.lastHandlePosition = {\n        x: lastCoords.left,\n        y: lastCoords.top\n      };\n      this.dragging = {\n        value: true,\n        target: target\n      };\n      var left = args.pageX < this.lastHandlePosition.x;\n      var right = args.pageX > this.lastHandlePosition.x;\n      var up = args.pageY > this.lastHandlePosition.y;\n\n      var moveStartHandle = function moveStartHandle() {\n        return _this13.changeValue([eventValue(args, _this13.track.nativeElement, _this13.getProps()), _this13.value[1]]);\n      };\n\n      var moveEndHandle = function moveEndHandle() {\n        return _this13.changeValue([_this13.value[0], eventValue(args, _this13.track.nativeElement, _this13.getProps())]);\n      };\n\n      var moveBothHandles = function moveBothHandles() {\n        return _this13.changeValue([eventValue(args, _this13.track.nativeElement, _this13.getProps()), eventValue(args, _this13.track.nativeElement, _this13.getProps())]);\n      };\n\n      var activeStartHandle = isStartHandle(this.draggedHandle);\n      var vertical = this.vertical;\n      var horizontal = !vertical;\n      var forward = vertical && up || (this.reverse ? horizontal && right : horizontal && left); // const forward = (this.reverse ? (!this.vertical && !left) : (!this.vertical && left)) || (this.vertical && up);\n\n      if (this.value[0] === this.value[1]) {\n        if (forward) {\n          activeStartHandle ? moveStartHandle() : moveBothHandles();\n        } else {\n          activeStartHandle ? moveBothHandles() : moveEndHandle();\n        }\n      } else {\n        activeStartHandle ? moveStartHandle() : moveEndHandle();\n      }\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"onHandleRelease\",\n    value: function onHandleRelease(args) {\n      this.dragging = {\n        value: false,\n        target: args.originalEvent.target\n      }; //needed for animation\n\n      this.draggedHandle = undefined;\n    } //ngModel binding\n\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      validateValue(value);\n      this.value = value;\n      this.sizeComponent();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.ngChange = fn;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.ngTouched = fn;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"changeValue\",\n    value: function changeValue(value) {\n      var _this14 = this;\n\n      if (!this.value || !isSameRange(this.value, value)) {\n        this.ngZone.run(function () {\n          _this14.value = value;\n\n          _this14.ngChange(value);\n\n          if (_this14.value) {\n            _this14.valueChange.emit(value);\n          }\n\n          _this14.sizeComponent();\n        });\n      }\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"sizeComponent\",\n    value: function sizeComponent() {\n      if (!isDocumentAvailable()) {\n        return;\n      }\n\n      var wrapper = this.wrapper.nativeElement;\n      var track = this.track.nativeElement;\n      var selectionEl = this.sliderSelection.nativeElement;\n      var dragHandleStartEl = this.draghandleStart.nativeElement;\n      var dragHandleEndEl = this.draghandleEnd.nativeElement;\n      var ticks = this.ticks ? this.ticksContainer.nativeElement : null;\n      this.resetStyles([track, selectionEl, dragHandleStartEl, dragHandleEndEl, ticks, this.hostElement.nativeElement]);\n      var props = this.getProps();\n      var model = new RangeSliderModel(props, wrapper, track, this.renderer);\n      model.resizeTrack();\n\n      if (this.ticks) {\n        //for case when tickPlacement: none\n        model.resizeTicks(this.ticksContainer.nativeElement, this.ticks.tickElements.map(function (element) {\n          return element.nativeElement;\n        }));\n      }\n\n      model.positionHandle(dragHandleStartEl);\n      model.positionHandle(dragHandleEndEl);\n      model.positionSelection(dragHandleStartEl, selectionEl);\n\n      if (this.fixedTickWidth) {\n        model.resizeWrapper();\n      }\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"isEmpty\",\n\n    /**\n     * @hidden\n     * Used by the FloatingLabel to determine if the component is empty.\n     */\n    value: function isEmpty() {\n      return false;\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps() {\n      return {\n        disabled: this.disabled,\n        fixedTickWidth: this.fixedTickWidth,\n        largeStep: this.largeStep,\n        max: this.max,\n        min: this.min,\n        readonly: this.readonly,\n        reverse: this.reverse,\n        rtl: this.localizationService.rtl,\n        smallStep: this.smallStep,\n        value: trimValueRange(this.max, this.min, this.value),\n        vertical: this.vertical,\n        buttons: false\n      };\n    }\n  }, {\n    key: \"attachElementEventHandlers\",\n    value: function attachElementEventHandlers() {\n      var _this15 = this;\n\n      var hostElement = this.hostElement.nativeElement;\n      var tabbing = false;\n      var cursorInsideWrapper = false;\n      this.ngZone.runOutsideAngular(function () {\n        // focusIn and focusOut are relative to the host element\n        _this15.subscriptions.add(_this15.renderer.listen(hostElement, 'focusin', function () {\n          if (!_this15.isFocused) {\n            _this15.ngZone.run(function () {\n              if (!_this15.focusChangedProgrammatically) {\n                _this15.onFocus.emit();\n              }\n\n              _this15.focused = true;\n            });\n          }\n        }));\n\n        _this15.subscriptions.add(_this15.renderer.listen(hostElement, 'focusout', function (args) {\n          if (!_this15.isFocused) {\n            return;\n          }\n\n          if (tabbing) {\n            if (args.relatedTarget !== _this15.draghandleStart.nativeElement && args.relatedTarget !== _this15.draghandleEnd.nativeElement) {\n              _this15.handleBlur();\n            }\n\n            tabbing = false;\n          } else {\n            if (!cursorInsideWrapper) {\n              _this15.handleBlur();\n            }\n          }\n        }));\n\n        _this15.subscriptions.add(_this15.renderer.listen(hostElement, 'mouseenter', function () {\n          cursorInsideWrapper = true;\n        }));\n\n        _this15.subscriptions.add(_this15.renderer.listen(hostElement, 'mouseleave', function () {\n          cursorInsideWrapper = false;\n        }));\n\n        _this15.subscriptions.add(_this15.renderer.listen(hostElement, 'keydown', function (args) {\n          if (args.keyCode === Keys.Tab) {\n            tabbing = true;\n          } else {\n            tabbing = false;\n          }\n        }));\n      });\n    }\n  }, {\n    key: \"valueText\",\n    get: function get() {\n      return this.value ? \"\".concat(this.value[0], \" - \").concat(this.value[1]) : '';\n    }\n  }, {\n    key: \"isDisabled\",\n    get: function get() {\n      return this.disabled || this.readonly;\n    }\n  }, {\n    key: \"focused\",\n    set: function set(value) {\n      if (this.isFocused !== value && this.hostElement) {\n        this.isFocused = value;\n      }\n    }\n  }, {\n    key: \"dragging\",\n    set: function set(data) {\n      if (this.isDragged !== data.value && this.sliderSelection && this.draghandleStart && this.draghandleEnd) {\n        var sliderSelection = this.sliderSelection.nativeElement;\n        var draghandle = data.target;\n\n        if (data.value) {\n          this.renderer.addClass(sliderSelection, PRESSED$1);\n          this.renderer.addClass(draghandle, PRESSED$1);\n        } else {\n          this.renderer.removeClass(sliderSelection, PRESSED$1);\n          this.renderer.removeClass(draghandle, PRESSED$1);\n        }\n\n        this.isDragged = data.value;\n      }\n    }\n  }]);\n\n  return RangeSliderComponent;\n}(SliderBase);\n\nRangeSliderComponent.ɵfac = function RangeSliderComponent_Factory(t) {\n  return new (t || RangeSliderComponent)(ɵngcc0.ɵɵdirectiveInject(LocalizationService), ɵngcc0.ɵɵdirectiveInject(Injector), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ElementRef));\n};\n\nRangeSliderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: RangeSliderComponent,\n  selectors: [[\"kendo-rangeslider\"]],\n  viewQuery: function RangeSliderComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵstaticViewQuery(_c14, true);\n      ɵngcc0.ɵɵstaticViewQuery(_c15, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.draghandleStart = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.draghandleEnd = _t.first);\n    }\n  },\n  inputs: {\n    value: \"value\"\n  },\n  exportAs: [\"kendoRangeSlider\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([LocalizationService, {\n    provide: L10N_PREFIX,\n    useValue: 'kendo.rangeslider'\n  }, {\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return RangeSliderComponent;\n    })\n  }, {\n    provide: KendoInput,\n    useExisting: forwardRef(function () {\n      return RangeSliderComponent;\n    })\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 14,\n  vars: 33,\n  consts: function consts() {\n    var i18n_16;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\n       * @desc The title of the **Start** drag handle of the Slider.\n       * @meaning kendo.rangeslider.dragHandleStart\n       */\n      var MSG_EXTERNAL_1512034289801794423$$DIST_FESM2015_INDEX_JS_17 = goog.getMsg(\"Drag\");\n      i18n_16 = MSG_EXTERNAL_1512034289801794423$$DIST_FESM2015_INDEX_JS_17;\n    } else {\n      i18n_16 = $localize(_templateObject4());\n    }\n\n    var i18n_18;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\n       * @desc The title of the **End** drag handle of the Slider.\n       * @meaning kendo.rangeslider.dragHandleEnd\n       */\n      var MSG_EXTERNAL_6915505327582510906$$DIST_FESM2015_INDEX_JS_19 = goog.getMsg(\"Drag\");\n      i18n_18 = MSG_EXTERNAL_6915505327582510906$$DIST_FESM2015_INDEX_JS_19;\n    } else {\n      i18n_18 = $localize(_templateObject5());\n    }\n\n    return [[\"kendoSliderLocalizedMessages\", \"\", 6, \"dragHandleStart\", \"dragHandleEnd\"], [\"dragHandleStart\", i18n_16, \"dragHandleEnd\", i18n_18], [1, \"k-slider-wrap\", 3, \"kendoEventsOutsideAngular\"], [\"wrap\", \"\"], [\"kendoSliderTicks\", \"\", 3, \"tickTitle\", \"vertical\", \"step\", \"largeStep\", \"min\", \"max\", \"labelTemplate\", 4, \"ngIf\"], [1, \"k-slider-track\"], [\"track\", \"\"], [1, \"k-slider-selection\"], [\"sliderSelection\", \"\"], [\"role\", \"slider\", \"kendoDraggable\", \"\", 1, \"k-draghandle\", 3, \"id\", \"title\", \"kendoPress\", \"kendoDrag\", \"kendoRelease\"], [\"draghandleStart\", \"\"], [\"draghandleEnd\", \"\"], [3, \"resize\"], [\"kendoSliderTicks\", \"\", 3, \"tickTitle\", \"vertical\", \"step\", \"largeStep\", \"min\", \"max\", \"labelTemplate\"], [\"ticks\", \"\"]];\n  },\n  template: function RangeSliderComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainerStart(0, 0);\n      ɵngcc0.ɵɵi18nAttributes(1, 1);\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n      ɵngcc0.ɵɵtemplate(4, RangeSliderComponent_ul_4_Template, 2, 7, \"ul\", 4);\n      ɵngcc0.ɵɵelementStart(5, \"div\", 5, 6);\n      ɵngcc0.ɵɵelement(7, \"div\", 7, 8);\n      ɵngcc0.ɵɵelementStart(9, \"a\", 9, 10);\n      ɵngcc0.ɵɵlistener(\"kendoPress\", function RangeSliderComponent_Template_a_kendoPress_9_listener($event) {\n        return ctx.ifEnabled(ctx.handleDragPress, $event);\n      })(\"kendoDrag\", function RangeSliderComponent_Template_a_kendoDrag_9_listener($event) {\n        return ctx.ifEnabled(ctx.onHandleDrag, $event);\n      })(\"kendoRelease\", function RangeSliderComponent_Template_a_kendoRelease_9_listener($event) {\n        return ctx.ifEnabled(ctx.onHandleRelease, $event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(11, \"a\", 9, 11);\n      ɵngcc0.ɵɵlistener(\"kendoPress\", function RangeSliderComponent_Template_a_kendoPress_11_listener($event) {\n        return ctx.ifEnabled(ctx.handleDragPress, $event);\n      })(\"kendoDrag\", function RangeSliderComponent_Template_a_kendoDrag_11_listener($event) {\n        return ctx.ifEnabled(ctx.onHandleDrag, $event);\n      })(\"kendoRelease\", function RangeSliderComponent_Template_a_kendoRelease_11_listener($event) {\n        return ctx.ifEnabled(ctx.onHandleRelease, $event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(13, \"kendo-resize-sensor\", 12);\n      ɵngcc0.ɵɵlistener(\"resize\", function RangeSliderComponent_Template_kendo_resize_sensor_resize_13_listener() {\n        return ctx.sizeComponent();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementContainerEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"k-slider-topleft\", ctx.tickPlacement === \"before\")(\"k-slider-bottomright\", ctx.tickPlacement === \"after\");\n      ɵngcc0.ɵɵproperty(\"kendoEventsOutsideAngular\", ɵngcc0.ɵɵpureFunction2(30, _c20, ctx.onWrapClick, ctx.onKeyDown));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.tickPlacement !== \"none\");\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵstyleProp(\"touch-action\", ctx.isDisabled ? \"\" : \"none\");\n      ɵngcc0.ɵɵproperty(\"id\", ctx.startHandleId)(\"title\", ctx.textFor(\"dragHandleStart\"));\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? undefined : ctx.tabindex)(\"aria-valuemin\", ctx.min)(\"aria-valuemax\", ctx.max)(\"aria-valuenow\", ctx.value ? ctx.value[0] : null)(\"aria-valuetext\", ctx.valueText)(\"aria-disabled\", ctx.disabled ? true : undefined)(\"aria-readonly\", ctx.readonly ? true : undefined)(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵstyleProp(\"touch-action\", ctx.isDisabled ? \"\" : \"none\");\n      ɵngcc0.ɵɵproperty(\"id\", ctx.endHandleId)(\"title\", ctx.textFor(\"dragHandleEnd\"));\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? undefined : ctx.tabindex)(\"aria-valuemin\", ctx.min)(\"aria-valuemax\", ctx.max)(\"aria-valuenow\", ctx.value ? ctx.value[1] : null)(\"aria-valuetext\", ctx.valueText)(\"aria-disabled\", ctx.disabled ? true : undefined)(\"aria-readonly\", ctx.readonly ? true : undefined)(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n    }\n  },\n  directives: function directives() {\n    return [LocalizedRangeSliderMessagesDirective, ɵngcc1.EventsOutsideAngularDirective, ɵngcc2.NgIf, ɵngcc1.DraggableDirective, ɵngcc1.ResizeSensorComponent, SliderTicksComponent];\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\n\nRangeSliderComponent.ctorParameters = function () {\n  return [{\n    type: LocalizationService\n  }, {\n    type: Injector\n  }, {\n    type: Renderer2\n  }, {\n    type: NgZone\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }];\n};\n\nRangeSliderComponent.propDecorators = {\n  value: [{\n    type: Input\n  }],\n  draghandleStart: [{\n    type: ViewChild,\n    args: ['draghandleStart', {\n      static: true\n    }]\n  }],\n  draghandleEnd: [{\n    type: ViewChild,\n    args: ['draghandleEnd', {\n      static: true\n    }]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RangeSliderComponent, [{\n    type: Component,\n    args: [{\n      exportAs: 'kendoRangeSlider',\n      providers: [LocalizationService, {\n        provide: L10N_PREFIX,\n        useValue: 'kendo.rangeslider'\n      }, {\n        multi: true,\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return RangeSliderComponent;\n        })\n      }, {\n        provide: KendoInput,\n        useExisting: forwardRef(function () {\n          return RangeSliderComponent;\n        })\n      }],\n      selector: 'kendo-rangeslider',\n      template: \"\\n        <ng-container kendoSliderLocalizedMessages\\n            i18n-dragHandleStart=\\\"kendo.rangeslider.dragHandleStart|The title of the **Start** drag handle of the Slider.\\\"\\n            dragHandleStart=\\\"Drag\\\"\\n            i18n-dragHandleEnd=\\\"kendo.rangeslider.dragHandleEnd|The title of the **End** drag handle of the Slider.\\\"\\n            dragHandleEnd=\\\"Drag\\\"\\n        >\\n\\n        <div class=\\\"k-slider-wrap\\\" #wrap\\n            [class.k-slider-topleft]=\\\"tickPlacement === 'before'\\\"\\n            [class.k-slider-bottomright]=\\\"tickPlacement === 'after'\\\"\\n            [kendoEventsOutsideAngular]=\\\"{ click: onWrapClick, keydown: onKeyDown }\\\"\\n            >\\n            <ul kendoSliderTicks\\n                #ticks\\n                *ngIf=\\\"tickPlacement !== 'none'\\\"\\n                [tickTitle]=\\\"title\\\"\\n                [vertical]=\\\"vertical\\\"\\n                [step]=\\\"smallStep\\\"\\n                [largeStep]=\\\"largeStep\\\"\\n                [min]=\\\"min\\\"\\n                [max]=\\\"max\\\"\\n                [labelTemplate]=\\\"labelTemplate?.templateRef\\\"\\n            >\\n            </ul>\\n            <div #track class=\\\"k-slider-track\\\">\\n                <div #sliderSelection class=\\\"k-slider-selection\\\">\\n                </div>\\n                <a #draghandleStart\\n                    role=\\\"slider\\\"\\n                    [id]=\\\"startHandleId\\\"\\n                    [attr.tabindex]=\\\"disabled ? undefined : tabindex\\\"\\n                    [attr.aria-valuemin]=\\\"min\\\"\\n                    [attr.aria-valuemax]=\\\"max\\\"\\n                    [attr.aria-valuenow]=\\\"value ? value[0] : null\\\"\\n                    [attr.aria-valuetext]=\\\"valueText\\\"\\n                    [attr.aria-disabled]=\\\"disabled ? true : undefined\\\"\\n                    [attr.aria-readonly]=\\\"readonly ? true : undefined\\\"\\n                    [attr.aria-orientation]=\\\"vertical ? 'vertical' : 'horizontal'\\\"\\n                    [style.touch-action]=\\\"isDisabled ? '' : 'none'\\\"\\n                    class=\\\"k-draghandle\\\"\\n                    [title]=\\\"textFor('dragHandleStart')\\\"\\n                    kendoDraggable\\n                    (kendoPress)=\\\"ifEnabled(handleDragPress ,$event)\\\"\\n                    (kendoDrag)=\\\"ifEnabled(onHandleDrag ,$event)\\\"\\n                    (kendoRelease)=\\\"ifEnabled(onHandleRelease, $event)\\\"\\n                ></a>\\n                <a #draghandleEnd\\n                    role=\\\"slider\\\"\\n                    [id]=\\\"endHandleId\\\"\\n                    [attr.tabindex]=\\\"disabled ? undefined : tabindex\\\"\\n                    [attr.aria-valuemin]=\\\"min\\\"\\n                    [attr.aria-valuemax]=\\\"max\\\"\\n                    [attr.aria-valuenow]=\\\"value ? value[1] : null\\\"\\n                    [attr.aria-valuetext]=\\\"valueText\\\"\\n                    [attr.aria-disabled]=\\\"disabled ? true : undefined\\\"\\n                    [attr.aria-readonly]=\\\"readonly ? true : undefined\\\"\\n                    [attr.aria-orientation]=\\\"vertical ? 'vertical' : 'horizontal'\\\"\\n                    [style.touch-action]=\\\"isDisabled ? '' : 'none'\\\"\\n                    class=\\\"k-draghandle\\\"\\n                    [title]=\\\"textFor('dragHandleEnd')\\\"\\n                    kendoDraggable\\n                    (kendoPress)=\\\"ifEnabled(handleDragPress ,$event)\\\"\\n                    (kendoDrag)=\\\"ifEnabled(onHandleDrag ,$event)\\\"\\n                    (kendoRelease)=\\\"ifEnabled(onHandleRelease, $event)\\\"\\n                ></a>\\n            </div>\\n\\n            <kendo-resize-sensor (resize)=\\\"sizeComponent()\\\"></kendo-resize-sensor>\\n        </div>\\n  \"\n    }]\n  }], function () {\n    return [{\n      type: LocalizationService\n    }, {\n      type: Injector\n    }, {\n      type: Renderer2\n    }, {\n      type: NgZone\n    }, {\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }];\n  }, {\n    value: [{\n      type: Input\n    }],\n    draghandleStart: [{\n      type: ViewChild,\n      args: ['draghandleStart', {\n        static: true\n      }]\n    }],\n    draghandleEnd: [{\n      type: ViewChild,\n      args: ['draghandleEnd', {\n        static: true\n      }]\n    }]\n  });\n})();\n\nvar FOCUSED$1 = 'k-state-focused';\n/**\n * Represents the [Kendo UI Switch component for Angular]({% slug overview_switch %}).\n */\n\nvar SwitchComponent = /*#__PURE__*/function () {\n  function SwitchComponent(renderer, hostElement, localizationService, injector, changeDetector, ngZone) {\n    var _this16 = this;\n\n    _classCallCheck(this, SwitchComponent);\n\n    this.renderer = renderer;\n    this.hostElement = hostElement;\n    this.localizationService = localizationService;\n    this.injector = injector;\n    this.changeDetector = changeDetector;\n    this.ngZone = ngZone;\n    /**\n     * @hidden\n     */\n\n    this.focusableId = \"k-\".concat(guid());\n    /**\n     * Sets the current value of the Switch when it is initially displayed.\n     */\n\n    this.checked = false;\n    /**\n     * Determines whether the Switch is disabled ([see example]({% slug disabled_switch %})).\n     */\n\n    this.disabled = false;\n    /**\n     * Determines whether the Switch is in its read-only state ([see example]({% slug readonly_switch %})).\n     */\n\n    this.readonly = false;\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the Switch.\n     */\n\n    this.tabindex = 0;\n    /**\n     * Fires each time the user focuses the `input` element.\n     */\n\n    this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n\n    /**\n     * Fires each time the `input` element gets blurred.\n     */\n\n    this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n\n    /**\n     * Fires each time the user selects a new value.\n     */\n\n    this.valueChange = new EventEmitter();\n\n    this.ngChange = function (_) {};\n\n    this.ngTouched = function () {};\n    /**\n     * @hidden\n     */\n\n\n    this.handleFocus = function () {\n      _this16.focused = true;\n\n      if (hasObservers(_this16.onFocus)) {\n        _this16.ngZone.run(function () {\n          _this16.onFocus.emit();\n        });\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    this.handleBlur = function () {\n      _this16.changeDetector.markForCheck();\n\n      _this16.focused = false;\n\n      if (hasObservers(_this16.onBlur) || requiresZoneOnBlur(_this16.control)) {\n        _this16.ngZone.run(function () {\n          _this16.ngTouched();\n\n          _this16.onBlur.emit();\n        });\n      }\n    };\n\n    this.direction = localizationService.rtl ? 'rtl' : 'ltr';\n    this.keyDownHandler = this.keyDownHandler.bind(this);\n    this.clickHandler = this.clickHandler.bind(this);\n  }\n  /**\n   * @hidden\n   */\n\n\n  _createClass(SwitchComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this17 = this;\n\n      if (this.hostElement) {\n        var wrapper = this.hostElement.nativeElement;\n        this.renderer.removeAttribute(wrapper, \"tabindex\");\n      }\n\n      this.localizationChangeSubscription = this.localizationService.changes.pipe(skip(1)).subscribe(function (_ref10) {\n        var rtl = _ref10.rtl;\n        _this17.direction = rtl ? 'rtl' : 'ltr';\n      });\n      this.control = this.injector.get(NgControl, null);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.localizationChangeSubscription) {\n        this.localizationChangeSubscription.unsubscribe();\n      }\n    }\n    /**\n     * Focuses the Switch.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"switch.focus()\">Focus</button>\n     *  <kendo-switch #switch></kendo-switch>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (!this.wrapper) {\n        return;\n      }\n\n      this.wrapper.nativeElement.focus();\n    }\n    /**\n     * Blurs the Switch.\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      if (!this.wrapper) {\n        return;\n      }\n\n      this.wrapper.nativeElement.blur();\n    }\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this.changeDetector.markForCheck();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.checked = value === null ? false : value;\n      this.changeDetector.markForCheck();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.ngChange = fn;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.ngTouched = fn;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"keyDownHandler\",\n    value: function keyDownHandler(e) {\n      var keyCode = e.keyCode;\n\n      if (this.isEnabled && (keyCode === Keys.Space || keyCode === Keys.Enter)) {\n        this.changeValue(!this.checked);\n        e.preventDefault();\n      }\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"clickHandler\",\n    value: function clickHandler() {\n      if (this.isEnabled) {\n        this.changeValue(!this.checked);\n      }\n    }\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty.\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return false;\n    }\n  }, {\n    key: \"changeValue\",\n    value: function changeValue(value) {\n      var _this18 = this;\n\n      if (this.checked !== value) {\n        this.ngZone.run(function () {\n          _this18.checked = value;\n\n          _this18.ngChange(value);\n\n          _this18.valueChange.emit(value);\n\n          _this18.changeDetector.markForCheck();\n        });\n      }\n    }\n  }, {\n    key: \"tabIndex\",\n    set: function set(tabIndex) {\n      this.tabindex = tabIndex;\n    },\n    get: function get() {\n      return this.tabindex;\n    }\n  }, {\n    key: \"ieClass\",\n    get: function get() {\n      return browser && browser.msie;\n    }\n  }, {\n    key: \"ariaDisabled\",\n    get: function get() {\n      return this.disabled ? true : undefined;\n    }\n  }, {\n    key: \"ariaReadonly\",\n    get: function get() {\n      return this.readonly;\n    }\n  }, {\n    key: \"hostClasses\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"switchOnClass\",\n    get: function get() {\n      return this.checked;\n    }\n  }, {\n    key: \"switchOffClass\",\n    get: function get() {\n      return !this.checked;\n    }\n  }, {\n    key: \"disabledClass\",\n    get: function get() {\n      return this.disabled;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"onLabelMessage\",\n    get: function get() {\n      return this.onLabel || this.localizationService.get('on');\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"offLabelMessage\",\n    get: function get() {\n      return this.offLabel || this.localizationService.get('off');\n    }\n  }, {\n    key: \"isEnabled\",\n    get: function get() {\n      return !this.disabled && !this.readonly;\n    }\n  }, {\n    key: \"focused\",\n    set: function set(value) {\n      if (this.isFocused !== value && this.hostElement) {\n        var element = this.hostElement.nativeElement;\n\n        if (value) {\n          this.renderer.addClass(element, FOCUSED$1);\n        } else {\n          this.renderer.removeClass(element, FOCUSED$1);\n        }\n\n        this.isFocused = value;\n      }\n    }\n  }]);\n\n  return SwitchComponent;\n}();\n\nSwitchComponent.ɵfac = function SwitchComponent_Factory(t) {\n  return new (t || SwitchComponent)(ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(LocalizationService), ɵngcc0.ɵɵdirectiveInject(Injector), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(NgZone));\n};\n\nSwitchComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: SwitchComponent,\n  selectors: [[\"kendo-switch\"]],\n  viewQuery: function SwitchComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c21, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.wrapper = _t.first);\n    }\n  },\n  hostVars: 15,\n  hostBindings: function SwitchComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"dir\", ctx.direction)(\"aria-disabled\", ctx.ariaDisabled)(\"aria-readonly\", ctx.ariaReadonly);\n      ɵngcc0.ɵɵclassProp(\"k-ie\", ctx.ieClass)(\"k-widget\", ctx.hostClasses)(\"k-switch\", ctx.hostClasses)(\"k-switch-on\", ctx.switchOnClass)(\"k-switch-off\", ctx.switchOffClass)(\"k-state-disabled\", ctx.disabledClass);\n    }\n  },\n  inputs: {\n    focusableId: \"focusableId\",\n    checked: \"checked\",\n    disabled: \"disabled\",\n    readonly: \"readonly\",\n    tabindex: \"tabindex\",\n    tabIndex: \"tabIndex\",\n    onLabel: \"onLabel\",\n    offLabel: \"offLabel\"\n  },\n  outputs: {\n    onFocus: \"focus\",\n    onBlur: \"blur\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"kendoSwitch\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([LocalizationService, {\n    provide: L10N_PREFIX,\n    useValue: 'kendo.switch'\n  }, {\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return SwitchComponent;\n    })\n    /* tslint:disable-line */\n\n  }, {\n    provide: KendoInput,\n    useExisting: forwardRef(function () {\n      return SwitchComponent;\n    })\n  }])],\n  decls: 9,\n  vars: 13,\n  consts: function consts() {\n    var i18n_22;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\n       * @desc The **On** label of the Switch.\n       * @meaning kendo.switch.on\n       */\n      var MSG_EXTERNAL_818154782831456441$$DIST_FESM2015_INDEX_JS_23 = goog.getMsg(\"ON\");\n      i18n_22 = MSG_EXTERNAL_818154782831456441$$DIST_FESM2015_INDEX_JS_23;\n    } else {\n      i18n_22 = $localize(_templateObject6());\n    }\n\n    var i18n_24;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\n       * @desc The **Off** label of the Switch.\n       * @meaning kendo.switch.off\n       */\n      var MSG_EXTERNAL_759820891948194060$$DIST_FESM2015_INDEX_JS_25 = goog.getMsg(\"OFF\");\n      i18n_24 = MSG_EXTERNAL_759820891948194060$$DIST_FESM2015_INDEX_JS_25;\n    } else {\n      i18n_24 = $localize(_templateObject7());\n    }\n\n    return [[\"kendoSwitchLocalizedMessages\", \"\", 6, \"on\", \"off\"], [\"on\", i18n_22, \"off\", i18n_24], [\"role\", \"switch\", 1, \"k-switch-container\", 3, \"id\", \"kendoEventsOutsideAngular\"], [\"wrapper\", \"\"], [1, \"k-switch-label-on\"], [1, \"k-switch-label-off\"], [1, \"k-switch-handle\"]];\n  },\n  template: function SwitchComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainerStart(0, 0);\n      ɵngcc0.ɵɵi18nAttributes(1, 1);\n      ɵngcc0.ɵɵelementStart(2, \"span\", 2, 3);\n      ɵngcc0.ɵɵelementStart(4, \"span\", 4);\n      ɵngcc0.ɵɵtext(5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"span\", 5);\n      ɵngcc0.ɵɵtext(7);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(8, \"span\", 6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementContainerEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.focusableId)(\"kendoEventsOutsideAngular\", ɵngcc0.ɵɵpureFunction4(8, _c26, ctx.clickHandler, ctx.keyDownHandler, ctx.handleFocus, ctx.handleBlur));\n      ɵngcc0.ɵɵattribute(\"aria-checked\", ctx.checked)(\"tabindex\", ctx.disabled ? undefined : ctx.tabIndex);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵattribute(\"aria-hidden\", true);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate(ctx.onLabelMessage);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"aria-hidden\", true);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate(ctx.offLabelMessage);\n    }\n  },\n  directives: function directives() {\n    return [LocalizedSwitchMessagesDirective, ɵngcc1.EventsOutsideAngularDirective];\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\n\nSwitchComponent.ctorParameters = function () {\n  return [{\n    type: Renderer2\n  }, {\n    type: ElementRef\n  }, {\n    type: LocalizationService\n  }, {\n    type: Injector\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: NgZone\n  }];\n};\n\nSwitchComponent.propDecorators = {\n  focusableId: [{\n    type: Input\n  }],\n  onLabel: [{\n    type: Input\n  }],\n  offLabel: [{\n    type: Input\n  }],\n  checked: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }],\n  tabindex: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  onFocus: [{\n    type: Output,\n    args: ['focus']\n  }],\n  onBlur: [{\n    type: Output,\n    args: ['blur']\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  wrapper: [{\n    type: ViewChild,\n    args: ['wrapper']\n  }],\n  direction: [{\n    type: HostBinding,\n    args: ['attr.dir']\n  }],\n  ieClass: [{\n    type: HostBinding,\n    args: ['class.k-ie']\n  }],\n  ariaDisabled: [{\n    type: HostBinding,\n    args: ['attr.aria-disabled']\n  }],\n  ariaReadonly: [{\n    type: HostBinding,\n    args: ['attr.aria-readonly']\n  }],\n  hostClasses: [{\n    type: HostBinding,\n    args: ['class.k-widget']\n  }, {\n    type: HostBinding,\n    args: ['class.k-switch']\n  }],\n  switchOnClass: [{\n    type: HostBinding,\n    args: ['class.k-switch-on']\n  }],\n  switchOffClass: [{\n    type: HostBinding,\n    args: ['class.k-switch-off']\n  }],\n  disabledClass: [{\n    type: HostBinding,\n    args: ['class.k-state-disabled']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SwitchComponent, [{\n    type: Component,\n    args: [{\n      exportAs: 'kendoSwitch',\n      providers: [LocalizationService, {\n        provide: L10N_PREFIX,\n        useValue: 'kendo.switch'\n      }, {\n        multi: true,\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return SwitchComponent;\n        })\n        /* tslint:disable-line */\n\n      }, {\n        provide: KendoInput,\n        useExisting: forwardRef(function () {\n          return SwitchComponent;\n        })\n      }],\n      selector: 'kendo-switch',\n      template: \"\\n        <ng-container kendoSwitchLocalizedMessages\\n            i18n-on=\\\"kendo.switch.on|The **On** label of the Switch.\\\"\\n            on=\\\"ON\\\"\\n            i18n-off=\\\"kendo.switch.off|The **Off** label of the Switch.\\\"\\n            off=\\\"OFF\\\"\\n        >\\n\\n        <span\\n            #wrapper\\n            class=\\\"k-switch-container\\\"\\n            [id]=\\\"focusableId\\\"\\n            role=\\\"switch\\\"\\n            [attr.aria-checked]=\\\"checked\\\"\\n            [attr.tabindex]=\\\"(disabled ? undefined : tabIndex)\\\"\\n            [kendoEventsOutsideAngular]=\\\"{ click: clickHandler, keydown: keyDownHandler, focus: handleFocus, blur: handleBlur }\\\"\\n        >\\n            <span class=\\\"k-switch-label-on\\\" [attr.aria-hidden]=\\\"true\\\" >{{onLabelMessage}}</span>\\n            <span class=\\\"k-switch-label-off\\\" [attr.aria-hidden]=\\\"true\\\">{{offLabelMessage}}</span>\\n            <span class=\\\"k-switch-handle\\\"></span>\\n        </span>\\n  \"\n    }]\n  }], function () {\n    return [{\n      type: Renderer2\n    }, {\n      type: ElementRef\n    }, {\n      type: LocalizationService\n    }, {\n      type: Injector\n    }, {\n      type: ChangeDetectorRef\n    }, {\n      type: NgZone\n    }];\n  }, {\n    focusableId: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    tabindex: [{\n      type: Input\n    }],\n    onFocus: [{\n      type: Output,\n      args: ['focus']\n    }],\n    onBlur: [{\n      type: Output,\n      args: ['blur']\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    direction: [{\n      type: HostBinding,\n      args: ['attr.dir']\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    ieClass: [{\n      type: HostBinding,\n      args: ['class.k-ie']\n    }],\n    ariaDisabled: [{\n      type: HostBinding,\n      args: ['attr.aria-disabled']\n    }],\n    ariaReadonly: [{\n      type: HostBinding,\n      args: ['attr.aria-readonly']\n    }],\n    hostClasses: [{\n      type: HostBinding,\n      args: ['class.k-widget']\n    }, {\n      type: HostBinding,\n      args: ['class.k-switch']\n    }],\n    switchOnClass: [{\n      type: HostBinding,\n      args: ['class.k-switch-on']\n    }],\n    switchOffClass: [{\n      type: HostBinding,\n      args: ['class.k-switch-off']\n    }],\n    disabledClass: [{\n      type: HostBinding,\n      args: ['class.k-state-disabled']\n    }],\n    onLabel: [{\n      type: Input\n    }],\n    offLabel: [{\n      type: Input\n    }],\n    wrapper: [{\n      type: ViewChild,\n      args: ['wrapper']\n    }]\n  });\n})();\n/**\n * Represents the [Kendo UI TextArea directive for the Inputs components for Angular]({% slug overview_textarea %}).\n * Provides floating labels to `textarea` elements.\n *\n * @example\n * ```ts-no-run\n * <textarea kendoTextArea></textarea>\n * ```\n */\n\n\nvar TextAreaDirective = /*#__PURE__*/function () {\n  function TextAreaDirective(renderer, element, zone, changeDetector, injector, rtl) {\n    _classCallCheck(this, TextAreaDirective);\n\n    this.renderer = renderer;\n    this.element = element;\n    this.zone = zone;\n    this.changeDetector = changeDetector;\n    this.injector = injector;\n    this.elementClass = true;\n    this.autofillClass = true;\n    /**\n     * Fires each time the textarea value is changed.\n     */\n\n    this.valueChange = new EventEmitter();\n    /**\n     * Specifies if the `textarea` element will resize its height automatically\n     * ([see example]({% slug overview_textarea %}#toc-auto-resizing)).\n     *\n     * @default false\n     */\n\n    this.autoSize = false;\n    /**\n     * @hidden\n     */\n\n    this.onFocus = new EventEmitter();\n    /**\n     * @hidden\n     */\n\n    this.onBlur = new EventEmitter();\n    /**\n     * @hidden\n     */\n\n    this.onValueChange = new EventEmitter();\n    /**\n     * @hidden\n     */\n\n    this.autoFillStart = new EventEmitter();\n    /**\n     * @hidden\n     */\n\n    this.autoFillEnd = new EventEmitter();\n    this.listeners = [];\n\n    this.ngChange = function (_) {};\n\n    this.ngTouched = function () {};\n\n    this.direction = rtl ? 'rtl' : 'ltr';\n  }\n\n  _createClass(TextAreaDirective, [{\n    key: \"writeValue\",\n\n    /**\n     * @hidden\n     */\n    value: function writeValue(value) {\n      this.elementValue = value;\n      this.resize();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.ngChange = fn;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.ngTouched = fn;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.setElementProperty('disabled', isDisabled);\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this19 = this;\n\n      var element = this.element.nativeElement;\n      this.zone.runOutsideAngular(function () {\n        _this19.listeners = [_this19.renderer.listen(element, 'focus', _this19.handleFocus.bind(_this19)), _this19.renderer.listen(element, 'blur', _this19.handleBlur.bind(_this19)), _this19.renderer.listen(element, 'animationstart', function (e) {\n          if (e.animationName === 'autoFillStart') {\n            _this19.autoFillStart.emit();\n          } else if (e.animationName === 'autoFillEnd') {\n            _this19.autoFillEnd.emit();\n          }\n        })];\n\n        if (isDocumentAvailable() && _this19.autoSize) {\n          _this19.resizeSubscription = fromEvent(window, 'resize').pipe(debounceTime(50)).subscribe(function () {\n            return _this19.resize();\n          });\n        }\n\n        _this19.inputSubscription = fromEvent(element, 'input').subscribe(_this19.handleInput.bind(_this19));\n      });\n      this.control = this.injector.get(NgControl, null);\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var element = this.element.nativeElement;\n\n      if (changes.value) {\n        this.elementValue = this.value;\n      }\n\n      if (changes.autoSize) {\n        if (this.autoSize) {\n          this.initialHeight = element.offsetHeight;\n          this.renderer.setStyle(element, 'resize', 'none');\n        } else {\n          this.renderer.setStyle(element, 'overflow-y', 'auto');\n          this.renderer.setStyle(element, 'resize', 'both');\n          element.style.height = \"\".concat(this.initialHeight, \"px\");\n        }\n      }\n\n      this.resize();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.listeners.forEach(function (listener) {\n        return listener();\n      });\n\n      if (this.inputSubscription) {\n        this.inputSubscription.unsubscribe();\n      }\n\n      if (this.resizeSubscription) {\n        this.resizeSubscription.unsubscribe();\n      }\n    }\n  }, {\n    key: \"setElementProperty\",\n    value: function setElementProperty(name, value) {\n      if (this.element) {\n        this.renderer.setProperty(this.element.nativeElement, name, value);\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      if (!this.autoSize) {\n        return;\n      }\n\n      var element = this.element.nativeElement;\n      this.renderer.setStyle(element, 'overflow-y', 'hidden');\n      element.style.height = \"\".concat(this.initialHeight, \"px\");\n      var scrollHeight = element.scrollHeight;\n\n      if (scrollHeight > this.initialHeight) {\n        element.style.height = \"\".concat(scrollHeight, \"px\");\n      }\n    }\n  }, {\n    key: \"handleInput\",\n    value: function handleInput() {\n      var _this20 = this;\n\n      var value = this.elementValue;\n      this.value = value;\n\n      if (this.control || hasObservers(this.onValueChange) || hasObservers(this.valueChange)) {\n        this.zone.run(function () {\n          _this20.ngChange(value);\n\n          _this20.onValueChange.emit(value);\n\n          _this20.valueChange.emit(value);\n\n          _this20.changeDetector.markForCheck();\n        });\n      }\n\n      this.resize();\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus() {\n      var _this21 = this;\n\n      if (hasObservers(this.onFocus)) {\n        this.zone.run(function () {\n          _this21.onFocus.emit();\n        });\n      }\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur() {\n      var _this22 = this;\n\n      if (hasObservers(this.onBlur) || requiresZoneOnBlur(this.control)) {\n        this.zone.run(function () {\n          _this22.ngTouched();\n\n          _this22.onBlur.emit();\n\n          _this22.changeDetector.markForCheck();\n        });\n      }\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this.element.nativeElement.id;\n    },\n    set: function set(id) {\n      this.renderer.setAttribute(this.element.nativeElement, 'id', id);\n    }\n  }, {\n    key: \"elementValue\",\n    get: function get() {\n      if (this.element) {\n        return this.element.nativeElement.value;\n      }\n\n      return '';\n    },\n    set: function set(value) {\n      this.setElementProperty('value', value === undefined || value === null ? '' : value);\n    }\n  }]);\n\n  return TextAreaDirective;\n}();\n\nTextAreaDirective.ɵfac = function TextAreaDirective_Factory(t) {\n  return new (t || TextAreaDirective)(ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(Injector), ɵngcc0.ɵɵdirectiveInject(RTL, 8));\n};\n\nTextAreaDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TextAreaDirective,\n  selectors: [[\"textarea\", \"kendoTextArea\", \"\"]],\n  hostVars: 5,\n  hostBindings: function TextAreaDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"dir\", ctx.direction);\n      ɵngcc0.ɵɵclassProp(\"k-textarea\", ctx.elementClass)(\"k-autofill\", ctx.autofillClass);\n    }\n  },\n  inputs: {\n    autoSize: \"autoSize\",\n    value: \"value\"\n  },\n  outputs: {\n    valueChange: \"valueChange\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return TextAreaDirective;\n    }),\n    multi: true\n  }, {\n    provide: KendoInput,\n    useExisting: forwardRef(function () {\n      return TextAreaDirective;\n    })\n  }]), ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nTextAreaDirective.ctorParameters = function () {\n  return [{\n    type: Renderer2\n  }, {\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: Injector\n  }, {\n    type: Boolean,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RTL]\n    }]\n  }];\n};\n\nTextAreaDirective.propDecorators = {\n  elementClass: [{\n    type: HostBinding,\n    args: ['class.k-textarea']\n  }],\n  autofillClass: [{\n    type: HostBinding,\n    args: ['class.k-autofill']\n  }],\n  direction: [{\n    type: HostBinding,\n    args: ['attr.dir']\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  autoSize: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TextAreaDirective, [{\n    type: Directive,\n    args: [{\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return TextAreaDirective;\n        }),\n        multi: true\n      }, {\n        provide: KendoInput,\n        useExisting: forwardRef(function () {\n          return TextAreaDirective;\n        })\n      }],\n      selector: 'textarea[kendoTextArea]'\n    }]\n  }], function () {\n    return [{\n      type: Renderer2\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }, {\n      type: ChangeDetectorRef\n    }, {\n      type: Injector\n    }, {\n      type: Boolean,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RTL]\n      }]\n    }];\n  }, {\n    elementClass: [{\n      type: HostBinding,\n      args: ['class.k-textarea']\n    }],\n    autofillClass: [{\n      type: HostBinding,\n      args: ['class.k-autofill']\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    autoSize: [{\n      type: Input\n    }],\n    direction: [{\n      type: HostBinding,\n      args: ['attr.dir']\n    }],\n    value: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @hidden\n */\n\n\nvar FloatingLabelInputAdapter = /*#__PURE__*/function () {\n  function FloatingLabelInputAdapter(component, formControl) {\n    _classCallCheck(this, FloatingLabelInputAdapter);\n\n    this.component = component;\n\n    var isObservableOrEventEmitter = function isObservableOrEventEmitter(event) {\n      return event instanceof Observable || event instanceof EventEmitter;\n    };\n\n    if (isObservableOrEventEmitter(component.onFocus)) {\n      this.onFocus = component.onFocus;\n    }\n\n    if (isObservableOrEventEmitter(component.autoFillStart)) {\n      this.autoFillStart = component.autoFillStart;\n    }\n\n    if (isObservableOrEventEmitter(component.autoFillEnd)) {\n      this.autoFillEnd = component.autoFillEnd;\n    }\n\n    if (isObservableOrEventEmitter(component.onBlur)) {\n      this.onBlur = component.onBlur;\n    }\n\n    if (formControl) {\n      this.onValueChange = formControl.valueChanges;\n    } else if (component.onValueChange) {\n      this.onValueChange = component.onValueChange;\n    }\n  }\n\n  _createClass(FloatingLabelInputAdapter, [{\n    key: \"focusableId\",\n    get: function get() {\n      var component = this.component;\n\n      if ('focusableId' in component) {\n        return component.focusableId;\n      } else if ('id' in component) {\n        return component.id;\n      }\n\n      return \"\";\n    },\n    set: function set(value) {\n      var component = this.component;\n\n      if ('focusableId' in component) {\n        component.focusableId = value;\n      } else if ('id' in component) {\n        component.id = value;\n      }\n    }\n  }]);\n\n  return FloatingLabelInputAdapter;\n}();\n\nvar isFunction = function isFunction(x) {\n  return Object.prototype.toString.call(x) === '[object Function]';\n};\n/**\n * @hidden\n */\n\n\nvar TextBoxContainerComponent = /*#__PURE__*/function () {\n  function TextBoxContainerComponent(elementRef, renderer, changeDetectorRef, rtl) {\n    _classCallCheck(this, TextBoxContainerComponent);\n\n    this.elementRef = elementRef;\n    this.renderer = renderer;\n    this.changeDetectorRef = changeDetectorRef;\n    /**\n     * @hidden\n     */\n\n    this.focused = false;\n    /**\n     * @hidden\n     */\n\n    this.empty = true;\n    /**\n     * @hidden\n     */\n\n    this.invalid = false;\n    this._subscriptions = [];\n    this.autoFillStarted = false;\n    this.direction = rtl ? 'rtl' : 'ltr';\n    this.renderer.removeAttribute(this.elementRef.nativeElement, \"id\");\n  }\n\n  _createClass(TextBoxContainerComponent, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @hidden\n     */\n    value: function ngAfterContentInit() {\n      var _this23 = this;\n\n      if (!this.formControl && !this.kendoInput) {\n        if (isDevMode()) {\n          throw new Error(\"The TextBoxContainer requires a Kendo Input component\" + \" or a forms-bound component to function properly.\");\n        }\n\n        return;\n      } // add focus/blur/valueChange handlers\n\n\n      var control = new FloatingLabelInputAdapter(this.kendoInput || this.formControl.valueAccessor, this.formControl);\n\n      var setFocus = function setFocus(isFocused) {\n        return function () {\n          _this23.focused = isFocused;\n\n          _this23.updateState();\n        };\n      };\n\n      this.subscribe(control, 'onFocus', setFocus(true));\n      this.subscribe(control, 'onBlur', setFocus(false));\n      this.subscribe(control, 'autoFillStart', function () {\n        _this23.autoFillStarted = true;\n\n        _this23.renderer.removeClass(_this23.elementRef.nativeElement, 'k-state-empty');\n      });\n      this.subscribe(control, 'autoFillEnd', function () {\n        if (_this23.autoFillStarted) {\n          _this23.autoFillStarted = false;\n\n          if (_this23.empty) {\n            _this23.renderer.addClass(_this23.elementRef.nativeElement, 'k-state-empty');\n          }\n        }\n      });\n\n      var updateState = function updateState() {\n        return _this23.updateState();\n      };\n\n      updateState();\n      this.subscribe(control, 'onValueChange', updateState); // set label id for floating label\n\n      if (this.id && control.focusableId) {\n        // input wins\n        this.id = control.focusableId;\n      } else if (this.id) {\n        control.focusableId = this.id;\n      } else if (control.focusableId) {\n        this.id = control.focusableId;\n      } else {\n        var id = \"_\" + guid();\n        control.focusableId = id;\n        this.id = id;\n      }\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._subscriptions.forEach(function (s) {\n        return s.unsubscribe();\n      });\n\n      this._subscriptions = [];\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(control, eventName, handler) {\n      if (control[eventName] instanceof EventEmitter) {\n        var subscription = control[eventName].subscribe(handler);\n\n        this._subscriptions.push(subscription);\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState() {\n      var empty = function empty(value) {\n        // zero is not an empty value (e.g., NumericTextBox)\n        if (value === 0 || value === false) {\n          return false;\n        } // empty arrays are an empty value (e.g., MultiSelect)\n\n\n        if (Array.isArray(value) && !value.length) {\n          return true;\n        }\n\n        return !value;\n      };\n\n      var formControl = this.formControl;\n\n      if (formControl) {\n        var valueAccessor = formControl.valueAccessor;\n\n        if (isFunction(valueAccessor.isEmpty)) {\n          this.empty = valueAccessor.isEmpty();\n        } else {\n          this.empty = empty(formControl.value);\n        }\n\n        this.invalid = formControl.invalid && (formControl.touched || formControl.dirty);\n      } else {\n        this.empty = isFunction(this.kendoInput.isEmpty) ? this.kendoInput.isEmpty() : empty(this.kendoInput.value);\n      }\n\n      if (this.empty) {\n        this.renderer.addClass(this.elementRef.nativeElement, 'k-state-empty');\n      } else {\n        this.renderer.removeClass(this.elementRef.nativeElement, 'k-state-empty');\n      }\n\n      this.changeDetectorRef.markForCheck();\n    }\n  }, {\n    key: \"hostClasses\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"textareaElementClass\",\n    get: function get() {\n      return !!this.textarea;\n    }\n  }, {\n    key: \"focusedClass\",\n    get: function get() {\n      return this.focused;\n    }\n  }, {\n    key: \"invalidClass\",\n    get: function get() {\n      return this.invalid;\n    }\n  }]);\n\n  return TextBoxContainerComponent;\n}();\n\nTextBoxContainerComponent.ɵfac = function TextBoxContainerComponent_Factory(t) {\n  return new (t || TextBoxContainerComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(RTL, 8));\n};\n\nTextBoxContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TextBoxContainerComponent,\n  selectors: [[\"kendo-textbox-container\"]],\n  contentQueries: function TextBoxContainerComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, KendoInput, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, TextAreaDirective, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, NgControl, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.kendoInput = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textarea = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.formControl = _t.first);\n    }\n  },\n  hostVars: 9,\n  hostBindings: function TextBoxContainerComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"dir\", ctx.direction);\n      ɵngcc0.ɵɵclassProp(\"k-textbox-container\", ctx.hostClasses)(\"k-textarea-wrapper\", ctx.textareaElementClass)(\"k-state-focused\", ctx.focusedClass)(\"k-state-invalid\", ctx.invalidClass);\n    }\n  },\n  inputs: {\n    id: \"id\",\n    floatingLabel: \"floatingLabel\"\n  },\n  ngContentSelectors: _c27,\n  decls: 2,\n  vars: 1,\n  consts: [[\"class\", \"k-label\", 3, \"for\", 4, \"ngIf\"], [1, \"k-label\", 3, \"for\"]],\n  template: function TextBoxContainerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵtemplate(1, TextBoxContainerComponent_label_1_Template, 2, 2, \"label\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.floatingLabel);\n    }\n  },\n  directives: [ɵngcc2.NgIf],\n  encapsulation: 2\n});\n/** @nocollapse */\n\nTextBoxContainerComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Renderer2\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: Boolean,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RTL]\n    }]\n  }];\n};\n\nTextBoxContainerComponent.propDecorators = {\n  hostClasses: [{\n    type: HostBinding,\n    args: ['class.k-textbox-container']\n  }],\n  textareaElementClass: [{\n    type: HostBinding,\n    args: ['class.k-textarea-wrapper']\n  }],\n  focusedClass: [{\n    type: HostBinding,\n    args: ['class.k-state-focused']\n  }],\n  invalidClass: [{\n    type: HostBinding,\n    args: ['class.k-state-invalid']\n  }],\n  direction: [{\n    type: HostBinding,\n    args: ['attr.dir']\n  }],\n  id: [{\n    type: Input\n  }],\n  floatingLabel: [{\n    type: Input\n  }],\n  kendoInput: [{\n    type: ContentChild,\n    args: [KendoInput]\n  }],\n  textarea: [{\n    type: ContentChild,\n    args: [TextAreaDirective]\n  }],\n  formControl: [{\n    type: ContentChild,\n    args: [NgControl]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TextBoxContainerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'kendo-textbox-container',\n      template: \"\\n        <ng-content></ng-content>\\n        <label *ngIf=\\\"floatingLabel\\\" [for]=\\\"id\\\" class=\\\"k-label\\\">{{ floatingLabel }}</label>\\n    \"\n    }]\n  }], function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: Renderer2\n    }, {\n      type: ChangeDetectorRef\n    }, {\n      type: Boolean,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RTL]\n      }]\n    }];\n  }, {\n    direction: [{\n      type: HostBinding,\n      args: ['attr.dir']\n    }],\n    hostClasses: [{\n      type: HostBinding,\n      args: ['class.k-textbox-container']\n    }],\n    textareaElementClass: [{\n      type: HostBinding,\n      args: ['class.k-textarea-wrapper']\n    }],\n    focusedClass: [{\n      type: HostBinding,\n      args: ['class.k-state-focused']\n    }],\n    invalidClass: [{\n      type: HostBinding,\n      args: ['class.k-state-invalid']\n    }],\n    id: [{\n      type: Input\n    }],\n    floatingLabel: [{\n      type: Input\n    }],\n    kendoInput: [{\n      type: ContentChild,\n      args: [KendoInput]\n    }],\n    textarea: [{\n      type: ContentChild,\n      args: [TextAreaDirective]\n    }],\n    formControl: [{\n      type: ContentChild,\n      args: [NgControl]\n    }]\n  });\n})();\n/**\n * Represents the [Kendo UI TextBox directive]({% slug overview_textbox %}) for the Inputs components for Angular.\n * Used to style the textbox of any `input` element.\n *\n * @example\n * ```ts-no-run\n * <input kendoTextBox />\n * <input kendoTextBox type=\"email\" />\n * <input kendoTextBox type=\"password\" />\n * ```\n */\n\n\nvar TextBoxDirective = /*#__PURE__*/function () {\n  function TextBoxDirective(renderer, inputElement, ngZone) {\n    _classCallCheck(this, TextBoxDirective);\n\n    this.renderer = renderer;\n    this.inputElement = inputElement;\n    this.ngZone = ngZone;\n    this.hostClass = true;\n    /**\n     * @hidden\n     */\n\n    this.onFocus = new EventEmitter();\n    /**\n     * @hidden\n     */\n\n    this.onBlur = new EventEmitter();\n    /**\n     * @hidden\n     */\n\n    this.onValueChange = new EventEmitter();\n    /**\n     * @hidden\n     */\n\n    this.autoFillStart = new EventEmitter();\n    /**\n     * @hidden\n     */\n\n    this.autoFillEnd = new EventEmitter();\n    this.listeners = [];\n  }\n  /**\n   * @hidden\n   */\n\n\n  _createClass(TextBoxDirective, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this24 = this;\n\n      var input = this.inputElement.nativeElement;\n      this.listeners = [this.renderer.listen(input, 'focus', function () {\n        return _this24.onFocus.emit();\n      }), this.renderer.listen(input, 'blur', function () {\n        return _this24.onBlur.emit();\n      })];\n      this.ngZone.runOutsideAngular(function () {\n        _this24.renderer.listen(input, 'animationstart', function (e) {\n          if (e.animationName === 'autoFillStart') {\n            _this24.autoFillStart.emit();\n          } else if (e.animationName === 'autoFillEnd') {\n            _this24.autoFillEnd.emit();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.listeners.forEach(function (listener) {\n        return listener();\n      });\n    }\n  }, {\n    key: \"value\",\n    set: function set(text) {\n      if (!this.inputElement) {\n        return;\n      }\n\n      this.inputElement.nativeElement.value = text === undefined || text === null ? '' : text;\n      this.onValueChange.emit();\n    }\n    /**\n     * @hidden\n     */\n    ,\n    get: function get() {\n      return this.inputElement.nativeElement.value;\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this.inputElement.nativeElement.id;\n    },\n    set: function set(id) {\n      this.renderer.setAttribute(this.inputElement.nativeElement, 'id', id);\n    }\n  }]);\n\n  return TextBoxDirective;\n}();\n\nTextBoxDirective.ɵfac = function TextBoxDirective_Factory(t) {\n  return new (t || TextBoxDirective)(ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(NgZone));\n};\n\nTextBoxDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TextBoxDirective,\n  selectors: [[\"input\", \"kendoTextBox\", \"\"]],\n  hostVars: 2,\n  hostBindings: function TextBoxDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"k-textbox\", ctx.hostClass);\n    }\n  },\n  inputs: {\n    value: \"value\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: KendoInput,\n    useExisting: forwardRef(function () {\n      return TextBoxDirective;\n    })\n  }])]\n});\n/** @nocollapse */\n\nTextBoxDirective.ctorParameters = function () {\n  return [{\n    type: Renderer2\n  }, {\n    type: ElementRef\n  }, {\n    type: NgZone\n  }];\n};\n\nTextBoxDirective.propDecorators = {\n  hostClass: [{\n    type: HostBinding,\n    args: ['class.k-textbox']\n  }],\n  value: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TextBoxDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'input[kendoTextBox]',\n      providers: [{\n        provide: KendoInput,\n        useExisting: forwardRef(function () {\n          return TextBoxDirective;\n        })\n      }]\n    }]\n  }], function () {\n    return [{\n      type: Renderer2\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  }, {\n    hostClass: [{\n      type: HostBinding,\n      args: ['class.k-textbox']\n    }],\n    value: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @hidden\n */\n\n\nvar createMaxValidator = function createMaxValidator(maxValue) {\n  return function (c) {\n    if (!isPresent(maxValue) || !isPresent(c.value) || c.value <= maxValue) {\n      return null;\n    }\n\n    return {\n      maxError: {\n        maxValue: maxValue,\n        value: c.value\n      }\n    };\n  };\n};\n/**\n * @hidden\n */\n\n\nvar createMinValidator = function createMinValidator(minValue) {\n  return function (c) {\n    if (!isPresent(minValue) || !isPresent(c.value) || c.value >= minValue) {\n      return null;\n    }\n\n    return {\n      minError: {\n        minValue: minValue,\n        value: c.value\n      }\n    };\n  };\n};\n/**\n * @hidden\n */\n\n\nvar MIN_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/inputs/api/NumericTextBoxComponent/#toc-min';\n/**\n * @hidden\n */\n\nvar MAX_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/inputs/api/NumericTextBoxComponent/#toc-max';\n/**\n * @hidden\n */\n\nvar POINT = \".\";\n/**\n * @hidden\n */\n\nvar INITIAL_SPIN_DELAY = 500;\n/**\n * @hidden\n */\n\nvar SPIN_DELAY = 50;\n/**\n * @hidden\n */\n\nvar EXPONENT_REGEX = /[eE][\\-+]?([0-9]+)/;\n/**\n * @hidden\n */\n\nvar numericRegex = function numericRegex(options) {\n  var autoCorrect = options.autoCorrect,\n      decimals = options.decimals,\n      min = options.min;\n  var separator = options.separator;\n\n  if (separator === POINT) {\n    separator = '\\\\' + separator;\n  }\n\n  var signPattern = autoCorrect && min !== null && min >= 0 ? '' : '-?';\n  var numberPattern;\n\n  if (decimals === 0) {\n    numberPattern = '\\\\d*';\n  } else {\n    numberPattern = \"(?:(?:\\\\d+(\".concat(separator, \"\\\\d*)?)|(?:\").concat(separator, \"\\\\d*))?\");\n  }\n\n  return new RegExp(\"^\".concat(signPattern).concat(numberPattern, \"$\"));\n};\n/**\n * @hidden\n */\n\n\nvar decimalPart = function decimalPart(value) {\n  return value >= 0 ? Math.floor(value) : Math.ceil(value);\n};\n/**\n * @hidden\n */\n\n\nvar noop = function noop(_) {}; // tslint:disable-line:no-empty\n\n/**\n * @hidden\n */\n\n\nvar defined = function defined(value) {\n  return typeof value !== 'undefined';\n};\n/**\n * @hidden\n */\n\n\nvar isNumber = function isNumber(value) {\n  return !isNaN(value) && value !== null;\n};\n/**\n * @hidden\n */\n\n\nfunction pad(value, digits) {\n  var count = digits - String(value).length;\n  var result = value;\n\n  if (count > 0) {\n    var padString = new Array(count + 1).join(\"0\");\n    result = parseFloat(value + padString);\n  }\n\n  return result;\n}\n/**\n * @hidden\n */\n\n\nvar getDeltaFromMouseWheel = function getDeltaFromMouseWheel(e) {\n  var delta = 0;\n\n  if (e.wheelDelta) {\n    delta = e.wheelDelta / 120;\n    delta = delta > 0 ? Math.ceil(delta) : Math.floor(delta);\n  } else if (e.detail) {\n    delta = Math.round(-e.detail / 3);\n  }\n\n  return delta;\n};\n/**\n * @hidden\n */\n\n\nvar getCaretPosition = function getCaretPosition(element) {\n  return element.selectionStart;\n};\n/**\n * @hidden\n */\n\n\nvar extractSignificantNumericChars = function extractSignificantNumericChars(formattedString, separator) {\n  var significantCharacters = \"\".concat(separator, \"0123456789-\");\n  return formattedString.split('').reduce(function (acc, curr) {\n    return significantCharacters.includes(curr) ? ++acc : acc;\n  }, 0);\n};\n/**\n * @hidden\n */\n\n\nvar ArrowDirection;\n\n(function (ArrowDirection) {\n  ArrowDirection[ArrowDirection[\"Down\"] = -1] = \"Down\";\n  ArrowDirection[ArrowDirection[\"None\"] = 0] = \"None\";\n  ArrowDirection[ArrowDirection[\"Up\"] = 1] = \"Up\";\n})(ArrowDirection || (ArrowDirection = {}));\n\nvar PARSABLE_OPTIONS = ['min', 'max', 'step', 'decimals'];\nvar PARSABLE_DEFAULTS = {\n  decimals: null,\n  max: null,\n  min: null,\n  step: 1\n};\nvar FOCUSED$2 = 'k-state-focused';\nvar FORMATTED_VALUE = 'k-formatted-value';\n/**\n * Represents the [Kendo UI NumericTextBox component for Angular]({% slug overview_numerictextbox %}).\n */\n\nvar NumericTextBoxComponent = /*#__PURE__*/function () {\n  function NumericTextBoxComponent(intl, renderer, localizationService, injector, ngZone, changeDetector, hostElement) {\n    var _this25 = this;\n\n    _classCallCheck(this, NumericTextBoxComponent);\n\n    this.intl = intl;\n    this.renderer = renderer;\n    this.localizationService = localizationService;\n    this.injector = injector;\n    this.ngZone = ngZone;\n    this.changeDetector = changeDetector;\n    this.hostElement = hostElement;\n    /**\n     * @hidden\n     */\n\n    this.focusableId = \"k-\".concat(guid());\n    /**\n     * Determines whether the NumericTextBox is disabled ([see example]({% slug disabled_numerictextbox %})).\n     */\n\n    this.disabled = false;\n    /**\n     * Determines whether the NumericTextBox is in its read-only state ([see example]({% slug readonly_numerictextbox %})).\n     */\n\n    this.readonly = false;\n    /**\n     * Sets the title of the `input` element of the NumericTextBox.\n     */\n\n    this.title = '';\n    /**\n     * Specifies whether the value will be auto-corrected based on the minimum and maximum values\n     * ([see example]({% slug precision_numerictextbox %})).\n     */\n\n    this.autoCorrect = false;\n    /**\n     * Specifies the number of decimals that the user can enter when the input is focused\n     * ([see example]({% slug precision_numerictextbox %})).\n     */\n\n    this.decimals = null;\n    /**\n     * Specifies the value that is used to increment or decrement the component value\n     * ([see example]({% slug predefinedsteps_numerictextbox %})).\n     */\n\n    this.step = 1;\n    /**\n     * Specifies whether the **Up** and **Down** spin buttons will be rendered\n     * ([see example]({% slug spinbuttons_numerictextbox %})).\n     */\n\n    this.spinners = true;\n    /**\n     * Determines whether the built-in minimum or maximum validators are enforced when a form is validated.\n     *\n     * > The 4.2.0 Angular version introduces the `min` and `max` validation directives. As a result, even if you set `rangeValidation`\n     * to `false`, the built-in Angular validators will be executed.\n     */\n\n    this.rangeValidation = true;\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n\n    this.tabindex = 0;\n    /**\n     * Determines whether the whole value will be selected when the NumericTextBox is clicked. Defaults to `true`.\n     */\n\n    this.selectOnFocus = true;\n    /**\n     * Specifies the value of the NumericTextBox\n     * ([see example]({% slug formats_numerictextbox %})).\n     */\n\n    this.value = null;\n    /**\n     * Fires each time the user selects a new value ([see example]({% slug overview_numerictextbox %}#toc-events)).\n     */\n\n    this.valueChange = new EventEmitter();\n    /**\n     * Fires each time the user focuses the `input` element ([see example]({% slug overview_numerictextbox %}#toc-events)).\n     */\n\n    this.onFocus = new EventEmitter();\n    /**\n     * Fires each time the `input` element gets blurred ([see example]({% slug overview_numerictextbox %}#toc-events)).\n     */\n\n    this.onBlur = new EventEmitter();\n    /**\n     * @hidden\n     */\n\n    this.ArrowDirection = ArrowDirection;\n    /**\n     * @hidden\n     */\n\n    this.arrowDirection = ArrowDirection.None;\n    this.inputValue = '';\n    this.minValidateFn = noop;\n    this.maxValidateFn = noop;\n    this._format = \"n2\";\n    this.isPasted = false;\n    this.mouseDown = false;\n    this.ngChange = noop;\n    this.ngTouched = noop;\n    this.ngValidatorChange = noop;\n    /**\n     * @hidden\n     */\n\n    this.increasePress = function (e) {\n      _this25.arrowPress(ArrowDirection.Up, e);\n    };\n    /**\n     * @hidden\n     */\n\n\n    this.decreasePress = function (e) {\n      _this25.arrowPress(ArrowDirection.Down, e);\n    };\n    /**\n     * @hidden\n     */\n\n\n    this.releaseArrow = function () {\n      clearTimeout(_this25.spinTimeout);\n\n      if (_this25.arrowDirection !== ArrowDirection.None) {\n        _this25.arrowDirection = ArrowDirection.None;\n\n        _this25.changeDetector.detectChanges();\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    this.handlePaste = function () {\n      _this25.isPasted = true;\n    };\n    /**\n     * @hidden\n     */\n\n\n    this.handleInput = function () {\n      var input = _this25.numericInput.nativeElement;\n      var selectionStart = input.selectionStart,\n          selectionEnd = input.selectionEnd,\n          inputValue = input.value;\n\n      if (_this25.pressedKey === Keys.NumpadDecimal) {\n        inputValue = _this25.replaceNumpadDotValue();\n      }\n\n      if (_this25.isPasted) {\n        inputValue = _this25.formatInputValue(_this25.intl.parseNumber(inputValue));\n      }\n\n      if (!_this25.isValid(inputValue)) {\n        input.value = _this25.inputValue;\n\n        _this25.setSelection(selectionStart - 1, selectionEnd - 1);\n\n        return;\n      }\n\n      var parsedValue = _this25.intl.parseNumber(inputValue);\n\n      var value = _this25.restrictDecimals(parsedValue);\n\n      if (_this25.autoCorrect) {\n        var limited = _this25.limitInputValue(value);\n\n        value = limited.value;\n        selectionStart = limited.selectionStart;\n        selectionEnd = limited.selectionEnd;\n      }\n\n      if (parsedValue !== value || _this25.hasTrailingZeros(inputValue) || !_this25.focused) {\n        _this25.setInputValue(value);\n\n        _this25.setSelection(selectionStart, selectionEnd);\n      } else {\n        _this25.inputValue = inputValue;\n      }\n\n      if (_this25.isPasted) {\n        input.value = _this25.inputValue;\n      }\n\n      _this25.updateValue(value);\n\n      _this25.previousSelection = null;\n      _this25.isPasted = false;\n    };\n    /**\n     * @hidden\n     */\n\n\n    this.handleDragEnter = function () {\n      if (!_this25.focused && !_this25.isDisabled) {\n        _this25.setInputValue(_this25.value, true);\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    this.handleMouseDown = function () {\n      _this25.mouseDown = true;\n    };\n    /**\n     * @hidden\n     */\n\n\n    this.handleFocus = function () {\n      if (!_this25.focused) {\n        _this25.focused = true;\n\n        if (!_this25.isDisabled) {\n          var shouldSelectAll = _this25.selectOnFocus || !_this25.mouseDown;\n\n          _this25.ngZone.runOutsideAngular(function () {\n            setTimeout(function () {\n              if (shouldSelectAll) {\n                _this25.selectAll();\n              } else {\n                _this25.selectCaret();\n              }\n            }, 0);\n          });\n        }\n      }\n\n      _this25.mouseDown = false;\n\n      if (hasObservers(_this25.onFocus)) {\n        _this25.ngZone.run(function () {\n          _this25.onFocus.emit();\n        });\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    this.handleBlur = function () {\n      _this25.changeDetector.markForCheck();\n\n      _this25.focused = false; //blur is thrown before input when dragging the input text in IE\n\n      if (_this25.inputValue !== _this25.elementValue) {\n        _this25.handleInput();\n      }\n\n      _this25.setInputValue();\n\n      if (hasObservers(_this25.onBlur) || requiresZoneOnBlur(_this25.control)) {\n        _this25.ngZone.run(function () {\n          _this25.ngTouched();\n\n          _this25.onBlur.emit();\n        });\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    this.handleKeyDown = function (e) {\n      if (_this25.isDisabled) {\n        return;\n      }\n\n      var step;\n\n      if (e.keyCode === Keys.ArrowDown) {\n        step = -1;\n      } else if (e.keyCode === Keys.ArrowUp) {\n        step = 1;\n      }\n\n      if (step && _this25.step) {\n        e.preventDefault();\n\n        _this25.addStep(step);\n      }\n\n      var input = _this25.numericInput.nativeElement;\n      _this25.previousSelection = {\n        end: input.selectionEnd,\n        start: input.selectionStart\n      };\n      _this25.pressedKey = e.keyCode;\n    };\n    /**\n     * @hidden\n     */\n\n\n    this.handleWheel = function (e) {\n      if (_this25.focused && !_this25.isDisabled) {\n        e.preventDefault();\n        var delta = getDeltaFromMouseWheel(e);\n\n        _this25.addStep(delta);\n      }\n    };\n\n    this.direction = localizationService.rtl ? 'rtl' : 'ltr';\n  }\n  /**\n   * Specifies the number format which is used when the NumericTextBox is not focused\n   * ([see example]({% slug formats_numerictextbox %})).\n   * If `format` is set to `null` or `undefined`, the default format will be used.\n   */\n\n\n  _createClass(NumericTextBoxComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this26 = this;\n\n      this.subscriptions = this.localizationService.changes.subscribe(function (_ref11) {\n        var rtl = _ref11.rtl;\n        _this26.direction = rtl ? 'rtl' : 'ltr';\n      });\n      this.subscriptions.add(this.intl.changes.subscribe(this.intlChange.bind(this)));\n\n      if (this.hostElement) {\n        this.renderer.removeAttribute(this.hostElement.nativeElement, \"tabindex\");\n      }\n\n      this.control = this.injector.get(NgControl, null);\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (anyChanged(PARSABLE_OPTIONS, changes, false)) {\n        this.parseOptions(PARSABLE_OPTIONS.filter(function (option) {\n          return changes[option];\n        }));\n      }\n\n      this.verifySettings();\n\n      if (anyChanged(['min', 'max', 'rangeValidation'], changes, false)) {\n        this.minValidateFn = this.rangeValidation ? createMinValidator(this.min) : noop;\n        this.maxValidateFn = this.rangeValidation ? createMaxValidator(this.max) : noop;\n        this.ngValidatorChange();\n      }\n\n      if (anyChanged(['autoCorrect', 'decimals', 'min'], changes)) {\n        delete this.numericRegex;\n      }\n\n      if (anyChanged(['value', 'format'], changes, false)) {\n        this.verifyValue(this.value);\n        this.value = this.restrictModelValue(this.value);\n\n        if (!this.focused || this.intl.parseNumber(this.elementValue) !== this.value) {\n          this.setInputValue();\n        }\n      }\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.subscriptions) {\n        this.subscriptions.unsubscribe();\n      }\n\n      clearTimeout(this.spinTimeout);\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"validate\",\n    value: function validate(control) {\n      return this.minValidateFn(control) || this.maxValidateFn(control);\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"registerOnValidatorChange\",\n    value: function registerOnValidatorChange(fn) {\n      this.ngValidatorChange = fn;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.verifyValue(value);\n      var restrictedValue = this.restrictModelValue(value);\n      this.value = restrictedValue;\n      this.setInputValue();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.ngChange = fn;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.ngTouched = fn;\n    }\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     *\n     * @param isDisabled\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /**\n     * Focuses the NumericTextBox.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"numerictextbox.focus()\">Focus NumericTextBox</button>\n     *  <kendo-numerictextbox #numerictextbox></kendo-numerictextbox>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      invokeElementMethod(this.numericInput, 'focus');\n    }\n    /**\n     * Blurs the NumericTextBox.\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      invokeElementMethod(this.numericInput, 'blur');\n    }\n    /**\n     * Notifies the `NumericTextBoxComponent` that the input value should be changed.\n     * Can be used to update the input after setting the component properties directly.\n     */\n\n  }, {\n    key: \"notifyValueChange\",\n    value: function notifyValueChange() {\n      this.setInputValue();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"arrowPress\",\n    value: function arrowPress(direction, e) {\n      e.preventDefault();\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (!mobileOS) {\n        this.focused = true;\n        this.focus();\n      }\n\n      if (this.arrowDirection !== direction) {\n        this.arrowDirection = direction;\n        this.changeDetector.detectChanges();\n      }\n\n      if (this.step) {\n        this.spin(direction, INITIAL_SPIN_DELAY);\n      } else {\n        this.setInputValue();\n      }\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(value) {\n      var _this27 = this;\n\n      if (!areSame(this.value, value)) {\n        this.ngZone.run(function () {\n          _this27.value = value;\n\n          _this27.ngChange(value);\n\n          _this27.valueChange.emit(value);\n\n          _this27.changeDetector.markForCheck();\n        });\n      }\n    }\n  }, {\n    key: \"replaceNumpadDotValue\",\n    value: function replaceNumpadDotValue() {\n      var value = this.inputValue || \"\";\n\n      if (this.previousSelection) {\n        var input = this.numericInput.nativeElement;\n        var selectionStart = input.selectionStart,\n            selectionEnd = input.selectionEnd;\n        var _this$previousSelecti = this.previousSelection,\n            start = _this$previousSelecti.start,\n            end = _this$previousSelecti.end;\n        input.value = value = value.substring(0, start) + this.decimalSeparator + value.substring(end);\n        this.setSelection(selectionStart, selectionEnd);\n      }\n\n      return value;\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(value) {\n      if (!this.numericRegex) {\n        this.numericRegex = numericRegex({\n          autoCorrect: this.autoCorrect,\n          decimals: this.decimals,\n          min: this.min,\n          separator: this.decimalSeparator\n        });\n      }\n\n      return this.numericRegex.test(value);\n    }\n  }, {\n    key: \"spin\",\n    value: function spin(step, timeout) {\n      var _this28 = this;\n\n      clearTimeout(this.spinTimeout);\n      this.spinTimeout = window.setTimeout(function () {\n        _this28.spin(step, SPIN_DELAY);\n      }, timeout);\n      this.addStep(step);\n    }\n  }, {\n    key: \"addStep\",\n    value: function addStep(step) {\n      var value = add(this.value || 0, this.step * step);\n      value = this.limitValue(value);\n      value = this.restrictDecimals(value);\n      this.setInputValue(value);\n      this.updateValue(value);\n    }\n  }, {\n    key: \"setSelection\",\n    value: function setSelection(start, end) {\n      if (this.focused) {\n        invokeElementMethod(this.numericInput, 'setSelectionRange', start, end);\n      }\n    }\n  }, {\n    key: \"limitValue\",\n    value: function limitValue(value) {\n      var result = value;\n\n      if (!this.isInRange(value)) {\n        if (isNumber(this.max) && value > this.max) {\n          result = this.max;\n        }\n\n        if (isNumber(this.min) && value < this.min) {\n          result = this.min;\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"limitInputValue\",\n    value: function limitInputValue(value) {\n      var _this$numericInput$na = this.numericInput.nativeElement,\n          selectionStart = _this$numericInput$na.selectionStart,\n          selectionEnd = _this$numericInput$na.selectionEnd,\n          enteredValue = _this$numericInput$na.value;\n      var limitedValue = value;\n      var selectToEnd = false;\n\n      if (!this.isInRange(value)) {\n        var lengthChange = enteredValue.length - String(this.inputValue).length;\n        var min = this.min,\n            max = this.max;\n        var hasMax = isNumber(max);\n        var hasMin = isNumber(min);\n        var padLimit, replaceNext;\n        var correctedValue = value;\n\n        if (selectionStart === 0 && this.inputValue.substr(1) === enteredValue) {\n          return {\n            selectionEnd: selectionEnd,\n            selectionStart: selectionStart,\n            value: null\n          };\n        }\n\n        if (hasMax && value > max) {\n          if (value > 0) {\n            replaceNext = true;\n          } else {\n            padLimit = max;\n          }\n        } else if (hasMin && value < min) {\n          if (value > 0) {\n            padLimit = min;\n          } else {\n            replaceNext = true;\n          }\n        }\n\n        if (padLimit) {\n          var paddedValue = this.tryPadValue(value, padLimit);\n\n          if (paddedValue && decimalPart(value) !== decimalPart(padLimit)) {\n            correctedValue = paddedValue;\n            selectToEnd = true;\n          }\n        } else if (replaceNext) {\n          if (this.inputValue && selectionStart !== enteredValue.length) {\n            correctedValue = parseFloat(enteredValue.substr(0, selectionStart) + enteredValue.substr(selectionStart + lengthChange));\n          }\n        }\n\n        limitedValue = this.limitValue(correctedValue);\n        selectToEnd = (selectToEnd || limitedValue !== correctedValue) && this.previousSelection && this.previousSelection.end - this.previousSelection.start + lengthChange > 0;\n      }\n\n      return {\n        selectionEnd: selectToEnd ? String(limitedValue).length : selectionEnd,\n        selectionStart: selectionStart,\n        value: limitedValue\n      };\n    }\n  }, {\n    key: \"tryPadValue\",\n    value: function tryPadValue(value, limit) {\n      var limitLength = String(Math.floor(limit)).length;\n      var zeroPadded = pad(value, limitLength);\n      var zeroPaddedNext = pad(value, limitLength + 1);\n      var result;\n\n      if (this.isInRange(zeroPadded)) {\n        result = zeroPadded;\n      } else if (this.isInRange(zeroPaddedNext)) {\n        result = zeroPaddedNext;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"isInRange\",\n    value: function isInRange(value) {\n      return !isNumber(value) || (!isNumber(this.min) || this.min <= value) && (!isNumber(this.max) || value <= this.max);\n    }\n  }, {\n    key: \"restrictModelValue\",\n    value: function restrictModelValue(value) {\n      var result = this.restrictDecimals(value, true);\n\n      if (this.autoCorrect && this.limitValue(result) !== result) {\n        result = null;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"restrictDecimals\",\n    value: function restrictDecimals(value, round) {\n      var result = value;\n\n      if (value && this.hasDecimals) {\n        var decimals = this.decimals;\n        var stringValue = String(value);\n\n        if (round || EXPONENT_REGEX.test(stringValue)) {\n          result = toFixedPrecision(value, decimals);\n        } else {\n          var parts = stringValue.split(POINT);\n          var fraction = parts[1];\n\n          if (fraction && fraction.length > decimals) {\n            fraction = fraction.substr(0, decimals);\n            result = parseFloat(\"\".concat(parts[0]).concat(POINT).concat(fraction));\n          }\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"formatInputValue\",\n    value: function formatInputValue(value) {\n      var stringValue = String(value);\n      var exponentMatch = EXPONENT_REGEX.exec(stringValue);\n\n      if (exponentMatch) {\n        stringValue = value.toFixed(limitPrecision(parseInt(exponentMatch[1], 10)));\n      }\n\n      return stringValue.replace(POINT, this.decimalSeparator);\n    }\n  }, {\n    key: \"formatValue\",\n    value: function formatValue(value, focused) {\n      var formattedValue;\n\n      if (value === null || !defined(value) || value === '') {\n        formattedValue = '';\n      } else if (focused && !this.readonly) {\n        formattedValue = this.formatInputValue(value);\n      } else {\n        formattedValue = this.intl.formatNumber(value, this.format);\n      }\n\n      return formattedValue;\n    }\n  }, {\n    key: \"setInputValue\",\n    value: function setInputValue() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;\n      var focused = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.focused;\n      var formattedValue = this.formatValue(value, focused);\n      this.elementValue = formattedValue;\n      this.inputValue = formattedValue;\n    }\n  }, {\n    key: \"verifySettings\",\n    value: function verifySettings() {\n      if (!isDevMode()) {\n        return;\n      }\n\n      if (this.min !== null && this.max !== null && this.min > this.max) {\n        throw new Error(\"The max value should be bigger than the min. See \".concat(MIN_DOC_LINK, \" and \").concat(MAX_DOC_LINK, \".\"));\n      }\n    }\n  }, {\n    key: \"verifyValue\",\n    value: function verifyValue(value) {\n      if (isDevMode() && value && typeof value !== 'number') {\n        throw new Error(\"The NumericTextBox component requires value of type Number and \".concat(JSON.stringify(value), \" was set.\"));\n      }\n    }\n  }, {\n    key: \"parseOptions\",\n    value: function parseOptions(options) {\n      for (var idx = 0; idx < options.length; idx++) {\n        var name = options[idx];\n        var value = this[name];\n\n        if (typeof value === 'string') {\n          var parsed = parseFloat(value);\n          var valid = !isNaN(parsed);\n\n          if (isDevMode() && !valid && value !== '') {\n            throw new Error('The NumericTextBox component requires value of type Number or a String representing ' + \"a number for the \".concat(name, \" property and \").concat(JSON.stringify(value), \" was set.\"));\n          }\n\n          this[name] = valid ? parsed : PARSABLE_DEFAULTS[name];\n        }\n      }\n    }\n  }, {\n    key: \"intlChange\",\n    value: function intlChange() {\n      delete this.numericRegex;\n\n      if (this.numericInput && (!this.focused || !this.isValid(this.elementValue))) {\n        this.setInputValue();\n      }\n    }\n  }, {\n    key: \"hasTrailingZeros\",\n    value: function hasTrailingZeros(inputValue) {\n      if (this.hasDecimals && this.focused) {\n        var fraction = inputValue.split(this.decimalSeparator)[1];\n        return fraction && fraction.length > this.decimals && fraction.lastIndexOf('0') === fraction.length - 1;\n      }\n    }\n  }, {\n    key: \"selectAll\",\n    value: function selectAll() {\n      this.setInputValue();\n      this.setSelection(0, this.inputValue.length);\n    }\n  }, {\n    key: \"selectCaret\",\n    value: function selectCaret() {\n      var caretPosition = getCaretPosition(this.numericInput.nativeElement);\n      var formattedValue = this.elementValue;\n      var partialValue = formattedValue.substring(0, caretPosition);\n      this.setInputValue();\n\n      if (partialValue.length) {\n        var significantCharsInFormattedValue = extractSignificantNumericChars(partialValue, this.decimalSeparator);\n        var adjustedSignificantChars = this.adjustSignificantChars(formattedValue, significantCharsInFormattedValue);\n        this.setSelection(adjustedSignificantChars, adjustedSignificantChars);\n      } else {\n        this.setSelection(0, 0);\n      }\n    }\n  }, {\n    key: \"numberOfLeadingZeroes\",\n    value: function numberOfLeadingZeroes(formattedValue) {\n      var separatorIndex = formattedValue.indexOf(this.decimalSeparator);\n      var matchedLeadingZeroes = formattedValue.match(/^[^1-9]*?(0+)/);\n\n      if (matchedLeadingZeroes) {\n        var lengthOfMatch = matchedLeadingZeroes[0].length;\n        var lengthOfLeadingZeroesMatch = matchedLeadingZeroes[1].length;\n        return lengthOfMatch === separatorIndex ? lengthOfLeadingZeroesMatch - 1 : lengthOfLeadingZeroesMatch;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"adjustSignificantChars\",\n    value: function adjustSignificantChars(formattedValue, significantChars) {\n      var leadingZeroes = this.numberOfLeadingZeroes(formattedValue);\n\n      if (leadingZeroes > 0) {\n        return Math.max(0, significantChars - leadingZeroes);\n      }\n\n      return significantChars;\n    }\n  }, {\n    key: \"format\",\n    get: function get() {\n      var format = this._format;\n      return format !== null && format !== undefined ? format : 'n2';\n    },\n    set: function set(value) {\n      this._format = value;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"tabIndex\",\n    set: function set(tabIndex) {\n      this.tabindex = tabIndex;\n    },\n    get: function get() {\n      return this.tabindex;\n    }\n  }, {\n    key: \"widgetClasses\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"incrementTitle\",\n    get: function get() {\n      return this.localizationService.get('increment');\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"decrementTitle\",\n    get: function get() {\n      return this.localizationService.get('decrement');\n    }\n  }, {\n    key: \"decimalSeparator\",\n    get: function get() {\n      var numberSymbols = this.intl.numberSymbols();\n      return numberSymbols.decimal;\n    }\n  }, {\n    key: \"elementValue\",\n    get: function get() {\n      return this.numericInput.nativeElement.value;\n    },\n    set: function set(value) {\n      this.renderer.setProperty(this.numericInput.nativeElement, 'value', value);\n    }\n  }, {\n    key: \"focused\",\n    get: function get() {\n      return this.isFocused;\n    },\n    set: function set(value) {\n      if (this.isFocused !== value && this.numericWrap) {\n        var wrap = this.numericWrap.nativeElement;\n        var input = this.numericInput.nativeElement;\n\n        if (value) {\n          this.renderer.addClass(wrap, FOCUSED$2);\n\n          if (!this.isDisabled) {\n            this.renderer.removeClass(input, FORMATTED_VALUE);\n          }\n        } else {\n          this.renderer.removeClass(wrap, FOCUSED$2);\n          this.renderer.addClass(input, FORMATTED_VALUE);\n        }\n\n        this.isFocused = value;\n      }\n    }\n  }, {\n    key: \"hasDecimals\",\n    get: function get() {\n      return this.decimals !== null && this.decimals >= 0;\n    }\n  }, {\n    key: \"isDisabled\",\n    get: function get() {\n      return this.disabled || this.readonly;\n    }\n  }]);\n\n  return NumericTextBoxComponent;\n}();\n\nNumericTextBoxComponent.ɵfac = function NumericTextBoxComponent_Factory(t) {\n  return new (t || NumericTextBoxComponent)(ɵngcc0.ɵɵdirectiveInject(IntlService), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(LocalizationService), ɵngcc0.ɵɵdirectiveInject(Injector), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ElementRef));\n};\n\nNumericTextBoxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NumericTextBoxComponent,\n  selectors: [[\"kendo-numerictextbox\"]],\n  viewQuery: function NumericTextBoxComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵstaticViewQuery(_c28, true);\n      ɵngcc0.ɵɵviewQuery(_c29, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.numericInput = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.numericWrap = _t.first);\n    }\n  },\n  hostVars: 5,\n  hostBindings: function NumericTextBoxComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"dir\", ctx.direction);\n      ɵngcc0.ɵɵclassProp(\"k-widget\", ctx.widgetClasses)(\"k-numerictextbox\", ctx.widgetClasses);\n    }\n  },\n  inputs: {\n    focusableId: \"focusableId\",\n    disabled: \"disabled\",\n    readonly: \"readonly\",\n    title: \"title\",\n    autoCorrect: \"autoCorrect\",\n    decimals: \"decimals\",\n    step: \"step\",\n    spinners: \"spinners\",\n    rangeValidation: \"rangeValidation\",\n    tabindex: \"tabindex\",\n    selectOnFocus: \"selectOnFocus\",\n    value: \"value\",\n    format: \"format\",\n    tabIndex: \"tabIndex\",\n    max: \"max\",\n    min: \"min\",\n    placeholder: \"placeholder\"\n  },\n  outputs: {\n    valueChange: \"valueChange\",\n    onFocus: \"focus\",\n    onBlur: \"blur\"\n  },\n  exportAs: [\"kendoNumericTextBox\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([LocalizationService, {\n    provide: L10N_PREFIX,\n    useValue: 'kendo.numerictextbox'\n  }, {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return NumericTextBoxComponent;\n    }),\n    multi: true\n  }, {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () {\n      return NumericTextBoxComponent;\n    }),\n    multi: true\n  }, {\n    provide: KendoInput,\n    useExisting: forwardRef(function () {\n      return NumericTextBoxComponent;\n    })\n  }]), ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 7,\n  vars: 25,\n  consts: function consts() {\n    var i18n_30;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\n       * @desc The title for the **Increment** button in the NumericTextBox\n       * @meaning kendo.numerictextbox.increment\n       */\n      var MSG_EXTERNAL_4467784268438010275$$DIST_FESM2015_INDEX_JS_31 = goog.getMsg(\"Increase value\");\n      i18n_30 = MSG_EXTERNAL_4467784268438010275$$DIST_FESM2015_INDEX_JS_31;\n    } else {\n      i18n_30 = $localize(_templateObject8());\n    }\n\n    var i18n_32;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\n       * @desc The title for the **Decrement** button in the NumericTextBox\n       * @meaning kendo.numerictextbox.decrement\n       */\n      var MSG_EXTERNAL_3960022057994897997$$DIST_FESM2015_INDEX_JS_33 = goog.getMsg(\"Decrease value\");\n      i18n_32 = MSG_EXTERNAL_3960022057994897997$$DIST_FESM2015_INDEX_JS_33;\n    } else {\n      i18n_32 = $localize(_templateObject9());\n    }\n\n    return [[\"kendoNumericTextBoxLocalizedMessages\", \"\", 6, \"increment\", \"decrement\"], [\"increment\", i18n_30, \"decrement\", i18n_32], [1, \"k-numeric-wrap\", 3, \"kendoEventsOutsideAngular\"], [\"numericWrap\", \"\"], [\"role\", \"spinbutton\", \"autocomplete\", \"off\", \"autocorrect\", \"off\", 1, \"k-input\", \"k-formatted-value\", 3, \"id\", \"tabindex\", \"disabled\", \"readonly\", \"kendoEventsOutsideAngular\"], [\"numericInput\", \"\"], [\"class\", \"k-select\", 3, \"kendoEventsOutsideAngular\", 4, \"ngIf\"], [1, \"k-select\", 3, \"kendoEventsOutsideAngular\"], [1, \"k-link\", \"k-link-increase\", 3, \"kendoEventsOutsideAngular\", \"title\"], [1, \"k-icon\", \"k-i-arrow-n\"], [1, \"k-link\", \"k-link-decrease\", 3, \"kendoEventsOutsideAngular\", \"title\"], [1, \"k-icon\", \"k-i-arrow-s\"]];\n  },\n  template: function NumericTextBoxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainerStart(0, 0);\n      ɵngcc0.ɵɵi18nAttributes(1, 1);\n      ɵngcc0.ɵɵelementContainerEnd();\n      ɵngcc0.ɵɵelementStart(2, \"span\", 2, 3);\n      ɵngcc0.ɵɵelement(4, \"input\", 4, 5);\n      ɵngcc0.ɵɵtemplate(6, NumericTextBoxComponent_span_6_Template, 5, 18, \"span\", 6);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"k-state-disabled\", ctx.disabled);\n      ɵngcc0.ɵɵproperty(\"kendoEventsOutsideAngular\", ɵngcc0.ɵɵpureFunction2(14, _c36, ctx.handleWheel, ctx.handleWheel));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.focusableId)(\"tabindex\", ctx.tabIndex)(\"disabled\", ctx.disabled)(\"readonly\", ctx.readonly)(\"kendoEventsOutsideAngular\", ɵngcc0.ɵɵpureFunction7(17, _c37, ctx.handleMouseDown, ctx.handleDragEnter, ctx.handleKeyDown, ctx.handleInput, ctx.handleFocus, ctx.handleBlur, ctx.handlePaste));\n      ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.min)(\"aria-valuemax\", ctx.max)(\"aria-valuenow\", ctx.value)(\"title\", ctx.title)(\"placeholder\", ctx.placeholder);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.spinners);\n    }\n  },\n  directives: function directives() {\n    return [LocalizedNumericTextBoxMessagesDirective, ɵngcc1.EventsOutsideAngularDirective, ɵngcc2.NgIf];\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\n\nNumericTextBoxComponent.ctorParameters = function () {\n  return [{\n    type: IntlService\n  }, {\n    type: Renderer2\n  }, {\n    type: LocalizationService\n  }, {\n    type: Injector\n  }, {\n    type: NgZone\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }];\n};\n\nNumericTextBoxComponent.propDecorators = {\n  focusableId: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }],\n  title: [{\n    type: Input\n  }],\n  autoCorrect: [{\n    type: Input\n  }],\n  format: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  min: [{\n    type: Input\n  }],\n  decimals: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  step: [{\n    type: Input\n  }],\n  spinners: [{\n    type: Input\n  }],\n  rangeValidation: [{\n    type: Input\n  }],\n  tabindex: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  selectOnFocus: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  onFocus: [{\n    type: Output,\n    args: ['focus']\n  }],\n  onBlur: [{\n    type: Output,\n    args: ['blur']\n  }],\n  numericInput: [{\n    type: ViewChild,\n    args: ['numericInput', {\n      static: true\n    }]\n  }],\n  numericWrap: [{\n    type: ViewChild,\n    args: ['numericWrap']\n  }],\n  direction: [{\n    type: HostBinding,\n    args: ['attr.dir']\n  }],\n  widgetClasses: [{\n    type: HostBinding,\n    args: ['class.k-widget']\n  }, {\n    type: HostBinding,\n    args: ['class.k-numerictextbox']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NumericTextBoxComponent, [{\n    type: Component,\n    args: [{\n      exportAs: 'kendoNumericTextBox',\n      providers: [LocalizationService, {\n        provide: L10N_PREFIX,\n        useValue: 'kendo.numerictextbox'\n      }, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return NumericTextBoxComponent;\n        }),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(function () {\n          return NumericTextBoxComponent;\n        }),\n        multi: true\n      }, {\n        provide: KendoInput,\n        useExisting: forwardRef(function () {\n          return NumericTextBoxComponent;\n        })\n      }],\n      selector: 'kendo-numerictextbox',\n      template: \"\\n        <ng-container kendoNumericTextBoxLocalizedMessages\\n            i18n-increment=\\\"kendo.numerictextbox.increment|The title for the **Increment** button in the NumericTextBox\\\"\\n            increment=\\\"Increase value\\\"\\n            i18n-decrement=\\\"kendo.numerictextbox.decrement|The title for the **Decrement** button in the NumericTextBox\\\"\\n            decrement=\\\"Decrease value\\\"\\n        >\\n        </ng-container>\\n        <span\\n            class=\\\"k-numeric-wrap\\\"\\n            [class.k-state-disabled]=\\\"disabled\\\"\\n            [kendoEventsOutsideAngular]=\\\"{ mousewheel: handleWheel, DOMMouseScroll: handleWheel }\\\"\\n            #numericWrap>\\n            <input\\n            role=\\\"spinbutton\\\"\\n            class=\\\"k-input k-formatted-value\\\"\\n            autocomplete=\\\"off\\\"\\n            autocorrect=\\\"off\\\"\\n            [id]=\\\"focusableId\\\"\\n            [attr.aria-valuemin]=\\\"min\\\"\\n            [attr.aria-valuemax]=\\\"max\\\"\\n            [attr.aria-valuenow]=\\\"value\\\"\\n            [attr.title]=\\\"title\\\"\\n            [attr.placeholder]=\\\"placeholder\\\"\\n            [tabindex]=\\\"tabIndex\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [readonly]=\\\"readonly\\\"\\n            [kendoEventsOutsideAngular]=\\\"{\\n                mousedown: handleMouseDown,\\n                dragenter: handleDragEnter,\\n                keydown: handleKeyDown,\\n                input: handleInput,\\n                focus: handleFocus,\\n                blur: handleBlur,\\n                paste: handlePaste\\n            }\\\"\\n            #numericInput />\\n            <span class=\\\"k-select\\\" *ngIf=\\\"spinners\\\" [kendoEventsOutsideAngular]=\\\"{ mouseup: releaseArrow, mouseleave: releaseArrow }\\\">\\n                <span\\n                    [kendoEventsOutsideAngular]=\\\"{ mousedown: increasePress }\\\"\\n                    [attr.aria-label]=\\\"incrementTitle\\\"\\n                    [title]=\\\"incrementTitle\\\"\\n                    [class.k-state-active]=\\\"arrowDirection === ArrowDirection.Up\\\"\\n                    class=\\\"k-link k-link-increase\\\"\\n                >\\n                    <span class=\\\"k-icon k-i-arrow-n\\\"></span>\\n                </span>\\n                <span\\n                    [kendoEventsOutsideAngular]=\\\"{ mousedown: decreasePress }\\\"\\n                    [attr.aria-label]=\\\"decrementTitle\\\"\\n                    [title]=\\\"decrementTitle\\\"\\n                    [class.k-state-active]=\\\"arrowDirection === ArrowDirection.Down\\\"\\n                    class=\\\"k-link k-link-decrease\\\"\\n                >\\n                    <span class=\\\"k-icon k-i-arrow-s\\\"></span>\\n                </span>\\n            </span>\\n        </span>\\n      \"\n    }]\n  }], function () {\n    return [{\n      type: IntlService\n    }, {\n      type: Renderer2\n    }, {\n      type: LocalizationService\n    }, {\n      type: Injector\n    }, {\n      type: NgZone\n    }, {\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }];\n  }, {\n    focusableId: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    autoCorrect: [{\n      type: Input\n    }],\n    decimals: [{\n      type: Input\n    }],\n    step: [{\n      type: Input\n    }],\n    spinners: [{\n      type: Input\n    }],\n    rangeValidation: [{\n      type: Input\n    }],\n    tabindex: [{\n      type: Input\n    }],\n    selectOnFocus: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    onFocus: [{\n      type: Output,\n      args: ['focus']\n    }],\n    onBlur: [{\n      type: Output,\n      args: ['blur']\n    }],\n    direction: [{\n      type: HostBinding,\n      args: ['attr.dir']\n    }],\n    format: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    widgetClasses: [{\n      type: HostBinding,\n      args: ['class.k-widget']\n    }, {\n      type: HostBinding,\n      args: ['class.k-numerictextbox']\n    }],\n    max: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    numericInput: [{\n      type: ViewChild,\n      args: ['numericInput', {\n        static: true\n      }]\n    }],\n    numericWrap: [{\n      type: ViewChild,\n      args: ['numericWrap']\n    }]\n  });\n})();\n/**\n * @hidden\n */\n\n\nvar NumericTextBoxMessages = /*#__PURE__*/function (_ComponentMessages) {\n  _inherits(NumericTextBoxMessages, _ComponentMessages);\n\n  var _super5 = _createSuper(NumericTextBoxMessages);\n\n  function NumericTextBoxMessages() {\n    _classCallCheck(this, NumericTextBoxMessages);\n\n    return _super5.apply(this, arguments);\n  }\n\n  return NumericTextBoxMessages;\n}(ComponentMessages);\n\nNumericTextBoxMessages.ɵfac = function NumericTextBoxMessages_Factory(t) {\n  return ɵNumericTextBoxMessages_BaseFactory(t || NumericTextBoxMessages);\n};\n\nNumericTextBoxMessages.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: NumericTextBoxMessages,\n  inputs: {\n    decrement: \"decrement\",\n    increment: \"increment\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nNumericTextBoxMessages.propDecorators = {\n  decrement: [{\n    type: Input\n  }],\n  increment: [{\n    type: Input\n  }]\n};\nvar ɵNumericTextBoxMessages_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(NumericTextBoxMessages);\n/**\n * Custom component messages override default component messages.\n */\n\nvar NumericTextBoxCustomMessagesComponent = /*#__PURE__*/function (_NumericTextBoxMessag) {\n  _inherits(NumericTextBoxCustomMessagesComponent, _NumericTextBoxMessag);\n\n  var _super6 = _createSuper(NumericTextBoxCustomMessagesComponent);\n\n  function NumericTextBoxCustomMessagesComponent(service) {\n    var _this29;\n\n    _classCallCheck(this, NumericTextBoxCustomMessagesComponent);\n\n    _this29 = _super6.call(this);\n    _this29.service = service;\n    return _this29;\n  }\n\n  _createClass(NumericTextBoxCustomMessagesComponent, [{\n    key: \"override\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return NumericTextBoxCustomMessagesComponent;\n}(NumericTextBoxMessages);\n\nNumericTextBoxCustomMessagesComponent.ɵfac = function NumericTextBoxCustomMessagesComponent_Factory(t) {\n  return new (t || NumericTextBoxCustomMessagesComponent)(ɵngcc0.ɵɵdirectiveInject(LocalizationService));\n};\n\nNumericTextBoxCustomMessagesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NumericTextBoxCustomMessagesComponent,\n  selectors: [[\"kendo-numerictextbox-messages\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NumericTextBoxMessages,\n    useExisting: forwardRef(function () {\n      return NumericTextBoxCustomMessagesComponent;\n    }) // tslint:disable-line:no-forward-ref\n\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function NumericTextBoxCustomMessagesComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\n/** @nocollapse */\n\nNumericTextBoxCustomMessagesComponent.ctorParameters = function () {\n  return [{\n    type: LocalizationService\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NumericTextBoxCustomMessagesComponent, [{\n    type: Component,\n    args: [{\n      providers: [{\n        provide: NumericTextBoxMessages,\n        useExisting: forwardRef(function () {\n          return NumericTextBoxCustomMessagesComponent;\n        }) // tslint:disable-line:no-forward-ref\n\n      }],\n      selector: 'kendo-numerictextbox-messages',\n      template: \"\"\n    }]\n  }], function () {\n    return [{\n      type: LocalizationService\n    }];\n  }, null);\n})();\n/**\n * @hidden\n */\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[ResultType[\"Literal\"] = 0] = \"Literal\";\n  ResultType[ResultType[\"Mask\"] = 1] = \"Mask\";\n  ResultType[ResultType[\"Undefined\"] = 2] = \"Undefined\";\n})(ResultType || (ResultType = {}));\n/**\n * @hidden\n */\n\n\nvar Result = /*#__PURE__*/function () {\n  function Result(value, rest) {\n    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ResultType.Undefined;\n\n    _classCallCheck(this, Result);\n\n    this.value = value;\n    this.rest = rest;\n    this.type = type;\n  } //map :: Functor f => f a ~> (a -> b) -> f b\n\n\n  _createClass(Result, [{\n    key: \"map\",\n    value: function map(fn) {\n      return new Result(fn(this.value), this.rest);\n    } //chain :: Chain m => m a ~> (a -> m b) -> m b\n\n  }, {\n    key: \"chain\",\n    value: function chain(fn) {\n      return fn(this.value, this.rest);\n    }\n  }, {\n    key: \"fold\",\n    value: function fold(s, _\n    /*we don't need it*/\n    ) {\n      return s(this.value, this.rest);\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(r) {\n      return this.map(function (vs, _) {\n        return r.chain(function (v, __) {\n          return vs.concat([v]);\n        });\n      });\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"Result({ value: '\".concat(this.value, \"', rest: \").concat(this.rest, \" })\");\n    }\n  }]);\n\n  return Result;\n}();\n/**\n * @hidden\n */\n\n\nvar Stream = /*#__PURE__*/function () {\n  function Stream() {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var control = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, Stream);\n\n    this.input = input;\n    this.control = control;\n    this.inputCursor = 0;\n    this.controlCursor = 0;\n  }\n\n  _createClass(Stream, [{\n    key: \"eof\",\n    value: function eof() {\n      return this.inputCursor >= this.input.length;\n    } // Get the first value from the input.\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      return {\n        char: this.input[this.inputCursor++],\n        control: this.control[this.controlCursor++]\n      };\n    }\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      return {\n        char: this.input[this.inputCursor],\n        control: this.control[this.controlCursor]\n      };\n    }\n  }, {\n    key: \"eat_input\",\n    value: function eat_input() {\n      this.inputCursor++;\n    }\n  }, {\n    key: \"eat_control\",\n    value: function eat_control() {\n      this.controlCursor++;\n    }\n  }, {\n    key: \"eat\",\n    value: function eat() {\n      this.inputCursor++;\n      this.controlCursor++;\n    }\n  }]);\n\n  return Stream;\n}();\n\nvar toArray = function toArray(value) {\n  return (value || '').split('');\n};\n\nvar ESCAPE_CHARACTER = '\\\\';\n/**\n * @hidden\n */\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser(parse) {\n    _classCallCheck(this, Parser);\n\n    this.parse = parse;\n  }\n\n  _createClass(Parser, [{\n    key: \"run\",\n    value: function run(input) {\n      var control = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      if (input instanceof Stream) {\n        return this.parse(input);\n      } else {\n        return this.parse(new Stream(toArray(input), toArray(control)));\n      }\n    } //map :: Functor f => f a ~> (a -> b) -> f b\n\n  }, {\n    key: \"map\",\n    value: function map(f) {\n      var _this30 = this;\n\n      return new Parser(function (stream) {\n        return _this30.parse(stream).map(f);\n      });\n    } //chain :: Chain m => m a ~> (a -> m b) -> m b\n\n  }, {\n    key: \"chain\",\n    value: function chain(f) {\n      var _this31 = this;\n\n      return new Parser(function (stream) {\n        return _this31.parse(stream).chain(function (v, s) {\n          return f(v).run(s);\n        });\n      });\n    }\n  }, {\n    key: \"isLiteral\",\n    value: function isLiteral(c) {\n      return this.run(c).type === ResultType.Literal;\n    }\n  }]);\n\n  return Parser;\n}();\n/**\n * @hidden\n */\n\n\nvar _mask = function mask(_ref12) {\n  var prompt = _ref12.prompt,\n      promptPlaceholder = _ref12.promptPlaceholder;\n  return function (rule) {\n    return new Parser(function (stream) {\n      while (!stream.eof()) {\n        var _stream$peek = stream.peek(),\n            char = _stream$peek.char,\n            control = _stream$peek.control;\n\n        if (char === control && control === prompt) {\n          stream.eat();\n          return new Result(prompt, stream, ResultType.Mask);\n        }\n\n        if (rule.test(char)) {\n          stream.eat();\n          return new Result(char, stream, ResultType.Mask);\n        }\n\n        if (char === promptPlaceholder) {\n          stream.eat();\n          return new Result(prompt, stream, ResultType.Mask);\n        }\n\n        stream.eat_input();\n      }\n\n      stream.eat();\n      return new Result(prompt, stream, ResultType.Mask);\n    });\n  };\n};\n/**\n * @hidden\n */\n\n\nvar _literal = function literal(_token) {\n  return new Parser(function (stream) {\n    //    let {char, control} = stream.peek();\n    var char = stream.peek().char;\n\n    if (char === _token) {\n      stream.eat();\n      return new Result(_token, stream, ResultType.Literal);\n    } //    if (control === _token) {\n    //        while (!stream.eof() && char !== _token) {\n    //            stream.eat_input();\n    //            char = stream.peek().char;\n    //        }\n    //    }\n    //\n    //    if (control !== undefined) {\n    //        stream.eat();\n    //    }\n\n\n    return new Result(_token, stream, ResultType.Literal);\n  });\n};\n/**\n * @hidden\n */\n\n\nvar unmask = function unmask(prompt) {\n  return function (rule) {\n    return new Parser(function (stream) {\n      while (!stream.eof()) {\n        var _stream$peek2 = stream.peek(),\n            char = _stream$peek2.char,\n            control = _stream$peek2.control;\n\n        if (char === prompt && control === prompt) {\n          stream.eat();\n          return new Result(char, stream);\n        }\n\n        if (rule.test(char)) {\n          stream.eat();\n          return new Result(char, stream);\n        }\n\n        stream.eat_input();\n      }\n\n      stream.eat();\n      return new Result('', stream);\n    });\n  };\n};\n/**\n * @hidden\n */\n\n\nvar unliteral = function unliteral(_token) {\n  return new Parser(function (stream) {\n    if (stream.eof()) {\n      return new Result('', stream);\n    }\n\n    var _stream$peek3 = stream.peek(),\n        char = _stream$peek3.char;\n\n    if (char === _token) {\n      stream.eat();\n    }\n\n    return new Result(_token, stream);\n  });\n};\n/**\n * @hidden\n */\n\n\nvar token = function token(rules, creator) {\n  return new Parser(function (stream) {\n    var _stream$next = stream.next(),\n        char = _stream$next.char;\n\n    var rule = rules[char];\n\n    if (char === ESCAPE_CHARACTER) {\n      char = stream.next().char;\n      return new Result(creator.literal(char), stream);\n    }\n\n    if (!rule) {\n      return new Result(creator.literal(char), stream);\n    }\n\n    return new Result(creator.mask(rule), stream);\n  });\n};\n/**\n * @hidden\n */\n\n\nvar rawMask = function rawMask(_ref13) {\n  var prompt = _ref13.prompt,\n      promptPlaceholder = _ref13.promptPlaceholder;\n  return new Parser(function (stream) {\n    var _stream$next2 = stream.next(),\n        char = _stream$next2.char;\n\n    if (char === prompt) {\n      return new Result(promptPlaceholder, stream);\n    }\n\n    return new Result(char, stream);\n  });\n};\n/**\n * @hidden\n */\n\n\nvar rawLiteral = function rawLiteral(includeLiterals) {\n  return new Parser(function (stream) {\n    var _stream$next3 = stream.next(),\n        char = _stream$next3.char;\n\n    if (includeLiterals) {\n      return new Result(char, stream);\n    }\n\n    return new Result('', stream);\n  });\n};\n/**\n * @hidden\n */\n\n\nvar always = function always(value) {\n  return new Parser(function (stream) {\n    return new Result(value, stream);\n  });\n};\n/**\n * @hidden\n */\n\n\nvar append = function append(p1, p2) {\n  return p1.chain(function (vs) {\n    return p2.map(function (v) {\n      return vs.concat([v]);\n    });\n  });\n};\n/**\n * @hidden\n */\n\n\nvar sequence = function sequence(list) {\n  return list.reduce(function (acc, parser) {\n    return append(acc, parser);\n  }, always([]));\n};\n/**\n * @hidden\n */\n\n\nvar greedy = function greedy(parser) {\n  return new Parser(function (stream) {\n    var result = new Result([], stream);\n\n    while (!stream.eof()) {\n      result = result.concat(parser.run(stream));\n    }\n\n    return result;\n  });\n};\n/**\n * @hidden\n */\n\n\nvar MaskingService = /*#__PURE__*/function () {\n  function MaskingService() {\n    _classCallCheck(this, MaskingService);\n\n    this.rules = {};\n    this.prompt = \"_\";\n    this.mask = \"\";\n    this.promptPlaceholder = \" \";\n    this.includeLiterals = false;\n    this.maskTokens = [];\n    this.unmaskTokens = [];\n    this.rawTokens = [];\n    this.validationTokens = [];\n  }\n\n  _createClass(MaskingService, [{\n    key: \"update\",\n    value: function update(_ref14) {\n      var _ref14$mask = _ref14.mask,\n          mask$$1 = _ref14$mask === void 0 ? '' : _ref14$mask,\n          _ref14$prompt = _ref14.prompt,\n          prompt = _ref14$prompt === void 0 ? '' : _ref14$prompt,\n          _ref14$promptPlacehol = _ref14.promptPlaceholder,\n          promptPlaceholder = _ref14$promptPlacehol === void 0 ? ' ' : _ref14$promptPlacehol,\n          _ref14$rules = _ref14.rules,\n          rules = _ref14$rules === void 0 ? {} : _ref14$rules,\n          _ref14$includeLiteral = _ref14.includeLiterals,\n          includeLiterals = _ref14$includeLiteral === void 0 ? false : _ref14$includeLiteral;\n      this.mask = mask$$1;\n      this.prompt = prompt;\n      this.promptPlaceholder = promptPlaceholder;\n      this.rules = rules;\n      this.includeLiterals = includeLiterals;\n      this.tokenize();\n    }\n  }, {\n    key: \"validationValue\",\n    value: function validationValue() {\n      var maskedValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var value = maskedValue;\n      sequence(this.validationTokens).run(maskedValue).fold(function (unmasked) {\n        value = unmasked.join('');\n      });\n      return value;\n    }\n  }, {\n    key: \"rawValue\",\n    value: function rawValue() {\n      var maskedValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var value = maskedValue;\n\n      if (!this.rawTokens.length) {\n        return value;\n      }\n\n      sequence(this.rawTokens).run(maskedValue).fold(function (unmasked) {\n        value = unmasked.join('');\n      });\n      return value;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"maskRaw\",\n    value: function maskRaw() {\n      var rawValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var value = rawValue;\n\n      if (!this.maskTokens.length) {\n        return value;\n      }\n\n      sequence(this.maskTokens).run(rawValue).fold(function (masked) {\n        value = masked.join('');\n      });\n      return value;\n    }\n  }, {\n    key: \"maskInput\",\n    value: function maskInput(input, control, splitPoint) {\n      if (input.length < control.length) {\n        return this.maskRemoved(input, control, splitPoint);\n      }\n\n      return this.maskInserted(input, control, splitPoint);\n    }\n  }, {\n    key: \"maskInRange\",\n    value: function maskInRange(pasted, oldValue, start, end) {\n      var value = '';\n      var selection = end;\n      var beforeChange = oldValue.split('').slice(0, start);\n      var afterChange = oldValue.split('').slice(end);\n      sequence(this.maskTokens.slice(start, end)).run(pasted).fold(function (masked) {\n        value = beforeChange.concat(masked).concat(afterChange).join('');\n      });\n      return {\n        selection: selection,\n        value: value\n      };\n    }\n  }, {\n    key: \"maskRemoved\",\n    value: function maskRemoved(input, control, splitPoint) {\n      var _this32 = this;\n\n      var value = '';\n      var selection = splitPoint;\n      var unchanged = input.split('').slice(splitPoint);\n      var changed = input.split('').slice(0, splitPoint).join('');\n      var take$$1 = this.maskTokens.length - (input.length - splitPoint);\n      sequence(this.maskTokens.slice(0, take$$1)).run(changed, control).fold(function (masked) {\n        selection = _this32.adjustPosition(masked, selection);\n        value = masked.concat(unchanged).join('');\n      });\n      return {\n        selection: selection,\n        value: value\n      };\n    }\n  }, {\n    key: \"adjustPosition\",\n    value: function adjustPosition(input, selection) {\n      var caretChar = input[selection];\n      var isLiteral = this.maskTokens[selection].isLiteral(caretChar);\n\n      if (!isLiteral && caretChar !== this.prompt) {\n        return selection + 1;\n      }\n\n      return selection;\n    }\n  }, {\n    key: \"maskInserted\",\n    value: function maskInserted(input, control, splitPoint) {\n      var _this33 = this;\n\n      var value = '';\n      var selection = splitPoint;\n      var changed = input.slice(0, splitPoint);\n      sequence(this.unmaskTokens).run(changed, control).chain(function (unmasked) {\n        selection = unmasked.join('').length;\n        var unchanged = control.slice(selection);\n        return sequence(_this33.maskTokens).run(unmasked.join('') + unchanged, control);\n      }).fold(function (masked) {\n        value = masked.join('');\n      });\n      return {\n        selection: selection,\n        value: value\n      };\n    }\n  }, {\n    key: \"tokenize\",\n    value: function tokenize() {\n      var _this34 = this;\n\n      greedy(token(this.rules, this.maskTokenCreator)).run(this.mask).fold(function (tokens, _) {\n        _this34.maskTokens = tokens;\n      });\n      greedy(token(this.rules, this.unmaskTokenCreator)).run(this.mask).fold(function (tokens, _) {\n        _this34.unmaskTokens = tokens;\n      });\n      greedy(token(this.rules, this.rawTokenCreator)).run(this.mask).fold(function (tokens, _) {\n        _this34.rawTokens = tokens;\n      });\n      greedy(token(this.rules, this.validationTokenCreator)).run(this.mask).fold(function (tokens, _) {\n        _this34.validationTokens = tokens;\n      });\n    }\n  }, {\n    key: \"maskTokenCreator\",\n    get: function get() {\n      var prompt = this.prompt,\n          promptPlaceholder = this.promptPlaceholder;\n      return {\n        literal: function literal(rule) {\n          return _literal(rule);\n        },\n        mask: function mask(rule) {\n          return _mask({\n            prompt: prompt,\n            promptPlaceholder: promptPlaceholder\n          })(rule);\n        }\n      };\n    }\n  }, {\n    key: \"unmaskTokenCreator\",\n    get: function get() {\n      var _this35 = this;\n\n      return {\n        literal: function literal(rule) {\n          return unliteral(rule);\n        },\n        mask: function mask(rule) {\n          return unmask(_this35.prompt)(rule);\n        }\n      };\n    }\n  }, {\n    key: \"rawTokenCreator\",\n    get: function get() {\n      var prompt = this.prompt,\n          promptPlaceholder = this.promptPlaceholder,\n          includeLiterals = this.includeLiterals;\n      return {\n        literal: function literal(_) {\n          return rawLiteral(includeLiterals);\n        },\n        mask: function mask(_) {\n          return rawMask({\n            prompt: prompt,\n            promptPlaceholder: promptPlaceholder\n          });\n        }\n      };\n    }\n  }, {\n    key: \"validationTokenCreator\",\n    get: function get() {\n      var prompt = this.prompt;\n      return {\n        literal: function literal(_) {\n          return rawLiteral(false);\n        },\n        mask: function mask(_) {\n          return rawMask({\n            prompt: prompt,\n            promptPlaceholder: ''\n          });\n        }\n      };\n    }\n  }]);\n\n  return MaskingService;\n}();\n\nMaskingService.ɵfac = function MaskingService_Factory(t) {\n  return new (t || MaskingService)();\n};\n\nMaskingService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MaskingService,\n  factory: MaskingService.ɵfac\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MaskingService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\nvar resolvedPromise = Promise.resolve(null);\nvar FOCUSED$3 = 'k-state-focused';\n/**\n * Represents the [Kendo UI MaskedTextBox component for Angular]({% slug overview_maskedtextbox %}).\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *      <kendo-maskedtextbox\n *          [mask]=\"mask\"\n *          [value]=\"value\">\n *      </kendo-maskedtextbox>\n *     `\n * })\n *\n * class AppComponent {\n *  public value: string = \"9580128055807792\";\n *  public mask: string = \"0000-0000-0000-0000\";\n * }\n * ```\n */\n\nvar MaskedTextBoxComponent = /*#__PURE__*/function () {\n  function MaskedTextBoxComponent(service, renderer, hostElement, ngZone, injector, changeDetector, rtl) {\n    var _this36 = this;\n\n    _classCallCheck(this, MaskedTextBoxComponent);\n\n    this.service = service;\n    this.renderer = renderer;\n    this.hostElement = hostElement;\n    this.ngZone = ngZone;\n    this.injector = injector;\n    this.changeDetector = changeDetector;\n    /**\n     * @hidden\n     */\n\n    this.focusableId = \"k-\".concat(guid());\n    /**\n     * Determines whether the MaskedTextBox is disabled ([see example]({% slug disabled_maskedtextbox %})).\n     */\n\n    this.disabled = false;\n    /**\n     * Determines whether the MaskedTextBox is in its read-only state ([see example]({% slug readonly_maskedtextbox %})).\n     */\n\n    this.readonly = false;\n    this.hostClasses = true;\n    /**\n     * Represents a prompt character for the masked value.\n     * @default `_`\n     */\n\n    this.prompt = '_';\n    /**\n     * Indicates a character which represents an empty position in the raw value.\n     * @default ' '\n     */\n\n    this.promptPlaceholder = ' ';\n    /**\n     * Indicates whether to include literals in the raw value  ([see example]({% slug value_maskedtextbox %})).\n     * @default false\n     */\n\n    this.includeLiterals = false;\n    /**\n     * Specifies if the mask should be shown on focus for empty value.\n     */\n\n    this.maskOnFocus = false;\n    /**\n     * Determines whether the built-in mask validator is enforced when a form is validated\n     * ([see example]({% slug validation_maskedtextbox %})).\n     * @default true\n     */\n\n    this.maskValidation = true;\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n\n    this.tabindex = 0;\n    /**\n     * Fires each time the user focuses the `input` element.\n     *\n     * > To wire the event programmatically, use the `onFocus` property.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <kendo-maskedtextbox (focus)=\"handleFocus()\"></kendo-maskedtextbox>\n     * `\n     * })\n     * class AppComponent {\n     *   public handleFocus(): void {\n     *      console.log(\"Component is focused\");\n     *   }\n     * }\n     * ```\n     */\n\n    this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n\n    /**\n     * Fires each time the `input` element gets blurred.\n     *\n     * > To wire the event programmatically, use the `onBlur` property.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <kendo-maskedtextbox (blur)=\"handleBlur()\"></kendo-maskedtextbox>\n     * `\n     * })\n     * class AppComponent {\n     *   public handleBlur(): void {\n     *      console.log(\"Component is blurred\");\n     *   }\n     * }\n     * ```\n     */\n\n    this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n\n    /**\n     * Fires each time the value changes.\n     */\n\n    this.valueChange = new EventEmitter();\n    this.focusClick = false;\n    this.defaultRules = {\n      \"#\": /[\\d\\s\\+\\-]/,\n      \"&\": /[\\S]/,\n      \"0\": /[\\d]/,\n      \"9\": /[\\d\\s]/,\n      \"?\": /[a-zA-Z\\s]/,\n      \"A\": /[a-zA-Z0-9]/,\n      \"C\": /./,\n      \"L\": /[a-zA-Z]/,\n      \"a\": /[a-zA-Z0-9\\s]/\n    };\n    this.isPasted = false;\n    this.selection = [0, 0];\n    /**\n     * @hidden\n     */\n\n    this.handleFocus = function () {\n      _this36.focused = true;\n\n      if (_this36.maskOnFocus && _this36.emptyMask) {\n        _this36.updateInput(_this36.service.maskRaw(_this36.value));\n\n        _this36.ngZone.runOutsideAngular(function () {\n          setTimeout(function () {\n            _this36.setSelection(0, 0);\n          }, 0);\n        });\n      }\n\n      if (hasObservers(_this36.onFocus)) {\n        _this36.ngZone.run(function () {\n          _this36.onFocus.emit();\n        });\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    this.handleClick = function () {\n      if (_this36.focused && !_this36.focusClick) {\n        _this36.focusClick = true;\n        var _this36$input$nativeE = _this36.input.nativeElement,\n            selectionStart = _this36$input$nativeE.selectionStart,\n            selectionEnd = _this36$input$nativeE.selectionEnd;\n\n        if (selectionStart === selectionEnd) {\n          _this36.setFocusSelection();\n        }\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    this.handleBlur = function () {\n      _this36.changeDetector.markForCheck();\n\n      _this36.focused = false;\n      _this36.focusClick = false;\n\n      if (_this36.maskOnFocus && _this36.emptyMask) {\n        _this36.updateInput(_this36.maskedValue);\n      }\n\n      if (hasObservers(_this36.onBlur) || requiresZoneOnBlur(_this36.control)) {\n        _this36.ngZone.run(function () {\n          _this36.onTouched();\n\n          _this36.onBlur.emit();\n        });\n      }\n    };\n\n    this.onChange = function (_) {};\n\n    this.onTouched = function () {};\n\n    this.direction = rtl ? 'rtl' : 'ltr';\n    this.updateService();\n  }\n\n  _createClass(MaskedTextBoxComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this.hostElement) {\n        this.renderer.removeAttribute(this.hostElement.nativeElement, \"tabindex\");\n      }\n\n      this.control = this.injector.get(NgControl, null);\n    }\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the MaskedTextBox is empty.\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      if (this.input) {\n        return !Boolean(this.input.nativeElement.value);\n      }\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"handleDragDrop\",\n    value: function handleDragDrop() {\n      return false;\n    }\n    /**\n     * Focuses the MaskedTextBox.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"maskedinput.focus()\">Focus the input</button>\n     *  <kendo-maskedtextbox #maskedinput></kendo-maskedtextbox>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (!this.input) {\n        return;\n      }\n\n      this.input.nativeElement.focus();\n      this.setFocusSelection();\n    }\n    /**\n     * Blurs the MaskedTextBox.\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      if (!this.input) {\n        return;\n      }\n\n      this.input.nativeElement.blur();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"pasteHandler\",\n    value: function pasteHandler(e) {\n      var _e$target = e.target,\n          selectionStart = _e$target.selectionStart,\n          selectionEnd = _e$target.selectionEnd;\n\n      if (selectionEnd === selectionStart) {\n        return;\n      }\n\n      this.isPasted = true;\n      this.selection = [selectionStart, selectionEnd];\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"inputHandler\",\n    value: function inputHandler(e) {\n      var value = e.target.value;\n\n      var _this$selection = _slicedToArray(this.selection, 2),\n          start = _this$selection[0],\n          end = _this$selection[1];\n\n      if (!this.mask) {\n        this.updateValue(value);\n        this.isPasted = false;\n        return;\n      }\n\n      var result;\n\n      if (this.isPasted) {\n        this.isPasted = false;\n        var rightPart = this.maskedValue.length - end;\n        var to = value.length - rightPart;\n        result = this.service.maskInRange(value.slice(start, to), this.maskedValue, start, end);\n      } else {\n        result = this.service.maskInput(value, this.maskedValue, e.target.selectionStart);\n      }\n\n      this.updateInput(result.value, result.selection);\n      this.updateValue(result.value);\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var _this37 = this;\n\n      if (changes.value) {\n        this.value = this.normalizeValue();\n      }\n\n      if (!this.mask) {\n        this.updateInput(this.value);\n        return;\n      }\n\n      var next = this.extractChanges(changes);\n      this.updateService(next);\n\n      if (isChanged('value', changes)) {\n        var maskedValue = this.service.maskRaw(this.value);\n\n        if (maskedValue !== this.maskedValue) {\n          this.updateInput(maskedValue);\n        }\n      } else if (anyChanged(['promptPlaceholder', 'includeLiterals'], changes)) {\n        resolvedPromise.then(function () {\n          _this37.updateValue(_this37.maskedValue);\n        });\n      } else {\n        this.updateInput(this.service.maskRaw(this.value));\n      }\n    }\n    /**\n     * @hidden\n     * Writes a new value to the element.\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = this.normalizeValue(value);\n      this.updateInput(this.service.maskRaw(this.value));\n    }\n    /**\n     * @hidden\n     * Sets the function that will be called when a `change` event is triggered.\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\n     * @hidden\n     * Sets the function that will be called when a `touch` event is triggered.\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     *\n     * @param isDisabled\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"validate\",\n    value: function validate(_) {\n      if (this.maskValidation === false || !this.mask) {\n        return null;\n      }\n\n      if (!this.service.validationValue(this.maskedValue)) {\n        return null;\n      }\n\n      if (this.maskedValue.indexOf(this.prompt) !== -1) {\n        return {\n          patternError: {\n            mask: this.mask,\n            maskedValue: this.maskedValue,\n            value: this.value\n          }\n        };\n      }\n\n      return null;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(maskedValue) {\n      if (this.mask && !this.service.validationValue(maskedValue)) {\n        this.value = '';\n      } else {\n        this.value = this.service.rawValue(maskedValue);\n      }\n\n      this.onChange(this.value);\n      this.valueChange.emit(this.value);\n    }\n  }, {\n    key: \"updateInput\",\n    value: function updateInput() {\n      var maskedValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var selection = arguments.length > 1 ? arguments[1] : undefined;\n      this.maskedValue = maskedValue;\n      var value = this.maskOnFocus && !this.focused && this.emptyMask ? '' : maskedValue;\n      this.renderer.setProperty(this.input.nativeElement, \"value\", value);\n\n      if (selection !== undefined) {\n        this.setSelection(selection, selection);\n      }\n    }\n  }, {\n    key: \"extractChanges\",\n    value: function extractChanges(changes) {\n      return Object.keys(changes).filter(function (key) {\n        return key !== 'rules';\n      }).reduce(function (obj, key) {\n        obj[key] = changes[key].currentValue;\n        return obj;\n      }, {}); // tslint:disable-line:align\n    }\n  }, {\n    key: \"updateService\",\n    value: function updateService(extra) {\n      var config = Object.assign({\n        includeLiterals: this.includeLiterals,\n        mask: this.mask,\n        prompt: this.prompt,\n        promptPlaceholder: this.promptPlaceholder,\n        rules: this.rules\n      }, extra); // tslint:disable-line:align\n\n      this.service.update(config);\n    }\n  }, {\n    key: \"setSelection\",\n    value: function setSelection() {\n      var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.selection[0];\n      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selection[1];\n\n      if (this.focused) {\n        invokeElementMethod(this.input, 'setSelectionRange', start, end);\n      }\n    }\n  }, {\n    key: \"setFocusSelection\",\n    value: function setFocusSelection() {\n      var selectionStart = this.input.nativeElement.selectionStart;\n      var index = this.maskedValue ? this.maskedValue.indexOf(this.prompt) : 0;\n\n      if (index >= 0 && index < selectionStart) {\n        this.selection = [index, index];\n        this.setSelection();\n      }\n    }\n  }, {\n    key: \"normalizeValue\",\n    value: function normalizeValue() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;\n      var present = isPresent(value);\n\n      if (present && typeof value !== 'string') {\n        if (isDevMode()) {\n          throw new Error('The MaskedTextBox component supports only string values.');\n        }\n\n        return String(value);\n      }\n\n      return present ? value : '';\n    }\n  }, {\n    key: \"hostDisabledClass\",\n    get: function get() {\n      return this.disabled;\n    }\n    /**\n     * Exposes the RegExp-based mask validation array ([see example]({% slug masks_maskedtextbox %})).\n     */\n\n  }, {\n    key: \"rules\",\n    get: function get() {\n      return this._rules || this.defaultRules;\n    },\n    set: function set(value) {\n      this._rules = Object.assign({}, this.defaultRules, value);\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"tabIndex\",\n    set: function set(tabIndex) {\n      this.tabindex = tabIndex;\n    },\n    get: function get() {\n      return this.tabindex;\n    }\n  }, {\n    key: \"emptyMask\",\n    get: function get() {\n      return this.service.maskRaw() === this.maskedValue;\n    }\n  }, {\n    key: \"focused\",\n    get: function get() {\n      return this.isFocused;\n    },\n    set: function set(value) {\n      if (this.isFocused !== value && this.hostElement) {\n        var element = this.hostElement.nativeElement;\n\n        if (value) {\n          this.renderer.addClass(element, FOCUSED$3);\n        } else {\n          this.renderer.removeClass(element, FOCUSED$3);\n        }\n\n        this.isFocused = value;\n      }\n    }\n  }]);\n\n  return MaskedTextBoxComponent;\n}();\n\nMaskedTextBoxComponent.ɵfac = function MaskedTextBoxComponent_Factory(t) {\n  return new (t || MaskedTextBoxComponent)(ɵngcc0.ɵɵdirectiveInject(MaskingService), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(Injector), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(RTL, 8));\n};\n\nMaskedTextBoxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MaskedTextBoxComponent,\n  selectors: [[\"kendo-maskedtextbox\"]],\n  viewQuery: function MaskedTextBoxComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵstaticViewQuery(_c38, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);\n    }\n  },\n  hostVars: 7,\n  hostBindings: function MaskedTextBoxComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"paste\", function MaskedTextBoxComponent_paste_HostBindingHandler($event) {\n        return ctx.pasteHandler($event);\n      })(\"input\", function MaskedTextBoxComponent_input_HostBindingHandler($event) {\n        return ctx.inputHandler($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"dir\", ctx.direction);\n      ɵngcc0.ɵɵclassProp(\"k-widget\", ctx.hostClasses)(\"k-maskedtextbox\", ctx.hostClasses)(\"k-state-disabled\", ctx.hostDisabledClass);\n    }\n  },\n  inputs: {\n    focusableId: \"focusableId\",\n    disabled: \"disabled\",\n    readonly: \"readonly\",\n    prompt: \"prompt\",\n    promptPlaceholder: \"promptPlaceholder\",\n    includeLiterals: \"includeLiterals\",\n    maskOnFocus: \"maskOnFocus\",\n    maskValidation: \"maskValidation\",\n    tabindex: \"tabindex\",\n    rules: \"rules\",\n    tabIndex: \"tabIndex\",\n    value: \"value\",\n    title: \"title\",\n    mask: \"mask\"\n  },\n  outputs: {\n    onFocus: \"focus\",\n    onBlur: \"blur\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"kendoMaskedTextBox\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MaskingService, {\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return MaskedTextBoxComponent;\n    })\n    /* tslint:disable-line */\n\n  }, {\n    multi: true,\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () {\n      return MaskedTextBoxComponent;\n    })\n    /* tslint:disable-line */\n\n  }, {\n    provide: KendoInput,\n    useExisting: forwardRef(function () {\n      return MaskedTextBoxComponent;\n    })\n  }]), ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 12,\n  consts: [[\"type\", \"text\", \"autocomplete\", \"off\", \"autocorrect\", \"off\", \"autocapitalize\", \"off\", \"spellcheck\", \"false\", 1, \"k-textbox\", 3, \"id\", \"tabindex\", \"disabled\", \"readonly\", \"kendoEventsOutsideAngular\"], [\"input\", \"\"]],\n  template: function MaskedTextBoxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelement(0, \"input\", 0, 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"id\", ctx.focusableId)(\"tabindex\", ctx.tabIndex)(\"disabled\", ctx.disabled)(\"readonly\", ctx.readonly)(\"kendoEventsOutsideAngular\", ɵngcc0.ɵɵpureFunction5(6, _c39, ctx.handleFocus, ctx.handleBlur, ctx.handleClick, ctx.handleDragDrop, ctx.handleDragDrop));\n      ɵngcc0.ɵɵattribute(\"title\", ctx.title);\n    }\n  },\n  directives: [ɵngcc1.EventsOutsideAngularDirective],\n  encapsulation: 2\n});\n/** @nocollapse */\n\nMaskedTextBoxComponent.ctorParameters = function () {\n  return [{\n    type: MaskingService\n  }, {\n    type: Renderer2\n  }, {\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: Injector\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: Boolean,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RTL]\n    }]\n  }];\n};\n\nMaskedTextBoxComponent.propDecorators = {\n  focusableId: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }],\n  title: [{\n    type: Input\n  }],\n  direction: [{\n    type: HostBinding,\n    args: ['attr.dir']\n  }],\n  hostClasses: [{\n    type: HostBinding,\n    args: ['class.k-widget']\n  }, {\n    type: HostBinding,\n    args: ['class.k-maskedtextbox']\n  }],\n  hostDisabledClass: [{\n    type: HostBinding,\n    args: ['class.k-state-disabled']\n  }],\n  mask: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  rules: [{\n    type: Input\n  }],\n  prompt: [{\n    type: Input\n  }],\n  promptPlaceholder: [{\n    type: Input\n  }],\n  includeLiterals: [{\n    type: Input\n  }],\n  maskOnFocus: [{\n    type: Input\n  }],\n  maskValidation: [{\n    type: Input\n  }],\n  tabindex: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  onFocus: [{\n    type: Output,\n    args: ['focus']\n  }],\n  onBlur: [{\n    type: Output,\n    args: ['blur']\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  input: [{\n    type: ViewChild,\n    args: ['input', {\n      static: true\n    }]\n  }],\n  pasteHandler: [{\n    type: HostListener,\n    args: ['paste', ['$event']]\n  }],\n  inputHandler: [{\n    type: HostListener,\n    args: ['input', ['$event']]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MaskedTextBoxComponent, [{\n    type: Component,\n    args: [{\n      exportAs: 'kendoMaskedTextBox',\n      providers: [MaskingService, {\n        multi: true,\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return MaskedTextBoxComponent;\n        })\n        /* tslint:disable-line */\n\n      }, {\n        multi: true,\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(function () {\n          return MaskedTextBoxComponent;\n        })\n        /* tslint:disable-line */\n\n      }, {\n        provide: KendoInput,\n        useExisting: forwardRef(function () {\n          return MaskedTextBoxComponent;\n        })\n      }],\n      selector: 'kendo-maskedtextbox',\n      template: \"\\n        <input type=\\\"text\\\"\\n            #input\\n            autocomplete=\\\"off\\\"\\n            autocorrect=\\\"off\\\"\\n            autocapitalize=\\\"off\\\"\\n            spellcheck=\\\"false\\\"\\n            class=\\\"k-textbox\\\"\\n            [id]=\\\"focusableId\\\"\\n            [tabindex]=\\\"tabIndex\\\"\\n            [attr.title]=\\\"title\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [readonly]=\\\"readonly\\\"\\n            [kendoEventsOutsideAngular]=\\\"{\\n                focus: handleFocus,\\n                blur: handleBlur,\\n                click: handleClick,\\n                dragstart: handleDragDrop,\\n                drop: handleDragDrop\\n            }\\\"\\n        />\\n    \"\n    }]\n  }], function () {\n    return [{\n      type: MaskingService\n    }, {\n      type: Renderer2\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }, {\n      type: Injector\n    }, {\n      type: ChangeDetectorRef\n    }, {\n      type: Boolean,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RTL]\n      }]\n    }];\n  }, {\n    focusableId: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    hostClasses: [{\n      type: HostBinding,\n      args: ['class.k-widget']\n    }, {\n      type: HostBinding,\n      args: ['class.k-maskedtextbox']\n    }],\n    prompt: [{\n      type: Input\n    }],\n    promptPlaceholder: [{\n      type: Input\n    }],\n    includeLiterals: [{\n      type: Input\n    }],\n    maskOnFocus: [{\n      type: Input\n    }],\n    maskValidation: [{\n      type: Input\n    }],\n    tabindex: [{\n      type: Input\n    }],\n    onFocus: [{\n      type: Output,\n      args: ['focus']\n    }],\n    onBlur: [{\n      type: Output,\n      args: ['blur']\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    direction: [{\n      type: HostBinding,\n      args: ['attr.dir']\n    }],\n    hostDisabledClass: [{\n      type: HostBinding,\n      args: ['class.k-state-disabled']\n    }],\n    rules: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n\n    /**\n     * @hidden\n     */\n    pasteHandler: [{\n      type: HostListener,\n      args: ['paste', ['$event']]\n    }],\n\n    /**\n     * @hidden\n     */\n    inputHandler: [{\n      type: HostListener,\n      args: ['input', ['$event']]\n    }],\n    value: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    mask: [{\n      type: Input\n    }],\n    input: [{\n      type: ViewChild,\n      args: ['input', {\n        static: true\n      }]\n    }]\n  });\n})();\n/* tslint:disable:component-selector */\n\n/**\n * @hidden\n */\n\n\nvar SliderTick = function SliderTick(value) {\n  _classCallCheck(this, SliderTick);\n\n  this.value = value;\n  this.classes = {\n    'k-tick': true\n  };\n};\n/**\n * @hidden\n */\n\n\nvar SliderTicksComponent = /*#__PURE__*/function () {\n  function SliderTicksComponent(rtl) {\n    _classCallCheck(this, SliderTicksComponent);\n\n    this.rtl = rtl;\n    this.wrapperClasses = 'k-reset k-slider-items';\n    this.ticks = [];\n  }\n\n  _createClass(SliderTicksComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(_) {\n      this.createTicks();\n    }\n  }, {\n    key: \"createTicks\",\n    value: function createTicks() {\n      var count = calculateTicksCount(this.min, this.max, this.step);\n      var largeStep = this.largeStep;\n      var tickValueProps = {\n        max: this.max,\n        min: this.min,\n        smallStep: this.step\n      };\n      var result = [];\n\n      for (var i = 0; i < count; i++) {\n        result.push(new SliderTick(calculateValueFromTick(i, tickValueProps)));\n\n        if (largeStep && i % largeStep === 0) {\n          result[i].large = true;\n          result[i].classes['k-tick-large'] = true;\n        }\n      }\n\n      if (this.rtl || this.vertical) {\n        result = result.reverse();\n      }\n\n      if (result.length > 0) {\n        Object.assign(result[0].classes, this.endTickClasses(true));\n        Object.assign(result[result.length - 1].classes, this.endTickClasses(false));\n      }\n\n      this.ticks = result;\n    }\n  }, {\n    key: \"endTickClasses\",\n    value: function endTickClasses(first) {\n      return {\n        'k-first': first && !this.vertical || !first && this.vertical,\n        'k-last': !first && !this.vertical || first && this.vertical\n      };\n    }\n  }]);\n\n  return SliderTicksComponent;\n}();\n\nSliderTicksComponent.ɵfac = function SliderTicksComponent_Factory(t) {\n  return new (t || SliderTicksComponent)(ɵngcc0.ɵɵdirectiveInject(RTL, 8));\n};\n\nSliderTicksComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: SliderTicksComponent,\n  selectors: [[\"\", \"kendoSliderTicks\", \"\"]],\n  viewQuery: function SliderTicksComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c40, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tickElements = _t);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function SliderTicksComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMap(ctx.wrapperClasses);\n    }\n  },\n  inputs: {\n    tickTitle: \"tickTitle\",\n    vertical: \"vertical\",\n    step: \"step\",\n    largeStep: \"largeStep\",\n    min: \"min\",\n    max: \"max\",\n    labelTemplate: \"labelTemplate\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c41,\n  decls: 3,\n  vars: 1,\n  consts: [[\"role\", \"presentation\", 3, \"ngClass\", \"title\", 4, \"ngFor\", \"ngForOf\"], [\"defaultLabel\", \"\"], [\"role\", \"presentation\", 3, \"ngClass\", \"title\"], [\"tickElement\", \"\"], [3, \"ngSwitch\"], [\"class\", \"k-label\", 4, \"ngSwitchCase\"], [4, \"ngSwitchCase\"], [1, \"k-label\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n  template: function SliderTicksComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, SliderTicksComponent_li_0_Template, 5, 5, \"li\", 0);\n      ɵngcc0.ɵɵtemplate(1, SliderTicksComponent_ng_template_1_Template, 1, 1, \"ng-template\", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n    }\n  },\n  directives: [ɵngcc2.NgForOf, ɵngcc2.NgClass, ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase, ɵngcc2.NgTemplateOutlet],\n  encapsulation: 2\n});\n/** @nocollapse */\n\nSliderTicksComponent.ctorParameters = function () {\n  return [{\n    type: Boolean,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RTL]\n    }]\n  }];\n};\n\nSliderTicksComponent.propDecorators = {\n  wrapperClasses: [{\n    type: HostBinding,\n    args: ['class']\n  }],\n  tickTitle: [{\n    type: Input\n  }],\n  vertical: [{\n    type: Input\n  }],\n  step: [{\n    type: Input\n  }],\n  largeStep: [{\n    type: Input\n  }],\n  min: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  labelTemplate: [{\n    type: Input\n  }],\n  tickElements: [{\n    type: ViewChildren,\n    args: ['tickElement']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SliderTicksComponent, [{\n    type: Component,\n    args: [{\n      selector: '[kendoSliderTicks]',\n      template: \"\\n    <li #tickElement *ngFor=\\\"let tick of ticks;\\\"\\n        [ngClass]=\\\"tick.classes\\\"\\n        title=\\\"{{ tickTitle(tick.value) }}\\\"\\n        role=\\\"presentation\\\"\\n     >\\n         <ng-container [ngSwitch]=\\\"tick.large\\\">\\n            <span class=\\\"k-label\\\" *ngSwitchCase=\\\"true\\\">\\n                <ng-container [ngTemplateOutlet]=\\\"labelTemplate || defaultLabel\\\" [ngTemplateOutletContext]=\\\"tick\\\">\\n                </ng-container>\\n            </span>\\n            <ng-container *ngSwitchCase=\\\"false\\\">&nbsp;</ng-container>\\n         </ng-container>\\n     </li>\\n\\n     <ng-template #defaultLabel let-value=\\\"value\\\">\\n        {{ tickTitle(value) }}\\n     </ng-template>\\n  \"\n    }]\n  }], function () {\n    return [{\n      type: Boolean,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RTL]\n      }]\n    }];\n  }, {\n    wrapperClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    tickTitle: [{\n      type: Input\n    }],\n    vertical: [{\n      type: Input\n    }],\n    step: [{\n      type: Input\n    }],\n    largeStep: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    labelTemplate: [{\n      type: Input\n    }],\n    tickElements: [{\n      type: ViewChildren,\n      args: ['tickElement']\n    }]\n  });\n})();\n/**\n * @hidden\n */\n\n\nvar SlidersCommonModule = function SlidersCommonModule() {\n  _classCallCheck(this, SlidersCommonModule);\n};\n\nSlidersCommonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: SlidersCommonModule\n});\nSlidersCommonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function SlidersCommonModule_Factory(t) {\n    return new (t || SlidersCommonModule)();\n  },\n  imports: [[CommonModule, DraggableModule, EventsModule, ResizeSensorModule], DraggableModule, EventsModule, ResizeSensorModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SlidersCommonModule, {\n    declarations: function declarations() {\n      return [SliderTicksComponent, LabelTemplateDirective];\n    },\n    imports: function imports() {\n      return [CommonModule, DraggableModule, EventsModule, ResizeSensorModule];\n    },\n    exports: function exports() {\n      return [LabelTemplateDirective, SliderTicksComponent, DraggableModule, EventsModule, ResizeSensorModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SlidersCommonModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [SliderTicksComponent, LabelTemplateDirective],\n      exports: [LabelTemplateDirective, SliderTicksComponent, DraggableModule, EventsModule, ResizeSensorModule],\n      imports: [CommonModule, DraggableModule, EventsModule, ResizeSensorModule]\n    }]\n  }], null, null);\n})();\n/**\n * @hidden\n */\n\n\nvar SliderMessages = /*#__PURE__*/function (_ComponentMessages2) {\n  _inherits(SliderMessages, _ComponentMessages2);\n\n  var _super7 = _createSuper(SliderMessages);\n\n  function SliderMessages() {\n    _classCallCheck(this, SliderMessages);\n\n    return _super7.apply(this, arguments);\n  }\n\n  return SliderMessages;\n}(ComponentMessages);\n\nSliderMessages.ɵfac = function SliderMessages_Factory(t) {\n  return ɵSliderMessages_BaseFactory(t || SliderMessages);\n};\n\nSliderMessages.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: SliderMessages,\n  inputs: {\n    decrement: \"decrement\",\n    increment: \"increment\",\n    dragHandle: \"dragHandle\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nSliderMessages.propDecorators = {\n  decrement: [{\n    type: Input\n  }],\n  increment: [{\n    type: Input\n  }],\n  dragHandle: [{\n    type: Input\n  }]\n};\nvar ɵSliderMessages_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(SliderMessages);\n/**\n * @hidden\n */\n\nvar LocalizedSliderMessagesDirective = /*#__PURE__*/function (_SliderMessages) {\n  _inherits(LocalizedSliderMessagesDirective, _SliderMessages);\n\n  var _super8 = _createSuper(LocalizedSliderMessagesDirective);\n\n  function LocalizedSliderMessagesDirective(service) {\n    var _this38;\n\n    _classCallCheck(this, LocalizedSliderMessagesDirective);\n\n    _this38 = _super8.call(this);\n    _this38.service = service;\n    return _this38;\n  }\n\n  return LocalizedSliderMessagesDirective;\n}(SliderMessages);\n\nLocalizedSliderMessagesDirective.ɵfac = function LocalizedSliderMessagesDirective_Factory(t) {\n  return new (t || LocalizedSliderMessagesDirective)(ɵngcc0.ɵɵdirectiveInject(LocalizationService));\n};\n\nLocalizedSliderMessagesDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: LocalizedSliderMessagesDirective,\n  selectors: [[\"\", \"kendoSliderLocalizedMessages\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: SliderMessages,\n    useExisting: forwardRef(function () {\n      return LocalizedSliderMessagesDirective;\n    }) // tslint:disable-line:no-forward-ref\n\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nLocalizedSliderMessagesDirective.ctorParameters = function () {\n  return [{\n    type: LocalizationService\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LocalizedSliderMessagesDirective, [{\n    type: Directive,\n    args: [{\n      providers: [{\n        provide: SliderMessages,\n        useExisting: forwardRef(function () {\n          return LocalizedSliderMessagesDirective;\n        }) // tslint:disable-line:no-forward-ref\n\n      }],\n      selector: '[kendoSliderLocalizedMessages]'\n    }]\n  }], function () {\n    return [{\n      type: LocalizationService\n    }];\n  }, null);\n})();\n/**\n * Custom component messages override default component messages.\n */\n\n\nvar SliderCustomMessagesComponent = /*#__PURE__*/function (_SliderMessages2) {\n  _inherits(SliderCustomMessagesComponent, _SliderMessages2);\n\n  var _super9 = _createSuper(SliderCustomMessagesComponent);\n\n  function SliderCustomMessagesComponent(service) {\n    var _this39;\n\n    _classCallCheck(this, SliderCustomMessagesComponent);\n\n    _this39 = _super9.call(this);\n    _this39.service = service;\n    return _this39;\n  }\n\n  _createClass(SliderCustomMessagesComponent, [{\n    key: \"override\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return SliderCustomMessagesComponent;\n}(SliderMessages);\n\nSliderCustomMessagesComponent.ɵfac = function SliderCustomMessagesComponent_Factory(t) {\n  return new (t || SliderCustomMessagesComponent)(ɵngcc0.ɵɵdirectiveInject(LocalizationService));\n};\n\nSliderCustomMessagesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: SliderCustomMessagesComponent,\n  selectors: [[\"kendo-slider-messages\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: SliderMessages,\n    useExisting: forwardRef(function () {\n      return SliderCustomMessagesComponent;\n    }) // tslint:disable-line:no-forward-ref\n\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function SliderCustomMessagesComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\n/** @nocollapse */\n\nSliderCustomMessagesComponent.ctorParameters = function () {\n  return [{\n    type: LocalizationService\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SliderCustomMessagesComponent, [{\n    type: Component,\n    args: [{\n      providers: [{\n        provide: SliderMessages,\n        useExisting: forwardRef(function () {\n          return SliderCustomMessagesComponent;\n        }) // tslint:disable-line:no-forward-ref\n\n      }],\n      selector: 'kendo-slider-messages',\n      template: \"\"\n    }]\n  }], function () {\n    return [{\n      type: LocalizationService\n    }];\n  }, null);\n})();\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Slider component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Inputs module\n * import { SliderModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, BrowserAnimationsModule, SliderModule], // import Slider module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\n\n\nvar SliderModule = function SliderModule() {\n  _classCallCheck(this, SliderModule);\n};\n\nSliderModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: SliderModule\n});\nSliderModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function SliderModule_Factory(t) {\n    return new (t || SliderModule)();\n  },\n  imports: [[CommonModule, SlidersCommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SliderModule, {\n    declarations: function declarations() {\n      return [SliderComponent, SliderCustomMessagesComponent, LocalizedSliderMessagesDirective];\n    },\n    imports: function imports() {\n      return [CommonModule, SlidersCommonModule];\n    },\n    exports: function exports() {\n      return [SliderComponent, SliderCustomMessagesComponent, LabelTemplateDirective, LocalizedSliderMessagesDirective];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SliderModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [SliderComponent, SliderCustomMessagesComponent, LocalizedSliderMessagesDirective],\n      exports: [SliderComponent, SliderCustomMessagesComponent, LabelTemplateDirective, LocalizedSliderMessagesDirective],\n      imports: [CommonModule, SlidersCommonModule]\n    }]\n  }], null, null);\n})();\n/**\n * @hidden\n */\n\n\nvar RangeSliderMessages = /*#__PURE__*/function (_ComponentMessages3) {\n  _inherits(RangeSliderMessages, _ComponentMessages3);\n\n  var _super10 = _createSuper(RangeSliderMessages);\n\n  function RangeSliderMessages() {\n    _classCallCheck(this, RangeSliderMessages);\n\n    return _super10.apply(this, arguments);\n  }\n\n  return RangeSliderMessages;\n}(ComponentMessages);\n\nRangeSliderMessages.ɵfac = function RangeSliderMessages_Factory(t) {\n  return ɵRangeSliderMessages_BaseFactory(t || RangeSliderMessages);\n};\n\nRangeSliderMessages.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: RangeSliderMessages,\n  inputs: {\n    dragHandleStart: \"dragHandleStart\",\n    dragHandleEnd: \"dragHandleEnd\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nRangeSliderMessages.propDecorators = {\n  dragHandleStart: [{\n    type: Input\n  }],\n  dragHandleEnd: [{\n    type: Input\n  }]\n};\nvar ɵRangeSliderMessages_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(RangeSliderMessages);\n/**\n * @hidden\n */\n\nvar LocalizedRangeSliderMessagesDirective = /*#__PURE__*/function (_RangeSliderMessages) {\n  _inherits(LocalizedRangeSliderMessagesDirective, _RangeSliderMessages);\n\n  var _super11 = _createSuper(LocalizedRangeSliderMessagesDirective);\n\n  function LocalizedRangeSliderMessagesDirective(service) {\n    var _this40;\n\n    _classCallCheck(this, LocalizedRangeSliderMessagesDirective);\n\n    _this40 = _super11.call(this);\n    _this40.service = service;\n    return _this40;\n  }\n\n  return LocalizedRangeSliderMessagesDirective;\n}(RangeSliderMessages);\n\nLocalizedRangeSliderMessagesDirective.ɵfac = function LocalizedRangeSliderMessagesDirective_Factory(t) {\n  return new (t || LocalizedRangeSliderMessagesDirective)(ɵngcc0.ɵɵdirectiveInject(LocalizationService));\n};\n\nLocalizedRangeSliderMessagesDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: LocalizedRangeSliderMessagesDirective,\n  selectors: [[\"\", \"kendoSliderLocalizedMessages\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: RangeSliderMessages,\n    useExisting: forwardRef(function () {\n      return LocalizedRangeSliderMessagesDirective;\n    }) // tslint:disable-line:no-forward-ref\n\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nLocalizedRangeSliderMessagesDirective.ctorParameters = function () {\n  return [{\n    type: LocalizationService\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LocalizedRangeSliderMessagesDirective, [{\n    type: Directive,\n    args: [{\n      providers: [{\n        provide: RangeSliderMessages,\n        useExisting: forwardRef(function () {\n          return LocalizedRangeSliderMessagesDirective;\n        }) // tslint:disable-line:no-forward-ref\n\n      }],\n      selector: '[kendoSliderLocalizedMessages]'\n    }]\n  }], function () {\n    return [{\n      type: LocalizationService\n    }];\n  }, null);\n})();\n/**\n * Custom component messages override default component messages.\n */\n\n\nvar RangeSliderCustomMessagesComponent = /*#__PURE__*/function (_RangeSliderMessages2) {\n  _inherits(RangeSliderCustomMessagesComponent, _RangeSliderMessages2);\n\n  var _super12 = _createSuper(RangeSliderCustomMessagesComponent);\n\n  function RangeSliderCustomMessagesComponent(service) {\n    var _this41;\n\n    _classCallCheck(this, RangeSliderCustomMessagesComponent);\n\n    _this41 = _super12.call(this);\n    _this41.service = service;\n    return _this41;\n  }\n\n  _createClass(RangeSliderCustomMessagesComponent, [{\n    key: \"override\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return RangeSliderCustomMessagesComponent;\n}(RangeSliderMessages);\n\nRangeSliderCustomMessagesComponent.ɵfac = function RangeSliderCustomMessagesComponent_Factory(t) {\n  return new (t || RangeSliderCustomMessagesComponent)(ɵngcc0.ɵɵdirectiveInject(LocalizationService));\n};\n\nRangeSliderCustomMessagesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: RangeSliderCustomMessagesComponent,\n  selectors: [[\"kendo-rangeslider-messages\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: RangeSliderMessages,\n    useExisting: forwardRef(function () {\n      return RangeSliderCustomMessagesComponent;\n    }) // tslint:disable-line:no-forward-ref\n\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function RangeSliderCustomMessagesComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\n/** @nocollapse */\n\nRangeSliderCustomMessagesComponent.ctorParameters = function () {\n  return [{\n    type: LocalizationService\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RangeSliderCustomMessagesComponent, [{\n    type: Component,\n    args: [{\n      providers: [{\n        provide: RangeSliderMessages,\n        useExisting: forwardRef(function () {\n          return RangeSliderCustomMessagesComponent;\n        }) // tslint:disable-line:no-forward-ref\n\n      }],\n      selector: 'kendo-rangeslider-messages',\n      template: \"\"\n    }]\n  }], function () {\n    return [{\n      type: LocalizationService\n    }];\n  }, null);\n})();\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the RangeSlider component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Inputs module\n * import { RangeSliderModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, BrowserAnimationsModule, RangeSliderModule], // import RangeSlider module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\n\n\nvar RangeSliderModule = function RangeSliderModule() {\n  _classCallCheck(this, RangeSliderModule);\n};\n\nRangeSliderModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: RangeSliderModule\n});\nRangeSliderModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function RangeSliderModule_Factory(t) {\n    return new (t || RangeSliderModule)();\n  },\n  imports: [[CommonModule, SlidersCommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RangeSliderModule, {\n    declarations: function declarations() {\n      return [RangeSliderComponent, RangeSliderCustomMessagesComponent, LocalizedRangeSliderMessagesDirective];\n    },\n    imports: function imports() {\n      return [CommonModule, SlidersCommonModule];\n    },\n    exports: function exports() {\n      return [RangeSliderComponent, RangeSliderCustomMessagesComponent, LocalizedRangeSliderMessagesDirective, LabelTemplateDirective];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RangeSliderModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [RangeSliderComponent, RangeSliderCustomMessagesComponent, LocalizedRangeSliderMessagesDirective],\n      exports: [RangeSliderComponent, RangeSliderCustomMessagesComponent, LocalizedRangeSliderMessagesDirective, LabelTemplateDirective],\n      imports: [CommonModule, SlidersCommonModule]\n    }]\n  }], null, null);\n})();\n/**\n * @hidden\n */\n\n\nvar Messages = /*#__PURE__*/function (_ComponentMessages4) {\n  _inherits(Messages, _ComponentMessages4);\n\n  var _super13 = _createSuper(Messages);\n\n  function Messages() {\n    _classCallCheck(this, Messages);\n\n    return _super13.apply(this, arguments);\n  }\n\n  return Messages;\n}(ComponentMessages);\n\nMessages.ɵfac = function Messages_Factory(t) {\n  return ɵMessages_BaseFactory(t || Messages);\n};\n\nMessages.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: Messages,\n  inputs: {\n    on: \"on\",\n    off: \"off\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMessages.propDecorators = {\n  on: [{\n    type: Input\n  }],\n  off: [{\n    type: Input\n  }]\n};\nvar ɵMessages_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(Messages);\n/**\n * @hidden\n */\n\nvar LocalizedSwitchMessagesDirective = /*#__PURE__*/function (_Messages) {\n  _inherits(LocalizedSwitchMessagesDirective, _Messages);\n\n  var _super14 = _createSuper(LocalizedSwitchMessagesDirective);\n\n  function LocalizedSwitchMessagesDirective(service) {\n    var _this42;\n\n    _classCallCheck(this, LocalizedSwitchMessagesDirective);\n\n    _this42 = _super14.call(this);\n    _this42.service = service;\n    return _this42;\n  }\n\n  return LocalizedSwitchMessagesDirective;\n}(Messages);\n\nLocalizedSwitchMessagesDirective.ɵfac = function LocalizedSwitchMessagesDirective_Factory(t) {\n  return new (t || LocalizedSwitchMessagesDirective)(ɵngcc0.ɵɵdirectiveInject(LocalizationService));\n};\n\nLocalizedSwitchMessagesDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: LocalizedSwitchMessagesDirective,\n  selectors: [[\"\", \"kendoSwitchLocalizedMessages\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: Messages,\n    useExisting: forwardRef(function () {\n      return LocalizedSwitchMessagesDirective;\n    }) // tslint:disable-line:no-forward-ref\n\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nLocalizedSwitchMessagesDirective.ctorParameters = function () {\n  return [{\n    type: LocalizationService\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LocalizedSwitchMessagesDirective, [{\n    type: Directive,\n    args: [{\n      providers: [{\n        provide: Messages,\n        useExisting: forwardRef(function () {\n          return LocalizedSwitchMessagesDirective;\n        }) // tslint:disable-line:no-forward-ref\n\n      }],\n      selector: '[kendoSwitchLocalizedMessages]'\n    }]\n  }], function () {\n    return [{\n      type: LocalizationService\n    }];\n  }, null);\n})();\n/**\n * Custom component messages override default component messages.\n */\n\n\nvar SwitchCustomMessagesComponent = /*#__PURE__*/function (_Messages2) {\n  _inherits(SwitchCustomMessagesComponent, _Messages2);\n\n  var _super15 = _createSuper(SwitchCustomMessagesComponent);\n\n  function SwitchCustomMessagesComponent(service) {\n    var _this43;\n\n    _classCallCheck(this, SwitchCustomMessagesComponent);\n\n    _this43 = _super15.call(this);\n    _this43.service = service;\n    return _this43;\n  }\n\n  _createClass(SwitchCustomMessagesComponent, [{\n    key: \"override\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return SwitchCustomMessagesComponent;\n}(Messages);\n\nSwitchCustomMessagesComponent.ɵfac = function SwitchCustomMessagesComponent_Factory(t) {\n  return new (t || SwitchCustomMessagesComponent)(ɵngcc0.ɵɵdirectiveInject(LocalizationService));\n};\n\nSwitchCustomMessagesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: SwitchCustomMessagesComponent,\n  selectors: [[\"kendo-switch-messages\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: Messages,\n    useExisting: forwardRef(function () {\n      return SwitchCustomMessagesComponent;\n    }) // tslint:disable-line:no-forward-ref\n\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function SwitchCustomMessagesComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\n/** @nocollapse */\n\nSwitchCustomMessagesComponent.ctorParameters = function () {\n  return [{\n    type: LocalizationService\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SwitchCustomMessagesComponent, [{\n    type: Component,\n    args: [{\n      providers: [{\n        provide: Messages,\n        useExisting: forwardRef(function () {\n          return SwitchCustomMessagesComponent;\n        }) // tslint:disable-line:no-forward-ref\n\n      }],\n      selector: 'kendo-switch-messages',\n      template: \"\"\n    }]\n  }], function () {\n    return [{\n      type: LocalizationService\n    }];\n  }, null);\n})();\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Switch component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Switch module\n * import { SwitchModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, SwitchModule], // import Switch module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\n\n\nvar SwitchModule = function SwitchModule() {\n  _classCallCheck(this, SwitchModule);\n};\n\nSwitchModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: SwitchModule\n});\nSwitchModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function SwitchModule_Factory(t) {\n    return new (t || SwitchModule)();\n  },\n  imports: [[CommonModule, EventsModule, ResizeSensorModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SwitchModule, {\n    declarations: function declarations() {\n      return [SwitchComponent, SwitchCustomMessagesComponent, LocalizedSwitchMessagesDirective];\n    },\n    imports: function imports() {\n      return [CommonModule, EventsModule, ResizeSensorModule];\n    },\n    exports: function exports() {\n      return [SwitchComponent, SwitchCustomMessagesComponent, LocalizedSwitchMessagesDirective];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SwitchModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [SwitchComponent, SwitchCustomMessagesComponent, LocalizedSwitchMessagesDirective],\n      exports: [SwitchComponent, SwitchCustomMessagesComponent, LocalizedSwitchMessagesDirective],\n      imports: [CommonModule, EventsModule, ResizeSensorModule]\n    }]\n  }], null, null);\n})();\n/**\n * @hidden\n */\n\n\nvar LocalizedNumericTextBoxMessagesDirective = /*#__PURE__*/function (_NumericTextBoxMessag2) {\n  _inherits(LocalizedNumericTextBoxMessagesDirective, _NumericTextBoxMessag2);\n\n  var _super16 = _createSuper(LocalizedNumericTextBoxMessagesDirective);\n\n  function LocalizedNumericTextBoxMessagesDirective(service) {\n    var _this44;\n\n    _classCallCheck(this, LocalizedNumericTextBoxMessagesDirective);\n\n    _this44 = _super16.call(this);\n    _this44.service = service;\n    return _this44;\n  }\n\n  return LocalizedNumericTextBoxMessagesDirective;\n}(NumericTextBoxMessages);\n\nLocalizedNumericTextBoxMessagesDirective.ɵfac = function LocalizedNumericTextBoxMessagesDirective_Factory(t) {\n  return new (t || LocalizedNumericTextBoxMessagesDirective)(ɵngcc0.ɵɵdirectiveInject(LocalizationService));\n};\n\nLocalizedNumericTextBoxMessagesDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: LocalizedNumericTextBoxMessagesDirective,\n  selectors: [[\"\", \"kendoNumericTextBoxLocalizedMessages\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NumericTextBoxMessages,\n    useExisting: forwardRef(function () {\n      return LocalizedNumericTextBoxMessagesDirective;\n    }) // tslint:disable-line:no-forward-ref\n\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nLocalizedNumericTextBoxMessagesDirective.ctorParameters = function () {\n  return [{\n    type: LocalizationService\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LocalizedNumericTextBoxMessagesDirective, [{\n    type: Directive,\n    args: [{\n      providers: [{\n        provide: NumericTextBoxMessages,\n        useExisting: forwardRef(function () {\n          return LocalizedNumericTextBoxMessagesDirective;\n        }) // tslint:disable-line:no-forward-ref\n\n      }],\n      selector: '[kendoNumericTextBoxLocalizedMessages]'\n    }]\n  }], function () {\n    return [{\n      type: LocalizationService\n    }];\n  }, null);\n})();\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the NumericTextBox component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the NumericTextBox module\n * import { NumericTextBoxModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, NumericTextBoxModule], // import NumericTextBox module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\n\n\nvar NumericTextBoxModule = function NumericTextBoxModule() {\n  _classCallCheck(this, NumericTextBoxModule);\n};\n\nNumericTextBoxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NumericTextBoxModule\n});\nNumericTextBoxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NumericTextBoxModule_Factory(t) {\n    return new (t || NumericTextBoxModule)();\n  },\n  imports: [[CommonModule, EventsModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NumericTextBoxModule, {\n    declarations: function declarations() {\n      return [LocalizedNumericTextBoxMessagesDirective, NumericTextBoxComponent, NumericTextBoxCustomMessagesComponent];\n    },\n    imports: function imports() {\n      return [CommonModule, EventsModule];\n    },\n    exports: function exports() {\n      return [NumericTextBoxComponent, NumericTextBoxCustomMessagesComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NumericTextBoxModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [LocalizedNumericTextBoxMessagesDirective, NumericTextBoxComponent, NumericTextBoxCustomMessagesComponent],\n      exports: [NumericTextBoxComponent, NumericTextBoxCustomMessagesComponent],\n      imports: [CommonModule, EventsModule]\n    }]\n  }], null, null);\n})();\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the MaskedTextBox component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the MaskedTextBox module\n * import { MaskedTextBoxModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, MaskedTextBoxModule], // import MaskedTextBox module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\n\n\nvar MaskedTextBoxModule = function MaskedTextBoxModule() {\n  _classCallCheck(this, MaskedTextBoxModule);\n};\n\nMaskedTextBoxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MaskedTextBoxModule\n});\nMaskedTextBoxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MaskedTextBoxModule_Factory(t) {\n    return new (t || MaskedTextBoxModule)();\n  },\n  imports: [[CommonModule, EventsModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MaskedTextBoxModule, {\n    declarations: function declarations() {\n      return [MaskedTextBoxComponent];\n    },\n    imports: function imports() {\n      return [CommonModule, EventsModule];\n    },\n    exports: function exports() {\n      return [MaskedTextBoxComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MaskedTextBoxModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MaskedTextBoxComponent],\n      exports: [MaskedTextBoxComponent],\n      imports: [CommonModule, EventsModule]\n    }]\n  }], null, null);\n})();\n/**\n * Specifies the adornments in the suffix container ([see examples]({% slug adornments_textbox %}#toc-suffixadornments)).\n *  @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-textbox>\n *    <ng-template kendoTextBoxSuffixTemplate>\n *        <button kendoButton look=\"clear\" icon=\"image\"></button>\n *    </ng-template>\n *  </kendo-textbox>\n * `\n * })\n * class AppComponent {}\n * ```\n */\n\n\nvar TextBoxSuffixTemplateDirective = function TextBoxSuffixTemplateDirective(templateRef) {\n  _classCallCheck(this, TextBoxSuffixTemplateDirective);\n\n  this.templateRef = templateRef;\n};\n\nTextBoxSuffixTemplateDirective.ɵfac = function TextBoxSuffixTemplateDirective_Factory(t) {\n  return new (t || TextBoxSuffixTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(TemplateRef, 8));\n};\n\nTextBoxSuffixTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TextBoxSuffixTemplateDirective,\n  selectors: [[\"\", \"kendoTextBoxSuffixTemplate\", \"\"]]\n});\n/** @nocollapse */\n\nTextBoxSuffixTemplateDirective.ctorParameters = function () {\n  return [{\n    type: TemplateRef,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TextBoxSuffixTemplateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoTextBoxSuffixTemplate]'\n    }]\n  }], function () {\n    return [{\n      type: TemplateRef,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Specifies the adornments in the prefix container ([see examples]({% slug adornments_textbox %}#toc-prefixadornments)).\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-textbox>\n *    <ng-template kendoTextBoxPrefixTemplate>\n *        <button kendoButton look=\"clear\" icon=\"image\"></button>\n *    </ng-template>\n *  </kendo-textbox>\n * `\n * })\n * class AppComponent {}\n * ```\n */\n\n\nvar TextBoxPrefixTemplateDirective = function TextBoxPrefixTemplateDirective(templateRef) {\n  _classCallCheck(this, TextBoxPrefixTemplateDirective);\n\n  this.templateRef = templateRef;\n};\n\nTextBoxPrefixTemplateDirective.ɵfac = function TextBoxPrefixTemplateDirective_Factory(t) {\n  return new (t || TextBoxPrefixTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(TemplateRef, 8));\n};\n\nTextBoxPrefixTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TextBoxPrefixTemplateDirective,\n  selectors: [[\"\", \"kendoTextBoxPrefixTemplate\", \"\"]]\n});\n/** @nocollapse */\n\nTextBoxPrefixTemplateDirective.ctorParameters = function () {\n  return [{\n    type: TemplateRef,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TextBoxPrefixTemplateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoTextBoxPrefixTemplate]'\n    }]\n  }], function () {\n    return [{\n      type: TemplateRef,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nvar TextBoxComponent = /*#__PURE__*/function () {\n  function TextBoxComponent(localizationService, ngZone, changeDetector, renderer, injector, hostElement) {\n    var _this45 = this;\n\n    _classCallCheck(this, TextBoxComponent);\n\n    this.localizationService = localizationService;\n    this.ngZone = ngZone;\n    this.changeDetector = changeDetector;\n    this.renderer = renderer;\n    this.injector = injector;\n    this.hostElement = hostElement;\n    /**\n     * Sets the `title` attribute of the `input` element of the TextBox.\n     */\n\n    this.title = '';\n    /**\n     * Sets the disabled state of the component.\n     */\n\n    this.disabled = false;\n    /**\n     * Sets the read-only state of the component.\n     */\n\n    this.readonly = false;\n    /**\n     * Specifies the `tabindex` of the TextBox.\n     */\n\n    this.tabindex = 0;\n    /**\n     * Provides a value for the TextBox.\n     */\n\n    this.value = null;\n    /**\n     * Determines whether the whole value will be selected when the TextBox is clicked. Defaults to `true`.\n     */\n\n    this.selectOnFocus = false;\n    /**\n     * Specifies when the Success icon will be shown ([see example]({% slug validation_textbox %})).\n     *\n     * The possible values are:\n     *\n     * * (Default) `initial`&mdash;The Success icon will be displayed when the component state is neither\n     * `invalid` nor `touched` or `dirty`.\n     * * `boolean`&mdash;The Success icon is displayed, if the condition given by the developer is met.\n     *\n     */\n\n    this.showSuccessIcon = 'initial';\n    /**\n     * Specifies when the Error icon will be shown ([see example]({% slug validation_textbox %})).\n     *\n     * The possible values are:\n     *\n     * * (Default) `initial`&mdash;The Error icon will be displayed when the component state is\n     * `invalid` and `touched` or `dirty`.\n     * * `boolean`&mdash;The Error icon is displayed, if the condition given by the developer is met.\n     *\n     */\n\n    this.showErrorIcon = 'initial';\n    /**\n     * Specifies whether a Clear button will be rendered.\n     */\n\n    this.clearButton = false;\n    /**\n     * Fires each time the value is changed&mdash;\n     * when the component is blurred or the value is cleared through the **Clear** button\n     * ([see example]({% slug overview_textbox %}#toc-events)).\n     * When the value of the component is programmatically changed to `ngModel` or `formControl`\n     * through its API or form binding, the `valueChange` event is not triggered because it\n     * might cause a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.\n     */\n\n    this.valueChange = new EventEmitter();\n    /**\n     * Fires each time the user focuses the `input` element.\n     */\n\n    this.inputFocus = new EventEmitter();\n    /**\n     * Fires each time the `input` element gets blurred.\n     */\n\n    this.inputBlur = new EventEmitter();\n    /**\n     * Fires each time the user focuses the TextBox component.\n     *\n     * > To wire the event programmatically, use the `onFocus` property.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <kendo-textbox (focus)=\"handleFocus()\"></kendo-textbox>\n     * `\n     * })\n     * class AppComponent {\n     *   public handleFocus(): void {\n     *      console.log('Component is isFocused');\n     *   }\n     * }\n     * ```\n     */\n\n    this.onFocus = new EventEmitter();\n    /**\n     * Fires each time the TextBox component gets blurred.\n     *\n     * > To wire the event programmatically, use the `onBlur` property.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <kendo-textbox (blur)=\"handleBlur()\"></kendo-textbox>\n     * `\n     * })\n     * class AppComponent {\n     *   public handleBlur(): void {\n     *      console.log('Component is blurred');\n     *   }\n     * }\n     * ```\n     */\n\n    this.onBlur = new EventEmitter();\n    this.hostClass = true;\n    this._isFocused = false;\n    this.focusChangedProgrammatically = false;\n    /**\n     * @hidden\n     */\n\n    this.handleInputFocus = function () {\n      if (!_this45.isDisabled) {\n        if (_this45.selectOnFocus && _this45.value) {\n          _this45.ngZone.run(function () {\n            setTimeout(function () {\n              _this45.selectAll();\n            });\n          });\n        }\n\n        if (hasObservers(_this45.onFocus)) {\n          if (!_this45.isFocused) {\n            _this45.ngZone.run(function () {\n              _this45.onFocus.emit();\n            });\n          }\n        }\n\n        if (hasObservers(_this45.inputFocus)) {\n          if (!_this45.focusChangedProgrammatically || _this45.focusChangedProgrammatically && _this45.clearButtonClicked) {\n            _this45.ngZone.run(function () {\n              _this45.inputFocus.emit();\n            });\n          }\n        }\n\n        _this45.ngZone.run(function () {\n          _this45.isFocused = true;\n        });\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    this.handleInputBlur = function () {\n      _this45.changeDetector.markForCheck();\n\n      if (hasObservers(_this45.inputBlur) || requiresZoneOnBlur(_this45.control)) {\n        _this45.ngZone.run(function () {\n          _this45.ngTouched();\n\n          _this45.inputBlur.emit();\n        });\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    this.handleInput = function (ev) {\n      var incomingValue = ev.target.value;\n\n      _this45.updateValue(incomingValue);\n    };\n\n    this.ngChange = function (_) {};\n\n    this.ngTouched = function () {};\n\n    this.direction = localizationService.rtl ? 'rtl' : 'ltr';\n  }\n  /**\n   * @hidden\n   */\n\n\n  _createClass(TextBoxComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this46 = this;\n\n      this.control = this.injector.get(NgControl, null);\n      this.checkClearButton();\n      this.subscriptions = this.localizationService.changes.subscribe(function (_ref15) {\n        var rtl = _ref15.rtl;\n        _this46.direction = rtl ? 'rtl' : 'ltr';\n      });\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this47 = this;\n\n      var hostElement = this.hostElement.nativeElement;\n      var cursorInsideWrapper = false;\n      var tabbing = false;\n      this.ngZone.runOutsideAngular(function () {\n        // focusIn and focusOut are relative to the host element\n        _this47.subscriptions.add(_this47.renderer.listen(hostElement, 'focusin', function () {\n          if (!_this47.isFocused) {\n            _this47.ngZone.run(function () {\n              _this47.onFocus.emit();\n\n              _this47.isFocused = true;\n            });\n          }\n        }));\n\n        _this47.subscriptions.add(_this47.renderer.listen(hostElement, 'focusout', function (args) {\n          if (!_this47.isFocused) {\n            return;\n          }\n\n          if (tabbing) {\n            var closestTextbox = closest(args.relatedTarget, function (element) {\n              return element.tagName === 'KENDO-TEXTBOX';\n            });\n\n            if (!closestTextbox) {\n              _this47.handleBlur();\n            }\n\n            tabbing = false;\n          } else {\n            if (!cursorInsideWrapper && !_this47.clearButtonClicked) {\n              _this47.handleBlur();\n            }\n          }\n        }));\n\n        _this47.subscriptions.add(_this47.renderer.listen(hostElement, 'mouseenter', function () {\n          cursorInsideWrapper = true;\n        }));\n\n        _this47.subscriptions.add(_this47.renderer.listen(hostElement, 'mouseleave', function () {\n          cursorInsideWrapper = false;\n        }));\n\n        _this47.subscriptions.add(_this47.renderer.listen(hostElement, 'keydown', function (args) {\n          if (args.keyCode === Keys.Tab) {\n            tabbing = true;\n          } else {\n            tabbing = false;\n          }\n        }));\n      });\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes.disabled || changes.readonly) {\n        this.checkClearButton();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.subscriptions.unsubscribe();\n    }\n    /**\n     * Focuses the TextBox.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"input.focus()\">Focus the input</button>\n     *  <kendo-textbox #input></kendo-textbox>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (!this.input) {\n        return;\n      }\n\n      this.focusChangedProgrammatically = true;\n      this.isFocused = true;\n      this.input.nativeElement.focus();\n      this.focusChangedProgrammatically = false;\n    }\n    /**\n     * Blurs the TextBox.\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.focusChangedProgrammatically = true;\n      var isFocusedElement = this.hostElement.nativeElement.querySelector(':focus');\n\n      if (isFocusedElement) {\n        isFocusedElement.blur();\n      }\n\n      this.isFocused = false;\n      this.focusChangedProgrammatically = false;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"clearTitle\",\n    value: function clearTitle() {\n      return this.localizationService.get('clear');\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"checkClearButton\",\n    value: function checkClearButton() {\n      this.showClearButton = !this.disabled && !this.readonly && this.clearButton && !!this.value;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"clearValue\",\n    value: function clearValue() {\n      this.clearButtonClicked = true;\n      this.input.nativeElement.value = '';\n      this.input.nativeElement.focus();\n      this.updateValue(null);\n      this.checkClearButton();\n      this.clearButtonClicked = false;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.ngChange = fn;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.ngTouched = fn;\n    }\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     *\n     * @param isDisabled\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"showErrorsInitial\",\n    value: function showErrorsInitial() {\n      if (!this.control) {\n        return false;\n      }\n\n      var _this$control = this.control,\n          invalid = _this$control.invalid,\n          dirty = _this$control.dirty,\n          touched = _this$control.touched;\n      return invalid && (dirty || touched);\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"showSuccessInitial\",\n    value: function showSuccessInitial() {\n      if (!this.control) {\n        return false;\n      }\n\n      var _this$control2 = this.control,\n          valid = _this$control2.valid,\n          dirty = _this$control2.dirty,\n          touched = _this$control2.touched;\n      return valid && (dirty || touched);\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"setSelection\",\n    value: function setSelection(start, end) {\n      if (this.isFocused) {\n        invokeElementMethod(this.input, 'setSelectionRange', start, end);\n      }\n    }\n  }, {\n    key: \"selectAll\",\n    value: function selectAll() {\n      if (this.value) {\n        this.setSelection(0, this.value.length);\n      }\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(value) {\n      var _this48 = this;\n\n      if (!areSame(this.value, value)) {\n        this.ngZone.run(function () {\n          _this48.value = value;\n\n          _this48.ngChange(value);\n\n          _this48.valueChange.emit(value);\n\n          _this48.checkClearButton();\n\n          _this48.changeDetector.markForCheck();\n        });\n      }\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur() {\n      var _this49 = this;\n\n      this.ngZone.run(function () {\n        if (!_this49.focusChangedProgrammatically) {\n          _this49.onBlur.emit();\n        }\n\n        _this49.isFocused = false;\n      });\n    }\n  }, {\n    key: \"tabIndex\",\n    set: function set(tabIndex) {\n      this.tabindex = tabIndex;\n    },\n    get: function get() {\n      return this.tabindex;\n    }\n  }, {\n    key: \"disabledClass\",\n    get: function get() {\n      return this.disabled;\n    }\n  }, {\n    key: \"isFocused\",\n    get: function get() {\n      return this.disabled ? false : this._isFocused;\n    },\n    set: function set(isFocused) {\n      this._isFocused = isFocused;\n    }\n  }, {\n    key: \"successIconClasses\",\n    get: function get() {\n      return this.successIcon ? \"k-text-success \".concat(this.successIcon) : \"k-text-success k-icon k-i-check-outline\";\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"errorIconClasses\",\n    get: function get() {\n      return this.errorIcon ? \"k-text-error \".concat(this.errorIcon) : \"k-text-error k-icon k-i-warning\";\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"clearButtonClasses\",\n    get: function get() {\n      return this.clearButtonIcon ? this.clearButtonIcon : \"k-icon k-i-close-circle\";\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"hasErrors\",\n    get: function get() {\n      return this.showErrorIcon === 'initial' ? this.showErrorsInitial() : this.showErrorIcon;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"isSuccessful\",\n    get: function get() {\n      return this.showSuccessIcon === 'initial' ? this.showSuccessInitial() : this.showSuccessIcon;\n    }\n  }, {\n    key: \"isDisabled\",\n    get: function get() {\n      return this.disabled || this.readonly;\n    }\n  }]);\n\n  return TextBoxComponent;\n}();\n\nTextBoxComponent.ɵfac = function TextBoxComponent_Factory(t) {\n  return new (t || TextBoxComponent)(ɵngcc0.ɵɵdirectiveInject(LocalizationService), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(Injector), ɵngcc0.ɵɵdirectiveInject(ElementRef));\n};\n\nTextBoxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TextBoxComponent,\n  selectors: [[\"kendo-textbox\"]],\n  contentQueries: function TextBoxComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, TextBoxSuffixTemplateDirective, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, TextBoxPrefixTemplateDirective, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.suffixTemplate = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.prefixTemplate = _t.first);\n    }\n  },\n  viewQuery: function TextBoxComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵstaticViewQuery(_c38, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);\n    }\n  },\n  hostVars: 7,\n  hostBindings: function TextBoxComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"dir\", ctx.direction);\n      ɵngcc0.ɵɵclassProp(\"k-textbox\", ctx.hostClass)(\"k-state-focused\", ctx.isFocused)(\"k-state-disabled\", ctx.disabledClass);\n    }\n  },\n  inputs: {\n    title: \"title\",\n    disabled: \"disabled\",\n    readonly: \"readonly\",\n    tabindex: \"tabindex\",\n    value: \"value\",\n    selectOnFocus: \"selectOnFocus\",\n    showSuccessIcon: \"showSuccessIcon\",\n    showErrorIcon: \"showErrorIcon\",\n    clearButton: \"clearButton\",\n    tabIndex: \"tabIndex\",\n    successIcon: \"successIcon\",\n    errorIcon: \"errorIcon\",\n    clearButtonIcon: \"clearButtonIcon\",\n    placeholder: \"placeholder\"\n  },\n  outputs: {\n    valueChange: \"valueChange\",\n    inputFocus: \"inputFocus\",\n    inputBlur: \"inputBlur\",\n    onFocus: \"focus\",\n    onBlur: \"blur\"\n  },\n  exportAs: [\"kendoTextBox\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([LocalizationService, {\n    provide: L10N_PREFIX,\n    useValue: 'kendo.textbox'\n  }, {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return TextBoxComponent;\n    }),\n    multi: true\n  }, {\n    provide: KendoInput,\n    useExisting: forwardRef(function () {\n      return TextBoxComponent;\n    })\n  }]), ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 11,\n  vars: 16,\n  consts: function consts() {\n    var i18n_42;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\n       * @desc The title for the **Clear** button in the TextBox.\n       * @meaning kendo.textbox.clear\n       */\n      var MSG_EXTERNAL_2651889799249671820$$DIST_FESM2015_INDEX_JS_43 = goog.getMsg(\"Clear\");\n      i18n_42 = MSG_EXTERNAL_2651889799249671820$$DIST_FESM2015_INDEX_JS_43;\n    } else {\n      i18n_42 = $localize(_templateObject10());\n    }\n\n    return [[\"kendoTextBoxLocalizedMessages\", \"\", 6, \"clear\"], [\"clear\", i18n_42], [1, \"k-input-prefix\"], [4, \"ngIf\"], [1, \"k-input\", 3, \"disabled\", \"readonly\", \"value\", \"kendoEventsOutsideAngular\"], [\"input\", \"\"], [1, \"k-input-suffix\"], [3, \"ngClass\", 4, \"ngIf\"], [\"role\", \"button\", \"class\", \"k-clear-value\", 3, \"tabindex\", \"title\", \"click\", \"mousedown\", \"keydown.enter\", \"keydown.space\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\"], [3, \"ngClass\"], [\"role\", \"button\", 1, \"k-clear-value\", 3, \"tabindex\", \"title\", \"click\", \"mousedown\", \"keydown.enter\", \"keydown.space\"]];\n  },\n  template: function TextBoxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainerStart(0, 0);\n      ɵngcc0.ɵɵi18nAttributes(1, 1);\n      ɵngcc0.ɵɵelementContainerEnd();\n      ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n      ɵngcc0.ɵɵtemplate(3, TextBoxComponent_3_Template, 1, 1, undefined, 3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(4, \"input\", 4, 5);\n      ɵngcc0.ɵɵelementStart(6, \"span\", 6);\n      ɵngcc0.ɵɵtemplate(7, TextBoxComponent_span_7_Template, 1, 1, \"span\", 7);\n      ɵngcc0.ɵɵtemplate(8, TextBoxComponent_span_8_Template, 1, 1, \"span\", 7);\n      ɵngcc0.ɵɵtemplate(9, TextBoxComponent_span_9_Template, 2, 4, \"span\", 8);\n      ɵngcc0.ɵɵtemplate(10, TextBoxComponent_10_Template, 1, 1, undefined, 3);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.prefixTemplate);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled)(\"readonly\", ctx.readonly)(\"value\", ctx.value)(\"kendoEventsOutsideAngular\", ɵngcc0.ɵɵpureFunction3(12, _c44, ctx.handleInputFocus, ctx.handleInputBlur, ctx.handleInput));\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? undefined : ctx.tabindex)(\"placeholder\", ctx.placeholder)(\"title\", ctx.title);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasErrors);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isSuccessful);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showClearButton);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.suffixTemplate);\n    }\n  },\n  directives: function directives() {\n    return [LocalizedTextBoxMessagesDirective, ɵngcc2.NgIf, ɵngcc1.EventsOutsideAngularDirective, ɵngcc2.NgTemplateOutlet, ɵngcc2.NgClass];\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\n\nTextBoxComponent.ctorParameters = function () {\n  return [{\n    type: LocalizationService\n  }, {\n    type: NgZone\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: Renderer2\n  }, {\n    type: Injector\n  }, {\n    type: ElementRef\n  }];\n};\n\nTextBoxComponent.propDecorators = {\n  title: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }],\n  tabindex: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  selectOnFocus: [{\n    type: Input\n  }],\n  showSuccessIcon: [{\n    type: Input\n  }],\n  showErrorIcon: [{\n    type: Input\n  }],\n  clearButton: [{\n    type: Input\n  }],\n  successIcon: [{\n    type: Input\n  }],\n  errorIcon: [{\n    type: Input\n  }],\n  clearButtonIcon: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  inputFocus: [{\n    type: Output\n  }],\n  inputBlur: [{\n    type: Output\n  }],\n  onFocus: [{\n    type: Output,\n    args: ['focus']\n  }],\n  onBlur: [{\n    type: Output,\n    args: ['blur']\n  }],\n  input: [{\n    type: ViewChild,\n    args: ['input', {\n      static: true\n    }]\n  }],\n  suffixTemplate: [{\n    type: ContentChild,\n    args: [TextBoxSuffixTemplateDirective]\n  }],\n  prefixTemplate: [{\n    type: ContentChild,\n    args: [TextBoxPrefixTemplateDirective]\n  }],\n  disabledClass: [{\n    type: HostBinding,\n    args: ['class.k-state-disabled']\n  }],\n  hostClass: [{\n    type: HostBinding,\n    args: ['class.k-textbox']\n  }],\n  isFocused: [{\n    type: HostBinding,\n    args: ['class.k-state-focused']\n  }],\n  direction: [{\n    type: HostBinding,\n    args: ['attr.dir']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TextBoxComponent, [{\n    type: Component,\n    args: [{\n      exportAs: 'kendoTextBox',\n      providers: [LocalizationService, {\n        provide: L10N_PREFIX,\n        useValue: 'kendo.textbox'\n      }, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return TextBoxComponent;\n        }),\n        multi: true\n      }, {\n        provide: KendoInput,\n        useExisting: forwardRef(function () {\n          return TextBoxComponent;\n        })\n      }],\n      selector: 'kendo-textbox',\n      template: \"\\n        <ng-container kendoTextBoxLocalizedMessages\\n            i18n-clear=\\\"kendo.textbox.clear|The title for the **Clear** button in the TextBox.\\\"\\n            clear=\\\"Clear\\\">\\n        </ng-container>\\n        <span class=\\\"k-input-prefix\\\">\\n            <ng-template\\n                *ngIf=\\\"prefixTemplate\\\"\\n                [ngTemplateOutlet]=\\\"prefixTemplate?.templateRef\\\">\\n            </ng-template>\\n        </span>\\n        <input\\n            class=\\\"k-input\\\"\\n            #input\\n            [disabled]=\\\"disabled\\\"\\n            [readonly]=\\\"readonly\\\"\\n            [attr.tabindex]=\\\"disabled ? undefined : tabindex\\\"\\n            [value]=\\\"value\\\"\\n            [attr.placeholder]=\\\"placeholder\\\"\\n            [attr.title]=\\\"title\\\"\\n            [kendoEventsOutsideAngular]=\\\"{\\n                focus: handleInputFocus,\\n                blur: handleInputBlur,\\n                input: handleInput}\\\"/>\\n        <span class=\\\"k-input-suffix\\\">\\n            <span *ngIf=\\\"hasErrors\\\" [ngClass]=\\\"errorIconClasses\\\"></span>\\n            <span *ngIf=\\\"isSuccessful\\\" [ngClass]=\\\"successIconClasses\\\"></span>\\n            <span\\n                role=\\\"button\\\"\\n                class=\\\"k-clear-value\\\"\\n                *ngIf=\\\"showClearButton\\\"\\n                (click)=\\\"clearValue()\\\"\\n                (mousedown)=\\\"$event.preventDefault()\\\"\\n                [tabindex]=\\\"tabIndex\\\"\\n                [attr.aria-label]=\\\"clearTitle()\\\"\\n                [title]=\\\"clearTitle()\\\"\\n                (keydown.enter)=\\\"clearValue()\\\"\\n                (keydown.space)=\\\"clearValue()\\\"\\n                >\\n                <span [ngClass]=\\\"clearButtonClasses\\\"></span>\\n            </span>\\n            <ng-template\\n                *ngIf=\\\"suffixTemplate\\\"\\n                [ngTemplateOutlet]=\\\"suffixTemplate?.templateRef\\\">\\n            </ng-template>\\n        </span>\\n    \"\n    }]\n  }], function () {\n    return [{\n      type: LocalizationService\n    }, {\n      type: NgZone\n    }, {\n      type: ChangeDetectorRef\n    }, {\n      type: Renderer2\n    }, {\n      type: Injector\n    }, {\n      type: ElementRef\n    }];\n  }, {\n    title: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    tabindex: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selectOnFocus: [{\n      type: Input\n    }],\n    showSuccessIcon: [{\n      type: Input\n    }],\n    showErrorIcon: [{\n      type: Input\n    }],\n    clearButton: [{\n      type: Input\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    inputFocus: [{\n      type: Output\n    }],\n    inputBlur: [{\n      type: Output\n    }],\n    onFocus: [{\n      type: Output,\n      args: ['focus']\n    }],\n    onBlur: [{\n      type: Output,\n      args: ['blur']\n    }],\n    hostClass: [{\n      type: HostBinding,\n      args: ['class.k-textbox']\n    }],\n    isFocused: [{\n      type: HostBinding,\n      args: ['class.k-state-focused']\n    }],\n    direction: [{\n      type: HostBinding,\n      args: ['attr.dir']\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    disabledClass: [{\n      type: HostBinding,\n      args: ['class.k-state-disabled']\n    }],\n    successIcon: [{\n      type: Input\n    }],\n    errorIcon: [{\n      type: Input\n    }],\n    clearButtonIcon: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    input: [{\n      type: ViewChild,\n      args: ['input', {\n        static: true\n      }]\n    }],\n    suffixTemplate: [{\n      type: ContentChild,\n      args: [TextBoxSuffixTemplateDirective]\n    }],\n    prefixTemplate: [{\n      type: ContentChild,\n      args: [TextBoxPrefixTemplateDirective]\n    }]\n  });\n})();\n/**\n * Specifies a separator in the content of the TextBox ([see examples]({% slug adornments_textbox %}#toc-separator)).\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-textbox>\n *    <ng-template kendoTextBoxSuffixTemplate>\n *        <button kendoButton look=\"clear\" icon=\"image\"></button>\n *        <kendo-textbox-separator></kendo-textbox-separator>\n *    </ng-template>\n *  </kendo-textbox>\n * `\n * })\n * class AppComponent {}\n * ```\n */\n\n\nvar TextBoxSeparatorComponent = function TextBoxSeparatorComponent() {\n  _classCallCheck(this, TextBoxSeparatorComponent);\n\n  this.hostClass = true;\n};\n\nTextBoxSeparatorComponent.ɵfac = function TextBoxSeparatorComponent_Factory(t) {\n  return new (t || TextBoxSeparatorComponent)();\n};\n\nTextBoxSeparatorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TextBoxSeparatorComponent,\n  selectors: [[\"kendo-textbox-separator\"]],\n  hostVars: 2,\n  hostBindings: function TextBoxSeparatorComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"k-textbox-separator\", ctx.hostClass);\n    }\n  },\n  decls: 0,\n  vars: 0,\n  template: function TextBoxSeparatorComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\nTextBoxSeparatorComponent.propDecorators = {\n  hostClass: [{\n    type: HostBinding,\n    args: ['class.k-textbox-separator']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TextBoxSeparatorComponent, [{\n    type: Component,\n    args: [{\n      selector: 'kendo-textbox-separator',\n      template: \"\"\n    }]\n  }], function () {\n    return [];\n  }, {\n    hostClass: [{\n      type: HostBinding,\n      args: ['class.k-textbox-separator']\n    }]\n  });\n})();\n/**\n * @hidden\n */\n\n\nvar TextBoxMessages = /*#__PURE__*/function (_ComponentMessages5) {\n  _inherits(TextBoxMessages, _ComponentMessages5);\n\n  var _super17 = _createSuper(TextBoxMessages);\n\n  function TextBoxMessages() {\n    _classCallCheck(this, TextBoxMessages);\n\n    return _super17.apply(this, arguments);\n  }\n\n  return TextBoxMessages;\n}(ComponentMessages);\n\nTextBoxMessages.ɵfac = function TextBoxMessages_Factory(t) {\n  return ɵTextBoxMessages_BaseFactory(t || TextBoxMessages);\n};\n\nTextBoxMessages.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TextBoxMessages,\n  inputs: {\n    clear: \"clear\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nTextBoxMessages.propDecorators = {\n  clear: [{\n    type: Input\n  }]\n};\nvar ɵTextBoxMessages_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(TextBoxMessages);\n/**\n * Custom component messages override default component messages.\n */\n\nvar TextBoxCustomMessagesComponent = /*#__PURE__*/function (_TextBoxMessages) {\n  _inherits(TextBoxCustomMessagesComponent, _TextBoxMessages);\n\n  var _super18 = _createSuper(TextBoxCustomMessagesComponent);\n\n  function TextBoxCustomMessagesComponent(service) {\n    var _this50;\n\n    _classCallCheck(this, TextBoxCustomMessagesComponent);\n\n    _this50 = _super18.call(this);\n    _this50.service = service;\n    return _this50;\n  }\n\n  _createClass(TextBoxCustomMessagesComponent, [{\n    key: \"override\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return TextBoxCustomMessagesComponent;\n}(TextBoxMessages);\n\nTextBoxCustomMessagesComponent.ɵfac = function TextBoxCustomMessagesComponent_Factory(t) {\n  return new (t || TextBoxCustomMessagesComponent)(ɵngcc0.ɵɵdirectiveInject(LocalizationService));\n};\n\nTextBoxCustomMessagesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TextBoxCustomMessagesComponent,\n  selectors: [[\"kendo-textbox-messages\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TextBoxMessages,\n    useExisting: forwardRef(function () {\n      return TextBoxCustomMessagesComponent;\n    }) // tslint:disable-line:no-forward-ref\n\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function TextBoxCustomMessagesComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\n/** @nocollapse */\n\nTextBoxCustomMessagesComponent.ctorParameters = function () {\n  return [{\n    type: LocalizationService\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TextBoxCustomMessagesComponent, [{\n    type: Component,\n    args: [{\n      providers: [{\n        provide: TextBoxMessages,\n        useExisting: forwardRef(function () {\n          return TextBoxCustomMessagesComponent;\n        }) // tslint:disable-line:no-forward-ref\n\n      }],\n      selector: 'kendo-textbox-messages',\n      template: \"\"\n    }]\n  }], function () {\n    return [{\n      type: LocalizationService\n    }];\n  }, null);\n})();\n/**\n * @hidden\n */\n\n\nvar LocalizedTextBoxMessagesDirective = /*#__PURE__*/function (_TextBoxMessages2) {\n  _inherits(LocalizedTextBoxMessagesDirective, _TextBoxMessages2);\n\n  var _super19 = _createSuper(LocalizedTextBoxMessagesDirective);\n\n  function LocalizedTextBoxMessagesDirective(service) {\n    var _this51;\n\n    _classCallCheck(this, LocalizedTextBoxMessagesDirective);\n\n    _this51 = _super19.call(this);\n    _this51.service = service;\n    return _this51;\n  }\n\n  return LocalizedTextBoxMessagesDirective;\n}(TextBoxMessages);\n\nLocalizedTextBoxMessagesDirective.ɵfac = function LocalizedTextBoxMessagesDirective_Factory(t) {\n  return new (t || LocalizedTextBoxMessagesDirective)(ɵngcc0.ɵɵdirectiveInject(LocalizationService));\n};\n\nLocalizedTextBoxMessagesDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: LocalizedTextBoxMessagesDirective,\n  selectors: [[\"\", \"kendoTextBoxLocalizedMessages\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: TextBoxMessages,\n    useExisting: forwardRef(function () {\n      return LocalizedTextBoxMessagesDirective;\n    }) // tslint:disable-line:no-forward-ref\n\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nLocalizedTextBoxMessagesDirective.ctorParameters = function () {\n  return [{\n    type: LocalizationService\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LocalizedTextBoxMessagesDirective, [{\n    type: Directive,\n    args: [{\n      providers: [{\n        provide: TextBoxMessages,\n        useExisting: forwardRef(function () {\n          return LocalizedTextBoxMessagesDirective;\n        }) // tslint:disable-line:no-forward-ref\n\n      }],\n      selector: '[kendoTextBoxLocalizedMessages]'\n    }]\n  }], function () {\n    return [{\n      type: LocalizationService\n    }];\n  }, null);\n})();\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the TextBox directive.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the TextBox module\n * import { TextBoxModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, TextBoxModule], // import TextBox module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\n\n\nvar TextBoxModule = function TextBoxModule() {\n  _classCallCheck(this, TextBoxModule);\n};\n\nTextBoxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: TextBoxModule\n});\nTextBoxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function TextBoxModule_Factory(t) {\n    return new (t || TextBoxModule)();\n  },\n  imports: [[CommonModule, EventsModule], EventsModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextBoxModule, {\n    declarations: function declarations() {\n      return [TextBoxDirective, TextAreaDirective, TextBoxContainerComponent, TextBoxComponent, TextBoxSeparatorComponent, TextBoxSuffixTemplateDirective, TextBoxPrefixTemplateDirective, TextBoxCustomMessagesComponent, LocalizedTextBoxMessagesDirective];\n    },\n    imports: function imports() {\n      return [CommonModule, EventsModule];\n    },\n    exports: function exports() {\n      return [TextBoxDirective, TextAreaDirective, TextBoxContainerComponent, TextBoxComponent, TextBoxSeparatorComponent, TextBoxSuffixTemplateDirective, TextBoxPrefixTemplateDirective, EventsModule, TextBoxCustomMessagesComponent, LocalizedTextBoxMessagesDirective];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TextBoxModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TextBoxDirective, TextAreaDirective, TextBoxContainerComponent, TextBoxComponent, TextBoxSeparatorComponent, TextBoxSuffixTemplateDirective, TextBoxPrefixTemplateDirective, TextBoxCustomMessagesComponent, LocalizedTextBoxMessagesDirective],\n      exports: [TextBoxDirective, TextAreaDirective, TextBoxContainerComponent, TextBoxComponent, TextBoxSeparatorComponent, TextBoxSuffixTemplateDirective, TextBoxPrefixTemplateDirective, EventsModule, TextBoxCustomMessagesComponent, LocalizedTextBoxMessagesDirective],\n      imports: [CommonModule, EventsModule]\n    }]\n  }], null, null);\n})();\n/**\n * @hidden\n */\n\n\nvar PreventableEvent = /*#__PURE__*/function () {\n  function PreventableEvent() {\n    _classCallCheck(this, PreventableEvent);\n\n    this.prevented = false;\n  }\n  /**\n   * Prevents the default action for a specified event.\n   * In this way, the source component suppresses the built-in behavior that follows the event.\n   */\n\n\n  _createClass(PreventableEvent, [{\n    key: \"preventDefault\",\n    value: function preventDefault() {\n      this.prevented = true;\n    }\n    /**\n     * If the event is prevented by any of its subscribers, returns `true`.\n     *\n     * @returns - `true` if the default action was prevented. Otherwise, returns `false`.\n     */\n\n  }, {\n    key: \"isDefaultPrevented\",\n    value: function isDefaultPrevented() {\n      return this.prevented;\n    }\n  }]);\n\n  return PreventableEvent;\n}();\n/**\n * Fires each time the left side of the ColorPicker wrapper is clicked.\n * The event is triggered regardless of whether a ColorPicker icon is set or not.\n *\n * Provides information about the current active color and gives the option to prevent the opening of the popup.\n *\n * @example\n *\n * ```ts\n * _@Component({\n *   selector: 'my-app',\n *   template: `\n *       <kendo-colorpicker\n *           [icon]=\"'edit-tools'\"\n *           [value]=\"'#900'\"\n *           (activeColorClick)=\"handleActiveColorClick($event)\"\n *       >\n *       </kendo-colorpicker>\n *   `\n * })\n * class AppComponent {\n *     public handleActiveColorClick(event: ActiveColorClickEvent): void {\n *         event.preventOpen();\n *\n *         console.log('Open prevented:', event.isOpenPrevented());\n *         console.log('Current color:', event.color);\n *     }\n *  }\n * ```\n */\n\n\nvar ActiveColorClickEvent = /*#__PURE__*/function () {\n  /**\n   * @hidden\n   * @param color Represents the current value of the ColorPicker.\n   */\n  function ActiveColorClickEvent(color) {\n    _classCallCheck(this, ActiveColorClickEvent);\n\n    this.color = color;\n    this.openPrevented = false;\n  }\n  /**\n   * Prevents the opening of the popup.\n   */\n\n\n  _createClass(ActiveColorClickEvent, [{\n    key: \"preventOpen\",\n    value: function preventOpen() {\n      this.openPrevented = true;\n    }\n    /**\n     * Returns `true` if the popup opening is prevented by any of its subscribers.\n     *\n     * @returns - Returns `true` if the open action was prevented. Otherwise, returns `false`.\n     */\n\n  }, {\n    key: \"isOpenPrevented\",\n    value: function isOpenPrevented() {\n      return this.openPrevented;\n    }\n  }]);\n\n  return ActiveColorClickEvent;\n}();\n/**\n * @hidden\n *\n * Returns the hex or rgba string representation of the color.\n */\n\n\nvar parseColor$1 = function parseColor$1(value, format) {\n  var safe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var allowedFormats = ['hex', 'rgba', 'name'];\n\n  if (allowedFormats.indexOf(format) === -1) {\n    throw new Error(\"Unsupported color output format '\".concat(format, \"'. The available options are 'hex', 'rgba' or 'name'.\"));\n  }\n\n  if (!isPresent(value)) {\n    return;\n  }\n\n  if (format === 'name') {\n    return nameFormat(value, safe);\n  }\n\n  var parsedColor = parseColor(value.trim(), safe);\n\n  if (!isPresent(parsedColor)) {\n    return;\n  }\n\n  return format === 'hex' ? parsedColor.toCss() : parsedColor.toCssRgba();\n};\n/**\n * @hidden\n *\n * Returns an HSV object representation of the color string.\n */\n\n\nvar getHSV = function getHSV(value) {\n  var safe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var parsed = parseColor(value, safe);\n\n  if (!isPresent(parsed)) {\n    return {};\n  }\n\n  return parsed.toHSV();\n};\n/**\n * @hidden\n *\n * Returns an RGBA object representation of the color string.\n */\n\n\nvar getRGBA = function getRGBA(value) {\n  var safe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var parsed = parseColor(value, safe);\n\n  if (!isPresent(parsed)) {\n    return {};\n  }\n\n  return parsed.toBytes();\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color.\n */\n\n\nvar getColorFromHSV = function getColorFromHSV(hsva) {\n  var hue = fitIntoBounds(hsva.h, 0, 359.9);\n  var saturation = fitIntoBounds(hsva.s, 0, 1);\n  var value = fitIntoBounds(hsva.v, 0, 1);\n  var alpha = fitIntoBounds(hsva.a, 0, 1);\n  return Color.fromHSV(hue, saturation, value, alpha).toCssRgba();\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color based on the `hue`, assuming the `value`, `saturation` and `alpha` have value of `1`.\n */\n\n\nvar getColorFromHue = function getColorFromHue(hue) {\n  return getColorFromHSV({\n    h: hue,\n    s: 1,\n    v: 1,\n    a: 1\n  });\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color.\n */\n\n\nvar getColorFromRGBA = function getColorFromRGBA(rgba) {\n  var red = fitIntoBounds(rgba.r, 0, 255);\n  var green = fitIntoBounds(rgba.g, 0, 255);\n  var blue = fitIntoBounds(rgba.b, 0, 255);\n  var alpha = fitIntoBounds(rgba.a, 0, 1);\n  return Color.fromBytes(red, green, blue, alpha).toCssRgba();\n};\n/**\n *\n * @hidden\n */\n\n\nfunction nameFormat(value, safe) {\n  value = value.toLowerCase().trim();\n\n  if (isPresent(namedColors[value])) {\n    return value;\n  }\n\n  if (parseColor(value, safe)) {\n    value = parseColor(value, safe).toHex();\n  }\n\n  var key = Object.keys(namedColors).find(function (key) {\n    return namedColors[key] === value;\n  });\n\n  if (!key && !safe) {\n    throw new Error(\"The provided color \".concat(value, \" is not supported for 'format=\\\"name\\\"' property.To display \").concat(value, \" color, the component 'format' property shoud be set to 'hex' or 'rgba' \"));\n  }\n\n  return key;\n} // tslint:disable:max-line-length\n\n/**\n * @hidden\n */\n\n\nvar PALETTEPRESETS = {\n  basic: {\n    colors: '000000,7f7f7f,880015,ed1c24,ff7f27,fff200,22b14c,00a2e8,3f48cc,a349a4,ffffff,c3c3c3,b97a57,ffaec9,ffc90e,efe4b0,b5e61d,99d9ea,7092be,c8bfe7',\n    columns: 10\n  },\n  office: {\n    colors: 'ffffff, 000000, e6e6e6, 435569, 4371c4, ed7e32, a5a4a5, febf04, 5a9bd5, 71ae48, f2f2f3, 7f7f7f, d1cece, d5dde3, dae1f4, fce5d4, deeded, fff2cc, deeaf6, e1efd9, d7d8d8, 585959, aeabab, adbaca, b4c5e7, f6caac, dbdbdb, ffe498, bcd6ee, c5e0b2, bfbfc0, 3f3f3f, 767070, 8595b1, 8fabdb, f5b183, c9c8c9, fed965, 9bc4e5, a8d08d, a5a5a6, 262625, 393939, 334050, 2e5496, c45a11, 7b7b7a, bf9000, 2f75b5, 548235, 7f7f7f, 0b0c0c, 161616, 222a34, 203764, 843d0b, 525252, 7f6000, 1d4d79, 375623',\n    columns: 10\n  },\n  apex: {\n    colors: 'ffffff, 000000, c9c2d1, 69676d, ceb966, 9cb084, 6bb1c9, 6585cf, 7e6bc9, a379bb, f2f2f2, 7f7f7f, f4f2f5, e0e0e2, f5f1e0, ebefe6, e1eff4, e0e6f5, e5e1f4, ece4f1, d8d8d8, 595959, e9e6ec, c2c1c5, ebe3c1, d7dfcd, c3dfe9, c1ceeb, cbc3e9, dac9e3, bfbfbf, 3f3f3f, dedae3, a4a3a8, e1d5a3, c3cfb5, a6d0de, a2b5e2, b1a6de, c7aed6, a5a5a5, 262626, 9688a5, 4e4d51, ae9638, 758c5a, 3d8da9, 365bb0, 533da9, 7d4d99, 7f7f7f, 0c0c0c, 635672, 343336, 746425, 4e5d3c, 295e70, 243c75, 372970, 533366',\n    columns: 10\n  },\n  austin: {\n    colors: 'ffffff, 000000, caf278, 3e3d2d, 94c600, 71685a, ff6700, 909465, 956b43, fea022, f2f2f2, 7f7f7f, f4fce4, dddcd0, efffc0, e3e1dc, ffe0cb, e8e9df, ece1d6, feecd2, d8d8d8, 595959, e9f9c9, bbb9a1, dfff82, c8c3ba, ffc299, d2d4c0, dac3ad, fed9a6, bfbfbf, 3f3f3f, dff7ae, ada598, cfff43, ada598, ffa365, bcbfa1, c8a585, fec67a, a5a5a5, 262626, a9ea25, 2e2d21, 6f9400, 544e43, bf4d00, 6c6f4b, 6f5032, d77b00, 7f7f7f, 0c0c0c, 74a50f, 1f1e16, 4a6300, 38342d, 7f3300, 484a32, 4a3521, 8f5200',\n    columns: 10\n  },\n  clarity: {\n    colors: 'ffffff, 292934, f3f2dc, d2533c, 93a299, ad8f67, 726056, 4c5a6a, 808da0, 79463d, f2f2f2, e7e7ec, e7e5b9, f6dcd8, e9ecea, eee8e0, e4dedb, d8dde3, e5e8ec, e9d6d3, d8d8d8, c4c4d1, d5d185, edbab1, d3d9d6, ded2c2, c9beb8, b2bcc8, ccd1d9, d3aea7, bfbfbf, 8a8aa3, aca73b, e4978a, bec7c1, cdbba3, af9e94, 8c9bac, b2bac6, bd857c, a5a5a5, 56566e, 56531d, a43925, 6b7c72, 866b48, 554840, 39434f, 5c697b, 5a342d, 7f7f7f, 3b3b4b, 22210b, 6d2619, 47534c, 594730, 39302b, 262d35, 3d4652, 3c231e',\n    columns: 10\n  },\n  slipstream: {\n    colors: 'ffffff, 000000, b4dcfa, 212745, 4e67c8, 5eccf3, a7ea52, 5dceaf, ff8021, f14124, f2f2f2, 7f7f7f, 8bc9f7, c7cce4, dbe0f4, def4fc, edfadc, def5ef, ffe5d2, fcd9d3, d8d8d8, 595959, 4facf3, 909aca, b8c2e9, beeafa, dbf6b9, beebdf, ffcca6, f9b3a7, bfbfbf, 3f3f3f, 0d78c9, 5967af, 94a3de, 9ee0f7, caf297, 9de1cf, ffb279, f68d7b, a5a5a5, 262626, 063c64, 181d33, 31479f, 11b2eb, 81d319, 34ac8b, d85c00, c3260c, 7f7f7f, 0c0c0c, 021828, 101322, 202f6a, 0b769c, 568c11, 22725c, 903d00, 821908',\n    columns: 10\n  },\n  metro: {\n    colors: 'ffffff, 000000, d6ecff, 4e5b6f, 7fd13b, ea157a, feb80a, 00addc, 738ac8, 1ab39f, f2f2f2, 7f7f7f, a7d6ff, d9dde4, e5f5d7, fad0e4, fef0cd, c5f2ff, e2e7f4, c9f7f1, d8d8d8, 595959, 60b5ff, b3bcca, cbecb0, f6a1c9, fee29c, 8be6ff, c7d0e9, 94efe3, bfbfbf, 3f3f3f, 007dea, 8d9baf, b2e389, f272af, fed46b, 51d9ff, aab8de, 5fe7d5, a5a5a5, 262626, 003e75, 3a4453, 5ea226, af0f5b, c58c00, 0081a5, 425ea9, 138677, 7f7f7f, 0c0c0c, 00192e, 272d37, 3f6c19, 750a3d, 835d00, 00566e, 2c3f71, 0c594f',\n    columns: 10\n  },\n  flow: {\n    colors: 'ffffff, 000000, dbf5f9, 04617b, 0f6fc6, 009dd9, 0bd0d9, 10cf9b, 7cca62, a5c249, f2f2f2, 7f7f7f, b2e9f2, b4ecfc, c7e2fa, c4eeff, c9fafc, c9faed, e4f4df, edf2da, d8d8d8, 595959, 76d9e8, 6adafa, 90c6f6, 89deff, 93f5f9, 94f6db, cae9c0, dbe6b6, bfbfbf, 3f3f3f, 21b2c8, 20c8f7, 59a9f2, 4fceff, 5df0f6, 5ff2ca, b0dfa0, c9da91, a5a5a5, 262626, 105964, 02485c, 0b5394, 0075a2, 089ca2, 0b9b74, 54a838, 7e9532, 7f7f7f, 0c0c0c, 062328, 01303d, 073763, 004e6c, 05686c, 07674d, 387025, 546321',\n    columns: 10\n  },\n  hardcover: {\n    colors: 'ffffff, 000000, ece9c6, 895d1d, 873624, d6862d, d0be40, 877f6c, 972109, aeb795, f2f2f2, 7f7f7f, e1dca5, f2e0c6, f0d0c9, f6e6d5, f5f2d8, e7e5e1, fbc7bc, eef0e9, d8d8d8, 595959, d0c974, e6c28d, e2a293, eeceaa, ece5b2, cfccc3, f78f7a, dee2d4, bfbfbf, 3f3f3f, a29a36, daa454, d4735e, e6b681, e2d88c, b7b2a5, f35838, ced3bf, a5a5a5, 262626, 514d1b, 664515, 65281a, a2641f, a39428, 655f50, 711806, 879464, 7f7f7f, 0c0c0c, 201e0a, 442e0e, 431b11, 6c4315, 6d621a, 433f35, 4b1004, 5a6243',\n    columns: 10\n  },\n  trek: {\n    colors: 'ffffff, 000000, fbeec9, 4e3b30, f0a22e, a5644e, b58b80, c3986d, a19574, c17529, f2f2f2, 7f7f7f, f7e09e, e1d6cf, fcecd5, eddfda, f0e7e5, f3eae1, ece9e3, f5e3d1, d8d8d8, 595959, f3cc5f, c4ad9f, f9d9ab, dcc0b6, e1d0cc, e7d5c4, d9d4c7, ebc7a3, bfbfbf, 3f3f3f, d29f0f, a78470, f6c781, cba092, d2b9b2, dbc1a7, c6bfab, e1ac76, a5a5a5, 262626, 694f07, 3a2c24, c87d0e, 7b4b3a, 926255, a17242, 7b7153, 90571e, 7f7f7f, 0c0c0c, 2a1f03, 271d18, 855309, 523226, 614138, 6b4c2c, 524b37, 603a14',\n    columns: 10\n  },\n  verve: {\n    colors: 'ffffff, 000000, d2d2d2, 666666, ff388c, e40059, 9c007f, 68007f, 005bd3, 00349e, f2f2f2, 7f7f7f, bdbdbd, e0e0e0, ffd7e8, ffc6dc, ffb8f1, f1b2ff, c3dcff, b8cfff, d8d8d8, 595959, 9d9d9d, c1c1c1, ffafd1, ff8eba, ff71e4, e365ff, 87baff, 72a0ff, bfbfbf, 3f3f3f, 696969, a3a3a3, ff87ba, ff5597, ff2ad7, d519ff, 4b98ff, 2b71ff, a5a5a5, 262626, 343434, 4c4c4c, e90062, ab0042, 75005f, 4e005f, 00449e, 002676, 7f7f7f, 0c0c0c, 151515, 333333, 9b0041, 72002c, 4e003f, 34003f, 002d69, 00194f',\n    columns: 10\n  },\n  monochrome: {\n    colors: '000000, 1a1a1a, 333333, 4d4d4d, 666666, 808080, 999999, b3b3b3, cccccc, e6e6e6, f2f2f2, ffffff',\n    columns: 12\n  },\n  accessible: {\n    colors: 'black, grey, darkred, red, darkorange, gold, green, blue, darkblue, purple, white, darkgrey, saddlebrown, pink, orange, yellow, lightgreen, lightskyblue, lightblue, mediumpurple',\n    columns: 10\n  }\n};\nvar DEFAULT_PRESET = 'office';\nvar DEFAULT_ACCESSIBLE_PRESET = 'accessible';\nvar serial = 0;\n/**\n * Represents the [Kendo UI ColorPicker component for Angular]({% slug overview_colorpicker %}).\n * Designed to replace the `<input type=\"color\">` HTML5 tag which is not widely supported in browsers.\n */\n\nvar ColorPickerComponent = /*#__PURE__*/function () {\n  function ColorPickerComponent(popupService, localizationService) {\n    var _this52 = this;\n\n    _classCallCheck(this, ColorPickerComponent);\n\n    this.popupService = popupService;\n    /**\n     * @hidden\n     */\n\n    this.hostClasses = true;\n    /**\n     * @hidden\n     */\n\n    this.focusableId = \"k-colorpicker-\".concat(serial++);\n    /**\n     * Sets what view the ColorPicker will render in the popup.\n     */\n\n    this.view = 'gradient';\n    /**\n     * Sets the read-only state of the ColorPicker.\n     */\n\n    this.readonly = false;\n    /**\n     * Sets the disabled state of the ColorPicker.\n     */\n\n    this.disabled = false;\n    /**\n     * Specifies the output format of the ColorPicker.\n     * The input value may be in a different format. However, it will be parsed into the output `format`\n     * after the component processes it.\n     *\n     * If the `gradient` view is used with the `opacity` option set to true, this setting will be ignored and `rgba` will be used instead.\n     *\n     * The supported values are:\n     * * `rgba` (default)\n     * * `hex`\n     * * [`name`](https://www.w3.org/wiki/CSS/Properties/color/keywords)\n     */\n\n    this.format = 'rgba';\n    /**\n     * Fires each time the value is changed.\n     */\n\n    this.valueChange = new EventEmitter();\n    /**\n     * Fires each time the popup is about to open.\n     * This event is preventable. If you cancel it, the popup will remain closed.\n     */\n\n    this.open = new EventEmitter();\n    /**\n     * Fires each time the popup is about to close.\n     * This event is preventable. If you cancel it, the popup will remain open.\n     */\n\n    this.close = new EventEmitter();\n    /**\n     * Fires each time ColorPicker is focused.\n     */\n\n    this.onFocus = new EventEmitter();\n    /**\n     * Fires each time the ColorPicker is blurred.\n     */\n\n    this.onBlur = new EventEmitter();\n    /**\n     * Fires each time the left side of the ColorPicker wrapper is clicked.\n     * The event is triggered regardless of whether a ColorPicker icon is set or not.\n     *\n     * The [`ActiveColorClickEvent`]({% slug api_inputs_activecolorclickevent %}) event provides the option to prevent the popup opening.\n     */\n\n    this.activeColorClick = new EventEmitter();\n    this._tabindex = 0;\n    this._popupSettings = {\n      animate: true\n    };\n    this._paletteSettings = {};\n    this._gradientSettings = {\n      opacity: true,\n      clearButton: false\n    };\n\n    this.notifyNgTouched = function () {};\n\n    this.notifyNgChanged = function () {};\n\n    this.dynamicRTLSubscription = localizationService.changes.subscribe(function (_ref16) {\n      var rtl = _ref16.rtl;\n      _this52.direction = rtl ? 'rtl' : 'ltr';\n    });\n  }\n  /**\n   * Specifies the value of the initially selected color.\n   */\n\n\n  _createClass(ColorPickerComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var defaultPreset = this.format !== 'name' ? DEFAULT_PRESET : DEFAULT_ACCESSIBLE_PRESET;\n      var settingsPalette = this._paletteSettings.palette;\n      var presetColumns = typeof settingsPalette === 'string' && PALETTEPRESETS[settingsPalette] ? PALETTEPRESETS[settingsPalette].columns : undefined;\n      this._paletteSettings = {\n        palette: settingsPalette || defaultPreset,\n        tileSize: this._paletteSettings.tileSize || 24,\n        columns: this._paletteSettings.columns || presetColumns || 10\n      };\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes.format && changes.format.currentValue === 'name') {\n        this.view = 'palette';\n      }\n\n      if (this.view === 'gradient' && this.gradientSettings.opacity) {\n        this.format = 'rgba';\n        this.value = parseColor$1(this.value, this.format);\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.closePopup();\n\n      if (this.dynamicRTLSubscription) {\n        this.dynamicRTLSubscription.unsubscribe();\n      }\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"handleWrapperClick\",\n    value: function handleWrapperClick() {\n      this.toggleWithEvents(!this.isOpen);\n      this.focus();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"handleActiveColorClick\",\n    value: function handleActiveColorClick() {\n      this.focus();\n      var event = new ActiveColorClickEvent(this.value);\n      this.activeColorClick.emit(event);\n\n      if (!event.isOpenPrevented() || this.isOpen) {\n        this.handleWrapperClick();\n      }\n    }\n    /**\n     * Focuses the wrapper of the ColorPicker.\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (this.disabled) {\n        return;\n      }\n\n      this.wrapper.nativeElement.focus();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"handleWrapperFocus\",\n    value: function handleWrapperFocus() {\n      if (isPresent(this.palette)) {\n        this.palette.nativeElement.focus();\n      }\n\n      if (this.isFocused) {\n        return;\n      }\n\n      this.isFocused = true;\n      this.onFocus.emit();\n    }\n    /**\n     * Blurs the ColorPicker.\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.wrapper.nativeElement.blur();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"handleWrapperBlur\",\n    value: function handleWrapperBlur() {\n      if (this.isOpen) {\n        return;\n      }\n\n      this.isFocused = false;\n      this.onBlur.emit();\n      this.notifyNgTouched();\n    }\n    /**\n     * Clears the color value of the ColorPicker.\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (!isPresent(this.value)) {\n        return;\n      }\n\n      this._value = undefined;\n      this.notifyNgChanged(undefined);\n    }\n    /**\n     * Toggles the popup of the ColorPicker.\n     * Does not trigger the `open` and `close` events of the component.\n     *\n     * @param open An optional parameter. Specifies whether the popup will be opened or closed.\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle(open) {\n      if (this.disabled || this.readonly) {\n        return;\n      }\n\n      this.closePopup();\n      open = isPresent(open) ? open : !this.isOpen;\n\n      if (open) {\n        this.openPopup();\n      }\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"handleValueChange\",\n    value: function handleValueChange(color, closePopup) {\n      var parsedColor = parseColor$1(color, this.format);\n      var valueChange = parsedColor !== this.value;\n\n      if (closePopup) {\n        this.toggleWithEvents(false);\n        this.focus();\n      }\n\n      if (valueChange) {\n        this.value = parsedColor;\n        this.valueChange.emit(parsedColor);\n        this.notifyNgChanged(parsedColor);\n      }\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"handlePopupBlur\",\n    value: function handlePopupBlur(event) {\n      var focusInPopupElement = this.popupRef.popupElement.contains(event.relatedTarget);\n      var wrapperClicked = event.relatedTarget === this.wrapper.nativeElement;\n\n      if (!this.isFocused || wrapperClicked || focusInPopupElement) {\n        return;\n      }\n\n      this.isFocused = false;\n      this.onBlur.emit();\n      this.notifyNgTouched();\n      this.toggleWithEvents(false);\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.notifyNgChanged = fn;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.notifyNgTouched = fn;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"handleWrapperKeyDown\",\n    value: function handleWrapperKeyDown(event) {\n      if (event.keyCode === Keys.ArrowDown || event.keyCode === Keys.Enter) {\n        event.preventDefault();\n        this.toggleWithEvents(true);\n      }\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"handlePopupKeyDown\",\n    value: function handlePopupKeyDown(keyCode) {\n      if (keyCode === Keys.Tab || keyCode === Keys.Escape) {\n        this.toggleWithEvents(false);\n        this.wrapper.nativeElement.focus();\n      }\n    }\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty.\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return false;\n    }\n  }, {\n    key: \"toggleWithEvents\",\n    value: function toggleWithEvents(open) {\n      var sameState = this.isOpen === open;\n\n      if (this.disabled || this.readonly || sameState) {\n        return;\n      }\n\n      var eventArgs = new PreventableEvent();\n      open ? this.open.emit(eventArgs) : this.close.emit(eventArgs);\n\n      if (!eventArgs.isDefaultPrevented()) {\n        this.toggle(open);\n      }\n    }\n  }, {\n    key: \"openPopup\",\n    value: function openPopup() {\n      var _this53 = this;\n\n      var horizontalAlign = this.direction === \"rtl\" ? \"right\" : \"left\";\n      var anchorPosition = {\n        horizontal: horizontalAlign,\n        vertical: \"bottom\"\n      };\n      var popupPosition = {\n        horizontal: horizontalAlign,\n        vertical: \"top\"\n      };\n      this.popupRef = this.popupService.open({\n        anchor: this.wrapper,\n        animate: this.popupSettings.animate,\n        appendTo: this.popupSettings.appendTo,\n        popupAlign: popupPosition,\n        anchorAlign: anchorPosition,\n        popupClass: 'k-colorpicker-popup',\n        content: this.popupTemplate,\n        positionMode: 'absolute'\n      });\n      this.popupRef.popupAnchorViewportLeave.subscribe(function () {\n        _this53.toggleWithEvents(false);\n\n        if (!_this53.isOpen) {\n          _this53.wrapper.nativeElement.focus({\n            preventScroll: true\n          });\n        }\n      });\n    }\n  }, {\n    key: \"closePopup\",\n    value: function closePopup() {\n      if (!this.isOpen) {\n        return;\n      }\n\n      this.popupRef.close();\n      this.popupRef = null;\n      this.palette = null;\n    }\n  }, {\n    key: \"value\",\n    set: function set(value) {\n      this._value = parseColor$1(value, this.format);\n    },\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * Configures the popup of the ColorPicker.\n     */\n\n  }, {\n    key: \"popupSettings\",\n    set: function set(value) {\n      this._popupSettings = Object.assign(this._popupSettings, value);\n    },\n    get: function get() {\n      return this._popupSettings;\n    }\n    /**\n     * Configures the palette that is displayed in the ColorPicker popup.\n     */\n\n  }, {\n    key: \"paletteSettings\",\n    set: function set(value) {\n      this._paletteSettings = Object.assign(this._paletteSettings, value);\n    },\n    get: function get() {\n      return this._paletteSettings;\n    }\n    /**\n     * Configures the gradient that is displayed in the ColorPicker popup.\n     */\n\n  }, {\n    key: \"gradientSettings\",\n    set: function set(value) {\n      this._gradientSettings = Object.assign(this._gradientSettings, value);\n    },\n    get: function get() {\n      return this._gradientSettings;\n    }\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n\n  }, {\n    key: \"tabindex\",\n    set: function set(value) {\n      var tabindex = Number(value);\n      var defaultValue = 0;\n      this._tabindex = !isNaN(tabindex) ? tabindex : defaultValue;\n    },\n    get: function get() {\n      return !this.disabled ? this._tabindex : undefined;\n    }\n    /**\n     * Indicates whether the ColorPicker popup is open.\n     */\n\n  }, {\n    key: \"isOpen\",\n    get: function get() {\n      return isPresent(this.popupRef);\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"iconStyles\",\n    get: function get() {\n      if (this.iconClass) {\n        return this.iconClass;\n      }\n\n      if (this.icon) {\n        return \"k-icon k-i-\".concat(this.icon);\n      }\n    }\n  }]);\n\n  return ColorPickerComponent;\n}();\n\nColorPickerComponent.ɵfac = function ColorPickerComponent_Factory(t) {\n  return new (t || ColorPickerComponent)(ɵngcc0.ɵɵdirectiveInject(PopupService), ɵngcc0.ɵɵdirectiveInject(LocalizationService));\n};\n\nColorPickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: ColorPickerComponent,\n  selectors: [[\"kendo-colorpicker\"]],\n  viewQuery: function ColorPickerComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c45, true, ElementRef);\n      ɵngcc0.ɵɵviewQuery(_c46, true, ViewContainerRef);\n      ɵngcc0.ɵɵviewQuery(_c21, true);\n      ɵngcc0.ɵɵviewQuery(_c47, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.palette = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.wrapper = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.popupTemplate = _t.first);\n    }\n  },\n  hostVars: 5,\n  hostBindings: function ColorPickerComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"dir\", ctx.direction);\n      ɵngcc0.ɵɵclassProp(\"k-widget\", ctx.hostClasses)(\"k-colorpicker\", ctx.hostClasses);\n    }\n  },\n  inputs: {\n    focusableId: \"focusableId\",\n    view: \"view\",\n    readonly: \"readonly\",\n    disabled: \"disabled\",\n    format: \"format\",\n    value: \"value\",\n    popupSettings: \"popupSettings\",\n    paletteSettings: \"paletteSettings\",\n    gradientSettings: \"gradientSettings\",\n    tabindex: \"tabindex\",\n    icon: \"icon\",\n    iconClass: \"iconClass\"\n  },\n  outputs: {\n    valueChange: \"valueChange\",\n    open: \"open\",\n    close: \"close\",\n    onFocus: \"focus\",\n    onBlur: \"blur\",\n    activeColorClick: \"activeColorClick\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return ColorPickerComponent;\n    })\n  }, {\n    provide: KendoInput,\n    useExisting: forwardRef(function () {\n      return ColorPickerComponent;\n    })\n  }, LocalizationService, {\n    provide: L10N_PREFIX,\n    useValue: 'kendo.colorpicker'\n  }]), ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 10,\n  vars: 10,\n  consts: [[\"role\", \"listbox\", 3, \"ngClass\", \"id\", \"focus\", \"blur\", \"mousedown\", \"keydown\"], [\"wrapper\", \"\"], [\"class\", \"k-selected-color\", 3, \"background-color\", \"click\", 4, \"ngIf\"], [\"class\", \"k-tool-icon\", 3, \"ngClass\", \"click\", 4, \"ngIf\"], [1, \"k-select\", 3, \"click\"], [1, \"k-icon\", \"k-i-arrow-s\"], [\"popupTemplate\", \"\"], [\"container\", \"\"], [1, \"k-selected-color\", 3, \"click\"], [\"class\", \"k-icon k-i-line\", 4, \"ngIf\"], [1, \"k-icon\", \"k-i-line\"], [1, \"k-tool-icon\", 3, \"ngClass\", \"click\"], [1, \"k-selected-color\"], [\"kendoFocusOnDomReady\", \"\", 3, \"value\", \"format\", \"opacity\", \"clearButton\", \"focusout\", \"valueChange\", \"keydown\", 4, \"ngIf\"], [\"kendoFocusOnDomReady\", \"\", 3, \"palette\", \"columns\", \"tileSize\", \"format\", \"value\", \"blur\", \"cellSelection\", \"mousedown\", \"keydown\", 4, \"ngIf\"], [\"kendoFocusOnDomReady\", \"\", 3, \"value\", \"format\", \"opacity\", \"clearButton\", \"focusout\", \"valueChange\", \"keydown\"], [\"kendoFocusOnDomReady\", \"\", 3, \"palette\", \"columns\", \"tileSize\", \"format\", \"value\", \"blur\", \"cellSelection\", \"mousedown\", \"keydown\"], [\"palette\", \"\"]],\n  template: function ColorPickerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"span\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"focus\", function ColorPickerComponent_Template_span_focus_0_listener() {\n        return ctx.handleWrapperFocus();\n      })(\"blur\", function ColorPickerComponent_Template_span_blur_0_listener() {\n        return ctx.handleWrapperBlur();\n      })(\"mousedown\", function ColorPickerComponent_Template_span_mousedown_0_listener($event) {\n        return $event.preventDefault();\n      })(\"keydown\", function ColorPickerComponent_Template_span_keydown_0_listener($event) {\n        return ctx.handleWrapperKeyDown($event);\n      });\n      ɵngcc0.ɵɵtemplate(2, ColorPickerComponent_span_2_Template, 2, 3, \"span\", 2);\n      ɵngcc0.ɵɵtemplate(3, ColorPickerComponent_span_3_Template, 2, 3, \"span\", 3);\n      ɵngcc0.ɵɵelementStart(4, \"span\", 4);\n      ɵngcc0.ɵɵlistener(\"click\", function ColorPickerComponent_Template_span_click_4_listener() {\n        return ctx.handleWrapperClick();\n      });\n      ɵngcc0.ɵɵelement(5, \"span\", 5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(6, ColorPickerComponent_ng_template_6_Template, 2, 2, \"ng-template\", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);\n      ɵngcc0.ɵɵelementContainer(8, null, 7);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction3(6, _c48, !ctx.disabled, ctx.disabled, ctx.isFocused))(\"id\", ctx.focusableId);\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isOpen)(\"tabindex\", ctx.tabindex);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.iconStyles);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.iconStyles);\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc2.NgClass, ɵngcc2.NgIf, ColorGradientComponent, FocusOnDomReadyDirective, ColorPaletteComponent];\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\n\nColorPickerComponent.ctorParameters = function () {\n  return [{\n    type: PopupService\n  }, {\n    type: LocalizationService\n  }];\n};\n\nColorPickerComponent.propDecorators = {\n  hostClasses: [{\n    type: HostBinding,\n    args: ['class.k-widget']\n  }, {\n    type: HostBinding,\n    args: ['class.k-colorpicker']\n  }],\n  direction: [{\n    type: HostBinding,\n    args: ['attr.dir']\n  }],\n  focusableId: [{\n    type: Input\n  }],\n  view: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  format: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  popupSettings: [{\n    type: Input\n  }],\n  paletteSettings: [{\n    type: Input\n  }],\n  gradientSettings: [{\n    type: Input\n  }],\n  icon: [{\n    type: Input\n  }],\n  iconClass: [{\n    type: Input\n  }],\n  tabindex: [{\n    type: Input\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  open: [{\n    type: Output\n  }],\n  close: [{\n    type: Output\n  }],\n  onFocus: [{\n    type: Output,\n    args: ['focus']\n  }],\n  onBlur: [{\n    type: Output,\n    args: ['blur']\n  }],\n  activeColorClick: [{\n    type: Output\n  }],\n  container: [{\n    type: ViewChild,\n    args: ['container', {\n      read: ViewContainerRef\n    }]\n  }],\n  wrapper: [{\n    type: ViewChild,\n    args: ['wrapper']\n  }],\n  popupTemplate: [{\n    type: ViewChild,\n    args: ['popupTemplate']\n  }],\n  palette: [{\n    type: ViewChild,\n    args: ['palette', {\n      read: ElementRef\n    }]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ColorPickerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'kendo-colorpicker',\n      providers: [{\n        multi: true,\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return ColorPickerComponent;\n        })\n      }, {\n        provide: KendoInput,\n        useExisting: forwardRef(function () {\n          return ColorPickerComponent;\n        })\n      }, LocalizationService, {\n        provide: L10N_PREFIX,\n        useValue: 'kendo.colorpicker'\n      }],\n      template: \"\\n        <span\\n            #wrapper\\n            [ngClass]=\\\"{\\n                'k-picker-wrap': true,\\n                'k-state-default': !this.disabled,\\n                'k-state-disabled': this.disabled,\\n                'k-state-focused': this.isFocused\\n            }\\\"\\n            role=\\\"listbox\\\"\\n            [attr.aria-expanded]=\\\"isOpen\\\"\\n            [id]=\\\"focusableId\\\"\\n            [attr.tabindex]=\\\"tabindex\\\"\\n            (focus)=\\\"handleWrapperFocus()\\\"\\n            (blur)=\\\"handleWrapperBlur()\\\"\\n            (mousedown)=\\\"$event.preventDefault()\\\"\\n            (keydown)=\\\"handleWrapperKeyDown($event)\\\"\\n        >\\n            <span *ngIf=\\\"!iconStyles\\\" class=\\\"k-selected-color\\\" [style.background-color]=\\\"value\\\" (click)=\\\"handleActiveColorClick()\\\">\\n                <span class=\\\"k-icon k-i-line\\\" *ngIf=\\\"!value\\\"></span>\\n            </span>\\n            <span *ngIf=\\\"iconStyles\\\" class=\\\"k-tool-icon\\\" [ngClass]=\\\"iconStyles\\\" (click)=\\\"handleActiveColorClick()\\\">\\n                <span class=\\\"k-selected-color\\\" [style.background-color]=\\\"value\\\"></span>\\n            </span>\\n            <span class=\\\"k-select\\\" (click)=\\\"handleWrapperClick()\\\">\\n                <span class=\\\"k-icon k-i-arrow-s\\\"></span>\\n            </span>\\n        </span>\\n        <ng-template #popupTemplate>\\n            <kendo-colorgradient\\n                *ngIf=\\\"view === 'gradient' || view === 'combo'\\\"\\n                kendoFocusOnDomReady\\n                [value]=\\\"value\\\"\\n                [format]=\\\"format\\\"\\n                [opacity]=\\\"gradientSettings.opacity\\\"\\n                [clearButton]=\\\"gradientSettings.clearButton\\\"\\n                (focusout)=\\\"handlePopupBlur($event)\\\"\\n                (valueChange)=\\\"handleValueChange($event, false)\\\"\\n                (keydown)=\\\"handlePopupKeyDown($event.keyCode)\\\"\\n            >\\n            </kendo-colorgradient>\\n            <kendo-colorpalette\\n                #palette\\n                *ngIf=\\\"view === 'palette' || view === 'combo'\\\"\\n                kendoFocusOnDomReady\\n                [palette]=\\\"paletteSettings.palette\\\"\\n                [columns]=\\\"paletteSettings.columns\\\"\\n                [tileSize]=\\\"paletteSettings.tileSize\\\"\\n                [format]=\\\"format\\\"\\n                [value]=\\\"value\\\"\\n                (blur)=\\\"handlePopupBlur($event)\\\"\\n                (cellSelection)=\\\"handleValueChange($event, true)\\\"\\n                (mousedown)=\\\"$event.preventDefault()\\\"\\n                (keydown)=\\\"handlePopupKeyDown($event.keyCode)\\\"\\n            >\\n            </kendo-colorpalette>\\n        </ng-template>\\n        <ng-container #container></ng-container>\\n    \"\n    }]\n  }], function () {\n    return [{\n      type: PopupService\n    }, {\n      type: LocalizationService\n    }];\n  }, {\n    hostClasses: [{\n      type: HostBinding,\n      args: ['class.k-widget']\n    }, {\n      type: HostBinding,\n      args: ['class.k-colorpicker']\n    }],\n    focusableId: [{\n      type: Input\n    }],\n    view: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    open: [{\n      type: Output\n    }],\n    close: [{\n      type: Output\n    }],\n    onFocus: [{\n      type: Output,\n      args: ['focus']\n    }],\n    onBlur: [{\n      type: Output,\n      args: ['blur']\n    }],\n    activeColorClick: [{\n      type: Output\n    }],\n    direction: [{\n      type: HostBinding,\n      args: ['attr.dir']\n    }],\n    value: [{\n      type: Input\n    }],\n    popupSettings: [{\n      type: Input\n    }],\n    paletteSettings: [{\n      type: Input\n    }],\n    gradientSettings: [{\n      type: Input\n    }],\n    tabindex: [{\n      type: Input\n    }],\n    palette: [{\n      type: ViewChild,\n      args: ['palette', {\n        read: ElementRef\n      }]\n    }],\n    icon: [{\n      type: Input\n    }],\n    iconClass: [{\n      type: Input\n    }],\n    container: [{\n      type: ViewChild,\n      args: ['container', {\n        read: ViewContainerRef\n      }]\n    }],\n    wrapper: [{\n      type: ViewChild,\n      args: ['wrapper']\n    }],\n    popupTemplate: [{\n      type: ViewChild,\n      args: ['popupTemplate']\n    }]\n  });\n})();\n/**\n * @hidden\n */\n\n\nvar ColorPaletteService = /*#__PURE__*/function () {\n  function ColorPaletteService() {\n    _classCallCheck(this, ColorPaletteService);\n\n    this.colorRows = [];\n  }\n\n  _createClass(ColorPaletteService, [{\n    key: \"setColorMatrix\",\n    value: function setColorMatrix(palette, columns) {\n      this.colorRows = [];\n\n      if (!(isPresent(palette) && palette.length)) {\n        return;\n      }\n\n      columns = columns || palette.length;\n\n      for (var start = 0; start < palette.length; start += columns) {\n        var row = palette.slice(start, columns + start);\n        this.colorRows.push(row);\n      }\n    }\n  }, {\n    key: \"getCellCoordsFor\",\n    value: function getCellCoordsFor(color) {\n      if (!isPresent(color)) {\n        return;\n      }\n\n      for (var row = 0; row < this.colorRows.length; row++) {\n        for (var col = 0; col < this.colorRows[row].length; col++) {\n          if (this.colorRows[row][col] === color) {\n            return {\n              row: row,\n              col: col\n            };\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getColorAt\",\n    value: function getColorAt(cellCoords) {\n      if (!(isPresent(cellCoords) && isPresent(this.colorRows[cellCoords.row]))) {\n        return;\n      }\n\n      return this.colorRows[cellCoords.row][cellCoords.col];\n    }\n  }, {\n    key: \"getNextCell\",\n    value: function getNextCell(current, horizontalStep, verticalStep) {\n      if (!(isPresent(current) && isPresent(current.row) && isPresent(current.col))) {\n        return {\n          row: 0,\n          col: 0\n        };\n      }\n\n      var row = this.clampIndex(current.row + verticalStep, this.colorRows.length - 1);\n      var col = this.clampIndex(current.col + horizontalStep, this.colorRows[row].length - 1);\n      return {\n        row: row,\n        col: col\n      };\n    }\n  }, {\n    key: \"clampIndex\",\n    value: function clampIndex(index, max) {\n      var minArrayIndex = 0;\n\n      if (index < minArrayIndex) {\n        return minArrayIndex;\n      }\n\n      if (index > max) {\n        return max;\n      }\n\n      return index;\n    }\n  }]);\n\n  return ColorPaletteService;\n}();\n\nColorPaletteService.ɵfac = function ColorPaletteService_Factory(t) {\n  return new (t || ColorPaletteService)();\n};\n\nColorPaletteService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: ColorPaletteService,\n  factory: ColorPaletteService.ɵfac\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ColorPaletteService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\nvar DEFAULT_TILE_SIZE = 24;\nvar DEFAULT_COLUMNS_COUNT = 10;\nvar DEFAULT_PRESET$1 = 'office';\nvar DEFAULT_ACCESSIBLE_PRESET$1 = 'accessible';\nvar serial$1 = 0;\n/**\n * The ColorPalette component provides a set of predefined palette presets and enables you to implement a custom color palette.\n * The ColorPalette is independently used by `kendo-colorpicker` and can be directly added to the page.\n */\n\nvar ColorPaletteComponent = /*#__PURE__*/function () {\n  function ColorPaletteComponent(service, localizationService) {\n    var _this54 = this;\n\n    _classCallCheck(this, ColorPaletteComponent);\n\n    this.service = service;\n    /**\n     * @hidden\n     */\n\n    this.id = \"k-colorpalette-\".concat(serial$1++);\n    /**\n     * Specifies the output format of the ColorPaletteComponent.\n     * The input value may be in a different format. However, it will be parsed into the output `format`\n     * after the component processes it.\n     *\n     * The supported values are:\n     * * (Default) `hex`\n     * * `rgba`\n     * * `name`\n     */\n\n    this.format = 'hex';\n    /**\n     * Specifies the size of a color cell.\n     *\n     * The possible values are:\n     * * (Default) `tileSize = 24`\n     * * `{ width: number, height: number }`\n     */\n\n    this.tileSize = {\n      width: DEFAULT_TILE_SIZE,\n      height: DEFAULT_TILE_SIZE\n    };\n    /**\n     * Fires each time the color selection is changed.\n     */\n\n    this.selectionChange = new EventEmitter();\n    /**\n     * Fires each time the value is changed.\n     */\n\n    this.valueChange = new EventEmitter();\n    /**\n     * Fires each time the user selects a cell with the mouse or presses `Enter`.\n     *\n     * @hidden\n     */\n\n    this.cellSelection = new EventEmitter();\n    /**\n     * @hidden\n     */\n\n    this.hostClasses = true;\n    this._tabindex = 0;\n\n    this.notifyNgTouched = function () {};\n\n    this.notifyNgChanged = function () {};\n\n    this.dynamicRTLSubscription = localizationService.changes.subscribe(function (_ref17) {\n      var rtl = _ref17.rtl;\n      _this54.direction = rtl ? 'rtl' : 'ltr';\n    });\n  }\n  /**\n   * @hidden\n   */\n\n\n  _createClass(ColorPaletteComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this.colorRows.length === 0) {\n        var defaultPreset = this.format !== 'name' ? DEFAULT_PRESET$1 : DEFAULT_ACCESSIBLE_PRESET$1;\n        this.palette = this.palette || defaultPreset;\n        this.setRows();\n        this.focusedCell = this.service.getCellCoordsFor(this.value);\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.dynamicRTLSubscription) {\n        this.dynamicRTLSubscription.unsubscribe();\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes.palette || changes.columns) {\n        this.setRows();\n      }\n\n      if (changes.palette || changes.value || changes.columns) {\n        this.focusedCell = this.service.getCellCoordsFor(this.value);\n      }\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"handleKeydown\",\n    value: function handleKeydown(event) {\n      var isRTL = this.direction === 'rtl';\n\n      switch (event.keyCode) {\n        case Keys.ArrowDown:\n          this.handleCellNavigation(0, 1);\n          break;\n\n        case Keys.ArrowUp:\n          this.handleCellNavigation(0, -1);\n          break;\n\n        case Keys.ArrowRight:\n          this.handleCellNavigation(isRTL ? -1 : 1, 0);\n          break;\n\n        case Keys.ArrowLeft:\n          this.handleCellNavigation(isRTL ? 1 : -1, 0);\n          break;\n\n        case Keys.Enter:\n          this.handleEnter();\n          break;\n\n        default:\n          return;\n      }\n\n      event.preventDefault();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"handleHostBlur\",\n    value: function handleHostBlur() {\n      this.notifyNgTouched();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"handleCellSelection\",\n    value: function handleCellSelection(value, focusedCell) {\n      if (this.readonly) {\n        return;\n      }\n\n      this.focusedCell = focusedCell;\n      var parsedColor = parseColor$1(value, this.format, false);\n      this.cellSelection.emit(parsedColor);\n\n      if (this.value !== parsedColor) {\n        this.value = parsedColor;\n        this.valueChange.emit(parsedColor);\n        this.notifyNgChanged(parsedColor);\n      }\n\n      if (this.selection !== parsedColor) {\n        this.selection = parsedColor;\n        this.selectionChange.emit(parsedColor);\n      }\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n      this.focusedCell = this.service.getCellCoordsFor(this.value);\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.notifyNgChanged = fn;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.notifyNgTouched = fn;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty.\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return false;\n    }\n    /**\n     * Clears the color value of the ColorPalette.\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.focusedCell = null;\n\n      if (isPresent(this.value)) {\n        this._value = undefined;\n        this.notifyNgChanged(undefined);\n      }\n    }\n  }, {\n    key: \"setRows\",\n    value: function setRows() {\n      if (!isPresent(this.palette)) {\n        return;\n      }\n\n      this.columns = this.columns || DEFAULT_COLUMNS_COUNT;\n      this.service.setColorMatrix(this.palette, this.columns);\n    }\n  }, {\n    key: \"handleCellNavigation\",\n    value: function handleCellNavigation(horizontalStep, verticalStep) {\n      if (this.readonly) {\n        return;\n      }\n\n      this.focusedCell = this.service.getNextCell(this.focusedCell, horizontalStep, verticalStep);\n      var selection = this.service.getColorAt(this.focusedCell);\n\n      if (this.selection !== selection) {\n        this.selection = selection;\n        this.selectionChange.emit(selection);\n      }\n    }\n  }, {\n    key: \"handleEnter\",\n    value: function handleEnter() {\n      if (!isPresent(this.focusedCell)) {\n        return;\n      }\n\n      var selectedColor = this.service.getColorAt(this.focusedCell);\n      this.handleCellSelection(selectedColor, this.focusedCell);\n    }\n  }, {\n    key: \"paletteId\",\n    get: function get() {\n      return this.id;\n    }\n    /**\n     * Specifies the value of the initially selected color.\n     */\n\n  }, {\n    key: \"value\",\n    set: function set(value) {\n      this._value = parseColor$1(value, this.format);\n    },\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * Specifies the number of columns that will be displayed.\n     * Defaults to `10`.\n     */\n\n  }, {\n    key: \"columns\",\n    set: function set(value) {\n      var minColumnsCount = 1;\n      this._columns = value > minColumnsCount ? value : minColumnsCount;\n    },\n    get: function get() {\n      return this._columns;\n    }\n    /**\n     * The color palette that will be displayed.\n     *\n     * The supported values are:\n     * * The name of the predefined palette preset (for example, `office`, `basic`, and `apex`).\n     * * A string with comma-separated colors.\n     * * A string array.\n     */\n\n  }, {\n    key: \"palette\",\n    set: function set(value) {\n      var _this55 = this;\n\n      if (!isPresent(value)) {\n        value = DEFAULT_PRESET$1;\n      }\n\n      if (typeof value === 'string' && isPresent(PALETTEPRESETS[value])) {\n        this.columns = this.columns || PALETTEPRESETS[value].columns;\n        value = PALETTEPRESETS[value].colors;\n      }\n\n      var colors = typeof value === 'string' ? value.split(',') : value;\n      this._palette = colors.map(function (color) {\n        return parseColor$1(color, _this55.format, false);\n      });\n    },\n    get: function get() {\n      return this._palette;\n    }\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n\n  }, {\n    key: \"tabindex\",\n    set: function set(value) {\n      var tabindex = Number(value);\n      var defaultValue = 0;\n      this._tabindex = !isNaN(tabindex) ? tabindex : defaultValue;\n    },\n    get: function get() {\n      return !this.disabled ? this._tabindex : undefined;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"tileLayout\",\n    get: function get() {\n      if (typeof this.tileSize !== 'number') {\n        return this.tileSize;\n      }\n\n      return {\n        width: this.tileSize,\n        height: this.tileSize\n      };\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"colorRows\",\n    get: function get() {\n      return this.service.colorRows;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"hostTabindex\",\n    get: function get() {\n      return this.tabindex;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"disabledClass\",\n    get: function get() {\n      return this.disabled;\n    }\n  }]);\n\n  return ColorPaletteComponent;\n}();\n\nColorPaletteComponent.ɵfac = function ColorPaletteComponent_Factory(t) {\n  return new (t || ColorPaletteComponent)(ɵngcc0.ɵɵdirectiveInject(ColorPaletteService), ɵngcc0.ɵɵdirectiveInject(LocalizationService));\n};\n\nColorPaletteComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: ColorPaletteComponent,\n  selectors: [[\"kendo-colorpalette\"]],\n  hostVars: 9,\n  hostBindings: function ColorPaletteComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function ColorPaletteComponent_keydown_HostBindingHandler($event) {\n        return ctx.handleKeydown($event);\n      })(\"blur\", function ColorPaletteComponent_blur_HostBindingHandler() {\n        return ctx.handleHostBlur();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"dir\", ctx.direction)(\"id\", ctx.paletteId)(\"tabindex\", ctx.hostTabindex);\n      ɵngcc0.ɵɵclassProp(\"k-widget\", ctx.hostClasses)(\"k-colorpalette\", ctx.hostClasses)(\"k-state-disabled\", ctx.disabledClass);\n    }\n  },\n  inputs: {\n    id: \"id\",\n    format: \"format\",\n    tileSize: \"tileSize\",\n    value: \"value\",\n    columns: \"columns\",\n    palette: \"palette\",\n    tabindex: \"tabindex\",\n    disabled: \"disabled\",\n    readonly: \"readonly\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\",\n    valueChange: \"valueChange\",\n    cellSelection: \"cellSelection\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return ColorPaletteComponent;\n    }) // tslint:disable-line:no-forward-ref\n\n  }, {\n    provide: KendoInput,\n    useExisting: forwardRef(function () {\n      return ColorPaletteComponent;\n    })\n  }, ColorPaletteService, LocalizationService, {\n    provide: L10N_PREFIX,\n    useValue: 'kendo.colorpalette'\n  }]), ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 4,\n  vars: 1,\n  consts: [[\"role\", \"grid\"], [\"role\", \"presentation\", 1, \"k-palette\", \"k-reset\"], [\"role\", \"row\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"row\"], [\"class\", \"k-item\", 3, \"k-state-selected\", \"ngStyle\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"k-item\", 3, \"ngStyle\", \"click\"]],\n  template: function ColorPaletteComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"table\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"tbody\");\n      ɵngcc0.ɵɵtemplate(3, ColorPaletteComponent_tr_3_Template, 2, 1, \"tr\", 2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.colorRows);\n    }\n  },\n  directives: [ɵngcc2.NgForOf, ɵngcc2.NgStyle],\n  encapsulation: 2\n});\n/** @nocollapse */\n\nColorPaletteComponent.ctorParameters = function () {\n  return [{\n    type: ColorPaletteService\n  }, {\n    type: LocalizationService\n  }];\n};\n\nColorPaletteComponent.propDecorators = {\n  direction: [{\n    type: HostBinding,\n    args: ['attr.dir']\n  }],\n  paletteId: [{\n    type: HostBinding,\n    args: ['attr.id']\n  }],\n  id: [{\n    type: Input\n  }],\n  format: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  columns: [{\n    type: Input\n  }],\n  palette: [{\n    type: Input\n  }],\n  tabindex: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }],\n  tileSize: [{\n    type: Input\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  cellSelection: [{\n    type: Output\n  }],\n  hostTabindex: [{\n    type: HostBinding,\n    args: ['attr.tabindex']\n  }],\n  hostClasses: [{\n    type: HostBinding,\n    args: ['class.k-widget']\n  }, {\n    type: HostBinding,\n    args: ['class.k-colorpalette']\n  }],\n  disabledClass: [{\n    type: HostBinding,\n    args: ['class.k-state-disabled']\n  }],\n  handleKeydown: [{\n    type: HostListener,\n    args: ['keydown', ['$event']]\n  }],\n  handleHostBlur: [{\n    type: HostListener,\n    args: ['blur']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ColorPaletteComponent, [{\n    type: Component,\n    args: [{\n      selector: 'kendo-colorpalette',\n      providers: [{\n        multi: true,\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return ColorPaletteComponent;\n        }) // tslint:disable-line:no-forward-ref\n\n      }, {\n        provide: KendoInput,\n        useExisting: forwardRef(function () {\n          return ColorPaletteComponent;\n        })\n      }, ColorPaletteService, LocalizationService, {\n        provide: L10N_PREFIX,\n        useValue: 'kendo.colorpalette'\n      }],\n      template: \"\\n        <div role=\\\"grid\\\">\\n            <table class=\\\"k-palette k-reset\\\" role=\\\"presentation\\\">\\n                <tbody>\\n                    <tr role=\\\"row\\\" *ngFor=\\\"let row of colorRows; let rowIndex = index\\\">\\n                        <td *ngFor=\\\"let color of row; let colIndex = index\\\"\\n                            [class.k-state-selected]=\\\"focusedCell?.row === rowIndex && focusedCell?.col === colIndex\\\"\\n                            class=\\\"k-item\\\"\\n                            [attr.value]=\\\"color\\\"\\n                            (click)=\\\"handleCellSelection(color, { row: rowIndex, col: colIndex })\\\"\\n                            [ngStyle]=\\\"{\\n                                backgroundColor: color,\\n                                width: tileLayout.width + 'px',\\n                                height: tileLayout.height + 'px',\\n                                minWidth: tileLayout.width + 'px'\\n                            }\\\">\\n                        </td>\\n                    </tr>\\n                </tbody>\\n            </table>\\n        </div>\\n    \"\n    }]\n  }], function () {\n    return [{\n      type: ColorPaletteService\n    }, {\n      type: LocalizationService\n    }];\n  }, {\n    id: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    tileSize: [{\n      type: Input\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    cellSelection: [{\n      type: Output\n    }],\n    hostClasses: [{\n      type: HostBinding,\n      args: ['class.k-widget']\n    }, {\n      type: HostBinding,\n      args: ['class.k-colorpalette']\n    }],\n    direction: [{\n      type: HostBinding,\n      args: ['attr.dir']\n    }],\n    paletteId: [{\n      type: HostBinding,\n      args: ['attr.id']\n    }],\n    value: [{\n      type: Input\n    }],\n    columns: [{\n      type: Input\n    }],\n    palette: [{\n      type: Input\n    }],\n    tabindex: [{\n      type: Input\n    }],\n    hostTabindex: [{\n      type: HostBinding,\n      args: ['attr.tabindex']\n    }],\n    disabledClass: [{\n      type: HostBinding,\n      args: ['class.k-state-disabled']\n    }],\n\n    /**\n     * @hidden\n     */\n    handleKeydown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }],\n\n    /**\n     * @hidden\n     */\n    handleHostBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }],\n    disabled: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }]\n  });\n})();\n\nvar DEFAULT_OUTPUT_FORMAT = 'rgba';\nvar DEFAULT_BACKGROUND_COLOR = 'rgba(255, 0, 0, 1)';\nvar serial$2 = 0;\n/**\n * The ColorGradient component enables smooth color transitions and provides options for selecting specific colors over the drag handle.\n * The ColorGradient is independently used by `kendo-colorpicker` and can be directly added to the page.\n */\n\nvar ColorGradientComponent = /*#__PURE__*/function () {\n  function ColorGradientComponent(host, ngZone, renderer, cdr, localizationService) {\n    var _this56 = this;\n\n    _classCallCheck(this, ColorGradientComponent);\n\n    this.host = host;\n    this.ngZone = ngZone;\n    this.renderer = renderer;\n    this.cdr = cdr;\n    this.hostClasses = true;\n    /**\n     * @hidden\n     */\n\n    this.id = \"k-colorgradient-\".concat(serial$2++);\n    /**\n     * Defines whether the alpha slider will be displayed.\n     */\n\n    this.opacity = true;\n    /**\n     * Sets the disabled state of the ColorGradient.\n     */\n\n    this.disabled = false;\n    /**\n     * Sets the read-only state of the ColorGradient.\n     */\n\n    this.readonly = false;\n    /**\n     * Specifies whether the ColorGradient should display a 'Clear color' button.\n     */\n\n    this.clearButton = false;\n    /**\n     * Fires each time the user selects a new color.\n     */\n\n    this.valueChange = new EventEmitter();\n    /**\n     * @hidden\n     */\n\n    this.backgroundColor = DEFAULT_BACKGROUND_COLOR;\n    /**\n     * @hidden\n     *\n     * Represents the currently selected `hue`, `saturation`, `value`, and `alpha` values.\n     * The values are initially set in `ngOnInit` or in `ngOnChanges` and are\n     * updated on moving the drag handle or the sliders.\n     */\n\n    this.hsva = {};\n    /**\n     * Specifies the output format of the ColorGradientComponent.\n     * The input value may be in a different format. However, it will be parsed into the output `format`\n     * after the component processes it.\n     *\n     * The supported values are:\n     * * (Default) `rgba`\n     * * `hex`\n     */\n\n    this.format = DEFAULT_OUTPUT_FORMAT;\n    this._tabindex = 0;\n    this.listeners = [];\n\n    this.notifyNgChanged = function () {};\n\n    this.notifyNgTouched = function () {};\n\n    this.dynamicRTLSubscription = localizationService.changes.subscribe(function (_ref18) {\n      var rtl = _ref18.rtl;\n      _this56.direction = rtl ? 'rtl' : 'ltr';\n    });\n  }\n\n  _createClass(ColorGradientComponent, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this.updateUI();\n      this.cdr.detectChanges();\n      this.addEventListeners();\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (isChanged('value', changes) && !this.isFocused) {\n        this.updateUI();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.listeners.forEach(function (removeListener) {\n        return removeListener();\n      });\n\n      if (this.dynamicRTLSubscription) {\n        this.dynamicRTLSubscription.unsubscribe();\n      }\n    }\n    /**\n     * Focuses the component.\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (this.disabled) {\n        return;\n      }\n\n      this.host.nativeElement.focus();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.handleValueChange(undefined);\n      this.updateUI();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"handleDragPress\",\n    value: function handleDragPress(args) {\n      if (this.disabled || this.readonly || !isPresent(args.originalEvent)) {\n        return;\n      }\n\n      this.focus();\n      args.originalEvent.preventDefault();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"onHandleDrag\",\n    value: function onHandleDrag(args) {\n      if (this.disabled || this.readonly) {\n        return;\n      }\n\n      this.renderer.addClass(this.gradientWrapper.nativeElement, 'k-dragging');\n      this.changePosition(args);\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"onHandleRelease\",\n    value: function onHandleRelease() {\n      if (this.disabled || this.readonly) {\n        return;\n      }\n\n      this.renderer.removeClass(this.gradientWrapper.nativeElement, 'k-dragging');\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"changePosition\",\n    value: function changePosition(position) {\n      var _this57 = this;\n\n      if (this.disabled || this.readonly) {\n        return;\n      }\n\n      this.ngZone.run(function () {\n        return _this57.moveDragHandle(position);\n      });\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"handleHueSliderChange\",\n    value: function handleHueSliderChange(hue) {\n      this.handleValueChange(getColorFromHSV(this.hsva));\n      this.backgroundColor = getColorFromHue(hue);\n      this.setAlphaSliderBackground(this.backgroundColor);\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"handleAlphaSliderChange\",\n    value: function handleAlphaSliderChange(alpha) {\n      this.hsva.a = alpha / 100;\n      this.handleValueChange(getColorFromHSV(this.hsva));\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"handleInputsValueChange\",\n    value: function handleInputsValueChange(color) {\n      var parsed = parseColor$1(color, this.format);\n\n      if (this.value !== parsed) {\n        this.handleValueChange(parsed);\n        this.updateUI();\n      }\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n\n      if (isPresent(this.gradientWrapper)) {\n        this.updateUI();\n      }\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.notifyNgChanged = fn;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.notifyNgTouched = fn;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty.\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return false;\n    }\n  }, {\n    key: \"moveDragHandle\",\n    value: function moveDragHandle(position) {\n      var deltaX = position.clientX - this.gradientRect.left;\n      var deltaY = position.clientY - this.gradientRect.top;\n      var top = fitIntoBounds(deltaY, 0, this.gradientRect.height);\n      var left = fitIntoBounds(deltaX, 0, this.gradientRect.width);\n      this.setDragHandleElementPosition(top, left);\n      this.hsva.s = left / this.gradientRect.width;\n      this.hsva.v = 1 - top / this.gradientRect.height;\n      this.handleValueChange(getColorFromHSV(this.hsva));\n      this.setAlphaSliderBackground(getColorFromHSV(Object.assign({}, this.hsva, {\n        a: 1\n      })));\n    }\n  }, {\n    key: \"updateUI\",\n    value: function updateUI() {\n      if (!isDocumentAvailable()) {\n        return;\n      }\n\n      this.hsva = this.value ? getHSV(this.value) : {\n        h: 0,\n        s: 0,\n        v: 1,\n        a: 1\n      };\n      var top = (1 - this.hsva.v) * this.gradientRect.height;\n      var left = this.hsva.s * this.gradientRect.width;\n      this.setDragHandleElementPosition(top, left);\n      this.backgroundColor = getColorFromHue(this.hsva.h);\n      this.setAlphaSliderBackground(this.backgroundColor);\n    }\n  }, {\n    key: \"handleValueChange\",\n    value: function handleValueChange(color) {\n      if (this.value === color) {\n        return;\n      }\n\n      this.value = color;\n      this.valueChange.emit(color);\n      this.notifyNgChanged(color);\n    }\n  }, {\n    key: \"setDragHandleElementPosition\",\n    value: function setDragHandleElementPosition(top, left) {\n      var dragHandle = this.dragHandle.nativeElement;\n      this.renderer.setStyle(dragHandle, 'top', \"\".concat(top, \"px\"));\n      this.renderer.setStyle(dragHandle, 'left', \"\".concat(left, \"px\"));\n    }\n  }, {\n    key: \"setAlphaSliderBackground\",\n    value: function setAlphaSliderBackground(backgroundColor) {\n      if (!isPresent(this.alphaSlider)) {\n        return;\n      }\n\n      var sliderTrack = this.alphaSlider.track.nativeElement;\n      this.renderer.setStyle(sliderTrack, 'background', \"linear-gradient(to top, transparent, \".concat(backgroundColor, \")\"));\n    }\n  }, {\n    key: \"addEventListeners\",\n    value: function addEventListeners() {\n      var _this58 = this;\n\n      this.ngZone.runOutsideAngular(function () {\n        var focusOutListener = _this58.renderer.listen(_this58.host.nativeElement, 'focusout', function (event) {\n          if (!containsFocus(_this58.host.nativeElement, event.relatedTarget) && isUntouched(_this58.host)) {\n            _this58.ngZone.run(function () {\n              return _this58.notifyNgTouched();\n            });\n          }\n        });\n\n        _this58.listeners.push(focusOutListener);\n      });\n    }\n  }, {\n    key: \"disabledClass\",\n    get: function get() {\n      return this.disabled;\n    }\n  }, {\n    key: \"hostTabindex\",\n    get: function get() {\n      return this.tabindex;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"gradientId\",\n    get: function get() {\n      return this.id;\n    }\n    /**\n     * Specifies the value of the initially selected color.\n     */\n\n  }, {\n    key: \"value\",\n    set: function set(value) {\n      this._value = parseColor$1(value, this.format);\n    },\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n\n  }, {\n    key: \"tabindex\",\n    set: function set(value) {\n      var tabindex = Number(value);\n      var defaultValue = 0;\n      this._tabindex = !isNaN(tabindex) ? tabindex : defaultValue;\n    },\n    get: function get() {\n      return !this.disabled ? this._tabindex : undefined;\n    }\n    /**\n     * Indicates whether the ColorGradient or any of its content is focused.\n     */\n\n  }, {\n    key: \"isFocused\",\n    get: function get() {\n      if (!(isDocumentAvailable() && isPresent(this.host))) {\n        return false;\n      }\n\n      return this.host.nativeElement === document.activeElement || this.host.nativeElement.contains(document.activeElement);\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"alphaSliderValue\",\n    get: function get() {\n      // setting the initial value to undefined to force the slider to recalculate the height of the slider track on the next cdr run\n      if (!(isPresent(this.hsva) && isPresent(this.hsva.a))) {\n        return;\n      }\n\n      return this.hsva.a * 100;\n    }\n  }, {\n    key: \"gradientRect\",\n    get: function get() {\n      return this.gradientWrapper.nativeElement.getBoundingClientRect();\n    }\n  }]);\n\n  return ColorGradientComponent;\n}();\n\nColorGradientComponent.ɵfac = function ColorGradientComponent_Factory(t) {\n  return new (t || ColorGradientComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(LocalizationService));\n};\n\nColorGradientComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: ColorGradientComponent,\n  selectors: [[\"kendo-colorgradient\"]],\n  viewQuery: function ColorGradientComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c50, true);\n      ɵngcc0.ɵɵviewQuery(_c51, true);\n      ɵngcc0.ɵɵviewQuery(_c52, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.alphaSlider = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.gradientWrapper = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dragHandle = _t.first);\n    }\n  },\n  hostVars: 9,\n  hostBindings: function ColorGradientComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"dir\", ctx.direction)(\"tabindex\", ctx.hostTabindex)(\"id\", ctx.gradientId);\n      ɵngcc0.ɵɵclassProp(\"k-widget\", ctx.hostClasses)(\"k-flatcolorpicker\", ctx.hostClasses)(\"k-state-disabled\", ctx.disabledClass);\n    }\n  },\n  inputs: {\n    id: \"id\",\n    opacity: \"opacity\",\n    disabled: \"disabled\",\n    readonly: \"readonly\",\n    clearButton: \"clearButton\",\n    format: \"format\",\n    value: \"value\",\n    tabindex: \"tabindex\"\n  },\n  outputs: {\n    valueChange: \"valueChange\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return ColorGradientComponent;\n    })\n  }, {\n    provide: KendoInput,\n    useExisting: forwardRef(function () {\n      return ColorGradientComponent;\n    })\n  }, LocalizationService, {\n    provide: L10N_PREFIX,\n    useValue: 'kendo.colorgradient'\n  }]), ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 11,\n  vars: 21,\n  consts: [[1, \"k-hbox\", \"k-hsv-wrap\"], [1, \"k-hsv-rectangle\"], [\"kendoDraggable\", \"\", 1, \"k-hsv-gradient\", 3, \"click\", \"kendoPress\", \"kendoDrag\", \"kendoRelease\"], [\"gradientWrapper\", \"\"], [1, \"k-draghandle\"], [\"dragHandle\", \"\"], [\"class\", \"k-clear-color k-button k-bare k-button-icon\", 3, \"click\", 4, \"ngIf\"], [1, \"k-hue-slider\", 3, \"disabled\", \"readonly\", \"showButtons\", \"tickPlacement\", \"vertical\", \"min\", \"max\", \"smallStep\", \"largeStep\", \"value\", \"valueChange\"], [\"class\", \"k-alpha-slider\", 3, \"disabled\", \"readonly\", \"showButtons\", \"tickPlacement\", \"vertical\", \"min\", \"max\", \"smallStep\", \"largeStep\", \"value\", \"valueChange\", 4, \"ngIf\"], [3, \"opacity\", \"value\", \"disabled\", \"readonly\", \"valueChange\"], [1, \"k-clear-color\", \"k-button\", \"k-bare\", \"k-button-icon\", 3, \"click\"], [1, \"k-icon\", \"k-i-reset-color\"], [1, \"k-alpha-slider\", 3, \"disabled\", \"readonly\", \"showButtons\", \"tickPlacement\", \"vertical\", \"min\", \"max\", \"smallStep\", \"largeStep\", \"value\", \"valueChange\"], [\"alphaSlider\", \"\"]],\n  template: function ColorGradientComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n      ɵngcc0.ɵɵlistener(\"click\", function ColorGradientComponent_Template_div_click_2_listener($event) {\n        return ctx.changePosition($event);\n      })(\"kendoPress\", function ColorGradientComponent_Template_div_kendoPress_2_listener($event) {\n        return ctx.handleDragPress($event);\n      })(\"kendoDrag\", function ColorGradientComponent_Template_div_kendoDrag_2_listener($event) {\n        return ctx.onHandleDrag($event);\n      })(\"kendoRelease\", function ColorGradientComponent_Template_div_kendoRelease_2_listener() {\n        return ctx.onHandleRelease();\n      });\n      ɵngcc0.ɵɵelement(4, \"div\", 4, 5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"div\");\n      ɵngcc0.ɵɵtemplate(7, ColorGradientComponent_span_7_Template, 2, 0, \"span\", 6);\n      ɵngcc0.ɵɵelementStart(8, \"kendo-slider\", 7);\n      ɵngcc0.ɵɵlistener(\"valueChange\", function ColorGradientComponent_Template_kendo_slider_valueChange_8_listener($event) {\n        return ctx.hsva.h = $event;\n      })(\"valueChange\", function ColorGradientComponent_Template_kendo_slider_valueChange_8_listener($event) {\n        return ctx.handleHueSliderChange($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(9, ColorGradientComponent_kendo_slider_9_Template, 2, 10, \"kendo-slider\", 8);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(10, \"kendo-colorinput\", 9);\n      ɵngcc0.ɵɵlistener(\"valueChange\", function ColorGradientComponent_Template_kendo_colorinput_valueChange_10_listener($event) {\n        return ctx.handleInputsValueChange($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵstyleProp(\"background-color\", ctx.backgroundColor);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵclassMapInterpolate1(\"k-hbox k-sliders-wrap \", ctx.clearButton ? \"k-sliders-wrap-clearable\" : \"\", \"\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.clearButton);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled)(\"readonly\", ctx.readonly)(\"showButtons\", false)(\"tickPlacement\", \"none\")(\"vertical\", true)(\"min\", 0)(\"max\", 360)(\"smallStep\", 5)(\"largeStep\", 10)(\"value\", ctx.hsva.h);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.opacity && ctx.format === \"rgba\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"opacity\", ctx.opacity)(\"value\", ctx.value)(\"disabled\", ctx.disabled)(\"readonly\", ctx.readonly);\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.DraggableDirective, ɵngcc2.NgIf, SliderComponent, ColorInputComponent];\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\n\nColorGradientComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: Renderer2\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: LocalizationService\n  }];\n};\n\nColorGradientComponent.propDecorators = {\n  hostClasses: [{\n    type: HostBinding,\n    args: ['class.k-widget']\n  }, {\n    type: HostBinding,\n    args: ['class.k-flatcolorpicker']\n  }],\n  disabledClass: [{\n    type: HostBinding,\n    args: ['class.k-state-disabled']\n  }],\n  hostTabindex: [{\n    type: HostBinding,\n    args: ['attr.tabindex']\n  }],\n  gradientId: [{\n    type: HostBinding,\n    args: ['attr.id']\n  }],\n  id: [{\n    type: Input\n  }],\n  direction: [{\n    type: HostBinding,\n    args: ['attr.dir']\n  }],\n  opacity: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }],\n  clearButton: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  tabindex: [{\n    type: Input\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  format: [{\n    type: Input\n  }],\n  alphaSlider: [{\n    type: ViewChild,\n    args: ['alphaSlider']\n  }],\n  gradientWrapper: [{\n    type: ViewChild,\n    args: ['gradientWrapper']\n  }],\n  dragHandle: [{\n    type: ViewChild,\n    args: ['dragHandle']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ColorGradientComponent, [{\n    type: Component,\n    args: [{\n      selector: 'kendo-colorgradient',\n      providers: [{\n        multi: true,\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return ColorGradientComponent;\n        })\n      }, {\n        provide: KendoInput,\n        useExisting: forwardRef(function () {\n          return ColorGradientComponent;\n        })\n      }, LocalizationService, {\n        provide: L10N_PREFIX,\n        useValue: 'kendo.colorgradient'\n      }],\n      template: \"\\n        <div class=\\\"k-hbox k-hsv-wrap\\\">\\n            <div class=\\\"k-hsv-rectangle\\\" [style.background-color]=\\\"backgroundColor\\\">\\n                <div\\n                    #gradientWrapper\\n                    kendoDraggable\\n                    class=\\\"k-hsv-gradient\\\"\\n                    (click)=\\\"changePosition($event)\\\"\\n                    (kendoPress)=\\\"handleDragPress($event)\\\"\\n                    (kendoDrag)=\\\"onHandleDrag($event)\\\"\\n                    (kendoRelease)=\\\"onHandleRelease()\\\">\\n                    <div\\n                        #dragHandle\\n                        class=\\\"k-draghandle\\\"\\n                    >\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"k-hbox k-sliders-wrap {{ clearButton ? 'k-sliders-wrap-clearable' : '' }}\\\">\\n                <span class=\\\"k-clear-color k-button k-bare k-button-icon\\\" *ngIf=\\\"clearButton\\\" (click)=\\\"reset()\\\">\\n                    <span class=\\\"k-icon k-i-reset-color\\\"></span>\\n                </span>\\n                <kendo-slider\\n                    class=\\\"k-hue-slider\\\"\\n                    [disabled]=\\\"disabled\\\"\\n                    [readonly]=\\\"readonly\\\"\\n                    [showButtons]=\\\"false\\\"\\n                    [tickPlacement]=\\\"'none'\\\"\\n                    [vertical]=\\\"true\\\"\\n                    [min]=\\\"0\\\"\\n                    [max]=\\\"360\\\"\\n                    [smallStep]=\\\"5\\\"\\n                    [largeStep]=\\\"10\\\"\\n                    [(value)]=\\\"hsva.h\\\"\\n                    (valueChange)=\\\"handleHueSliderChange($event)\\\"\\n                >\\n                </kendo-slider>\\n                <kendo-slider\\n                    *ngIf=\\\"opacity && format === 'rgba'\\\"\\n                    #alphaSlider\\n                    class=\\\"k-alpha-slider\\\"\\n                    [disabled]=\\\"disabled\\\"\\n                    [readonly]=\\\"readonly\\\"\\n                    [showButtons]=\\\"false\\\"\\n                    [tickPlacement]=\\\"'none'\\\"\\n                    [vertical]=\\\"true\\\"\\n                    [min]=\\\"0\\\"\\n                    [max]=\\\"100\\\"\\n                    [smallStep]=\\\"1\\\"\\n                    [largeStep]=\\\"10\\\"\\n                    [value]=\\\"alphaSliderValue\\\"\\n                    (valueChange)=\\\"handleAlphaSliderChange($event)\\\"\\n                >\\n                </kendo-slider>\\n            </div>\\n        </div>\\n        <kendo-colorinput\\n            [opacity]=\\\"opacity\\\"\\n            [value]=\\\"value\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [readonly]=\\\"readonly\\\"\\n            (valueChange)=\\\"handleInputsValueChange($event)\\\"\\n        >\\n        </kendo-colorinput>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: NgZone\n    }, {\n      type: Renderer2\n    }, {\n      type: ChangeDetectorRef\n    }, {\n      type: LocalizationService\n    }];\n  }, {\n    hostClasses: [{\n      type: HostBinding,\n      args: ['class.k-widget']\n    }, {\n      type: HostBinding,\n      args: ['class.k-flatcolorpicker']\n    }],\n    id: [{\n      type: Input\n    }],\n    opacity: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    clearButton: [{\n      type: Input\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    format: [{\n      type: Input\n    }],\n    direction: [{\n      type: HostBinding,\n      args: ['attr.dir']\n    }],\n    disabledClass: [{\n      type: HostBinding,\n      args: ['class.k-state-disabled']\n    }],\n    hostTabindex: [{\n      type: HostBinding,\n      args: ['attr.tabindex']\n    }],\n    gradientId: [{\n      type: HostBinding,\n      args: ['attr.id']\n    }],\n    value: [{\n      type: Input\n    }],\n    tabindex: [{\n      type: Input\n    }],\n    alphaSlider: [{\n      type: ViewChild,\n      args: ['alphaSlider']\n    }],\n    gradientWrapper: [{\n      type: ViewChild,\n      args: ['gradientWrapper']\n    }],\n    dragHandle: [{\n      type: ViewChild,\n      args: ['dragHandle']\n    }]\n  });\n})();\n/**\n * @hidden\n */\n\n\nvar ColorInputComponent = /*#__PURE__*/function () {\n  function ColorInputComponent(host) {\n    _classCallCheck(this, ColorInputComponent);\n\n    this.host = host;\n    /**\n     * Sets whether the alpha slider will be shown.\n     */\n\n    this.opacity = true;\n    /**\n     * Sets the disabled state of the ColorInput.\n     */\n\n    this.disabled = false;\n    /**\n     * Sets the read-only state of the ColorInput.\n     */\n\n    this.readonly = false;\n    /**\n     * Emits a parsed rgba string color.\n     */\n\n    this.valueChange = new EventEmitter();\n    this.colorInputClass = true;\n    /**\n     * The rgba inputs values.\n     */\n\n    this.rgba = {};\n  }\n  /**\n   * Indicates whether any of the inputs are focused.\n   */\n\n\n  _createClass(ColorInputComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (isPresent(changes.value) && !this.isFocused) {\n        this.hex = parseColor$1(this.value, 'hex');\n        this.rgba = getRGBA(this.value);\n        this.rgba.a = parseColor$1(this.value, 'rgba') ? this.rgba.a : 1;\n      }\n    }\n  }, {\n    key: \"handleRgbaValueChange\",\n    value: function handleRgbaValueChange() {\n      var color = getColorFromRGBA(this.rgba);\n\n      if (!this.rgbaInputValid || color === this.value) {\n        return;\n      }\n\n      this.value = color;\n      this.rgba = getRGBA(this.value);\n      this.hex = parseColor$1(color, 'hex');\n      this.valueChange.emit(color);\n    }\n  }, {\n    key: \"handleHexValueChange\",\n    value: function handleHexValueChange(hex) {\n      this.hex = hex;\n      var color = parseColor$1(hex, 'rgba');\n\n      if (!isPresent(color) || color === this.value) {\n        return;\n      }\n\n      this.value = color;\n      this.rgba = getRGBA(color);\n      this.valueChange.emit(color);\n    }\n  }, {\n    key: \"handleRgbaInputBlur\",\n    value: function handleRgbaInputBlur() {\n      if (!this.rgbaInputValid) {\n        this.rgba = getRGBA(this.value);\n      }\n    }\n  }, {\n    key: \"handleHexInputBlur\",\n    value: function handleHexInputBlur() {\n      this.hex = parseColor$1(this.value, 'hex');\n    }\n  }, {\n    key: \"isFocused\",\n    get: function get() {\n      if (!(isDocumentAvailable() && isPresent(this.host))) {\n        return false;\n      }\n\n      var activeElement = document.activeElement;\n      return this.host.nativeElement.contains(activeElement);\n    }\n    /**\n     * Indicates whether any of the rgba inputs have value.\n     */\n\n  }, {\n    key: \"rgbaInputValid\",\n    get: function get() {\n      var _this59 = this;\n\n      return Object.keys(this.rgba).every(function (key) {\n        return isPresent(_this59.rgba[key]);\n      });\n    }\n  }]);\n\n  return ColorInputComponent;\n}();\n\nColorInputComponent.ɵfac = function ColorInputComponent_Factory(t) {\n  return new (t || ColorInputComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef));\n};\n\nColorInputComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: ColorInputComponent,\n  selectors: [[\"kendo-colorinput\"]],\n  hostVars: 2,\n  hostBindings: function ColorInputComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"k-colorinputs\", ctx.colorInputClass);\n    }\n  },\n  inputs: {\n    opacity: \"opacity\",\n    disabled: \"disabled\",\n    readonly: \"readonly\",\n    value: \"value\"\n  },\n  outputs: {\n    valueChange: \"valueChange\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 17,\n  vars: 32,\n  consts: [[1, \"k-hbox\", \"k-gradient-values\"], [\"placeholder\", \"no color\", 1, \"k-textbox\", \"k-hex-value\", 3, \"disabled\", \"readonly\", \"value\", \"blur\", \"input\"], [\"hexInput\", \"\"], [\"placeholder\", \"R\", 3, \"disabled\", \"readonly\", \"min\", \"max\", \"value\", \"autoCorrect\", \"spinners\", \"format\", \"decimals\", \"valueChange\", \"blur\"], [\"placeholder\", \"G\", 3, \"disabled\", \"readonly\", \"min\", \"max\", \"value\", \"autoCorrect\", \"spinners\", \"format\", \"decimals\", \"valueChange\", \"blur\"], [\"placeholder\", \"B\", 3, \"disabled\", \"readonly\", \"min\", \"max\", \"value\", \"autoCorrect\", \"spinners\", \"format\", \"decimals\", \"valueChange\", \"blur\"], [\"placeholder\", \"A\", 3, \"disabled\", \"readonly\", \"min\", \"max\", \"value\", \"autoCorrect\", \"spinners\", \"step\", \"format\", \"decimals\", \"valueChange\", \"blur\", 4, \"ngIf\"], [1, \"k-hex-value\"], [4, \"ngIf\"], [\"placeholder\", \"A\", 3, \"disabled\", \"readonly\", \"min\", \"max\", \"value\", \"autoCorrect\", \"spinners\", \"step\", \"format\", \"decimals\", \"valueChange\", \"blur\"]],\n  template: function ColorInputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      var _r7 = ɵngcc0.ɵɵgetCurrentView();\n\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"input\", 1, 2);\n      ɵngcc0.ɵɵlistener(\"blur\", function ColorInputComponent_Template_input_blur_1_listener() {\n        return ctx.handleHexInputBlur();\n      })(\"input\", function ColorInputComponent_Template_input_input_1_listener() {\n        ɵngcc0.ɵɵrestoreView(_r7);\n\n        var _r0 = ɵngcc0.ɵɵreference(2);\n\n        return ctx.handleHexValueChange(_r0.value);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(3, \"kendo-numerictextbox\", 3);\n      ɵngcc0.ɵɵlistener(\"valueChange\", function ColorInputComponent_Template_kendo_numerictextbox_valueChange_3_listener($event) {\n        return ctx.rgba.r = $event;\n      })(\"blur\", function ColorInputComponent_Template_kendo_numerictextbox_blur_3_listener() {\n        return ctx.handleRgbaInputBlur();\n      })(\"valueChange\", function ColorInputComponent_Template_kendo_numerictextbox_valueChange_3_listener() {\n        return ctx.handleRgbaValueChange();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"kendo-numerictextbox\", 4);\n      ɵngcc0.ɵɵlistener(\"valueChange\", function ColorInputComponent_Template_kendo_numerictextbox_valueChange_4_listener($event) {\n        return ctx.rgba.g = $event;\n      })(\"blur\", function ColorInputComponent_Template_kendo_numerictextbox_blur_4_listener() {\n        return ctx.handleRgbaInputBlur();\n      })(\"valueChange\", function ColorInputComponent_Template_kendo_numerictextbox_valueChange_4_listener() {\n        return ctx.handleRgbaValueChange();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(5, \"kendo-numerictextbox\", 5);\n      ɵngcc0.ɵɵlistener(\"valueChange\", function ColorInputComponent_Template_kendo_numerictextbox_valueChange_5_listener($event) {\n        return ctx.rgba.b = $event;\n      })(\"blur\", function ColorInputComponent_Template_kendo_numerictextbox_blur_5_listener() {\n        return ctx.handleRgbaInputBlur();\n      })(\"valueChange\", function ColorInputComponent_Template_kendo_numerictextbox_valueChange_5_listener() {\n        return ctx.handleRgbaValueChange();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(6, ColorInputComponent_kendo_numerictextbox_6_Template, 1, 10, \"kendo-numerictextbox\", 6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(7, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(8, \"div\", 7);\n      ɵngcc0.ɵɵtext(9, \"hex\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(10, \"div\");\n      ɵngcc0.ɵɵtext(11, \"r\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(12, \"div\");\n      ɵngcc0.ɵɵtext(13, \"g\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(14, \"div\");\n      ɵngcc0.ɵɵtext(15, \"b\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(16, ColorInputComponent_div_16_Template, 2, 0, \"div\", 8);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled)(\"readonly\", ctx.readonly)(\"value\", ctx.hex || \"\");\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled)(\"readonly\", ctx.readonly)(\"min\", 0)(\"max\", 255)(\"value\", ctx.rgba.r)(\"autoCorrect\", true)(\"spinners\", false)(\"format\", \"n\")(\"decimals\", 0);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled)(\"readonly\", ctx.readonly)(\"min\", 0)(\"max\", 255)(\"value\", ctx.rgba.g)(\"autoCorrect\", true)(\"spinners\", false)(\"format\", \"n\")(\"decimals\", 0);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled)(\"readonly\", ctx.readonly)(\"min\", 0)(\"max\", 255)(\"value\", ctx.rgba.b)(\"autoCorrect\", true)(\"spinners\", false)(\"format\", \"n\")(\"decimals\", 0);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.opacity);\n      ɵngcc0.ɵɵadvance(10);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.opacity);\n    }\n  },\n  directives: [NumericTextBoxComponent, ɵngcc2.NgIf],\n  encapsulation: 2\n});\n/** @nocollapse */\n\nColorInputComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nColorInputComponent.propDecorators = {\n  value: [{\n    type: Input\n  }],\n  opacity: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  colorInputClass: [{\n    type: HostBinding,\n    args: ['class.k-colorinputs']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ColorInputComponent, [{\n    type: Component,\n    args: [{\n      selector: 'kendo-colorinput',\n      template: \"\\n        <div class=\\\"k-hbox k-gradient-values\\\">\\n            <input\\n                #hexInput\\n                class=\\\"k-textbox k-hex-value\\\"\\n                [disabled]=\\\"disabled\\\"\\n                [readonly]=\\\"readonly\\\"\\n                [value]=\\\"hex || ''\\\"\\n                placeholder=\\\"no color\\\"\\n                (blur)=\\\"handleHexInputBlur()\\\"\\n                (input)=\\\"handleHexValueChange(hexInput.value)\\\"\\n            />\\n            <kendo-numerictextbox\\n                [disabled]=\\\"disabled\\\"\\n                [readonly]=\\\"readonly\\\"\\n                [min]=\\\"0\\\"\\n                [max]=\\\"255\\\"\\n                placeholder=\\\"R\\\"\\n                [(value)]=\\\"rgba.r\\\"\\n                [autoCorrect]=\\\"true\\\"\\n                [spinners]=\\\"false\\\"\\n                [format]=\\\"'n'\\\"\\n                [decimals]=\\\"0\\\"\\n                (blur)=\\\"handleRgbaInputBlur()\\\"\\n                (valueChange)=\\\"handleRgbaValueChange()\\\"\\n            >\\n            </kendo-numerictextbox>\\n            <kendo-numerictextbox\\n                [disabled]=\\\"disabled\\\"\\n                [readonly]=\\\"readonly\\\"\\n                [min]=\\\"0\\\"\\n                [max]=\\\"255\\\"\\n                placeholder=\\\"G\\\"\\n                [(value)]=\\\"rgba.g\\\"\\n                [autoCorrect]=\\\"true\\\"\\n                [spinners]=\\\"false\\\"\\n                [format]=\\\"'n'\\\"\\n                [decimals]=\\\"0\\\"\\n                (blur)=\\\"handleRgbaInputBlur()\\\"\\n                (valueChange)=\\\"handleRgbaValueChange()\\\"\\n            >\\n            </kendo-numerictextbox>\\n            <kendo-numerictextbox\\n                [disabled]=\\\"disabled\\\"\\n                [readonly]=\\\"readonly\\\"\\n                [min]=\\\"0\\\"\\n                [max]=\\\"255\\\"\\n                placeholder=\\\"B\\\"\\n                [(value)]=\\\"rgba.b\\\"\\n                [autoCorrect]=\\\"true\\\"\\n                [spinners]=\\\"false\\\"\\n                [format]=\\\"'n'\\\"\\n                [decimals]=\\\"0\\\"\\n                (blur)=\\\"handleRgbaInputBlur()\\\"\\n                (valueChange)=\\\"handleRgbaValueChange()\\\"\\n            >\\n            </kendo-numerictextbox>\\n            <kendo-numerictextbox\\n                *ngIf=\\\"opacity\\\"\\n                [disabled]=\\\"disabled\\\"\\n                [readonly]=\\\"readonly\\\"\\n                [min]=\\\"0\\\"\\n                [max]=\\\"1\\\"\\n                placeholder=\\\"A\\\"\\n                [(value)]=\\\"rgba.a\\\"\\n                [autoCorrect]=\\\"true\\\"\\n                [spinners]=\\\"false\\\"\\n                [step]=\\\"0.01\\\"\\n                [format]=\\\"'n2'\\\"\\n                [decimals]=\\\"2\\\"\\n                (blur)=\\\"handleRgbaInputBlur()\\\"\\n                (valueChange)=\\\"handleRgbaValueChange()\\\"\\n            >\\n            </kendo-numerictextbox>\\n        </div>\\n        <div class=\\\"k-hbox k-gradient-values\\\">\\n            <div class=\\\"k-hex-value\\\">hex</div>\\n            <div>r</div>\\n            <div>g</div>\\n            <div>b</div>\\n            <div *ngIf=\\\"opacity\\\">a</div>\\n        </div>\\n    \"\n    }]\n  }], function () {\n    return [{\n      type: ElementRef\n    }];\n  }, {\n    opacity: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    colorInputClass: [{\n      type: HostBinding,\n      args: ['class.k-colorinputs']\n    }],\n    value: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @hidden\n */\n\n\nvar FocusOnDomReadyDirective = /*#__PURE__*/function () {\n  function FocusOnDomReadyDirective(host, ngZone) {\n    _classCallCheck(this, FocusOnDomReadyDirective);\n\n    this.host = host;\n    this.ngZone = ngZone;\n  }\n\n  _createClass(FocusOnDomReadyDirective, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      this.focusOnNextTick();\n    }\n  }, {\n    key: \"focusOnNextTick\",\n    value: function focusOnNextTick() {\n      var _this60 = this;\n\n      this.ngZone.runOutsideAngular(function () {\n        return setTimeout(function () {\n          return _this60.host.nativeElement.focus();\n        });\n      });\n    }\n  }]);\n\n  return FocusOnDomReadyDirective;\n}();\n\nFocusOnDomReadyDirective.ɵfac = function FocusOnDomReadyDirective_Factory(t) {\n  return new (t || FocusOnDomReadyDirective)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(NgZone));\n};\n\nFocusOnDomReadyDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: FocusOnDomReadyDirective,\n  selectors: [[\"\", \"kendoFocusOnDomReady\", \"\"]]\n});\n/** @nocollapse */\n\nFocusOnDomReadyDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(FocusOnDomReadyDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoFocusOnDomReady]'\n    }]\n  }], function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  }, null);\n})();\n\nvar PUBLIC_DIRECTIVES = [ColorPickerComponent, ColorPaletteComponent, ColorGradientComponent];\nvar INTERNAL_DIRECTIVES = [ColorInputComponent, FocusOnDomReadyDirective];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the ColorPicker.\n */\n\nvar ColorPickerModule = function ColorPickerModule() {\n  _classCallCheck(this, ColorPickerModule);\n};\n\nColorPickerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ColorPickerModule\n});\nColorPickerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ColorPickerModule_Factory(t) {\n    return new (t || ColorPickerModule)();\n  },\n  imports: [[SliderModule, NumericTextBoxModule, CommonModule, PopupModule, DraggableModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ColorPickerModule, {\n    declarations: function declarations() {\n      return [ColorPickerComponent, ColorPaletteComponent, ColorGradientComponent, ColorInputComponent, FocusOnDomReadyDirective];\n    },\n    imports: function imports() {\n      return [SliderModule, NumericTextBoxModule, CommonModule, PopupModule, DraggableModule];\n    },\n    exports: function exports() {\n      return [ColorPickerComponent, ColorPaletteComponent, ColorGradientComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ColorPickerModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [PUBLIC_DIRECTIVES, INTERNAL_DIRECTIVES],\n      exports: [PUBLIC_DIRECTIVES],\n      imports: [SliderModule, NumericTextBoxModule, CommonModule, PopupModule, DraggableModule]\n    }]\n  }], null, null);\n})();\n/**\n * Represents the directive that renders the [Kendo UI CheckBox]({% slug overview_checkbox %}) input component.\n * The directive is placed on input type=\"checkbox\" elements.\n *\n * @example\n * ```ts-no-run\n * <input type=\"checkbox\" kendoCheckBox />\n * ```\n */\n\n\nvar CheckBoxDirective = function CheckBoxDirective() {\n  _classCallCheck(this, CheckBoxDirective);\n\n  this.kendoClass = true;\n};\n\nCheckBoxDirective.ɵfac = function CheckBoxDirective_Factory(t) {\n  return new (t || CheckBoxDirective)();\n};\n\nCheckBoxDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CheckBoxDirective,\n  selectors: [[\"input\", \"kendoCheckBox\", \"\"]],\n  hostVars: 2,\n  hostBindings: function CheckBoxDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"k-checkbox\", ctx.kendoClass);\n    }\n  }\n});\nCheckBoxDirective.propDecorators = {\n  kendoClass: [{\n    type: HostBinding,\n    args: ['class.k-checkbox']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CheckBoxDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'input[kendoCheckBox]'\n    }]\n  }], function () {\n    return [];\n  }, {\n    kendoClass: [{\n      type: HostBinding,\n      args: ['class.k-checkbox']\n    }]\n  });\n})();\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the CheckBox directive.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the CheckBox module\n * import { CheckBoxModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, CheckBoxModule], // import CheckBox module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\n\n\nvar CheckBoxModule = function CheckBoxModule() {\n  _classCallCheck(this, CheckBoxModule);\n};\n\nCheckBoxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CheckBoxModule\n});\nCheckBoxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function CheckBoxModule_Factory(t) {\n    return new (t || CheckBoxModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CheckBoxModule, {\n    declarations: function declarations() {\n      return [CheckBoxDirective];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [CheckBoxDirective];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CheckBoxModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CheckBoxDirective],\n      exports: [CheckBoxDirective],\n      imports: [CommonModule]\n    }]\n  }], null, null);\n})();\n/**\n * Represents the directive that renders the [Kendo UI RadioButton]({% slug overview_checkbox %}) input component.\n * The directive is placed on input type=\"radio\" elements.\n *\n * @example\n * ```ts-no-run\n * <input type=\"radio\" kendoRadioButton />\n * ```\n */\n\n\nvar RadioButtonDirective = function RadioButtonDirective() {\n  _classCallCheck(this, RadioButtonDirective);\n\n  this.kendoClass = true;\n};\n\nRadioButtonDirective.ɵfac = function RadioButtonDirective_Factory(t) {\n  return new (t || RadioButtonDirective)();\n};\n\nRadioButtonDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: RadioButtonDirective,\n  selectors: [[\"input\", \"kendoRadioButton\", \"\"]],\n  hostVars: 2,\n  hostBindings: function RadioButtonDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"k-radio\", ctx.kendoClass);\n    }\n  }\n});\nRadioButtonDirective.propDecorators = {\n  kendoClass: [{\n    type: HostBinding,\n    args: ['class.k-radio']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RadioButtonDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'input[kendoRadioButton]'\n    }]\n  }], function () {\n    return [];\n  }, {\n    kendoClass: [{\n      type: HostBinding,\n      args: ['class.k-radio']\n    }]\n  });\n})();\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the RadioButton directive.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the RadioButton module\n * import { RadioButtonModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, RadioButtonModule], // import RadioButton module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\n\n\nvar RadioButtonModule = function RadioButtonModule() {\n  _classCallCheck(this, RadioButtonModule);\n};\n\nRadioButtonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: RadioButtonModule\n});\nRadioButtonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function RadioButtonModule_Factory(t) {\n    return new (t || RadioButtonModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RadioButtonModule, {\n    declarations: function declarations() {\n      return [RadioButtonDirective];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [RadioButtonDirective];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RadioButtonModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [RadioButtonDirective],\n      exports: [RadioButtonDirective],\n      imports: [CommonModule]\n    }]\n  }], null, null);\n})();\n\nvar serial$3 = 0;\n/**\n * Represents an error message that will be shown underneath\n * a Kendo control or native HTML form-bound component after a validation.\n */\n\nvar ErrorComponent = /*#__PURE__*/function () {\n  function ErrorComponent() {\n    _classCallCheck(this, ErrorComponent);\n\n    this.hostClass = true;\n    /**\n     * Specifies the alignment of the Error message.\n     *\n     * The possible values are:\n     * * (Default) `start`\n     * * `end`\n     */\n\n    this.align = 'start';\n    /**\n     * @hidden\n     */\n\n    this.id = \"kendo-error-\".concat(serial$3++);\n    this.roleAttribute = 'alert';\n  }\n\n  _createClass(ErrorComponent, [{\n    key: \"startClass\",\n    get: function get() {\n      return this.align === 'start';\n    }\n  }, {\n    key: \"endClass\",\n    get: function get() {\n      return this.align === 'end';\n    }\n  }, {\n    key: \"idAttribute\",\n    get: function get() {\n      return this.id;\n    }\n  }]);\n\n  return ErrorComponent;\n}();\n\nErrorComponent.ɵfac = function ErrorComponent_Factory(t) {\n  return new (t || ErrorComponent)();\n};\n\nErrorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: ErrorComponent,\n  selectors: [[\"kendo-formerror\"]],\n  hostVars: 8,\n  hostBindings: function ErrorComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"role\", ctx.roleAttribute)(\"id\", ctx.idAttribute);\n      ɵngcc0.ɵɵclassProp(\"k-form-error\", ctx.hostClass)(\"k-text-start\", ctx.startClass)(\"k-text-end\", ctx.endClass);\n    }\n  },\n  inputs: {\n    align: \"align\"\n  },\n  ngContentSelectors: _c27,\n  decls: 1,\n  vars: 0,\n  template: function ErrorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\nErrorComponent.propDecorators = {\n  hostClass: [{\n    type: HostBinding,\n    args: ['class.k-form-error']\n  }],\n  align: [{\n    type: Input\n  }],\n  roleAttribute: [{\n    type: HostBinding,\n    args: ['attr.role']\n  }],\n  startClass: [{\n    type: HostBinding,\n    args: ['class.k-text-start']\n  }],\n  endClass: [{\n    type: HostBinding,\n    args: ['class.k-text-end']\n  }],\n  idAttribute: [{\n    type: HostBinding,\n    args: ['attr.id']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ErrorComponent, [{\n    type: Component,\n    args: [{\n      selector: 'kendo-formerror',\n      template: \"\\n        <ng-content></ng-content>\\n    \"\n    }]\n  }], function () {\n    return [];\n  }, {\n    hostClass: [{\n      type: HostBinding,\n      args: ['class.k-form-error']\n    }],\n    align: [{\n      type: Input\n    }],\n    roleAttribute: [{\n      type: HostBinding,\n      args: ['attr.role']\n    }],\n    startClass: [{\n      type: HostBinding,\n      args: ['class.k-text-start']\n    }],\n    endClass: [{\n      type: HostBinding,\n      args: ['class.k-text-end']\n    }],\n    idAttribute: [{\n      type: HostBinding,\n      args: ['attr.id']\n    }]\n  });\n})();\n\nvar serial$4 = 0;\n/**\n * Represents a hint message that will be shown underneath a form-bound component.\n */\n\nvar HintComponent = /*#__PURE__*/function () {\n  function HintComponent() {\n    _classCallCheck(this, HintComponent);\n\n    /**\n     * Specifies the alignment of the Hint message.\n     *\n     * The possible values are:\n     * * (Default) `start`\n     * * `end`\n     */\n    this.align = 'start';\n    /**\n     * @hidden\n     */\n\n    this.id = \"kendo-hint-\".concat(serial$4++);\n    this.hostClass = true;\n  }\n\n  _createClass(HintComponent, [{\n    key: \"startClass\",\n    get: function get() {\n      return this.align === 'start';\n    }\n  }, {\n    key: \"endClass\",\n    get: function get() {\n      return this.align === 'end';\n    }\n  }, {\n    key: \"idAttribute\",\n    get: function get() {\n      return this.id;\n    }\n  }]);\n\n  return HintComponent;\n}();\n\nHintComponent.ɵfac = function HintComponent_Factory(t) {\n  return new (t || HintComponent)();\n};\n\nHintComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: HintComponent,\n  selectors: [[\"kendo-formhint\"]],\n  hostVars: 7,\n  hostBindings: function HintComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx.idAttribute);\n      ɵngcc0.ɵɵclassProp(\"k-form-hint\", ctx.hostClass)(\"k-text-start\", ctx.startClass)(\"k-text-end\", ctx.endClass);\n    }\n  },\n  inputs: {\n    align: \"align\"\n  },\n  ngContentSelectors: _c27,\n  decls: 1,\n  vars: 0,\n  template: function HintComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\nHintComponent.propDecorators = {\n  align: [{\n    type: Input\n  }],\n  hostClass: [{\n    type: HostBinding,\n    args: ['class.k-form-hint']\n  }],\n  startClass: [{\n    type: HostBinding,\n    args: ['class.k-text-start']\n  }],\n  endClass: [{\n    type: HostBinding,\n    args: ['class.k-text-end']\n  }],\n  idAttribute: [{\n    type: HostBinding,\n    args: ['attr.id']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(HintComponent, [{\n    type: Component,\n    args: [{\n      selector: 'kendo-formhint',\n      template: \"\\n        <ng-content></ng-content>\\n    \"\n    }]\n  }], function () {\n    return [];\n  }, {\n    align: [{\n      type: Input\n    }],\n    hostClass: [{\n      type: HostBinding,\n      args: ['class.k-form-hint']\n    }],\n    startClass: [{\n      type: HostBinding,\n      args: ['class.k-text-start']\n    }],\n    endClass: [{\n      type: HostBinding,\n      args: ['class.k-text-end']\n    }],\n    idAttribute: [{\n      type: HostBinding,\n      args: ['attr.id']\n    }]\n  });\n})();\n/**\n * Specifies a container for form-bound controls (Kendo controls or native HTML controls).\n * Applies styling and behavior rules.\n */\n\n\nvar FormFieldComponent = /*#__PURE__*/function () {\n  function FormFieldComponent(renderer, localizationService) {\n    var _this61 = this;\n\n    _classCallCheck(this, FormFieldComponent);\n\n    this.renderer = renderer;\n    this.localizationService = localizationService;\n    this.hostClass = true;\n    /**\n     *\n     * Specifies when the Hint messages will be shown.\n     *\n     * The possible values are:\n     *\n     * * (Default) `initial`&mdash;Allows displaying hints when the form-bound component state is\n     * `valid` or `untouched` and `pristine`.\n     * * `always`&mdash;Allows full control over the visibility of the hints.\n     *\n     */\n\n    this.showHints = 'initial';\n    /**\n     * Specifies the layout orientation of the form field.\n     *\n     * * The possible values are:\n     *\n     * * (Default) `vertical`\n     * * `horizontal`\n     */\n\n    this.orientation = 'vertical';\n    /**\n     * Specifies when the Error messages will be shown.\n     *\n     * The possible values are:\n     *\n     * * (Default) `initial`&mdash;Allows displaying errors when the form-bound component state is\n     * `invalid` and `touched` or `dirty`.\n     * * `always`&mdash;Allows full control over the visibility of the errors.\n     *\n     */\n\n    this.showErrors = 'initial';\n    this.subscriptions = new Subscription();\n    this.rtl = false;\n    this.subscriptions.add(this.localizationService.changes.subscribe(function (_ref19) {\n      var rtl = _ref19.rtl;\n      _this61.rtl = rtl;\n      _this61.direction = _this61.rtl ? 'rtl' : 'ltr';\n    }));\n  }\n\n  _createClass(FormFieldComponent, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this.setDescription();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.subscriptions.unsubscribe();\n    }\n  }, {\n    key: \"disabledKendoInput\",\n    value: function disabledKendoInput() {\n      return this.kendoInput && this.kendoInput.disabled;\n    }\n  }, {\n    key: \"disabledControl\",\n    value: function disabledControl() {\n      return this.control.disabled;\n    }\n  }, {\n    key: \"disabledElement\",\n    value: function disabledElement() {\n      var elements = this.controlElementRefs.toArray();\n      return elements.every(function (e) {\n        return e.nativeElement.hasAttribute('disabled');\n      });\n    }\n  }, {\n    key: \"validateFormControl\",\n    value: function validateFormControl(formControls) {\n      if (isDevMode() && formControls.length !== 1 && !this.isControlGroup(formControls)) {\n        throw new Error('The `kendo-formfield` component should contain ' + 'only one control of type NgControl with a formControlName(https://angular.io/api/forms/FormControlName)' + 'or an ngModel(https://angular.io/api/forms/NgModel) binding.');\n      }\n    }\n  }, {\n    key: \"isControlGroup\",\n    value: function isControlGroup(formControls) {\n      var _this62 = this;\n\n      if (!formControls.length) {\n        return false;\n      }\n\n      var name = formControls.first.name;\n      return formControls.toArray().every(function (c) {\n        return c.name === name && _this62.isRadioControl(c);\n      });\n    }\n  }, {\n    key: \"isRadioControl\",\n    value: function isRadioControl(control) {\n      return control.valueAccessor instanceof RadioControlValueAccessor;\n    }\n  }, {\n    key: \"updateDescription\",\n    value: function updateDescription() {\n      var _this63 = this;\n\n      var controls = this.findControlElements();\n\n      if (!controls) {\n        return;\n      }\n\n      controls.forEach(function (control) {\n        var ariaIds = _this63.generateDescriptionIds(control);\n\n        _this63.renderer.setAttribute(control, 'aria-describedby', ariaIds);\n      });\n    }\n  }, {\n    key: \"findControlElements\",\n    value: function findControlElements() {\n      if (!this.controlElementRefs) {\n        return;\n      } // if the control is KendoInput and has focusableId - dropdowns, dateinputs\n\n\n      if (this.kendoInput && this.kendoInput.focusableId && isDocumentAvailable()) {\n        return [document.getElementById(this.kendoInput.focusableId)];\n      }\n\n      return this.controlElementRefs.map(function (el) {\n        return el.nativeElement;\n      });\n    }\n  }, {\n    key: \"generateDescriptionIds\",\n    value: function generateDescriptionIds(control) {\n      var ids = new Set();\n\n      if (control.hasAttribute('aria-describedby')) {\n        var attributes = control.getAttribute('aria-describedby').split(' ');\n        attributes.forEach(function (attr) {\n          if (attr.includes('kendo-hint-') || attr.includes('kendo-error-')) {\n            return;\n          }\n\n          ids.add(attr);\n        });\n      }\n\n      this.hintChildren.forEach(function (hint) {\n        ids.add(hint.id);\n      });\n      this.errorChildren.forEach(function (error) {\n        ids.add(error.id);\n      });\n      return Array.from(ids).join(' ');\n    }\n  }, {\n    key: \"showHintsInitial\",\n    value: function showHintsInitial() {\n      if (!this.control) {\n        return true;\n      }\n\n      var _this$control3 = this.control,\n          valid = _this$control3.valid,\n          untouched = _this$control3.untouched,\n          pristine = _this$control3.pristine;\n      return valid || untouched && pristine;\n    }\n  }, {\n    key: \"showErrorsInitial\",\n    value: function showErrorsInitial() {\n      if (!this.control) {\n        return false;\n      }\n\n      var _this$control4 = this.control,\n          invalid = _this$control4.invalid,\n          dirty = _this$control4.dirty,\n          touched = _this$control4.touched;\n      return invalid && (dirty || touched);\n    }\n  }, {\n    key: \"setDescription\",\n    value: function setDescription() {\n      var _this64 = this;\n\n      this.updateDescription();\n      this.subscriptions.add(this.errorChildren.changes.subscribe(function () {\n        return _this64.updateDescription();\n      }));\n      this.subscriptions.add(this.hintChildren.changes.subscribe(function () {\n        return _this64.updateDescription();\n      }));\n    }\n  }, {\n    key: \"errorClass\",\n    get: function get() {\n      if (!this.control) {\n        return false;\n      }\n\n      return this.control.invalid && (this.control.touched || this.control.dirty);\n    }\n  }, {\n    key: \"disabledClass\",\n    get: function get() {\n      if (!this.control) {\n        return false;\n      } // radiobutton group\n\n\n      if (this.isRadioControl(this.control)) {\n        return false;\n      }\n\n      return this.disabledControl() || this.disabledElement() || this.disabledKendoInput();\n    }\n  }, {\n    key: \"formControls\",\n    set: function set(formControls) {\n      this.validateFormControl(formControls);\n      this.control = formControls.first;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"horizontal\",\n    get: function get() {\n      return this.orientation === 'horizontal';\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"hasHints\",\n    get: function get() {\n      return this.showHints === 'always' ? true : this.showHintsInitial();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"hasErrors\",\n    get: function get() {\n      return this.showErrors === 'always' ? true : this.showErrorsInitial();\n    }\n  }]);\n\n  return FormFieldComponent;\n}();\n\nFormFieldComponent.ɵfac = function FormFieldComponent_Factory(t) {\n  return new (t || FormFieldComponent)(ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(LocalizationService));\n};\n\nFormFieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: FormFieldComponent,\n  selectors: [[\"kendo-formfield\"]],\n  contentQueries: function FormFieldComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵstaticContentQuery(dirIndex, KendoInput, true);\n      ɵngcc0.ɵɵstaticContentQuery(dirIndex, NgControl, true);\n      ɵngcc0.ɵɵstaticContentQuery(dirIndex, NgControl, true, ElementRef);\n      ɵngcc0.ɵɵstaticContentQuery(dirIndex, ErrorComponent, true);\n      ɵngcc0.ɵɵstaticContentQuery(dirIndex, HintComponent, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.kendoInput = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.formControls = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.controlElementRefs = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.errorChildren = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.hintChildren = _t);\n    }\n  },\n  hostVars: 7,\n  hostBindings: function FormFieldComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"dir\", ctx.direction);\n      ɵngcc0.ɵɵclassProp(\"k-form-field\", ctx.hostClass)(\"k-form-field-error\", ctx.errorClass)(\"k-form-field-disabled\", ctx.disabledClass);\n    }\n  },\n  inputs: {\n    showHints: \"showHints\",\n    orientation: \"orientation\",\n    showErrors: \"showErrors\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([LocalizationService, {\n    provide: L10N_PREFIX,\n    useValue: 'kendo.formfield'\n  }])],\n  ngContentSelectors: _c54,\n  decls: 5,\n  vars: 4,\n  consts: [[4, \"ngIf\"]],\n  template: function FormFieldComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c53);\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵelementStart(1, \"div\");\n      ɵngcc0.ɵɵprojection(2, 1);\n      ɵngcc0.ɵɵtemplate(3, FormFieldComponent_ng_content_3_Template, 1, 0, \"ng-content\", 0);\n      ɵngcc0.ɵɵtemplate(4, FormFieldComponent_ng_content_4_Template, 1, 0, \"ng-content\", 0);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵclassProp(\"k-form-field-wrap\", ctx.horizontal);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasHints);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasErrors);\n    }\n  },\n  directives: [ɵngcc2.NgIf],\n  encapsulation: 2\n});\n/** @nocollapse */\n\nFormFieldComponent.ctorParameters = function () {\n  return [{\n    type: Renderer2\n  }, {\n    type: LocalizationService\n  }];\n};\n\nFormFieldComponent.propDecorators = {\n  hostClass: [{\n    type: HostBinding,\n    args: ['class.k-form-field']\n  }],\n  direction: [{\n    type: HostBinding,\n    args: ['attr.dir']\n  }],\n  errorClass: [{\n    type: HostBinding,\n    args: ['class.k-form-field-error']\n  }],\n  disabledClass: [{\n    type: HostBinding,\n    args: ['class.k-form-field-disabled']\n  }],\n  formControls: [{\n    type: ContentChildren,\n    args: [NgControl, {\n      descendants: true,\n      static: true\n    }]\n  }],\n  controlElementRefs: [{\n    type: ContentChildren,\n    args: [NgControl, {\n      read: ElementRef,\n      descendants: true,\n      static: true\n    }]\n  }],\n  kendoInput: [{\n    type: ContentChild,\n    args: [KendoInput, {\n      static: true\n    }]\n  }],\n  errorChildren: [{\n    type: ContentChildren,\n    args: [ErrorComponent, {\n      descendants: true,\n      static: true\n    }]\n  }],\n  hintChildren: [{\n    type: ContentChildren,\n    args: [HintComponent, {\n      descendants: true,\n      static: true\n    }]\n  }],\n  showHints: [{\n    type: Input\n  }],\n  orientation: [{\n    type: Input\n  }],\n  showErrors: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(FormFieldComponent, [{\n    type: Component,\n    args: [{\n      selector: 'kendo-formfield',\n      template: \"\\n        <ng-content select=\\\"label, kendo-label\\\"></ng-content>\\n        <div [class.k-form-field-wrap]=\\\"horizontal\\\">\\n            <ng-content></ng-content>\\n            <ng-content select=\\\"kendo-formhint\\\" *ngIf=\\\"hasHints\\\"></ng-content>\\n            <ng-content select=\\\"kendo-formerror\\\" *ngIf=\\\"hasErrors\\\"></ng-content>\\n        </div>\\n    \",\n      providers: [LocalizationService, {\n        provide: L10N_PREFIX,\n        useValue: 'kendo.formfield'\n      }]\n    }]\n  }], function () {\n    return [{\n      type: Renderer2\n    }, {\n      type: LocalizationService\n    }];\n  }, {\n    hostClass: [{\n      type: HostBinding,\n      args: ['class.k-form-field']\n    }],\n    showHints: [{\n      type: Input\n    }],\n    orientation: [{\n      type: Input\n    }],\n    showErrors: [{\n      type: Input\n    }],\n    direction: [{\n      type: HostBinding,\n      args: ['attr.dir']\n    }],\n    errorClass: [{\n      type: HostBinding,\n      args: ['class.k-form-field-error']\n    }],\n    disabledClass: [{\n      type: HostBinding,\n      args: ['class.k-form-field-disabled']\n    }],\n    formControls: [{\n      type: ContentChildren,\n      args: [NgControl, {\n        descendants: true,\n        static: true\n      }]\n    }],\n    controlElementRefs: [{\n      type: ContentChildren,\n      args: [NgControl, {\n        read: ElementRef,\n        descendants: true,\n        static: true\n      }]\n    }],\n    kendoInput: [{\n      type: ContentChild,\n      args: [KendoInput, {\n        static: true\n      }]\n    }],\n    errorChildren: [{\n      type: ContentChildren,\n      args: [ErrorComponent, {\n        descendants: true,\n        static: true\n      }]\n    }],\n    hintChildren: [{\n      type: ContentChildren,\n      args: [HintComponent, {\n        descendants: true,\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the FormField, Error and Hint components.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the FormField module\n * import { FormFieldModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, FormFieldModule], // import FormField module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\n\n\nvar FormFieldModule = function FormFieldModule() {\n  _classCallCheck(this, FormFieldModule);\n};\n\nFormFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: FormFieldModule\n});\nFormFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function FormFieldModule_Factory(t) {\n    return new (t || FormFieldModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormFieldModule, {\n    declarations: function declarations() {\n      return [HintComponent, ErrorComponent, FormFieldComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [HintComponent, ErrorComponent, FormFieldComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(FormFieldModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [HintComponent, ErrorComponent, FormFieldComponent],\n      exports: [HintComponent, ErrorComponent, FormFieldComponent],\n      imports: [CommonModule]\n    }]\n  }], null, null);\n})();\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Inputs components.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Inputs module\n * import { InputsModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, BrowserAnimationsModule, InputsModule], // import Inputs module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\n\n\nvar InputsModule = function InputsModule() {\n  _classCallCheck(this, InputsModule);\n};\n\nInputsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: InputsModule\n});\nInputsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function InputsModule_Factory(t) {\n    return new (t || InputsModule)();\n  },\n  imports: [[CommonModule], TextBoxModule, SliderModule, RangeSliderModule, SwitchModule, NumericTextBoxModule, MaskedTextBoxModule, ColorPickerModule, CheckBoxModule, RadioButtonModule, FormFieldModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(InputsModule, {\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [TextBoxModule, SliderModule, RangeSliderModule, SwitchModule, NumericTextBoxModule, MaskedTextBoxModule, ColorPickerModule, CheckBoxModule, RadioButtonModule, FormFieldModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(InputsModule, [{\n    type: NgModule,\n    args: [{\n      exports: [TextBoxModule, SliderModule, RangeSliderModule, SwitchModule, NumericTextBoxModule, MaskedTextBoxModule, ColorPickerModule, CheckBoxModule, RadioButtonModule, FormFieldModule],\n      imports: [CommonModule]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CheckBoxModule, ColorInputComponent, FocusOnDomReadyDirective, ColorPaletteService, MaskingService, NumericTextBoxMessages, RadioButtonModule, RangeSliderCustomMessagesComponent, RangeSliderMessages, SliderCustomMessagesComponent, SliderMessages, SliderBase, SlidersCommonModule, SwitchCustomMessagesComponent, Messages, TextBoxCustomMessagesComponent, LocalizedTextBoxMessagesDirective, TextBoxMessages, TextBoxPrefixTemplateDirective, TextBoxSeparatorComponent, TextBoxSuffixTemplateDirective, TextBoxComponent, SliderComponent, RangeSliderComponent, LabelTemplateDirective, SwitchComponent, TextBoxContainerComponent, TextBoxDirective, TextAreaDirective, NumericTextBoxComponent, NumericTextBoxCustomMessagesComponent, MaskedTextBoxComponent, InputsModule, SliderTicksComponent, SliderModule, RangeSliderModule, SwitchModule, NumericTextBoxModule, MaskedTextBoxModule, TextBoxModule, ColorPickerComponent, ColorPaletteComponent, ColorGradientComponent, ColorPickerModule, ActiveColorClickEvent, CheckBoxDirective, RadioButtonDirective, HintComponent, ErrorComponent, FormFieldComponent, FormFieldModule, LocalizedNumericTextBoxMessagesDirective, LocalizedSliderMessagesDirective, LocalizedRangeSliderMessagesDirective, LocalizedSwitchMessagesDirective };","map":{"version":3,"sources":["index.js"],"names":[],"mappings":"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","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright © 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { isDevMode, Directive, TemplateRef, Optional, EventEmitter, Input, Output, HostBinding, ViewChild, ElementRef, ContentChild, Component, forwardRef, Injector, Renderer2, NgZone, ChangeDetectorRef, Inject, Injectable, HostListener, ViewChildren, NgModule, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR, NG_VALIDATORS, RadioControlValueAccessor } from '@angular/forms';\nimport { Subscription, fromEvent, interval, merge, Observable } from 'rxjs';\nimport { take, filter, concatMap, startWith, takeUntil, skip, debounceTime } from 'rxjs/operators';\nimport { LocalizationService, L10N_PREFIX, RTL, ComponentMessages } from '@progress/kendo-angular-l10n';\nimport { Keys, guid, hasObservers, anyChanged, isDocumentAvailable, KendoInput, isChanged, DraggableModule, EventsModule, ResizeSensorModule } from '@progress/kendo-angular-common';\nimport { browser, mobileOS } from '@progress/kendo-common';\nimport { IntlService } from '@progress/kendo-angular-intl';\nimport { CommonModule } from '@angular/common';\nimport { PopupService, PopupModule } from '@progress/kendo-angular-popup';\nimport { Color, parseColor, namedColors } from '@progress/kendo-drawing';\n\n/**\n * @hidden\n *\n * Checks if the value is `null` or `undefined`. Falsy values like '', 0, false, NaN, etc. are regarded as present.\n */\nconst isPresent = (value) => value !== null && value !== undefined;\n/**\n * @hidden\n */\nconst areSame = (value1, value2) => value1 === value2 || (value1 === null && value2 === undefined) || (value1 === undefined && value2 === null);\n/**\n * @hidden\n */\nconst requiresZoneOnBlur = (ngControl) => ngControl &&\n    (!ngControl.touched || (ngControl.control && ngControl.control.updateOn === 'blur'));\n/**\n * @hidden\n *\n * Fits the contender number into the specified bounds. If the number is NaN or null, the min is returned.\n *\n * @param contender Represents the number you want to fit into specified bounds.\n * @param min The inclusive lower bound number.\n * @param max The inclusive upper bound number.\n */\nconst fitIntoBounds = (contender, min, max) => {\n    if (!isPresent(contender) || isNaN(contender)) {\n        return min;\n    }\n    return contender <= min ? min : contender >= max ? max : contender;\n};\n\n/**\n * @hidden\n */\nconst MAX_PRECISION = 20;\n/**\n * @hidden\n */\nconst limitPrecision = (precision) => Math.min(precision, MAX_PRECISION);\n/**\n * @hidden\n */\nconst fractionLength = (value) => {\n    return (String(value).split('.')[1] || \"\").length;\n};\nconst maxFractionLength = (value1, value2) => {\n    return Math.max(fractionLength(value1), fractionLength(value2));\n};\n/**\n * @hidden\n */\nconst toFixedPrecision = (value, precision) => {\n    const maxPrecision = limitPrecision(precision);\n    return parseFloat(value.toFixed(maxPrecision));\n};\n/**\n * @hidden\n */\nconst add = (value1, value2) => {\n    const maxPrecision = maxFractionLength(value1, value2);\n    return toFixedPrecision(value1 + value2, maxPrecision);\n};\n/**\n * @hidden\n */\nconst subtract = (value1, value2) => {\n    return add(value1, -value2);\n};\n/**\n * @hidden\n */\nconst multiply = (value1, value2) => {\n    const maxPrecision = fractionLength(value1) + fractionLength(value2);\n    return toFixedPrecision(value1 * value2, maxPrecision);\n};\n/**\n * @hidden\n */\nconst divide = (dividend, divisor) => {\n    if (divisor === 0) {\n        return NaN;\n    }\n    const power = maxFractionLength(dividend, divisor);\n    const correctionValue = Math.pow(10, power);\n    return ((correctionValue * dividend) / (correctionValue * divisor));\n};\n/**\n * @hidden\n */\nconst remainder = (dividend, divisor) => {\n    return Math.abs(subtract(dividend, multiply(divisor, Math.floor(divide(dividend, divisor)))));\n};\n\n/**\n * @hidden\n */\nconst calculateFixedTrackSize = ({ max, min, smallStep, fixedTickWidth }) => ((max - min) / smallStep) * fixedTickWidth;\n/**\n * @hidden\n */\nconst calculateTrackSize = (wrapperWidth, offset, showButtons = true) => {\n    const BUTTONS_COUNT = 2;\n    const trackOffset = showButtons ? parseFloat(offset) * BUTTONS_COUNT : 0;\n    const trackWidth = wrapperWidth - trackOffset;\n    return Math.floor(trackWidth);\n};\n/**\n * @hidden\n */\nconst calculateTicksCount = (min = 0, max = 0, smallStep = 1) => {\n    if (smallStep <= 0) {\n        throw new Error('Invalid argument: smallStep must be a positive number');\n    }\n    const adjustedRange = Math.abs(subtract(max, min));\n    const adjustedRatio = Math.floor(divide(adjustedRange, smallStep));\n    const result = add(adjustedRatio, 1);\n    return result;\n};\n/**\n * @hidden\n */\nconst calculateValueFromTick = (index, { max, min, smallStep, reverse, vertical }) => {\n    const value = add(min, multiply(index, smallStep));\n    return vertical || reverse ? Math.abs(subtract(value, max)) : value;\n};\n/**\n * @hidden\n */\nconst calculateHandlePosition = ({ handleWidth, trackWidth, min, max, reverse, value }) => {\n    const halfHandleWidth = Math.floor(handleWidth / 2);\n    const step = trackWidth / Math.abs(max - min);\n    let pos = isPresent(value) ? step * (value - min) : min;\n    if (reverse) {\n        pos = trackWidth - pos;\n    }\n    return Math.floor(pos - halfHandleWidth);\n};\n/**\n * @hidden\n */\nconst decreaseValueToStep = (value, { max, min, smallStep, largeStep }, large = false) => {\n    const step = large && largeStep ? multiply(smallStep, largeStep) : smallStep;\n    const stepValue = subtract(value, min);\n    let result;\n    const stepRemainder = remainder(stepValue, step);\n    if (stepRemainder === 0) {\n        result = subtract(stepValue, step);\n    }\n    else {\n        result = subtract(stepValue, stepRemainder);\n    }\n    return limitValue(add(result, min), min, max);\n};\n/**\n * @hidden\n */\nconst increaseValueToStep = (value, { max, min, smallStep, largeStep }, large = false) => {\n    const step = large && largeStep ? multiply(smallStep, largeStep) : smallStep;\n    const stepValue = subtract(value, min);\n    const stepRemainder = remainder(stepValue, step);\n    const result = add(subtract(stepValue, stepRemainder), step);\n    return limitValue(add(result, min), min, max);\n};\n/**\n * @hidden\n */\nconst isStartHandle = (dragHandle) => dragHandle.id.indexOf('k-start-handle') > -1;\n/**\n * @hidden\n */\nconst snapValue = (value, options) => {\n    const { smallStep, min, max } = options;\n    const limited = limitValue(value, min, max);\n    if (value !== limited) {\n        return limited;\n    }\n    const left = decreaseValueToStep(value, options);\n    const right = increaseValueToStep(value, options);\n    if ((value - min) % smallStep === 0) {\n        return value;\n    }\n    if (right - value <= (right - left) / 2) {\n        return right;\n    }\n    return left;\n};\n/**\n * @hidden\n */\nconst trimValue = (max, min, value) => {\n    if (value > max) {\n        return max;\n    }\n    if (value < min) {\n        return min;\n    }\n    return value;\n};\n/**\n * @hidden\n */\nconst trimValueRange = (max, min, value) => {\n    return value ? [trimValue(max, min, value[0]), trimValue(max, min, value[1])] : [min, min];\n};\n/**\n * @hidden\n */\nconst identity = (value) => value;\n/**\n * @hidden\n */\nconst isSameRange = (value1, value2) => areSame(value1[0], value2[0]) && areSame(value1[1], value2[1]);\n/**\n * @hidden\n */\nconst elementOffset = (element) => {\n    const box = element.getBoundingClientRect();\n    const documentElement = document.documentElement;\n    return {\n        left: box.left + (window.pageXOffset || documentElement.scrollLeft) - (documentElement.clientLeft || 0),\n        top: box.top + (window.pageYOffset || documentElement.scrollTop) - (documentElement.clientTop || 0)\n    };\n};\n/**\n * @hidden\n */\nconst limitValue = (value, min, max) => {\n    return Math.max(Math.min(value, max), min);\n};\n/**\n * @hidden\n */\nconst eventValue = (eventArgs, scaleElement, options) => {\n    const { min, max, vertical, rtl } = options;\n    const trackOffset = elementOffset(scaleElement);\n    const offset = vertical ? eventArgs.pageY - trackOffset.top : eventArgs.pageX - trackOffset.left;\n    const scale = (max - min) / (vertical ? scaleElement.clientHeight : scaleElement.clientWidth);\n    const offsetValue = offset * scale;\n    let value = rtl || vertical ? max - offsetValue : min + offsetValue;\n    const stepFractionLength = fractionLength(options.smallStep);\n    value = toFixedPrecision(value, stepFractionLength + 1);\n    return snapValue(value, options);\n};\n/**\n * @hidden\n */\nconst isButton = (element) => {\n    return element.className.indexOf('k-button-increase') >= 0 || element.className.indexOf('k-button-decrease') >= 0;\n};\n/**\n * @hidden\n */\nconst increment = (options) => {\n    return increaseValueToStep(options.value, options);\n};\n/**\n * @hidden\n */\nconst decrement = (options) => {\n    return decreaseValueToStep(options.value, options);\n};\n/**\n * @hidden\n */\nconst incrementLarge = (options) => {\n    return increaseValueToStep(options.value, options, true);\n};\n/**\n * @hidden\n */\nconst decrementLarge = (options) => {\n    return decreaseValueToStep(options.value, options, true);\n};\n/**\n * @hidden\n */\nconst validateValue = (value) => {\n    if (isDevMode && value && value[0] > value[1]) {\n        throw new Error('[RangeSlider] The start value should not be greater than the end value.');\n    }\n};\n\n/**\n * @hidden\n */\nclass SliderModelBase {\n    constructor(props, wrapper, track, renderer) {\n        this.props = props;\n        this.wrapper = wrapper;\n        this.track = track;\n        this.renderer = renderer;\n        this.props = props;\n        this.wrapper = wrapper;\n        this.track = track;\n        this.tickSizes = this.getTickSizes();\n    }\n    resizeTrack() {\n        const orientation = this.props.vertical ? 'height' : 'width';\n        const trackWidth = this.trackWidth();\n        this.track.style[orientation] = `${trackWidth}px`;\n    }\n    resizeTicks(ticksContainer, ticks) {\n        const dimension = this.props.vertical ? \"height\" : \"width\";\n        [...ticks].map((tick, index) => tick.style[dimension] = `${this.tickSizes[index]}px`);\n        if (this.props.vertical) {\n            this.adjustPadding(ticksContainer);\n        }\n    }\n    resizeWrapper() {\n        const dimension = this.props.vertical ? \"height\" : \"width\";\n        const wrapperSize = this.elementSize(this.wrapper);\n        const trackWidth = calculateTrackSize(wrapperSize, this.elementOffset(this.track));\n        const fixedTrackWidth = calculateFixedTrackSize(this.props);\n        const wrapperParentEl = this.wrapper.parentElement;\n        if (trackWidth > fixedTrackWidth) {\n            wrapperParentEl.style[dimension] = `${wrapperSize - (trackWidth - fixedTrackWidth)}px`;\n        }\n        else {\n            wrapperParentEl.style[dimension] = `${wrapperSize + (fixedTrackWidth - trackWidth)}px`;\n        }\n    }\n    trackWidth() {\n        if (this.props.fixedTickWidth) {\n            return calculateFixedTrackSize(this.props);\n        }\n        return calculateTrackSize(this.elementSize(this.wrapper), this.elementOffset(this.track), this.props.buttons);\n    }\n    getTickSizes() {\n        const { min, max, smallStep } = this.props;\n        const count = calculateTicksCount(min, max, smallStep);\n        const trackSize = this.trackWidth();\n        const distStep = trackSize / subtract(max, min);\n        const result = [];\n        let usedSpace = 0;\n        let endPoint = 0;\n        for (let i = 0; i < count; i++) {\n            if (i === 0 || i === count - 1) {\n                endPoint += (smallStep / 2) * distStep;\n            }\n            else {\n                endPoint += smallStep * distStep;\n            }\n            // ensure that the sum of the tick sizes does not exceed the track width\n            endPoint = +endPoint.toFixed(2) - 0.01;\n            const size = Math.round(endPoint - usedSpace);\n            result.push(size);\n            usedSpace += size;\n        }\n        if (usedSpace >= trackSize) {\n            result[result.length - 1] -= 1;\n        }\n        return result;\n    }\n    adjustPadding(ticksContainer) {\n        const totalTickSize = this.tickSizes.reduce((prev, curr) => prev + curr, 0);\n        const trackWidth = this.trackWidth();\n        const reminder = trackWidth - totalTickSize;\n        if (reminder !== 0) {\n            const padding = reminder + this.elementOffset(this.track);\n            ticksContainer.style.paddingTop = `${padding}px`;\n        }\n    }\n    elementOffset(element) {\n        const { vertical } = this.props;\n        const style = getComputedStyle(element);\n        return parseInt(vertical ? style.bottom : style.left, 10);\n    }\n    elementSize(element) {\n        const { vertical } = this.props;\n        return vertical ? element.clientHeight : element.clientWidth;\n    }\n}\n\n/**\n * @hidden\n */\nclass SliderModel extends SliderModelBase {\n    positionHandle(dragHandle) {\n        const { max, min, reverse, vertical } = this.props;\n        const position = vertical ? 'bottom' : 'left';\n        const trackWidth = this.trackWidth();\n        const value = trimValue(max, min, this.props.value);\n        this.handlePosition = calculateHandlePosition({\n            min,\n            max,\n            reverse,\n            value,\n            trackWidth,\n            handleWidth: dragHandle.offsetWidth\n        });\n        this.renderer.setStyle(dragHandle, position, `${this.handlePosition}px`);\n    }\n    positionSelection(dragHandle, selection) {\n        const { reverse, vertical } = this.props;\n        const dimension = vertical ? 'height' : 'width';\n        const handleWidth = Math.floor(dragHandle.offsetWidth / 2);\n        let size = this.handlePosition + handleWidth;\n        if (reverse) {\n            size = this.trackWidth() - size;\n        }\n        this.renderer.setStyle(selection, dimension, `${size}px`);\n    }\n}\n\nconst UNTOUCHED = 'ng-untouched';\nconst toClassList = (classNames) => String(classNames).trim().split(' ');\n/**\n * @hidden\n */\nconst hasClass = (element, className) => Boolean(toClassList(element.className).find((name) => name === className));\n/**\n * @hidden\n */\nfunction invokeElementMethod(element, name, ...args) {\n    if (element && element.nativeElement) {\n        return element.nativeElement[name].apply(element.nativeElement, args);\n    }\n}\n/**\n * @hidden\n */\nconst isUntouched = (element) => element && element.nativeElement && hasClass(element.nativeElement, UNTOUCHED);\n/**\n * @hidden\n */\nconst containsFocus = (hostElement, contender) => hostElement && contender && (hostElement === contender || hostElement.contains(contender));\n/**\n * @hidden\n */\nconst closest = (node, predicate) => {\n    while (node && !predicate(node)) {\n        node = node.parentNode;\n    }\n    return node;\n};\n\n/**\n * Represents the template for the labels of the Slider.\n * To define the labels template, nest an `<ng-template>` tag with the `kendoSliderLabelTemplate` directive inside\n * the `<kendo-slider>` tag. The template context is passed to the `label` value.\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *         <kendo-slider [largeStep]=\"2\">\n *           <ng-template kendoSliderLabelTemplate let-value=\"value\">\n *             <b>{{value}}</b>\n *           </ng-template>\n *         </kendo-slider>\n *     `\n * })\n *\n * class AppComponent {\n * }\n *\n * ```\n */\nclass LabelTemplateDirective {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nLabelTemplateDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[kendoSliderLabelTemplate]'\n            },] },\n];\n/** @nocollapse */\nLabelTemplateDirective.ctorParameters = () => [\n    { type: TemplateRef, decorators: [{ type: Optional }] }\n];\n\n/**\n * @hidden\n */\nclass SliderBase {\n    constructor(localizationService, injector, renderer, ngZone, changeDetector, hostElement) {\n        this.localizationService = localizationService;\n        this.injector = injector;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.changeDetector = changeDetector;\n        this.hostElement = hostElement;\n        /**\n         * Defines the title of the ticks ([see example]({% slug ticks_slider %}#toc-titles)). The default title\n         * for each tick is its Slider value. If you use a callback function, the function accepts an argument\n         * that holds the value of the component and returns a string with the new title.\n         */\n        this.title = identity;\n        /**\n         * Denotes the location of the tick marks in the Slider ([see example]({% slug ticks_slider %}#toc-placement)).\n         *\n         * The available options are:\n         * * `before`&mdash;The tick marks are located to the top side of the horizontal track or to the left side of a vertical track.\n         * * `after`&mdash;The tick marks are located to the bottom side of the horizontal track or to the right side of the vertical track.\n         * * `both`&mdash; (Default) The tick marks are located on both sides of the track.\n         * * `none`&mdash;The tick marks are not visible. The actual elements are not added to the DOM tree.\n         */\n        this.tickPlacement = 'both';\n        /**\n         * If `vertical` is set to `true`, the orientation of the Slider changes from horizontal to vertical\n         * ([see example]({% slug orientation_slider %})).\n         */\n        this.vertical = false;\n        /**\n         * The minimum value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).\n         * The attribute accepts both integers and floating-point numbers.\n         */\n        this.min = 0;\n        /**\n         * The maximum value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).\n         * The attribute accepts both integers and floating-point numbers.\n         */\n        this.max = 10;\n        /**\n         * The step value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).\n         * Accepts positive values only. Can be an integer or a floating-point number.\n         */\n        this.smallStep = 1;\n        /**\n         * Specifies that every n<sup>th</sup> tick will be large and will have a label\n         * ([see example]({% slug predefinedsteps_slider %}#toc-large-steps)).\n         * Accepts positive integer values only.\n         */\n        this.largeStep = null;\n        /**\n         * Determines whether the Slider is disabled ([see example]({% slug disabledstate_slider %})).\n         */\n        this.disabled = false;\n        /**\n         * Determines whether the Slider is in its read-only state ([see example]({% slug readonly_slider %})).\n         */\n        this.readonly = false;\n        /**\n         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the Slider.\n         */\n        this.tabindex = 0;\n        /**\n         * Fires each time the user focuses the component.\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the component is blurred.\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the user selects a new value.\n         */\n        this.valueChange = new EventEmitter();\n        this.sliderClass = true;\n        this.widgetClass = true;\n        this.stateDefaultClass = true;\n        this.subscriptions = new Subscription();\n        /**\n         * @hidden\n         */\n        this.ifEnabled = (callback, event) => {\n            if (!this.isDisabled) {\n                callback.call(this, event);\n            }\n        };\n        this.direction = localizationService.rtl ? 'rtl' : 'ltr';\n    }\n    get horizontalClass() {\n        return !this.vertical;\n    }\n    get verticalClass() {\n        return this.vertical;\n    }\n    get disabledClass() {\n        return this.disabled;\n    }\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     *\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    ngOnInit() {\n        this.subscriptions.add(this.localizationService\n            .changes\n            .subscribe(({ rtl }) => {\n            this.direction = rtl ? 'rtl' : 'ltr';\n            this.sizeComponent();\n        }));\n        if (this.hostElement) {\n            this.renderer.removeAttribute(this.hostElement.nativeElement, \"tabindex\");\n        }\n        this.control = this.injector.get(NgControl, null);\n    }\n    /**\n     * @hidden\n     */\n    get isDisabled() {\n        return this.disabled || this.readonly;\n    }\n    /**\n     * @hidden\n     * Used by the FloatingLabel to determine if the component is empty.\n     */\n    isEmpty() {\n        return false;\n    }\n    get reverse() {\n        return this.localizationService.rtl && !this.vertical;\n    }\n    get keyBinding() {\n        const reverse = this.reverse;\n        return {\n            [Keys.ArrowLeft]: reverse ? increment : decrement,\n            [Keys.ArrowRight]: reverse ? decrement : increment,\n            [Keys.ArrowDown]: decrement,\n            [Keys.ArrowUp]: increment,\n            [Keys.PageUp]: incrementLarge,\n            [Keys.PageDown]: decrementLarge,\n            [Keys.Home]: ({ min }) => min,\n            [Keys.End]: ({ max }) => max\n        };\n    }\n    resetStyles(elements) {\n        elements.forEach(el => {\n            if (el) {\n                if (this.vertical) {\n                    this.renderer.removeStyle(el, 'width');\n                    this.renderer.removeStyle(el, 'left');\n                    this.renderer.removeStyle(el, 'right');\n                }\n                else {\n                    this.renderer.removeStyle(el, 'height');\n                    this.renderer.removeStyle(el, 'bottom');\n                }\n                this.renderer.removeStyle(el, 'padding-top');\n            }\n        });\n    }\n}\nSliderBase.propDecorators = {\n    title: [{ type: Input }],\n    tickPlacement: [{ type: Input }],\n    vertical: [{ type: Input }],\n    min: [{ type: Input }],\n    max: [{ type: Input }],\n    smallStep: [{ type: Input }],\n    largeStep: [{ type: Input }],\n    fixedTickWidth: [{ type: Input }],\n    disabled: [{ type: Input }],\n    readonly: [{ type: Input }],\n    tabindex: [{ type: Input }],\n    onFocus: [{ type: Output, args: ['focus',] }],\n    onBlur: [{ type: Output, args: ['blur',] }],\n    valueChange: [{ type: Output }],\n    direction: [{ type: HostBinding, args: ['attr.dir',] }],\n    horizontalClass: [{ type: HostBinding, args: ['class.k-slider-horizontal',] }],\n    verticalClass: [{ type: HostBinding, args: ['class.k-slider-vertical',] }],\n    sliderClass: [{ type: HostBinding, args: ['class.k-slider',] }],\n    widgetClass: [{ type: HostBinding, args: ['class.k-widget',] }],\n    stateDefaultClass: [{ type: HostBinding, args: ['class.k-state-default',] }],\n    disabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }],\n    wrapper: [{ type: ViewChild, args: ['wrap', { static: true },] }],\n    track: [{ type: ViewChild, args: ['track', { static: true },] }],\n    sliderSelection: [{ type: ViewChild, args: ['sliderSelection', { static: true },] }],\n    ticksContainer: [{ type: ViewChild, args: ['ticks', { read: ElementRef },] }],\n    ticks: [{ type: ViewChild, args: ['ticks',] }],\n    labelTemplate: [{ type: ContentChild, args: [LabelTemplateDirective,] }]\n};\n\nconst FOCUSED = 'k-state-focused';\nconst PRESSED = 'k-pressed';\n/**\n * Represents the [Kendo UI Slider component for Angular]({% slug overview_slider %}).\n */\nclass SliderComponent extends SliderBase {\n    constructor(localization, injector, renderer, ngZone, changeDetector, hostElement) {\n        super(localization, injector, renderer, ngZone, changeDetector, hostElement);\n        this.localization = localization;\n        this.injector = injector;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.changeDetector = changeDetector;\n        this.hostElement = hostElement;\n        /**\n         * @hidden\n         */\n        this.focusableId = `k-${guid()}`;\n        /**\n         * Determines if the animation will be played on value change.\n         * Regardless of this setting, no animation will be played during the initial rendering.\n         */\n        this.animate = true;\n        /**\n         * Renders the arrow side buttons of the Slider ([see example]({% slug sidebuttons_slider %}#toc-hidden-state)).\n         * When `showButtons` is set to `false`, the buttons are not displayed.\n         */\n        this.showButtons = true;\n        /**\n         * The current value of the Slider when it is initially displayed.\n         * The component can use either NgModel or the `value` binding but not both of them at the same time.\n         */\n        this.value = this.min;\n        /**\n         * @hidden\n         */\n        this.handleFocus = () => {\n            this.focused = true;\n            if (hasObservers(this.onFocus)) {\n                this.ngZone.run(() => {\n                    this.onFocus.emit();\n                });\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.handleBlur = () => {\n            this.changeDetector.markForCheck();\n            this.focused = false;\n            if (hasObservers(this.onBlur) || requiresZoneOnBlur(this.control)) {\n                this.ngZone.run(() => {\n                    this.ngTouched();\n                    this.onBlur.emit();\n                });\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.onWrapClick = (args) => {\n            const target = args.target;\n            if (!this.isDisabled && !(isButton(target) || isButton(target.parentNode))) {\n                const value = eventValue(args, this.track.nativeElement, this.getProps());\n                this.changeValue(value);\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.onKeyDown = (e) => {\n            const options = this.getProps();\n            const { max, min } = options;\n            const handler = this.keyBinding[e.keyCode];\n            if (this.isDisabled || !handler) {\n                return;\n            }\n            const value = handler(options);\n            this.changeValue(trimValue(max, min, value));\n            e.preventDefault();\n        };\n        this.ngChange = (_) => { };\n        this.ngTouched = () => { };\n        this.decreaseValue = () => {\n            this.changeValue(decreaseValueToStep(this.value, this.getProps()));\n        };\n        this.increaseValue = () => {\n            this.changeValue(increaseValueToStep(this.value, this.getProps()));\n        };\n    }\n    /**\n     * @hidden\n     */\n    set tabIndex(tabIndex) {\n        this.tabindex = tabIndex;\n    }\n    get tabIndex() {\n        return this.tabindex;\n    }\n    /**\n     * Focuses the Slider.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"slider.focus()\">Focus</button>\n     *  <kendo-slider #slider></kendo-slider>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    focus() {\n        invokeElementMethod(this.wrapper, 'focus');\n    }\n    /**\n     * Blurs the Slider.\n     */\n    blur() {\n        invokeElementMethod(this.wrapper, 'blur');\n    }\n    ngOnChanges(changes) {\n        if (anyChanged(['value', 'fixedTickWidth', 'tickPlacement'], changes, true)) {\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                this.sizeComponent(false);\n            });\n        }\n    }\n    ngAfterViewInit() {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        if (this.showButtons) {\n            this.setValueChangeInterval(this.increaseButton.nativeElement, () => this.increaseValue());\n            this.setValueChangeInterval(this.decreaseButton.nativeElement, () => this.decreaseValue());\n        }\n        this.sizeComponent(false);\n        if (this.ticks) {\n            this.ticks.tickElements\n                .changes\n                .subscribe(() => this.sizeComponent(false));\n        }\n    }\n    ngOnDestroy() {\n        this.subscriptions.unsubscribe();\n    }\n    /**\n     * @hidden\n     */\n    get incrementMessage() {\n        return this.incrementTitle || this.localizationService.get('increment');\n    }\n    /**\n     * @hidden\n     */\n    get decrementMessage() {\n        return this.decrementTitle || this.localizationService.get('decrement');\n    }\n    /**\n     * @hidden\n     */\n    get dragHandleMessage() {\n        return this.dragHandleTitle || this.localizationService.get('dragHandle');\n    }\n    /**\n     * @hidden\n     */\n    handleDragPress(args) {\n        if (args.originalEvent) {\n            args.originalEvent.preventDefault();\n        }\n        this.focus();\n        this.renderer.removeClass(this.hostElement.nativeElement, 'k-slider-transitions');\n    }\n    /**\n     * @hidden\n     */\n    onHandleDrag(args) {\n        this.dragging = true;\n        this.changeValue(eventValue(args, this.track.nativeElement, this.getProps()));\n    }\n    /**\n     * @hidden\n     */\n    onHandleRelease() {\n        this.dragging = false; //needed for animation\n        this.renderer.addClass(this.hostElement.nativeElement, 'k-slider-transitions');\n    }\n    //ngModel binding\n    /**\n     * @hidden\n     */\n    writeValue(value) {\n        this.value = value;\n        this.sizeComponent(this.animate);\n    }\n    /**\n     * @hidden\n     */\n    registerOnChange(fn) {\n        this.ngChange = fn;\n    }\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn) {\n        this.ngTouched = fn;\n    }\n    /**\n     * @hidden\n     */\n    changeValue(value) {\n        if (!areSame(this.value, value)) {\n            this.ngZone.run(() => {\n                this.value = value;\n                this.ngChange(value);\n                this.valueChange.emit(value);\n                this.sizeComponent(this.animate);\n            });\n        }\n    }\n    /**\n     * @hidden\n     */\n    sizeComponent(animate) {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        const wrapper = this.wrapper.nativeElement;\n        const track = this.track.nativeElement;\n        const selectionEl = this.sliderSelection.nativeElement;\n        const dragHandleEl = this.draghandle.nativeElement;\n        const ticks = this.ticks ? this.ticksContainer.nativeElement : null;\n        if (!animate) {\n            this.renderer.removeClass(this.hostElement.nativeElement, 'k-slider-transitions');\n        }\n        this.resetStyles([track, selectionEl, dragHandleEl, ticks, this.hostElement.nativeElement]);\n        const props = this.getProps();\n        const model = new SliderModel(props, wrapper, track, this.renderer);\n        model.resizeTrack();\n        if (this.ticks) { //for case when tickPlacement: none\n            model.resizeTicks(this.ticksContainer.nativeElement, this.ticks.tickElements.map(element => element.nativeElement));\n        }\n        model.positionHandle(dragHandleEl);\n        model.positionSelection(dragHandleEl, selectionEl);\n        if (!animate) {\n            this.hostElement.nativeElement.getBoundingClientRect();\n            this.renderer.addClass(this.hostElement.nativeElement, 'k-slider-transitions');\n        }\n        if (this.fixedTickWidth) {\n            model.resizeWrapper();\n        }\n    }\n    set focused(value) {\n        if (this.isFocused !== value && this.hostElement) {\n            const element = this.hostElement.nativeElement;\n            if (value) {\n                this.renderer.addClass(element, FOCUSED);\n            }\n            else {\n                this.renderer.removeClass(element, FOCUSED);\n            }\n            this.isFocused = value;\n        }\n    }\n    set dragging(value) {\n        if (this.isDragged !== value && this.sliderSelection && this.draghandle) {\n            const sliderSelection = this.sliderSelection.nativeElement;\n            const draghandle = this.draghandle.nativeElement;\n            if (value) {\n                this.renderer.addClass(sliderSelection, PRESSED);\n                this.renderer.addClass(draghandle, PRESSED);\n            }\n            else {\n                this.renderer.removeClass(sliderSelection, PRESSED);\n                this.renderer.removeClass(draghandle, PRESSED);\n            }\n            this.isDragged = value;\n        }\n    }\n    setValueChangeInterval(element, callback) {\n        this.ngZone.runOutsideAngular(() => {\n            const mousedown = fromEvent(element, 'mousedown');\n            const mouseup = fromEvent(element, 'mouseup');\n            const mouseout = fromEvent(element, 'mouseout');\n            const subscription = mousedown.pipe(filter((e) => e.button === 0 && !this.isDisabled), concatMap(() => interval(150).pipe(startWith(-1), takeUntil(merge(mouseup, mouseout))))).subscribe(() => {\n                this.focus();\n                callback();\n            });\n            this.subscriptions.add(subscription);\n        });\n    }\n    getProps() {\n        return {\n            buttons: this.showButtons,\n            disabled: this.disabled,\n            fixedTickWidth: this.fixedTickWidth,\n            largeStep: this.largeStep,\n            max: this.max,\n            min: this.min,\n            readonly: this.readonly,\n            reverse: this.reverse,\n            rtl: this.localizationService.rtl,\n            smallStep: this.smallStep,\n            value: trimValue(this.max, this.min, this.value),\n            vertical: this.vertical\n        };\n    }\n}\nSliderComponent.decorators = [\n    { type: Component, args: [{\n                exportAs: 'kendoSlider',\n                providers: [\n                    LocalizationService,\n                    { provide: L10N_PREFIX, useValue: 'kendo.slider' },\n                    { multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SliderComponent) },\n                    { provide: KendoInput, useExisting: forwardRef(() => SliderComponent) }\n                ],\n                selector: 'kendo-slider',\n                template: `\n        <ng-container kendoSliderLocalizedMessages\n            i18n-increment=\"kendo.slider.increment|The title of the **Increase** button of the Slider.\"\n            increment=\"increment\"\n            i18n-decrement=\"kendo.slider.decrement|The title of the **Decrease** button of the Slider.\"\n            decrement=\"decrement\"\n            i18n-dragHandle=\"kendo.slider.dragHandle|The title of the drag handle of the Slider.\"\n            dragHandle=\"Drag\"\n        >\n        <div class=\"k-slider-wrap\" #wrap\n            [id]=\"focusableId\"\n            [class.k-slider-buttons]=\"showButtons\"\n            [class.k-slider-topleft]=\"tickPlacement === 'before'\"\n            [class.k-slider-bottomright]=\"tickPlacement === 'after'\"\n            [attr.tabindex]=\"disabled ? undefined : tabIndex\"\n            [kendoEventsOutsideAngular]=\"{ focus: handleFocus, blur: handleBlur, click: onWrapClick, keydown: onKeyDown }\"\n            >\n            <a\n                #decreaseButton\n                *ngIf=\"showButtons\"\n                class=\"k-button k-button-decrease\"\n                [title]=\"decrementMessage\"\n                [attr.aria-label]=\"decrementMessage\"\n            >\n                <span class=\"k-icon\"\n                    [class.k-i-arrow-w]=\"!vertical\"\n                    [class.k-i-arrow-s]=\"vertical\"\n                >\n                </span>\n            </a>\n            <a\n                *ngIf=\"showButtons\"\n                #increaseButton\n                class=\"k-button k-button-increase\"\n                [title]=\"incrementMessage\"\n                [attr.aria-label]=\"incrementMessage\"\n            >\n                <span class=\"k-icon\"\n                    [class.k-i-arrow-e]=\"!vertical\"\n                    [class.k-i-arrow-n]=\"vertical\"\n                >\n                </span>\n            </a>\n            <ul kendoSliderTicks\n                #ticks\n                *ngIf=\"tickPlacement !== 'none'\"\n                [tickTitle]=\"title\"\n                [vertical]=\"vertical\"\n                [step]=\"smallStep\"\n                [largeStep]=\"largeStep\"\n                [min]=\"min\"\n                [max]=\"max\"\n                [labelTemplate]=\"labelTemplate?.templateRef\"\n            >\n            </ul>\n        <div #track class=\"k-slider-track\">\n            <div #sliderSelection class=\"k-slider-selection\">\n            </div>\n                <a #draghandle\n                    role=\"slider\"\n                    [attr.aria-valuemin]=\"min\"\n                    [attr.aria-valuemax]=\"max\"\n                    [attr.aria-valuenow]=\"value\"\n                    [attr.aria-disabled]=\"disabled ? true : undefined\"\n                    [attr.aria-readonly]=\"readonly ? true : undefined\"\n                    [attr.aria-orientation]=\"vertical ? 'vertical' : 'horizontal'\"\n                    [style.touch-action]=\"isDisabled ? '' : 'none'\"\n                    class=\"k-draghandle\"\n                    [title]=\"dragHandleMessage\"\n                    kendoDraggable\n                    (kendoPress)=\"ifEnabled(handleDragPress, $event)\"\n                    (kendoDrag)=\"ifEnabled(onHandleDrag, $event)\"\n                    (kendoRelease)=\"ifEnabled(onHandleRelease, $event)\"\n                ></a>\n            </div>\n            <kendo-resize-sensor (resize)=\"sizeComponent(false)\"></kendo-resize-sensor>\n        </div>\n  `\n            },] },\n];\n/** @nocollapse */\nSliderComponent.ctorParameters = () => [\n    { type: LocalizationService },\n    { type: Injector },\n    { type: Renderer2 },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: ElementRef }\n];\nSliderComponent.propDecorators = {\n    focusableId: [{ type: Input }],\n    dragHandleTitle: [{ type: Input }],\n    incrementTitle: [{ type: Input }],\n    animate: [{ type: Input }],\n    decrementTitle: [{ type: Input }],\n    showButtons: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    draghandle: [{ type: ViewChild, args: ['draghandle', { static: true },] }],\n    decreaseButton: [{ type: ViewChild, args: ['decreaseButton',] }],\n    increaseButton: [{ type: ViewChild, args: ['increaseButton',] }]\n};\n\n/**\n * @hidden\n */\nclass RangeSliderModel extends SliderModelBase {\n    positionHandle(dragHandle) {\n        if (!dragHandle.id) {\n            return;\n        }\n        const { max, min, reverse, vertical } = this.props;\n        const position = vertical ? 'bottom' : 'left';\n        const trackWidth = this.trackWidth();\n        const value = isStartHandle(dragHandle) ? trimValueRange(max, min, this.props.value)[0]\n            : trimValueRange(max, min, this.props.value)[1];\n        if (isStartHandle(dragHandle)) {\n            this.startHandlePosition = calculateHandlePosition({\n                min,\n                max,\n                reverse,\n                value,\n                trackWidth,\n                handleWidth: dragHandle.offsetWidth\n            });\n            this.renderer.setStyle(dragHandle, position, `${this.startHandlePosition}px`);\n        }\n        else {\n            this.endHandlePosition = calculateHandlePosition({\n                min,\n                max,\n                reverse,\n                value,\n                trackWidth,\n                handleWidth: dragHandle.offsetWidth\n            });\n            this.renderer.setStyle(dragHandle, position, `${this.endHandlePosition}px`);\n        }\n    }\n    positionSelection(dragHandle, selection) {\n        const { reverse, vertical } = this.props;\n        const dimension = vertical ? 'height' : 'width';\n        const position = vertical ? 'bottom' : reverse ? 'right' : 'left';\n        const handleWidth = Math.floor(dragHandle.offsetWidth / 2);\n        const size = Math.abs(this.endHandlePosition - this.startHandlePosition);\n        const currentSelectionPosition = vertical ? dragHandle.style.bottom : dragHandle.style.left;\n        this.renderer.setStyle(selection, dimension, `${size}px`);\n        this.renderer.setStyle(selection, position, reverse ? this.trackWidth() - parseFloat(currentSelectionPosition) - handleWidth + 'px'\n            : parseFloat(currentSelectionPosition) + handleWidth + 'px');\n    }\n}\n\nconst PRESSED$1 = 'k-pressed';\n/**\n * Represents the [Kendo UI RangeSlider component for Angular]({% slug overview_rangeslider %}).\n */\nclass RangeSliderComponent extends SliderBase {\n    constructor(localization, injector, renderer, ngZone, changeDetector, hostElement) {\n        super(localization, injector, renderer, ngZone, changeDetector, hostElement);\n        this.localization = localization;\n        this.injector = injector;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.changeDetector = changeDetector;\n        this.hostElement = hostElement;\n        /**\n         * @hidden\n         */\n        this.startHandleId = `k-start-handle-${guid()}`;\n        /**\n         * @hidden\n         */\n        this.endHandleId = `k-end-handle-${guid()}`;\n        /**\n         * @hidden\n         */\n        this.focusableId = this.startHandleId;\n        this.handleZIndex = 0;\n        this.activeHandle = 'startHandle';\n        this.focusChangedProgrammatically = false;\n        /**\n         * @hidden\n         */\n        this.onWrapClick = (args) => {\n            if (!this.isDisabled) {\n                this.value = this.value || [this.min, this.min];\n                const trackValue = eventValue(args, this.track.nativeElement, this.getProps());\n                let newRangeValue;\n                const [startValue, endValue] = newRangeValue = this.value;\n                if (trackValue <= startValue) {\n                    newRangeValue = [trackValue, endValue];\n                    this.activeHandle = 'startHandle';\n                }\n                else if (startValue < trackValue && trackValue < endValue) {\n                    if (trackValue < (startValue + endValue) / 2) {\n                        newRangeValue = [trackValue, endValue];\n                        this.activeHandle = 'startHandle';\n                    }\n                    else {\n                        newRangeValue = [startValue, trackValue];\n                        this.activeHandle = 'endHandle';\n                    }\n                }\n                else if (trackValue >= endValue) {\n                    newRangeValue = [startValue, trackValue];\n                    this.activeHandle = 'endHandle';\n                }\n                const activeHandle = this.activeHandle === 'startHandle' ? this.draghandleStart : this.draghandleEnd;\n                invokeElementMethod(activeHandle, 'focus');\n                this.changeValue(newRangeValue);\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.onKeyDown = (e) => {\n            this.value = this.value || [this.min, this.min];\n            const options = this.getProps();\n            const { max, min } = options;\n            const handler = this.keyBinding[e.keyCode];\n            if (this.isDisabled || !handler) {\n                return;\n            }\n            this.renderer.setStyle(e.target, 'zIndex', ++this.handleZIndex);\n            const startHandleIsActive = isStartHandle(e.target);\n            const value = handler(Object.assign({}, options, { value: startHandleIsActive ? this.value[0] : this.value[1] }));\n            if (startHandleIsActive) {\n                if (value > this.value[1]) {\n                    this.value[1] = value;\n                }\n            }\n            else {\n                if (value < this.value[0]) {\n                    this.value[0] = value;\n                }\n            }\n            const trimmedValue = trimValue(max, min, value);\n            const newValue = startHandleIsActive ? [trimmedValue, this.value[1]]\n                : [this.value[0], trimmedValue];\n            this.changeValue(newValue);\n            e.preventDefault();\n        };\n        this.ngChange = (_) => { };\n        this.ngTouched = () => { };\n        this.handleBlur = () => {\n            this.changeDetector.markForCheck();\n            this.focused = false;\n            if (hasObservers(this.onBlur) || requiresZoneOnBlur(this.control)) {\n                this.ngZone.run(() => {\n                    this.ngTouched();\n                    if (!this.focusChangedProgrammatically) {\n                        this.onBlur.emit();\n                    }\n                });\n            }\n        };\n    }\n    /**\n     * Focuses the RangeSlider.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *     <div>\n     *         <button class=\"k-button\" (click)=\"slider.focus()\">Focus</button>\n     *     </div>\n     *     <kendo-rangeslider #slider></kendo-rangeslider>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    focus() {\n        this.focusChangedProgrammatically = true;\n        invokeElementMethod(this.draghandleStart, 'focus');\n        this.focusChangedProgrammatically = false;\n    }\n    /**\n     * Blurs the RangeSlider.\n     */\n    blur() {\n        this.focusChangedProgrammatically = true;\n        const activeHandle = this.activeHandle === 'startHandle' ? this.draghandleStart : this.draghandleEnd;\n        invokeElementMethod(activeHandle, 'blur');\n        this.handleBlur();\n        this.focusChangedProgrammatically = false;\n    }\n    ngOnInit() {\n        if (!this.value) {\n            this.value = [this.min, this.max];\n        }\n        super.ngOnInit();\n    }\n    ngOnChanges(changes) {\n        if (anyChanged(['value', 'fixedTickWidth', 'tickPlacement'], changes, true)) {\n            if (changes.value && changes.value.currentValue) {\n                validateValue(changes.value.currentValue);\n            }\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                this.sizeComponent();\n            });\n        }\n    }\n    ngAfterViewInit() {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.sizeComponent();\n        if (this.ticks) {\n            this.ticks.tickElements\n                .changes\n                .subscribe(() => this.sizeComponent());\n        }\n        this.attachElementEventHandlers();\n    }\n    ngOnDestroy() {\n        this.subscriptions.unsubscribe();\n    }\n    /**\n     * @hidden\n     */\n    textFor(key) {\n        return this.localization.get(key);\n    }\n    /**\n     * @hidden\n     */\n    get valueText() {\n        return this.value ? `${this.value[0]} - ${this.value[1]}` : '';\n    }\n    /**\n     * @hidden\n     */\n    handleDragPress(args) {\n        if (args.originalEvent) {\n            args.originalEvent.preventDefault();\n        }\n        const target = args.originalEvent.target;\n        this.draggedHandle = target;\n        this.renderer.setStyle(target, 'zIndex', ++this.handleZIndex);\n    }\n    /**\n     * @hidden\n     */\n    onHandleDrag(args) {\n        this.value = this.value || [this.min, this.min];\n        const target = args.originalEvent.target;\n        const lastCoords = this.draggedHandle.getBoundingClientRect();\n        this.lastHandlePosition = { x: lastCoords.left, y: lastCoords.top };\n        this.dragging = { value: true, target };\n        const left = args.pageX < this.lastHandlePosition.x;\n        const right = args.pageX > this.lastHandlePosition.x;\n        const up = args.pageY > this.lastHandlePosition.y;\n        const moveStartHandle = () => this.changeValue([eventValue(args, this.track.nativeElement, this.getProps()), this.value[1]]);\n        const moveEndHandle = () => this.changeValue([this.value[0], eventValue(args, this.track.nativeElement, this.getProps())]);\n        const moveBothHandles = () => this.changeValue([eventValue(args, this.track.nativeElement, this.getProps()), eventValue(args, this.track.nativeElement, this.getProps())]);\n        const activeStartHandle = isStartHandle(this.draggedHandle);\n        const vertical = this.vertical;\n        const horizontal = !vertical;\n        const forward = (vertical && up) || (this.reverse ? horizontal && right : horizontal && left);\n        // const forward = (this.reverse ? (!this.vertical && !left) : (!this.vertical && left)) || (this.vertical && up);\n        if (this.value[0] === this.value[1]) {\n            if (forward) {\n                activeStartHandle ? moveStartHandle() : moveBothHandles();\n            }\n            else {\n                activeStartHandle ? moveBothHandles() : moveEndHandle();\n            }\n        }\n        else {\n            activeStartHandle ? moveStartHandle() : moveEndHandle();\n        }\n    }\n    /**\n     * @hidden\n     */\n    onHandleRelease(args) {\n        this.dragging = { value: false, target: args.originalEvent.target }; //needed for animation\n        this.draggedHandle = undefined;\n    }\n    //ngModel binding\n    /**\n     * @hidden\n     */\n    writeValue(value) {\n        validateValue(value);\n        this.value = value;\n        this.sizeComponent();\n    }\n    /**\n     * @hidden\n     */\n    registerOnChange(fn) {\n        this.ngChange = fn;\n    }\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn) {\n        this.ngTouched = fn;\n    }\n    /**\n     * @hidden\n     */\n    changeValue(value) {\n        if (!this.value || !isSameRange(this.value, value)) {\n            this.ngZone.run(() => {\n                this.value = value;\n                this.ngChange(value);\n                if (this.value) {\n                    this.valueChange.emit(value);\n                }\n                this.sizeComponent();\n            });\n        }\n    }\n    /**\n     * @hidden\n     */\n    sizeComponent() {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        const wrapper = this.wrapper.nativeElement;\n        const track = this.track.nativeElement;\n        const selectionEl = this.sliderSelection.nativeElement;\n        const dragHandleStartEl = this.draghandleStart.nativeElement;\n        const dragHandleEndEl = this.draghandleEnd.nativeElement;\n        const ticks = this.ticks ? this.ticksContainer.nativeElement : null;\n        this.resetStyles([track, selectionEl, dragHandleStartEl, dragHandleEndEl, ticks, this.hostElement.nativeElement]);\n        const props = this.getProps();\n        const model = new RangeSliderModel(props, wrapper, track, this.renderer);\n        model.resizeTrack();\n        if (this.ticks) { //for case when tickPlacement: none\n            model.resizeTicks(this.ticksContainer.nativeElement, this.ticks.tickElements.map(element => element.nativeElement));\n        }\n        model.positionHandle(dragHandleStartEl);\n        model.positionHandle(dragHandleEndEl);\n        model.positionSelection(dragHandleStartEl, selectionEl);\n        if (this.fixedTickWidth) {\n            model.resizeWrapper();\n        }\n    }\n    /**\n     * @hidden\n     */\n    get isDisabled() {\n        return this.disabled || this.readonly;\n    }\n    /**\n     * @hidden\n     * Used by the FloatingLabel to determine if the component is empty.\n     */\n    isEmpty() {\n        return false;\n    }\n    set focused(value) {\n        if (this.isFocused !== value && this.hostElement) {\n            this.isFocused = value;\n        }\n    }\n    set dragging(data) {\n        if (this.isDragged !== data.value && this.sliderSelection && this.draghandleStart && this.draghandleEnd) {\n            const sliderSelection = this.sliderSelection.nativeElement;\n            const draghandle = data.target;\n            if (data.value) {\n                this.renderer.addClass(sliderSelection, PRESSED$1);\n                this.renderer.addClass(draghandle, PRESSED$1);\n            }\n            else {\n                this.renderer.removeClass(sliderSelection, PRESSED$1);\n                this.renderer.removeClass(draghandle, PRESSED$1);\n            }\n            this.isDragged = data.value;\n        }\n    }\n    getProps() {\n        return {\n            disabled: this.disabled,\n            fixedTickWidth: this.fixedTickWidth,\n            largeStep: this.largeStep,\n            max: this.max,\n            min: this.min,\n            readonly: this.readonly,\n            reverse: this.reverse,\n            rtl: this.localizationService.rtl,\n            smallStep: this.smallStep,\n            value: trimValueRange(this.max, this.min, this.value),\n            vertical: this.vertical,\n            buttons: false\n        };\n    }\n    attachElementEventHandlers() {\n        const hostElement = this.hostElement.nativeElement;\n        let tabbing = false;\n        let cursorInsideWrapper = false;\n        this.ngZone.runOutsideAngular(() => {\n            // focusIn and focusOut are relative to the host element\n            this.subscriptions.add(this.renderer.listen(hostElement, 'focusin', () => {\n                if (!this.isFocused) {\n                    this.ngZone.run(() => {\n                        if (!this.focusChangedProgrammatically) {\n                            this.onFocus.emit();\n                        }\n                        this.focused = true;\n                    });\n                }\n            }));\n            this.subscriptions.add(this.renderer.listen(hostElement, 'focusout', (args) => {\n                if (!this.isFocused) {\n                    return;\n                }\n                if (tabbing) {\n                    if (args.relatedTarget !== this.draghandleStart.nativeElement && args.relatedTarget !== this.draghandleEnd.nativeElement) {\n                        this.handleBlur();\n                    }\n                    tabbing = false;\n                }\n                else {\n                    if (!cursorInsideWrapper) {\n                        this.handleBlur();\n                    }\n                }\n            }));\n            this.subscriptions.add(this.renderer.listen(hostElement, 'mouseenter', () => {\n                cursorInsideWrapper = true;\n            }));\n            this.subscriptions.add(this.renderer.listen(hostElement, 'mouseleave', () => {\n                cursorInsideWrapper = false;\n            }));\n            this.subscriptions.add(this.renderer.listen(hostElement, 'keydown', (args) => {\n                if (args.keyCode === Keys.Tab) {\n                    tabbing = true;\n                }\n                else {\n                    tabbing = false;\n                }\n            }));\n        });\n    }\n}\nRangeSliderComponent.decorators = [\n    { type: Component, args: [{\n                exportAs: 'kendoRangeSlider',\n                providers: [\n                    LocalizationService,\n                    { provide: L10N_PREFIX, useValue: 'kendo.rangeslider' },\n                    { multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => RangeSliderComponent) },\n                    { provide: KendoInput, useExisting: forwardRef(() => RangeSliderComponent) }\n                ],\n                selector: 'kendo-rangeslider',\n                template: `\n        <ng-container kendoSliderLocalizedMessages\n            i18n-dragHandleStart=\"kendo.rangeslider.dragHandleStart|The title of the **Start** drag handle of the Slider.\"\n            dragHandleStart=\"Drag\"\n            i18n-dragHandleEnd=\"kendo.rangeslider.dragHandleEnd|The title of the **End** drag handle of the Slider.\"\n            dragHandleEnd=\"Drag\"\n        >\n\n        <div class=\"k-slider-wrap\" #wrap\n            [class.k-slider-topleft]=\"tickPlacement === 'before'\"\n            [class.k-slider-bottomright]=\"tickPlacement === 'after'\"\n            [kendoEventsOutsideAngular]=\"{ click: onWrapClick, keydown: onKeyDown }\"\n            >\n            <ul kendoSliderTicks\n                #ticks\n                *ngIf=\"tickPlacement !== 'none'\"\n                [tickTitle]=\"title\"\n                [vertical]=\"vertical\"\n                [step]=\"smallStep\"\n                [largeStep]=\"largeStep\"\n                [min]=\"min\"\n                [max]=\"max\"\n                [labelTemplate]=\"labelTemplate?.templateRef\"\n            >\n            </ul>\n            <div #track class=\"k-slider-track\">\n                <div #sliderSelection class=\"k-slider-selection\">\n                </div>\n                <a #draghandleStart\n                    role=\"slider\"\n                    [id]=\"startHandleId\"\n                    [attr.tabindex]=\"disabled ? undefined : tabindex\"\n                    [attr.aria-valuemin]=\"min\"\n                    [attr.aria-valuemax]=\"max\"\n                    [attr.aria-valuenow]=\"value ? value[0] : null\"\n                    [attr.aria-valuetext]=\"valueText\"\n                    [attr.aria-disabled]=\"disabled ? true : undefined\"\n                    [attr.aria-readonly]=\"readonly ? true : undefined\"\n                    [attr.aria-orientation]=\"vertical ? 'vertical' : 'horizontal'\"\n                    [style.touch-action]=\"isDisabled ? '' : 'none'\"\n                    class=\"k-draghandle\"\n                    [title]=\"textFor('dragHandleStart')\"\n                    kendoDraggable\n                    (kendoPress)=\"ifEnabled(handleDragPress ,$event)\"\n                    (kendoDrag)=\"ifEnabled(onHandleDrag ,$event)\"\n                    (kendoRelease)=\"ifEnabled(onHandleRelease, $event)\"\n                ></a>\n                <a #draghandleEnd\n                    role=\"slider\"\n                    [id]=\"endHandleId\"\n                    [attr.tabindex]=\"disabled ? undefined : tabindex\"\n                    [attr.aria-valuemin]=\"min\"\n                    [attr.aria-valuemax]=\"max\"\n                    [attr.aria-valuenow]=\"value ? value[1] : null\"\n                    [attr.aria-valuetext]=\"valueText\"\n                    [attr.aria-disabled]=\"disabled ? true : undefined\"\n                    [attr.aria-readonly]=\"readonly ? true : undefined\"\n                    [attr.aria-orientation]=\"vertical ? 'vertical' : 'horizontal'\"\n                    [style.touch-action]=\"isDisabled ? '' : 'none'\"\n                    class=\"k-draghandle\"\n                    [title]=\"textFor('dragHandleEnd')\"\n                    kendoDraggable\n                    (kendoPress)=\"ifEnabled(handleDragPress ,$event)\"\n                    (kendoDrag)=\"ifEnabled(onHandleDrag ,$event)\"\n                    (kendoRelease)=\"ifEnabled(onHandleRelease, $event)\"\n                ></a>\n            </div>\n\n            <kendo-resize-sensor (resize)=\"sizeComponent()\"></kendo-resize-sensor>\n        </div>\n  `\n            },] },\n];\n/** @nocollapse */\nRangeSliderComponent.ctorParameters = () => [\n    { type: LocalizationService },\n    { type: Injector },\n    { type: Renderer2 },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: ElementRef }\n];\nRangeSliderComponent.propDecorators = {\n    value: [{ type: Input }],\n    draghandleStart: [{ type: ViewChild, args: ['draghandleStart', { static: true },] }],\n    draghandleEnd: [{ type: ViewChild, args: ['draghandleEnd', { static: true },] }]\n};\n\nconst FOCUSED$1 = 'k-state-focused';\n/**\n * Represents the [Kendo UI Switch component for Angular]({% slug overview_switch %}).\n */\nclass SwitchComponent {\n    constructor(renderer, hostElement, localizationService, injector, changeDetector, ngZone) {\n        this.renderer = renderer;\n        this.hostElement = hostElement;\n        this.localizationService = localizationService;\n        this.injector = injector;\n        this.changeDetector = changeDetector;\n        this.ngZone = ngZone;\n        /**\n         * @hidden\n         */\n        this.focusableId = `k-${guid()}`;\n        /**\n         * Sets the current value of the Switch when it is initially displayed.\n         */\n        this.checked = false;\n        /**\n         * Determines whether the Switch is disabled ([see example]({% slug disabled_switch %})).\n         */\n        this.disabled = false;\n        /**\n         * Determines whether the Switch is in its read-only state ([see example]({% slug readonly_switch %})).\n         */\n        this.readonly = false;\n        /**\n         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the Switch.\n         */\n        this.tabindex = 0;\n        /**\n         * Fires each time the user focuses the `input` element.\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the `input` element gets blurred.\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the user selects a new value.\n         */\n        this.valueChange = new EventEmitter();\n        this.ngChange = (_) => { };\n        this.ngTouched = () => { };\n        /**\n         * @hidden\n         */\n        this.handleFocus = () => {\n            this.focused = true;\n            if (hasObservers(this.onFocus)) {\n                this.ngZone.run(() => {\n                    this.onFocus.emit();\n                });\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.handleBlur = () => {\n            this.changeDetector.markForCheck();\n            this.focused = false;\n            if (hasObservers(this.onBlur) || requiresZoneOnBlur(this.control)) {\n                this.ngZone.run(() => {\n                    this.ngTouched();\n                    this.onBlur.emit();\n                });\n            }\n        };\n        this.direction = localizationService.rtl ? 'rtl' : 'ltr';\n        this.keyDownHandler = this.keyDownHandler.bind(this);\n        this.clickHandler = this.clickHandler.bind(this);\n    }\n    /**\n     * @hidden\n     */\n    set tabIndex(tabIndex) {\n        this.tabindex = tabIndex;\n    }\n    get tabIndex() {\n        return this.tabindex;\n    }\n    get ieClass() {\n        return browser && browser.msie;\n    }\n    get ariaDisabled() {\n        return this.disabled ? true : undefined;\n    }\n    get ariaReadonly() {\n        return this.readonly;\n    }\n    get hostClasses() {\n        return true;\n    }\n    get switchOnClass() {\n        return this.checked;\n    }\n    get switchOffClass() {\n        return !this.checked;\n    }\n    get disabledClass() {\n        return this.disabled;\n    }\n    /**\n     * @hidden\n     */\n    get onLabelMessage() {\n        return this.onLabel || this.localizationService.get('on');\n    }\n    /**\n     * @hidden\n     */\n    get offLabelMessage() {\n        return this.offLabel || this.localizationService.get('off');\n    }\n    get isEnabled() {\n        return !this.disabled && !this.readonly;\n    }\n    ngOnInit() {\n        if (this.hostElement) {\n            const wrapper = this.hostElement.nativeElement;\n            this.renderer.removeAttribute(wrapper, \"tabindex\");\n        }\n        this.localizationChangeSubscription = this.localizationService\n            .changes\n            .pipe(skip(1))\n            .subscribe(({ rtl }) => {\n            this.direction = rtl ? 'rtl' : 'ltr';\n        });\n        this.control = this.injector.get(NgControl, null);\n    }\n    ngOnDestroy() {\n        if (this.localizationChangeSubscription) {\n            this.localizationChangeSubscription.unsubscribe();\n        }\n    }\n    /**\n     * Focuses the Switch.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"switch.focus()\">Focus</button>\n     *  <kendo-switch #switch></kendo-switch>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    focus() {\n        if (!this.wrapper) {\n            return;\n        }\n        this.wrapper.nativeElement.focus();\n    }\n    /**\n     * Blurs the Switch.\n     */\n    blur() {\n        if (!this.wrapper) {\n            return;\n        }\n        this.wrapper.nativeElement.blur();\n    }\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.changeDetector.markForCheck();\n    }\n    /**\n     * @hidden\n     */\n    writeValue(value) {\n        this.checked = value === null ? false : value;\n        this.changeDetector.markForCheck();\n    }\n    /**\n     * @hidden\n     */\n    registerOnChange(fn) {\n        this.ngChange = fn;\n    }\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn) {\n        this.ngTouched = fn;\n    }\n    /**\n     * @hidden\n     */\n    keyDownHandler(e) {\n        const keyCode = e.keyCode;\n        if (this.isEnabled && (keyCode === Keys.Space || keyCode === Keys.Enter)) {\n            this.changeValue(!this.checked);\n            e.preventDefault();\n        }\n    }\n    /**\n     * @hidden\n     */\n    clickHandler() {\n        if (this.isEnabled) {\n            this.changeValue(!this.checked);\n        }\n    }\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty.\n     */\n    isEmpty() {\n        return false;\n    }\n    changeValue(value) {\n        if (this.checked !== value) {\n            this.ngZone.run(() => {\n                this.checked = value;\n                this.ngChange(value);\n                this.valueChange.emit(value);\n                this.changeDetector.markForCheck();\n            });\n        }\n    }\n    set focused(value) {\n        if (this.isFocused !== value && this.hostElement) {\n            const element = this.hostElement.nativeElement;\n            if (value) {\n                this.renderer.addClass(element, FOCUSED$1);\n            }\n            else {\n                this.renderer.removeClass(element, FOCUSED$1);\n            }\n            this.isFocused = value;\n        }\n    }\n}\nSwitchComponent.decorators = [\n    { type: Component, args: [{\n                exportAs: 'kendoSwitch',\n                providers: [\n                    LocalizationService,\n                    { provide: L10N_PREFIX, useValue: 'kendo.switch' },\n                    {\n                        multi: true,\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => SwitchComponent) /* tslint:disable-line */\n                    },\n                    {\n                        provide: KendoInput,\n                        useExisting: forwardRef(() => SwitchComponent)\n                    }\n                ],\n                selector: 'kendo-switch',\n                template: `\n        <ng-container kendoSwitchLocalizedMessages\n            i18n-on=\"kendo.switch.on|The **On** label of the Switch.\"\n            on=\"ON\"\n            i18n-off=\"kendo.switch.off|The **Off** label of the Switch.\"\n            off=\"OFF\"\n        >\n\n        <span\n            #wrapper\n            class=\"k-switch-container\"\n            [id]=\"focusableId\"\n            role=\"switch\"\n            [attr.aria-checked]=\"checked\"\n            [attr.tabindex]=\"(disabled ? undefined : tabIndex)\"\n            [kendoEventsOutsideAngular]=\"{ click: clickHandler, keydown: keyDownHandler, focus: handleFocus, blur: handleBlur }\"\n        >\n            <span class=\"k-switch-label-on\" [attr.aria-hidden]=\"true\" >{{onLabelMessage}}</span>\n            <span class=\"k-switch-label-off\" [attr.aria-hidden]=\"true\">{{offLabelMessage}}</span>\n            <span class=\"k-switch-handle\"></span>\n        </span>\n  `\n            },] },\n];\n/** @nocollapse */\nSwitchComponent.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: LocalizationService },\n    { type: Injector },\n    { type: ChangeDetectorRef },\n    { type: NgZone }\n];\nSwitchComponent.propDecorators = {\n    focusableId: [{ type: Input }],\n    onLabel: [{ type: Input }],\n    offLabel: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    readonly: [{ type: Input }],\n    tabindex: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    onFocus: [{ type: Output, args: ['focus',] }],\n    onBlur: [{ type: Output, args: ['blur',] }],\n    valueChange: [{ type: Output }],\n    wrapper: [{ type: ViewChild, args: ['wrapper',] }],\n    direction: [{ type: HostBinding, args: ['attr.dir',] }],\n    ieClass: [{ type: HostBinding, args: ['class.k-ie',] }],\n    ariaDisabled: [{ type: HostBinding, args: ['attr.aria-disabled',] }],\n    ariaReadonly: [{ type: HostBinding, args: ['attr.aria-readonly',] }],\n    hostClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-switch',] }],\n    switchOnClass: [{ type: HostBinding, args: ['class.k-switch-on',] }],\n    switchOffClass: [{ type: HostBinding, args: ['class.k-switch-off',] }],\n    disabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }]\n};\n\n/**\n * Represents the [Kendo UI TextArea directive for the Inputs components for Angular]({% slug overview_textarea %}).\n * Provides floating labels to `textarea` elements.\n *\n * @example\n * ```ts-no-run\n * <textarea kendoTextArea></textarea>\n * ```\n */\nclass TextAreaDirective {\n    constructor(renderer, element, zone, changeDetector, injector, rtl) {\n        this.renderer = renderer;\n        this.element = element;\n        this.zone = zone;\n        this.changeDetector = changeDetector;\n        this.injector = injector;\n        this.elementClass = true;\n        this.autofillClass = true;\n        /**\n         * Fires each time the textarea value is changed.\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Specifies if the `textarea` element will resize its height automatically\n         * ([see example]({% slug overview_textarea %}#toc-auto-resizing)).\n         *\n         * @default false\n         */\n        this.autoSize = false;\n        /**\n         * @hidden\n         */\n        this.onFocus = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.onBlur = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.onValueChange = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.autoFillStart = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.autoFillEnd = new EventEmitter();\n        this.listeners = [];\n        this.ngChange = (_) => { };\n        this.ngTouched = () => { };\n        this.direction = rtl ? 'rtl' : 'ltr';\n    }\n    get id() {\n        return this.element.nativeElement.id;\n    }\n    set id(id) {\n        this.renderer.setAttribute(this.element.nativeElement, 'id', id);\n    }\n    /**\n     * @hidden\n     */\n    writeValue(value) {\n        this.elementValue = value;\n        this.resize();\n    }\n    /**\n     * @hidden\n     */\n    registerOnChange(fn) {\n        this.ngChange = fn;\n    }\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn) {\n        this.ngTouched = fn;\n    }\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled) {\n        this.setElementProperty('disabled', isDisabled);\n    }\n    ngOnInit() {\n        const element = this.element.nativeElement;\n        this.zone.runOutsideAngular(() => {\n            this.listeners = [\n                this.renderer.listen(element, 'focus', this.handleFocus.bind(this)),\n                this.renderer.listen(element, 'blur', this.handleBlur.bind(this)),\n                this.renderer.listen(element, 'animationstart', (e) => {\n                    if (e.animationName === 'autoFillStart') {\n                        this.autoFillStart.emit();\n                    }\n                    else if (e.animationName === 'autoFillEnd') {\n                        this.autoFillEnd.emit();\n                    }\n                })\n            ];\n            if (isDocumentAvailable() && this.autoSize) {\n                this.resizeSubscription = fromEvent(window, 'resize')\n                    .pipe((debounceTime(50)))\n                    .subscribe(() => this.resize());\n            }\n            this.inputSubscription = fromEvent(element, 'input')\n                .subscribe(this.handleInput.bind(this));\n        });\n        this.control = this.injector.get(NgControl, null);\n    }\n    ngOnChanges(changes) {\n        const element = this.element.nativeElement;\n        if (changes.value) {\n            this.elementValue = this.value;\n        }\n        if (changes.autoSize) {\n            if (this.autoSize) {\n                this.initialHeight = element.offsetHeight;\n                this.renderer.setStyle(element, 'resize', 'none');\n            }\n            else {\n                this.renderer.setStyle(element, 'overflow-y', 'auto');\n                this.renderer.setStyle(element, 'resize', 'both');\n                element.style.height = `${this.initialHeight}px`;\n            }\n        }\n        this.resize();\n    }\n    ngOnDestroy() {\n        this.listeners.forEach(listener => listener());\n        if (this.inputSubscription) {\n            this.inputSubscription.unsubscribe();\n        }\n        if (this.resizeSubscription) {\n            this.resizeSubscription.unsubscribe();\n        }\n    }\n    get elementValue() {\n        if (this.element) {\n            return this.element.nativeElement.value;\n        }\n        return '';\n    }\n    set elementValue(value) {\n        this.setElementProperty('value', (value === undefined || value === null) ? '' : value);\n    }\n    setElementProperty(name, value) {\n        if (this.element) {\n            this.renderer.setProperty(this.element.nativeElement, name, value);\n        }\n    }\n    resize() {\n        if (!this.autoSize) {\n            return;\n        }\n        const element = this.element.nativeElement;\n        this.renderer.setStyle(element, 'overflow-y', 'hidden');\n        element.style.height = `${this.initialHeight}px`;\n        const scrollHeight = element.scrollHeight;\n        if (scrollHeight > this.initialHeight) {\n            element.style.height = `${scrollHeight}px`;\n        }\n    }\n    handleInput() {\n        const value = this.elementValue;\n        this.value = value;\n        if (this.control || hasObservers(this.onValueChange) || hasObservers(this.valueChange)) {\n            this.zone.run(() => {\n                this.ngChange(value);\n                this.onValueChange.emit(value);\n                this.valueChange.emit(value);\n                this.changeDetector.markForCheck();\n            });\n        }\n        this.resize();\n    }\n    handleFocus() {\n        if (hasObservers(this.onFocus)) {\n            this.zone.run(() => {\n                this.onFocus.emit();\n            });\n        }\n    }\n    handleBlur() {\n        if (hasObservers(this.onBlur) || requiresZoneOnBlur(this.control)) {\n            this.zone.run(() => {\n                this.ngTouched();\n                this.onBlur.emit();\n                this.changeDetector.markForCheck();\n            });\n        }\n    }\n}\nTextAreaDirective.decorators = [\n    { type: Directive, args: [{\n                providers: [{\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => TextAreaDirective),\n                        multi: true\n                    }, {\n                        provide: KendoInput,\n                        useExisting: forwardRef(() => TextAreaDirective)\n                    }],\n                selector: 'textarea[kendoTextArea]'\n            },] },\n];\n/** @nocollapse */\nTextAreaDirective.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: Injector },\n    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] }] }\n];\nTextAreaDirective.propDecorators = {\n    elementClass: [{ type: HostBinding, args: ['class.k-textarea',] }],\n    autofillClass: [{ type: HostBinding, args: ['class.k-autofill',] }],\n    direction: [{ type: HostBinding, args: ['attr.dir',] }],\n    valueChange: [{ type: Output }],\n    autoSize: [{ type: Input }],\n    value: [{ type: Input }]\n};\n\n/**\n * @hidden\n */\nclass FloatingLabelInputAdapter {\n    constructor(component, formControl) {\n        this.component = component;\n        const isObservableOrEventEmitter = (event) => event instanceof Observable || event instanceof EventEmitter;\n        if (isObservableOrEventEmitter(component.onFocus)) {\n            this.onFocus = component.onFocus;\n        }\n        if (isObservableOrEventEmitter(component.autoFillStart)) {\n            this.autoFillStart = component.autoFillStart;\n        }\n        if (isObservableOrEventEmitter(component.autoFillEnd)) {\n            this.autoFillEnd = component.autoFillEnd;\n        }\n        if (isObservableOrEventEmitter(component.onBlur)) {\n            this.onBlur = component.onBlur;\n        }\n        if (formControl) {\n            this.onValueChange = formControl.valueChanges;\n        }\n        else if (component.onValueChange) {\n            this.onValueChange = component.onValueChange;\n        }\n    }\n    get focusableId() {\n        const component = this.component;\n        if ('focusableId' in component) {\n            return component.focusableId;\n        }\n        else if ('id' in component) {\n            return component.id;\n        }\n        return \"\";\n    }\n    set focusableId(value) {\n        const component = this.component;\n        if ('focusableId' in component) {\n            component.focusableId = value;\n        }\n        else if ('id' in component) {\n            component.id = value;\n        }\n    }\n}\n\nconst isFunction = (x) => Object.prototype.toString.call(x) === '[object Function]';\n/**\n * @hidden\n */\nclass TextBoxContainerComponent {\n    constructor(elementRef, renderer, changeDetectorRef, rtl) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.changeDetectorRef = changeDetectorRef;\n        /**\n         * @hidden\n         */\n        this.focused = false;\n        /**\n         * @hidden\n         */\n        this.empty = true;\n        /**\n         * @hidden\n         */\n        this.invalid = false;\n        this._subscriptions = [];\n        this.autoFillStarted = false;\n        this.direction = rtl ? 'rtl' : 'ltr';\n        this.renderer.removeAttribute(this.elementRef.nativeElement, \"id\");\n    }\n    get hostClasses() {\n        return true;\n    }\n    get textareaElementClass() {\n        return !!this.textarea;\n    }\n    get focusedClass() {\n        return this.focused;\n    }\n    get invalidClass() {\n        return this.invalid;\n    }\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        if (!this.formControl && !this.kendoInput) {\n            if (isDevMode()) {\n                throw new Error(\"The TextBoxContainer requires a Kendo Input component\" +\n                    \" or a forms-bound component to function properly.\");\n            }\n            return;\n        }\n        // add focus/blur/valueChange handlers\n        const control = new FloatingLabelInputAdapter(this.kendoInput || this.formControl.valueAccessor, this.formControl);\n        const setFocus = (isFocused) => () => {\n            this.focused = isFocused;\n            this.updateState();\n        };\n        this.subscribe(control, 'onFocus', setFocus(true));\n        this.subscribe(control, 'onBlur', setFocus(false));\n        this.subscribe(control, 'autoFillStart', () => {\n            this.autoFillStarted = true;\n            this.renderer.removeClass(this.elementRef.nativeElement, 'k-state-empty');\n        });\n        this.subscribe(control, 'autoFillEnd', () => {\n            if (this.autoFillStarted) {\n                this.autoFillStarted = false;\n                if (this.empty) {\n                    this.renderer.addClass(this.elementRef.nativeElement, 'k-state-empty');\n                }\n            }\n        });\n        const updateState = () => this.updateState();\n        updateState();\n        this.subscribe(control, 'onValueChange', updateState);\n        // set label id for floating label\n        if (this.id && control.focusableId) {\n            // input wins\n            this.id = control.focusableId;\n        }\n        else if (this.id) {\n            control.focusableId = this.id;\n        }\n        else if (control.focusableId) {\n            this.id = control.focusableId;\n        }\n        else {\n            const id = \"_\" + guid();\n            control.focusableId = id;\n            this.id = id;\n        }\n    }\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this._subscriptions.forEach(s => s.unsubscribe());\n        this._subscriptions = [];\n    }\n    subscribe(control, eventName, handler) {\n        if (control[eventName] instanceof EventEmitter) {\n            const subscription = control[eventName].subscribe(handler);\n            this._subscriptions.push(subscription);\n        }\n    }\n    updateState() {\n        const empty = value => {\n            // zero is not an empty value (e.g., NumericTextBox)\n            if (value === 0 || value === false) {\n                return false;\n            }\n            // empty arrays are an empty value (e.g., MultiSelect)\n            if (Array.isArray(value) && !value.length) {\n                return true;\n            }\n            return !value;\n        };\n        const formControl = this.formControl;\n        if (formControl) {\n            const valueAccessor = formControl.valueAccessor;\n            if (isFunction(valueAccessor.isEmpty)) {\n                this.empty = valueAccessor.isEmpty();\n            }\n            else {\n                this.empty = empty(formControl.value);\n            }\n            this.invalid = formControl.invalid && (formControl.touched || formControl.dirty);\n        }\n        else {\n            this.empty = isFunction(this.kendoInput.isEmpty) ?\n                this.kendoInput.isEmpty() : empty(this.kendoInput.value);\n        }\n        if (this.empty) {\n            this.renderer.addClass(this.elementRef.nativeElement, 'k-state-empty');\n        }\n        else {\n            this.renderer.removeClass(this.elementRef.nativeElement, 'k-state-empty');\n        }\n        this.changeDetectorRef.markForCheck();\n    }\n}\nTextBoxContainerComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'kendo-textbox-container',\n                template: `\n        <ng-content></ng-content>\n        <label *ngIf=\"floatingLabel\" [for]=\"id\" class=\"k-label\">{{ floatingLabel }}</label>\n    `\n            },] },\n];\n/** @nocollapse */\nTextBoxContainerComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: ChangeDetectorRef },\n    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] }] }\n];\nTextBoxContainerComponent.propDecorators = {\n    hostClasses: [{ type: HostBinding, args: ['class.k-textbox-container',] }],\n    textareaElementClass: [{ type: HostBinding, args: ['class.k-textarea-wrapper',] }],\n    focusedClass: [{ type: HostBinding, args: ['class.k-state-focused',] }],\n    invalidClass: [{ type: HostBinding, args: ['class.k-state-invalid',] }],\n    direction: [{ type: HostBinding, args: ['attr.dir',] }],\n    id: [{ type: Input }],\n    floatingLabel: [{ type: Input }],\n    kendoInput: [{ type: ContentChild, args: [KendoInput,] }],\n    textarea: [{ type: ContentChild, args: [TextAreaDirective,] }],\n    formControl: [{ type: ContentChild, args: [NgControl,] }]\n};\n\n/**\n * Represents the [Kendo UI TextBox directive]({% slug overview_textbox %}) for the Inputs components for Angular.\n * Used to style the textbox of any `input` element.\n *\n * @example\n * ```ts-no-run\n * <input kendoTextBox />\n * <input kendoTextBox type=\"email\" />\n * <input kendoTextBox type=\"password\" />\n * ```\n */\nclass TextBoxDirective {\n    constructor(renderer, inputElement, ngZone) {\n        this.renderer = renderer;\n        this.inputElement = inputElement;\n        this.ngZone = ngZone;\n        this.hostClass = true;\n        /**\n         * @hidden\n         */\n        this.onFocus = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.onBlur = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.onValueChange = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.autoFillStart = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.autoFillEnd = new EventEmitter();\n        this.listeners = [];\n    }\n    /**\n     * @hidden\n     */\n    set value(text) {\n        if (!this.inputElement) {\n            return;\n        }\n        this.inputElement.nativeElement.value = (text === undefined || text === null) ? '' : text;\n        this.onValueChange.emit();\n    }\n    /**\n     * @hidden\n     */\n    get value() {\n        return this.inputElement.nativeElement.value;\n    }\n    get id() {\n        return this.inputElement.nativeElement.id;\n    }\n    set id(id) {\n        this.renderer.setAttribute(this.inputElement.nativeElement, 'id', id);\n    }\n    ngAfterViewInit() {\n        const input = this.inputElement.nativeElement;\n        this.listeners = [\n            this.renderer.listen(input, 'focus', () => this.onFocus.emit()),\n            this.renderer.listen(input, 'blur', () => this.onBlur.emit())\n        ];\n        this.ngZone.runOutsideAngular(() => {\n            this.renderer.listen(input, 'animationstart', (e) => {\n                if (e.animationName === 'autoFillStart') {\n                    this.autoFillStart.emit();\n                }\n                else if (e.animationName === 'autoFillEnd') {\n                    this.autoFillEnd.emit();\n                }\n            });\n        });\n    }\n    ngOnDestroy() {\n        this.listeners.forEach(listener => listener());\n    }\n}\nTextBoxDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[kendoTextBox]',\n                providers: [{\n                        provide: KendoInput,\n                        useExisting: forwardRef(() => TextBoxDirective)\n                    }]\n            },] },\n];\n/** @nocollapse */\nTextBoxDirective.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: NgZone }\n];\nTextBoxDirective.propDecorators = {\n    hostClass: [{ type: HostBinding, args: ['class.k-textbox',] }],\n    value: [{ type: Input }]\n};\n\n/**\n * @hidden\n */\nconst createMaxValidator = (maxValue) => {\n    return (c) => {\n        if (!isPresent(maxValue) || !isPresent(c.value) || c.value <= maxValue) {\n            return null;\n        }\n        return {\n            maxError: {\n                maxValue: maxValue,\n                value: c.value\n            }\n        };\n    };\n};\n\n/**\n * @hidden\n */\nconst createMinValidator = (minValue) => {\n    return (c) => {\n        if (!isPresent(minValue) || !isPresent(c.value) || c.value >= minValue) {\n            return null;\n        }\n        return {\n            minError: {\n                minValue: minValue,\n                value: c.value\n            }\n        };\n    };\n};\n\n/**\n * @hidden\n */\nconst MIN_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/inputs/api/NumericTextBoxComponent/#toc-min';\n/**\n * @hidden\n */\nconst MAX_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/inputs/api/NumericTextBoxComponent/#toc-max';\n/**\n * @hidden\n */\nconst POINT = \".\";\n/**\n * @hidden\n */\nconst INITIAL_SPIN_DELAY = 500;\n/**\n * @hidden\n */\nconst SPIN_DELAY = 50;\n/**\n * @hidden\n */\nconst EXPONENT_REGEX = /[eE][\\-+]?([0-9]+)/;\n\n/**\n * @hidden\n */\nconst numericRegex = (options) => {\n    const { autoCorrect, decimals, min } = options;\n    let separator = options.separator;\n    if (separator === POINT) {\n        separator = '\\\\' + separator;\n    }\n    const signPattern = autoCorrect && min !== null && min >= 0 ? '' : '-?';\n    let numberPattern;\n    if (decimals === 0) {\n        numberPattern = '\\\\d*';\n    }\n    else {\n        numberPattern = `(?:(?:\\\\d+(${separator}\\\\d*)?)|(?:${separator}\\\\d*))?`;\n    }\n    return new RegExp(`^${signPattern}${numberPattern}$`);\n};\n/**\n * @hidden\n */\nconst decimalPart = (value) => {\n    return value >= 0 ? Math.floor(value) : Math.ceil(value);\n};\n/**\n * @hidden\n */\nconst noop = (_) => { }; // tslint:disable-line:no-empty\n/**\n * @hidden\n */\nconst defined = (value) => {\n    return typeof value !== 'undefined';\n};\n/**\n * @hidden\n */\nconst isNumber = (value) => {\n    return !isNaN(value) && value !== null;\n};\n/**\n * @hidden\n */\nfunction pad(value, digits) {\n    const count = digits - String(value).length;\n    let result = value;\n    if (count > 0) {\n        const padString = new Array(count + 1).join(\"0\");\n        result = parseFloat(value + padString);\n    }\n    return result;\n}\n/**\n * @hidden\n */\nconst getDeltaFromMouseWheel = (e) => {\n    let delta = 0;\n    if (e.wheelDelta) {\n        delta = e.wheelDelta / 120;\n        delta = delta > 0 ? Math.ceil(delta) : Math.floor(delta);\n    }\n    else if (e.detail) {\n        delta = Math.round(-e.detail / 3);\n    }\n    return delta;\n};\n/**\n * @hidden\n */\nconst getCaretPosition = (element) => element.selectionStart;\n/**\n * @hidden\n */\nconst extractSignificantNumericChars = (formattedString, separator) => {\n    const significantCharacters = `${separator}0123456789-`;\n    return formattedString.split('').reduce((acc, curr) => significantCharacters.includes(curr) ? ++acc : acc, 0);\n};\n\n/**\n * @hidden\n */\nvar ArrowDirection;\n(function (ArrowDirection) {\n    ArrowDirection[ArrowDirection[\"Down\"] = -1] = \"Down\";\n    ArrowDirection[ArrowDirection[\"None\"] = 0] = \"None\";\n    ArrowDirection[ArrowDirection[\"Up\"] = 1] = \"Up\";\n})(ArrowDirection || (ArrowDirection = {}));\n\nconst PARSABLE_OPTIONS = ['min', 'max', 'step', 'decimals'];\nconst PARSABLE_DEFAULTS = {\n    decimals: null,\n    max: null,\n    min: null,\n    step: 1\n};\nconst FOCUSED$2 = 'k-state-focused';\nconst FORMATTED_VALUE = 'k-formatted-value';\n/**\n * Represents the [Kendo UI NumericTextBox component for Angular]({% slug overview_numerictextbox %}).\n */\nclass NumericTextBoxComponent {\n    constructor(intl, renderer, localizationService, injector, ngZone, changeDetector, hostElement) {\n        this.intl = intl;\n        this.renderer = renderer;\n        this.localizationService = localizationService;\n        this.injector = injector;\n        this.ngZone = ngZone;\n        this.changeDetector = changeDetector;\n        this.hostElement = hostElement;\n        /**\n         * @hidden\n         */\n        this.focusableId = `k-${guid()}`;\n        /**\n         * Determines whether the NumericTextBox is disabled ([see example]({% slug disabled_numerictextbox %})).\n         */\n        this.disabled = false;\n        /**\n         * Determines whether the NumericTextBox is in its read-only state ([see example]({% slug readonly_numerictextbox %})).\n         */\n        this.readonly = false;\n        /**\n         * Sets the title of the `input` element of the NumericTextBox.\n         */\n        this.title = '';\n        /**\n         * Specifies whether the value will be auto-corrected based on the minimum and maximum values\n         * ([see example]({% slug precision_numerictextbox %})).\n         */\n        this.autoCorrect = false;\n        /**\n         * Specifies the number of decimals that the user can enter when the input is focused\n         * ([see example]({% slug precision_numerictextbox %})).\n         */\n        this.decimals = null;\n        /**\n         * Specifies the value that is used to increment or decrement the component value\n         * ([see example]({% slug predefinedsteps_numerictextbox %})).\n         */\n        this.step = 1;\n        /**\n         * Specifies whether the **Up** and **Down** spin buttons will be rendered\n         * ([see example]({% slug spinbuttons_numerictextbox %})).\n         */\n        this.spinners = true;\n        /**\n         * Determines whether the built-in minimum or maximum validators are enforced when a form is validated.\n         *\n         * > The 4.2.0 Angular version introduces the `min` and `max` validation directives. As a result, even if you set `rangeValidation`\n         * to `false`, the built-in Angular validators will be executed.\n         */\n        this.rangeValidation = true;\n        /**\n         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        this.tabindex = 0;\n        /**\n         * Determines whether the whole value will be selected when the NumericTextBox is clicked. Defaults to `true`.\n         */\n        this.selectOnFocus = true;\n        /**\n         * Specifies the value of the NumericTextBox\n         * ([see example]({% slug formats_numerictextbox %})).\n         */\n        this.value = null;\n        /**\n         * Fires each time the user selects a new value ([see example]({% slug overview_numerictextbox %}#toc-events)).\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time the user focuses the `input` element ([see example]({% slug overview_numerictextbox %}#toc-events)).\n         */\n        this.onFocus = new EventEmitter();\n        /**\n         * Fires each time the `input` element gets blurred ([see example]({% slug overview_numerictextbox %}#toc-events)).\n         */\n        this.onBlur = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.ArrowDirection = ArrowDirection;\n        /**\n         * @hidden\n         */\n        this.arrowDirection = ArrowDirection.None;\n        this.inputValue = '';\n        this.minValidateFn = noop;\n        this.maxValidateFn = noop;\n        this._format = \"n2\";\n        this.isPasted = false;\n        this.mouseDown = false;\n        this.ngChange = noop;\n        this.ngTouched = noop;\n        this.ngValidatorChange = noop;\n        /**\n         * @hidden\n         */\n        this.increasePress = (e) => {\n            this.arrowPress(ArrowDirection.Up, e);\n        };\n        /**\n         * @hidden\n         */\n        this.decreasePress = (e) => {\n            this.arrowPress(ArrowDirection.Down, e);\n        };\n        /**\n         * @hidden\n         */\n        this.releaseArrow = () => {\n            clearTimeout(this.spinTimeout);\n            if (this.arrowDirection !== ArrowDirection.None) {\n                this.arrowDirection = ArrowDirection.None;\n                this.changeDetector.detectChanges();\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.handlePaste = () => {\n            this.isPasted = true;\n        };\n        /**\n         * @hidden\n         */\n        this.handleInput = () => {\n            const input = this.numericInput.nativeElement;\n            let { selectionStart, selectionEnd, value: inputValue } = input;\n            if (this.pressedKey === Keys.NumpadDecimal) {\n                inputValue = this.replaceNumpadDotValue();\n            }\n            if (this.isPasted) {\n                inputValue = this.formatInputValue(this.intl.parseNumber(inputValue));\n            }\n            if (!this.isValid(inputValue)) {\n                input.value = this.inputValue;\n                this.setSelection(selectionStart - 1, selectionEnd - 1);\n                return;\n            }\n            const parsedValue = this.intl.parseNumber(inputValue);\n            let value = this.restrictDecimals(parsedValue);\n            if (this.autoCorrect) {\n                const limited = this.limitInputValue(value);\n                value = limited.value;\n                selectionStart = limited.selectionStart;\n                selectionEnd = limited.selectionEnd;\n            }\n            if (parsedValue !== value || this.hasTrailingZeros(inputValue) || !this.focused) {\n                this.setInputValue(value);\n                this.setSelection(selectionStart, selectionEnd);\n            }\n            else {\n                this.inputValue = inputValue;\n            }\n            if (this.isPasted) {\n                input.value = this.inputValue;\n            }\n            this.updateValue(value);\n            this.previousSelection = null;\n            this.isPasted = false;\n        };\n        /**\n         * @hidden\n         */\n        this.handleDragEnter = () => {\n            if (!this.focused && !this.isDisabled) {\n                this.setInputValue(this.value, true);\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.handleMouseDown = () => {\n            this.mouseDown = true;\n        };\n        /**\n         * @hidden\n         */\n        this.handleFocus = () => {\n            if (!this.focused) {\n                this.focused = true;\n                if (!this.isDisabled) {\n                    const shouldSelectAll = this.selectOnFocus || !this.mouseDown;\n                    this.ngZone.runOutsideAngular(() => {\n                        setTimeout(() => {\n                            if (shouldSelectAll) {\n                                this.selectAll();\n                            }\n                            else {\n                                this.selectCaret();\n                            }\n                        }, 0);\n                    });\n                }\n            }\n            this.mouseDown = false;\n            if (hasObservers(this.onFocus)) {\n                this.ngZone.run(() => {\n                    this.onFocus.emit();\n                });\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.handleBlur = () => {\n            this.changeDetector.markForCheck();\n            this.focused = false;\n            //blur is thrown before input when dragging the input text in IE\n            if (this.inputValue !== this.elementValue) {\n                this.handleInput();\n            }\n            this.setInputValue();\n            if (hasObservers(this.onBlur) || requiresZoneOnBlur(this.control)) {\n                this.ngZone.run(() => {\n                    this.ngTouched();\n                    this.onBlur.emit();\n                });\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.handleKeyDown = (e) => {\n            if (this.isDisabled) {\n                return;\n            }\n            let step;\n            if (e.keyCode === Keys.ArrowDown) {\n                step = -1;\n            }\n            else if (e.keyCode === Keys.ArrowUp) {\n                step = 1;\n            }\n            if (step && this.step) {\n                e.preventDefault();\n                this.addStep(step);\n            }\n            const input = this.numericInput.nativeElement;\n            this.previousSelection = {\n                end: input.selectionEnd,\n                start: input.selectionStart\n            };\n            this.pressedKey = e.keyCode;\n        };\n        /**\n         * @hidden\n         */\n        this.handleWheel = (e) => {\n            if (this.focused && !this.isDisabled) {\n                e.preventDefault();\n                const delta = getDeltaFromMouseWheel(e);\n                this.addStep(delta);\n            }\n        };\n        this.direction = localizationService.rtl ? 'rtl' : 'ltr';\n    }\n    /**\n     * Specifies the number format which is used when the NumericTextBox is not focused\n     * ([see example]({% slug formats_numerictextbox %})).\n     * If `format` is set to `null` or `undefined`, the default format will be used.\n     */\n    get format() {\n        const format = this._format;\n        return format !== null && format !== undefined ? format : 'n2';\n    }\n    set format(value) {\n        this._format = value;\n    }\n    /**\n     * @hidden\n     */\n    set tabIndex(tabIndex) {\n        this.tabindex = tabIndex;\n    }\n    get tabIndex() {\n        return this.tabindex;\n    }\n    get widgetClasses() {\n        return true;\n    }\n    ngOnInit() {\n        this.subscriptions = this.localizationService\n            .changes\n            .subscribe(({ rtl }) => {\n            this.direction = rtl ? 'rtl' : 'ltr';\n        });\n        this.subscriptions.add(this.intl.changes.subscribe(this.intlChange.bind(this)));\n        if (this.hostElement) {\n            this.renderer.removeAttribute(this.hostElement.nativeElement, \"tabindex\");\n        }\n        this.control = this.injector.get(NgControl, null);\n    }\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes) {\n        if (anyChanged(PARSABLE_OPTIONS, changes, false)) {\n            this.parseOptions(PARSABLE_OPTIONS.filter(option => changes[option]));\n        }\n        this.verifySettings();\n        if (anyChanged(['min', 'max', 'rangeValidation'], changes, false)) {\n            this.minValidateFn = this.rangeValidation ? createMinValidator(this.min) : noop;\n            this.maxValidateFn = this.rangeValidation ? createMaxValidator(this.max) : noop;\n            this.ngValidatorChange();\n        }\n        if (anyChanged(['autoCorrect', 'decimals', 'min'], changes)) {\n            delete this.numericRegex;\n        }\n        if (anyChanged(['value', 'format'], changes, false)) {\n            this.verifyValue(this.value);\n            this.value = this.restrictModelValue(this.value);\n            if (!this.focused || (this.intl.parseNumber(this.elementValue) !== this.value)) {\n                this.setInputValue();\n            }\n        }\n    }\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        if (this.subscriptions) {\n            this.subscriptions.unsubscribe();\n        }\n        clearTimeout(this.spinTimeout);\n    }\n    /**\n     * @hidden\n     */\n    validate(control) {\n        return this.minValidateFn(control) || this.maxValidateFn(control);\n    }\n    /**\n     * @hidden\n     */\n    registerOnValidatorChange(fn) {\n        this.ngValidatorChange = fn;\n    }\n    /**\n     * @hidden\n     */\n    writeValue(value) {\n        this.verifyValue(value);\n        let restrictedValue = this.restrictModelValue(value);\n        this.value = restrictedValue;\n        this.setInputValue();\n    }\n    /**\n     * @hidden\n     */\n    registerOnChange(fn) {\n        this.ngChange = fn;\n    }\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn) {\n        this.ngTouched = fn;\n    }\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     *\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * Focuses the NumericTextBox.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"numerictextbox.focus()\">Focus NumericTextBox</button>\n     *  <kendo-numerictextbox #numerictextbox></kendo-numerictextbox>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    focus() {\n        invokeElementMethod(this.numericInput, 'focus');\n    }\n    /**\n     * Blurs the NumericTextBox.\n     */\n    blur() {\n        invokeElementMethod(this.numericInput, 'blur');\n    }\n    /**\n     * Notifies the `NumericTextBoxComponent` that the input value should be changed.\n     * Can be used to update the input after setting the component properties directly.\n     */\n    notifyValueChange() {\n        this.setInputValue();\n    }\n    /**\n     * @hidden\n     */\n    get incrementTitle() {\n        return this.localizationService.get('increment');\n    }\n    /**\n     * @hidden\n     */\n    get decrementTitle() {\n        return this.localizationService.get('decrement');\n    }\n    get decimalSeparator() {\n        const numberSymbols = this.intl.numberSymbols();\n        return numberSymbols.decimal;\n    }\n    get elementValue() {\n        return this.numericInput.nativeElement.value;\n    }\n    set elementValue(value) {\n        this.renderer.setProperty(this.numericInput.nativeElement, 'value', value);\n    }\n    get focused() {\n        return this.isFocused;\n    }\n    get hasDecimals() {\n        return this.decimals !== null && this.decimals >= 0;\n    }\n    set focused(value) {\n        if (this.isFocused !== value && this.numericWrap) {\n            const wrap = this.numericWrap.nativeElement;\n            const input = this.numericInput.nativeElement;\n            if (value) {\n                this.renderer.addClass(wrap, FOCUSED$2);\n                if (!this.isDisabled) {\n                    this.renderer.removeClass(input, FORMATTED_VALUE);\n                }\n            }\n            else {\n                this.renderer.removeClass(wrap, FOCUSED$2);\n                this.renderer.addClass(input, FORMATTED_VALUE);\n            }\n            this.isFocused = value;\n        }\n    }\n    get isDisabled() {\n        return this.disabled || this.readonly;\n    }\n    arrowPress(direction, e) {\n        e.preventDefault();\n        if (this.isDisabled) {\n            return;\n        }\n        if (!mobileOS) {\n            this.focused = true;\n            this.focus();\n        }\n        if (this.arrowDirection !== direction) {\n            this.arrowDirection = direction;\n            this.changeDetector.detectChanges();\n        }\n        if (this.step) {\n            this.spin(direction, INITIAL_SPIN_DELAY);\n        }\n        else {\n            this.setInputValue();\n        }\n    }\n    updateValue(value) {\n        if (!areSame(this.value, value)) {\n            this.ngZone.run(() => {\n                this.value = value;\n                this.ngChange(value);\n                this.valueChange.emit(value);\n                this.changeDetector.markForCheck();\n            });\n        }\n    }\n    replaceNumpadDotValue() {\n        let value = this.inputValue || \"\";\n        if (this.previousSelection) {\n            const input = this.numericInput.nativeElement;\n            const { selectionStart, selectionEnd } = input;\n            const { start, end } = this.previousSelection;\n            input.value = value = value.substring(0, start) + this.decimalSeparator + value.substring(end);\n            this.setSelection(selectionStart, selectionEnd);\n        }\n        return value;\n    }\n    isValid(value) {\n        if (!this.numericRegex) {\n            this.numericRegex = numericRegex({\n                autoCorrect: this.autoCorrect,\n                decimals: this.decimals,\n                min: this.min,\n                separator: this.decimalSeparator\n            });\n        }\n        return this.numericRegex.test(value);\n    }\n    spin(step, timeout) {\n        clearTimeout(this.spinTimeout);\n        this.spinTimeout = window.setTimeout(() => {\n            this.spin(step, SPIN_DELAY);\n        }, timeout);\n        this.addStep(step);\n    }\n    addStep(step) {\n        let value = add(this.value || 0, this.step * step);\n        value = this.limitValue(value);\n        value = this.restrictDecimals(value);\n        this.setInputValue(value);\n        this.updateValue(value);\n    }\n    setSelection(start, end) {\n        if (this.focused) {\n            invokeElementMethod(this.numericInput, 'setSelectionRange', start, end);\n        }\n    }\n    limitValue(value) {\n        let result = value;\n        if (!this.isInRange(value)) {\n            if (isNumber(this.max) && value > this.max) {\n                result = this.max;\n            }\n            if (isNumber(this.min) && value < this.min) {\n                result = this.min;\n            }\n        }\n        return result;\n    }\n    limitInputValue(value) {\n        let { selectionStart, selectionEnd, value: enteredValue } = this.numericInput.nativeElement;\n        let limitedValue = value;\n        let selectToEnd = false;\n        if (!this.isInRange(value)) {\n            const lengthChange = enteredValue.length - String(this.inputValue).length;\n            const { min, max } = this;\n            const hasMax = isNumber(max);\n            const hasMin = isNumber(min);\n            let padLimit, replaceNext;\n            let correctedValue = value;\n            if (selectionStart === 0 && this.inputValue.substr(1) === enteredValue) {\n                return {\n                    selectionEnd: selectionEnd,\n                    selectionStart: selectionStart,\n                    value: null\n                };\n            }\n            if (hasMax && value > max) {\n                if (value > 0) {\n                    replaceNext = true;\n                }\n                else {\n                    padLimit = max;\n                }\n            }\n            else if (hasMin && value < min) {\n                if (value > 0) {\n                    padLimit = min;\n                }\n                else {\n                    replaceNext = true;\n                }\n            }\n            if (padLimit) {\n                const paddedValue = this.tryPadValue(value, padLimit);\n                if (paddedValue && decimalPart(value) !== decimalPart(padLimit)) {\n                    correctedValue = paddedValue;\n                    selectToEnd = true;\n                }\n            }\n            else if (replaceNext) {\n                if (this.inputValue && selectionStart !== enteredValue.length) {\n                    correctedValue = parseFloat(enteredValue.substr(0, selectionStart) +\n                        enteredValue.substr(selectionStart + lengthChange));\n                }\n            }\n            limitedValue = this.limitValue(correctedValue);\n            selectToEnd = (selectToEnd || limitedValue !== correctedValue) && this.previousSelection &&\n                (this.previousSelection.end - this.previousSelection.start + lengthChange) > 0;\n        }\n        return {\n            selectionEnd: selectToEnd ? String(limitedValue).length : selectionEnd,\n            selectionStart: selectionStart,\n            value: limitedValue\n        };\n    }\n    tryPadValue(value, limit) {\n        const limitLength = String(Math.floor(limit)).length;\n        const zeroPadded = pad(value, limitLength);\n        const zeroPaddedNext = pad(value, limitLength + 1);\n        let result;\n        if (this.isInRange(zeroPadded)) {\n            result = zeroPadded;\n        }\n        else if (this.isInRange(zeroPaddedNext)) {\n            result = zeroPaddedNext;\n        }\n        return result;\n    }\n    isInRange(value) {\n        return !isNumber(value) || ((!isNumber(this.min) || this.min <= value) && (!isNumber(this.max) || value <= this.max));\n    }\n    restrictModelValue(value) {\n        let result = this.restrictDecimals(value, true);\n        if (this.autoCorrect && this.limitValue(result) !== result) {\n            result = null;\n        }\n        return result;\n    }\n    restrictDecimals(value, round) {\n        let result = value;\n        if (value && this.hasDecimals) {\n            const decimals = this.decimals;\n            const stringValue = String(value);\n            if (round || EXPONENT_REGEX.test(stringValue)) {\n                result = toFixedPrecision(value, decimals);\n            }\n            else {\n                const parts = stringValue.split(POINT);\n                let fraction = parts[1];\n                if (fraction && fraction.length > decimals) {\n                    fraction = fraction.substr(0, decimals);\n                    result = parseFloat(`${parts[0]}${POINT}${fraction}`);\n                }\n            }\n        }\n        return result;\n    }\n    formatInputValue(value) {\n        let stringValue = String(value);\n        const exponentMatch = EXPONENT_REGEX.exec(stringValue);\n        if (exponentMatch) {\n            stringValue = value.toFixed(limitPrecision(parseInt(exponentMatch[1], 10)));\n        }\n        return stringValue.replace(POINT, this.decimalSeparator);\n    }\n    formatValue(value, focused) {\n        let formattedValue;\n        if (value === null || !defined(value) || value === '') {\n            formattedValue = '';\n        }\n        else if (focused && !this.readonly) {\n            formattedValue = this.formatInputValue(value);\n        }\n        else {\n            formattedValue = this.intl.formatNumber(value, this.format);\n        }\n        return formattedValue;\n    }\n    setInputValue(value = this.value, focused = this.focused) {\n        const formattedValue = this.formatValue(value, focused);\n        this.elementValue = formattedValue;\n        this.inputValue = formattedValue;\n    }\n    verifySettings() {\n        if (!isDevMode()) {\n            return;\n        }\n        if (this.min !== null && this.max !== null && this.min > this.max) {\n            throw new Error(`The max value should be bigger than the min. See ${MIN_DOC_LINK} and ${MAX_DOC_LINK}.`);\n        }\n    }\n    verifyValue(value) {\n        if (isDevMode() && value && typeof value !== 'number') {\n            throw new Error(`The NumericTextBox component requires value of type Number and ${JSON.stringify(value)} was set.`);\n        }\n    }\n    parseOptions(options) {\n        for (let idx = 0; idx < options.length; idx++) {\n            const name = options[idx];\n            const value = this[name];\n            if (typeof value === 'string') {\n                const parsed = parseFloat(value);\n                const valid = !isNaN(parsed);\n                if (isDevMode() && !valid && value !== '') {\n                    throw new Error('The NumericTextBox component requires value of type Number or a String representing ' +\n                        `a number for the ${name} property and ${JSON.stringify(value)} was set.`);\n                }\n                this[name] = valid ? parsed : PARSABLE_DEFAULTS[name];\n            }\n        }\n    }\n    intlChange() {\n        delete this.numericRegex;\n        if (this.numericInput && (!this.focused || !this.isValid(this.elementValue))) {\n            this.setInputValue();\n        }\n    }\n    hasTrailingZeros(inputValue) {\n        if (this.hasDecimals && this.focused) {\n            const fraction = inputValue.split(this.decimalSeparator)[1];\n            return fraction && fraction.length > this.decimals && fraction.lastIndexOf('0') === fraction.length - 1;\n        }\n    }\n    selectAll() {\n        this.setInputValue();\n        this.setSelection(0, this.inputValue.length);\n    }\n    selectCaret() {\n        const caretPosition = getCaretPosition(this.numericInput.nativeElement);\n        const formattedValue = this.elementValue;\n        const partialValue = formattedValue.substring(0, caretPosition);\n        this.setInputValue();\n        if (partialValue.length) {\n            const significantCharsInFormattedValue = extractSignificantNumericChars(partialValue, this.decimalSeparator);\n            const adjustedSignificantChars = this.adjustSignificantChars(formattedValue, significantCharsInFormattedValue);\n            this.setSelection(adjustedSignificantChars, adjustedSignificantChars);\n        }\n        else {\n            this.setSelection(0, 0);\n        }\n    }\n    numberOfLeadingZeroes(formattedValue) {\n        const separatorIndex = formattedValue.indexOf(this.decimalSeparator);\n        const matchedLeadingZeroes = formattedValue.match(/^[^1-9]*?(0+)/);\n        if (matchedLeadingZeroes) {\n            const lengthOfMatch = matchedLeadingZeroes[0].length;\n            const lengthOfLeadingZeroesMatch = matchedLeadingZeroes[1].length;\n            return lengthOfMatch === separatorIndex ? lengthOfLeadingZeroesMatch - 1 : lengthOfLeadingZeroesMatch;\n        }\n        return 0;\n    }\n    adjustSignificantChars(formattedValue, significantChars) {\n        const leadingZeroes = this.numberOfLeadingZeroes(formattedValue);\n        if (leadingZeroes > 0) {\n            return Math.max(0, significantChars - leadingZeroes);\n        }\n        return significantChars;\n    }\n}\nNumericTextBoxComponent.decorators = [\n    { type: Component, args: [{\n                exportAs: 'kendoNumericTextBox',\n                providers: [\n                    LocalizationService,\n                    { provide: L10N_PREFIX, useValue: 'kendo.numerictextbox' },\n                    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NumericTextBoxComponent), multi: true },\n                    { provide: NG_VALIDATORS, useExisting: forwardRef(() => NumericTextBoxComponent), multi: true },\n                    { provide: KendoInput, useExisting: forwardRef(() => NumericTextBoxComponent) }\n                ],\n                selector: 'kendo-numerictextbox',\n                template: `\n        <ng-container kendoNumericTextBoxLocalizedMessages\n            i18n-increment=\"kendo.numerictextbox.increment|The title for the **Increment** button in the NumericTextBox\"\n            increment=\"Increase value\"\n            i18n-decrement=\"kendo.numerictextbox.decrement|The title for the **Decrement** button in the NumericTextBox\"\n            decrement=\"Decrease value\"\n        >\n        </ng-container>\n        <span\n            class=\"k-numeric-wrap\"\n            [class.k-state-disabled]=\"disabled\"\n            [kendoEventsOutsideAngular]=\"{ mousewheel: handleWheel, DOMMouseScroll: handleWheel }\"\n            #numericWrap>\n            <input\n            role=\"spinbutton\"\n            class=\"k-input k-formatted-value\"\n            autocomplete=\"off\"\n            autocorrect=\"off\"\n            [id]=\"focusableId\"\n            [attr.aria-valuemin]=\"min\"\n            [attr.aria-valuemax]=\"max\"\n            [attr.aria-valuenow]=\"value\"\n            [attr.title]=\"title\"\n            [attr.placeholder]=\"placeholder\"\n            [tabindex]=\"tabIndex\"\n            [disabled]=\"disabled\"\n            [readonly]=\"readonly\"\n            [kendoEventsOutsideAngular]=\"{\n                mousedown: handleMouseDown,\n                dragenter: handleDragEnter,\n                keydown: handleKeyDown,\n                input: handleInput,\n                focus: handleFocus,\n                blur: handleBlur,\n                paste: handlePaste\n            }\"\n            #numericInput />\n            <span class=\"k-select\" *ngIf=\"spinners\" [kendoEventsOutsideAngular]=\"{ mouseup: releaseArrow, mouseleave: releaseArrow }\">\n                <span\n                    [kendoEventsOutsideAngular]=\"{ mousedown: increasePress }\"\n                    [attr.aria-label]=\"incrementTitle\"\n                    [title]=\"incrementTitle\"\n                    [class.k-state-active]=\"arrowDirection === ArrowDirection.Up\"\n                    class=\"k-link k-link-increase\"\n                >\n                    <span class=\"k-icon k-i-arrow-n\"></span>\n                </span>\n                <span\n                    [kendoEventsOutsideAngular]=\"{ mousedown: decreasePress }\"\n                    [attr.aria-label]=\"decrementTitle\"\n                    [title]=\"decrementTitle\"\n                    [class.k-state-active]=\"arrowDirection === ArrowDirection.Down\"\n                    class=\"k-link k-link-decrease\"\n                >\n                    <span class=\"k-icon k-i-arrow-s\"></span>\n                </span>\n            </span>\n        </span>\n      `\n            },] },\n];\n/** @nocollapse */\nNumericTextBoxComponent.ctorParameters = () => [\n    { type: IntlService },\n    { type: Renderer2 },\n    { type: LocalizationService },\n    { type: Injector },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: ElementRef }\n];\nNumericTextBoxComponent.propDecorators = {\n    focusableId: [{ type: Input }],\n    disabled: [{ type: Input }],\n    readonly: [{ type: Input }],\n    title: [{ type: Input }],\n    autoCorrect: [{ type: Input }],\n    format: [{ type: Input }],\n    max: [{ type: Input }],\n    min: [{ type: Input }],\n    decimals: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    step: [{ type: Input }],\n    spinners: [{ type: Input }],\n    rangeValidation: [{ type: Input }],\n    tabindex: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    selectOnFocus: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    onFocus: [{ type: Output, args: ['focus',] }],\n    onBlur: [{ type: Output, args: ['blur',] }],\n    numericInput: [{ type: ViewChild, args: ['numericInput', { static: true },] }],\n    numericWrap: [{ type: ViewChild, args: ['numericWrap',] }],\n    direction: [{ type: HostBinding, args: ['attr.dir',] }],\n    widgetClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-numerictextbox',] }]\n};\n\n/**\n * @hidden\n */\nclass NumericTextBoxMessages extends ComponentMessages {\n}\nNumericTextBoxMessages.propDecorators = {\n    decrement: [{ type: Input }],\n    increment: [{ type: Input }]\n};\n\n/**\n * Custom component messages override default component messages.\n */\nclass NumericTextBoxCustomMessagesComponent extends NumericTextBoxMessages {\n    constructor(service) {\n        super();\n        this.service = service;\n    }\n    get override() {\n        return true;\n    }\n}\nNumericTextBoxCustomMessagesComponent.decorators = [\n    { type: Component, args: [{\n                providers: [\n                    {\n                        provide: NumericTextBoxMessages,\n                        useExisting: forwardRef(() => NumericTextBoxCustomMessagesComponent) // tslint:disable-line:no-forward-ref\n                    }\n                ],\n                selector: 'kendo-numerictextbox-messages',\n                template: ``\n            },] },\n];\n/** @nocollapse */\nNumericTextBoxCustomMessagesComponent.ctorParameters = () => [\n    { type: LocalizationService }\n];\n\n/**\n * @hidden\n */\nvar ResultType;\n(function (ResultType) {\n    ResultType[ResultType[\"Literal\"] = 0] = \"Literal\";\n    ResultType[ResultType[\"Mask\"] = 1] = \"Mask\";\n    ResultType[ResultType[\"Undefined\"] = 2] = \"Undefined\";\n})(ResultType || (ResultType = {}));\n/**\n * @hidden\n */\nclass Result {\n    constructor(value, rest, type = ResultType.Undefined) {\n        this.value = value;\n        this.rest = rest;\n        this.type = type;\n    }\n    //map :: Functor f => f a ~> (a -> b) -> f b\n    map(fn) {\n        return new Result(fn(this.value), this.rest);\n    }\n    //chain :: Chain m => m a ~> (a -> m b) -> m b\n    chain(fn) {\n        return fn(this.value, this.rest);\n    }\n    fold(s, _ /*we don't need it*/) {\n        return s(this.value, this.rest);\n    }\n    concat(r) {\n        return this.map((vs, _) => r.chain((v, __) => vs.concat([v])));\n    }\n    toString() {\n        return `Result({ value: '${this.value}', rest: ${this.rest} })`;\n    }\n}\n\n/**\n * @hidden\n */\nclass Stream {\n    constructor(input = [], control = []) {\n        this.input = input;\n        this.control = control;\n        this.inputCursor = 0;\n        this.controlCursor = 0;\n    }\n    eof() {\n        return this.inputCursor >= this.input.length;\n    }\n    // Get the first value from the input.\n    next() {\n        return {\n            char: this.input[this.inputCursor++],\n            control: this.control[this.controlCursor++]\n        };\n    }\n    peek() {\n        return {\n            char: this.input[this.inputCursor],\n            control: this.control[this.controlCursor]\n        };\n    }\n    eat_input() {\n        this.inputCursor++;\n    }\n    eat_control() {\n        this.controlCursor++;\n    }\n    eat() {\n        this.inputCursor++;\n        this.controlCursor++;\n    }\n}\n\nconst toArray = (value) => (value || '').split('');\nconst ESCAPE_CHARACTER = '\\\\';\n/**\n * @hidden\n */\nclass Parser {\n    constructor(parse) {\n        this.parse = parse;\n    }\n    run(input, control = '') {\n        if (input instanceof Stream) {\n            return this.parse(input);\n        }\n        else {\n            return this.parse(new Stream(toArray(input), toArray(control)));\n        }\n    }\n    //map :: Functor f => f a ~> (a -> b) -> f b\n    map(f) {\n        return new Parser(stream => this.parse(stream).map(f));\n    }\n    //chain :: Chain m => m a ~> (a -> m b) -> m b\n    chain(f) {\n        return new Parser(stream => this.parse(stream).chain((v, s) => f(v).run(s)));\n    }\n    isLiteral(c) {\n        return this.run(c).type === ResultType.Literal;\n    }\n}\n/**\n * @hidden\n */\nconst mask = ({ prompt, promptPlaceholder }) => rule => new Parser(stream => {\n    while (!stream.eof()) {\n        const { char, control } = stream.peek();\n        if (char === control && control === prompt) {\n            stream.eat();\n            return new Result(prompt, stream, ResultType.Mask);\n        }\n        if (rule.test(char)) {\n            stream.eat();\n            return new Result(char, stream, ResultType.Mask);\n        }\n        if (char === promptPlaceholder) {\n            stream.eat();\n            return new Result(prompt, stream, ResultType.Mask);\n        }\n        stream.eat_input();\n    }\n    stream.eat();\n    return new Result(prompt, stream, ResultType.Mask);\n});\n/**\n * @hidden\n */\nconst literal = _token => new Parser(stream => {\n    //    let {char, control} = stream.peek();\n    let char = stream.peek().char;\n    if (char === _token) {\n        stream.eat();\n        return new Result(_token, stream, ResultType.Literal);\n    }\n    //    if (control === _token) {\n    //        while (!stream.eof() && char !== _token) {\n    //            stream.eat_input();\n    //            char = stream.peek().char;\n    //        }\n    //    }\n    //\n    //    if (control !== undefined) {\n    //        stream.eat();\n    //    }\n    return new Result(_token, stream, ResultType.Literal);\n});\n/**\n * @hidden\n */\nconst unmask = prompt => rule => new Parser(stream => {\n    while (!stream.eof()) {\n        const { char, control } = stream.peek();\n        if (char === prompt && control === prompt) {\n            stream.eat();\n            return new Result(char, stream);\n        }\n        if (rule.test(char)) {\n            stream.eat();\n            return new Result(char, stream);\n        }\n        stream.eat_input();\n    }\n    stream.eat();\n    return new Result('', stream);\n});\n/**\n * @hidden\n */\nconst unliteral = _token => new Parser(stream => {\n    if (stream.eof()) {\n        return new Result('', stream);\n    }\n    const { char } = stream.peek();\n    if (char === _token) {\n        stream.eat();\n    }\n    return new Result(_token, stream);\n});\n/**\n * @hidden\n */\nconst token = (rules, creator) => new Parser(stream => {\n    let { char } = stream.next();\n    const rule = rules[char];\n    if (char === ESCAPE_CHARACTER) {\n        char = stream.next().char;\n        return new Result(creator.literal(char), stream);\n    }\n    if (!rule) {\n        return new Result(creator.literal(char), stream);\n    }\n    return new Result(creator.mask(rule), stream);\n});\n/**\n * @hidden\n */\nconst rawMask = ({ prompt, promptPlaceholder }) => new Parser(stream => {\n    let { char } = stream.next();\n    if (char === prompt) {\n        return new Result(promptPlaceholder, stream);\n    }\n    return new Result(char, stream);\n});\n/**\n * @hidden\n */\nconst rawLiteral = includeLiterals => new Parser(stream => {\n    let { char } = stream.next();\n    if (includeLiterals) {\n        return new Result(char, stream);\n    }\n    return new Result('', stream);\n});\n\n/**\n * @hidden\n */\nconst always = value => new Parser(stream => new Result(value, stream));\n/**\n * @hidden\n */\nconst append = (p1, p2) => p1.chain(vs => p2.map(v => vs.concat([v])));\n/**\n * @hidden\n */\nconst sequence = list => list.reduce((acc, parser) => append(acc, parser), always([]));\n/**\n * @hidden\n */\nconst greedy = parser => new Parser(stream => {\n    let result = new Result([], stream);\n    while (!stream.eof()) {\n        result = result.concat(parser.run(stream));\n    }\n    return result;\n});\n\n/**\n * @hidden\n */\nclass MaskingService {\n    constructor() {\n        this.rules = {};\n        this.prompt = \"_\";\n        this.mask = \"\";\n        this.promptPlaceholder = \" \";\n        this.includeLiterals = false;\n        this.maskTokens = [];\n        this.unmaskTokens = [];\n        this.rawTokens = [];\n        this.validationTokens = [];\n    }\n    update({ mask: mask$$1 = '', prompt = '', promptPlaceholder = ' ', rules = {}, includeLiterals = false }) {\n        this.mask = mask$$1;\n        this.prompt = prompt;\n        this.promptPlaceholder = promptPlaceholder;\n        this.rules = rules;\n        this.includeLiterals = includeLiterals;\n        this.tokenize();\n    }\n    validationValue(maskedValue = '') {\n        let value = maskedValue;\n        sequence(this.validationTokens)\n            .run(maskedValue)\n            .fold(unmasked => {\n            value = unmasked.join('');\n        });\n        return value;\n    }\n    rawValue(maskedValue = '') {\n        let value = maskedValue;\n        if (!this.rawTokens.length) {\n            return value;\n        }\n        sequence(this.rawTokens)\n            .run(maskedValue)\n            .fold(unmasked => {\n            value = unmasked.join('');\n        });\n        return value;\n    }\n    /**\n     * @hidden\n     */\n    maskRaw(rawValue = '') {\n        let value = rawValue;\n        if (!this.maskTokens.length) {\n            return value;\n        }\n        sequence(this.maskTokens)\n            .run(rawValue)\n            .fold(masked => {\n            value = masked.join('');\n        });\n        return value;\n    }\n    maskInput(input, control, splitPoint) {\n        if (input.length < control.length) {\n            return this.maskRemoved(input, control, splitPoint);\n        }\n        return this.maskInserted(input, control, splitPoint);\n    }\n    maskInRange(pasted, oldValue, start, end) {\n        let value = '';\n        let selection = end;\n        const beforeChange = oldValue.split('').slice(0, start);\n        const afterChange = oldValue.split('').slice(end);\n        sequence(this.maskTokens.slice(start, end))\n            .run(pasted)\n            .fold(masked => {\n            value = beforeChange\n                .concat(masked)\n                .concat(afterChange)\n                .join('');\n        });\n        return {\n            selection,\n            value\n        };\n    }\n    maskRemoved(input, control, splitPoint) {\n        let value = '';\n        let selection = splitPoint;\n        const unchanged = input.split('').slice(splitPoint);\n        const changed = input.split('').slice(0, splitPoint).join('');\n        const take$$1 = this.maskTokens.length - (input.length - splitPoint);\n        sequence(this.maskTokens.slice(0, take$$1))\n            .run(changed, control)\n            .fold(masked => {\n            selection = this.adjustPosition(masked, selection);\n            value = masked.concat(unchanged).join('');\n        });\n        return {\n            selection,\n            value\n        };\n    }\n    adjustPosition(input, selection) {\n        const caretChar = input[selection];\n        const isLiteral = this.maskTokens[selection].isLiteral(caretChar);\n        if (!isLiteral && caretChar !== this.prompt) {\n            return selection + 1;\n        }\n        return selection;\n    }\n    maskInserted(input, control, splitPoint) {\n        let value = '';\n        let selection = splitPoint;\n        const changed = input.slice(0, splitPoint);\n        sequence(this.unmaskTokens)\n            .run(changed, control)\n            .chain(unmasked => {\n            selection = unmasked.join('').length;\n            const unchanged = control.slice(selection);\n            return sequence(this.maskTokens)\n                .run(unmasked.join('') + unchanged, control);\n        })\n            .fold(masked => {\n            value = masked.join('');\n        });\n        return {\n            selection,\n            value\n        };\n    }\n    get maskTokenCreator() {\n        const { prompt, promptPlaceholder } = this;\n        return {\n            literal: rule => literal(rule),\n            mask: rule => mask({ prompt, promptPlaceholder })(rule)\n        };\n    }\n    get unmaskTokenCreator() {\n        return {\n            literal: rule => unliteral(rule),\n            mask: rule => unmask(this.prompt)(rule)\n        };\n    }\n    get rawTokenCreator() {\n        const { prompt, promptPlaceholder, includeLiterals } = this;\n        return {\n            literal: _ => rawLiteral(includeLiterals),\n            mask: _ => rawMask({ prompt, promptPlaceholder })\n        };\n    }\n    get validationTokenCreator() {\n        const { prompt } = this;\n        return {\n            literal: _ => rawLiteral(false),\n            mask: _ => rawMask({ prompt, promptPlaceholder: '' })\n        };\n    }\n    tokenize() {\n        greedy(token(this.rules, this.maskTokenCreator))\n            .run(this.mask)\n            .fold((tokens, _) => {\n            this.maskTokens = tokens;\n        });\n        greedy(token(this.rules, this.unmaskTokenCreator))\n            .run(this.mask)\n            .fold((tokens, _) => {\n            this.unmaskTokens = tokens;\n        });\n        greedy(token(this.rules, this.rawTokenCreator))\n            .run(this.mask)\n            .fold((tokens, _) => {\n            this.rawTokens = tokens;\n        });\n        greedy(token(this.rules, this.validationTokenCreator))\n            .run(this.mask)\n            .fold((tokens, _) => {\n            this.validationTokens = tokens;\n        });\n    }\n}\nMaskingService.decorators = [\n    { type: Injectable },\n];\n\nconst resolvedPromise = Promise.resolve(null);\nconst FOCUSED$3 = 'k-state-focused';\n/**\n * Represents the [Kendo UI MaskedTextBox component for Angular]({% slug overview_maskedtextbox %}).\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *      <kendo-maskedtextbox\n *          [mask]=\"mask\"\n *          [value]=\"value\">\n *      </kendo-maskedtextbox>\n *     `\n * })\n *\n * class AppComponent {\n *  public value: string = \"9580128055807792\";\n *  public mask: string = \"0000-0000-0000-0000\";\n * }\n * ```\n */\nclass MaskedTextBoxComponent {\n    constructor(service, renderer, hostElement, ngZone, injector, changeDetector, rtl) {\n        this.service = service;\n        this.renderer = renderer;\n        this.hostElement = hostElement;\n        this.ngZone = ngZone;\n        this.injector = injector;\n        this.changeDetector = changeDetector;\n        /**\n         * @hidden\n         */\n        this.focusableId = `k-${guid()}`;\n        /**\n         * Determines whether the MaskedTextBox is disabled ([see example]({% slug disabled_maskedtextbox %})).\n         */\n        this.disabled = false;\n        /**\n         * Determines whether the MaskedTextBox is in its read-only state ([see example]({% slug readonly_maskedtextbox %})).\n         */\n        this.readonly = false;\n        this.hostClasses = true;\n        /**\n         * Represents a prompt character for the masked value.\n         * @default `_`\n         */\n        this.prompt = '_';\n        /**\n         * Indicates a character which represents an empty position in the raw value.\n         * @default ' '\n         */\n        this.promptPlaceholder = ' ';\n        /**\n         * Indicates whether to include literals in the raw value  ([see example]({% slug value_maskedtextbox %})).\n         * @default false\n         */\n        this.includeLiterals = false;\n        /**\n         * Specifies if the mask should be shown on focus for empty value.\n         */\n        this.maskOnFocus = false;\n        /**\n         * Determines whether the built-in mask validator is enforced when a form is validated\n         * ([see example]({% slug validation_maskedtextbox %})).\n         * @default true\n         */\n        this.maskValidation = true;\n        /**\n         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        this.tabindex = 0;\n        /**\n         * Fires each time the user focuses the `input` element.\n         *\n         * > To wire the event programmatically, use the `onFocus` property.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-maskedtextbox (focus)=\"handleFocus()\"></kendo-maskedtextbox>\n         * `\n         * })\n         * class AppComponent {\n         *   public handleFocus(): void {\n         *      console.log(\"Component is focused\");\n         *   }\n         * }\n         * ```\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the `input` element gets blurred.\n         *\n         * > To wire the event programmatically, use the `onBlur` property.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-maskedtextbox (blur)=\"handleBlur()\"></kendo-maskedtextbox>\n         * `\n         * })\n         * class AppComponent {\n         *   public handleBlur(): void {\n         *      console.log(\"Component is blurred\");\n         *   }\n         * }\n         * ```\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the value changes.\n         */\n        this.valueChange = new EventEmitter();\n        this.focusClick = false;\n        this.defaultRules = {\n            \"#\": /[\\d\\s\\+\\-]/,\n            \"&\": /[\\S]/,\n            \"0\": /[\\d]/,\n            \"9\": /[\\d\\s]/,\n            \"?\": /[a-zA-Z\\s]/,\n            \"A\": /[a-zA-Z0-9]/,\n            \"C\": /./,\n            \"L\": /[a-zA-Z]/,\n            \"a\": /[a-zA-Z0-9\\s]/\n        };\n        this.isPasted = false;\n        this.selection = [0, 0];\n        /**\n         * @hidden\n         */\n        this.handleFocus = () => {\n            this.focused = true;\n            if (this.maskOnFocus && this.emptyMask) {\n                this.updateInput(this.service.maskRaw(this.value));\n                this.ngZone.runOutsideAngular(() => {\n                    setTimeout(() => { this.setSelection(0, 0); }, 0);\n                });\n            }\n            if (hasObservers(this.onFocus)) {\n                this.ngZone.run(() => {\n                    this.onFocus.emit();\n                });\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.handleClick = () => {\n            if (this.focused && !this.focusClick) {\n                this.focusClick = true;\n                const { selectionStart, selectionEnd } = this.input.nativeElement;\n                if (selectionStart === selectionEnd) {\n                    this.setFocusSelection();\n                }\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.handleBlur = () => {\n            this.changeDetector.markForCheck();\n            this.focused = false;\n            this.focusClick = false;\n            if (this.maskOnFocus && this.emptyMask) {\n                this.updateInput(this.maskedValue);\n            }\n            if (hasObservers(this.onBlur) || requiresZoneOnBlur(this.control)) {\n                this.ngZone.run(() => {\n                    this.onTouched();\n                    this.onBlur.emit();\n                });\n            }\n        };\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n        this.direction = rtl ? 'rtl' : 'ltr';\n        this.updateService();\n    }\n    get hostDisabledClass() {\n        return this.disabled;\n    }\n    /**\n     * Exposes the RegExp-based mask validation array ([see example]({% slug masks_maskedtextbox %})).\n     */\n    get rules() {\n        return this._rules || this.defaultRules;\n    }\n    set rules(value) {\n        this._rules = Object.assign({}, this.defaultRules, value);\n    }\n    /**\n     * @hidden\n     */\n    set tabIndex(tabIndex) {\n        this.tabindex = tabIndex;\n    }\n    get tabIndex() {\n        return this.tabindex;\n    }\n    ngOnInit() {\n        if (this.hostElement) {\n            this.renderer.removeAttribute(this.hostElement.nativeElement, \"tabindex\");\n        }\n        this.control = this.injector.get(NgControl, null);\n    }\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the MaskedTextBox is empty.\n     */\n    isEmpty() {\n        if (this.input) {\n            return !Boolean(this.input.nativeElement.value);\n        }\n    }\n    /**\n     * @hidden\n     */\n    handleDragDrop() {\n        return false;\n    }\n    /**\n     * Focuses the MaskedTextBox.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"maskedinput.focus()\">Focus the input</button>\n     *  <kendo-maskedtextbox #maskedinput></kendo-maskedtextbox>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    focus() {\n        if (!this.input) {\n            return;\n        }\n        this.input.nativeElement.focus();\n        this.setFocusSelection();\n    }\n    /**\n     * Blurs the MaskedTextBox.\n     */\n    blur() {\n        if (!this.input) {\n            return;\n        }\n        this.input.nativeElement.blur();\n    }\n    /**\n     * @hidden\n     */\n    pasteHandler(e) {\n        const { selectionStart, selectionEnd } = e.target;\n        if (selectionEnd === selectionStart) {\n            return;\n        }\n        this.isPasted = true;\n        this.selection = [selectionStart, selectionEnd];\n    }\n    /**\n     * @hidden\n     */\n    inputHandler(e) {\n        const value = e.target.value;\n        const [start, end] = this.selection;\n        if (!this.mask) {\n            this.updateValue(value);\n            this.isPasted = false;\n            return;\n        }\n        let result;\n        if (this.isPasted) {\n            this.isPasted = false;\n            const rightPart = this.maskedValue.length - end;\n            const to = value.length - rightPart;\n            result = this.service.maskInRange(value.slice(start, to), this.maskedValue, start, end);\n        }\n        else {\n            result = this.service.maskInput(value, this.maskedValue, e.target.selectionStart);\n        }\n        this.updateInput(result.value, result.selection);\n        this.updateValue(result.value);\n    }\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes) {\n        if (changes.value) {\n            this.value = this.normalizeValue();\n        }\n        if (!this.mask) {\n            this.updateInput(this.value);\n            return;\n        }\n        const next = this.extractChanges(changes);\n        this.updateService(next);\n        if (isChanged('value', changes)) {\n            const maskedValue = this.service.maskRaw(this.value);\n            if (maskedValue !== this.maskedValue) {\n                this.updateInput(maskedValue);\n            }\n        }\n        else if (anyChanged(['promptPlaceholder', 'includeLiterals'], changes)) {\n            resolvedPromise.then(() => {\n                this.updateValue(this.maskedValue);\n            });\n        }\n        else {\n            this.updateInput(this.service.maskRaw(this.value));\n        }\n    }\n    /**\n     * @hidden\n     * Writes a new value to the element.\n     */\n    writeValue(value) {\n        this.value = this.normalizeValue(value);\n        this.updateInput(this.service.maskRaw(this.value));\n    }\n    /**\n     * @hidden\n     * Sets the function that will be called when a `change` event is triggered.\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * @hidden\n     * Sets the function that will be called when a `touch` event is triggered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     *\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * @hidden\n     */\n    validate(_) {\n        if (this.maskValidation === false || !this.mask) {\n            return null;\n        }\n        if (!this.service.validationValue(this.maskedValue)) {\n            return null;\n        }\n        if (this.maskedValue.indexOf(this.prompt) !== -1) {\n            return {\n                patternError: {\n                    mask: this.mask,\n                    maskedValue: this.maskedValue,\n                    value: this.value\n                }\n            };\n        }\n        return null;\n    }\n    /**\n     * @hidden\n     */\n    updateValue(maskedValue) {\n        if (this.mask && !this.service.validationValue(maskedValue)) {\n            this.value = '';\n        }\n        else {\n            this.value = this.service.rawValue(maskedValue);\n        }\n        this.onChange(this.value);\n        this.valueChange.emit(this.value);\n    }\n    updateInput(maskedValue = '', selection) {\n        this.maskedValue = maskedValue;\n        const value = this.maskOnFocus && !this.focused && this.emptyMask ? '' : maskedValue;\n        this.renderer.setProperty(this.input.nativeElement, \"value\", value);\n        if (selection !== undefined) {\n            this.setSelection(selection, selection);\n        }\n    }\n    extractChanges(changes) {\n        return Object.keys(changes).filter(key => key !== 'rules').reduce((obj, key) => {\n            obj[key] = changes[key].currentValue;\n            return obj;\n        }, {}); // tslint:disable-line:align\n    }\n    updateService(extra) {\n        const config = Object.assign({\n            includeLiterals: this.includeLiterals,\n            mask: this.mask,\n            prompt: this.prompt,\n            promptPlaceholder: this.promptPlaceholder,\n            rules: this.rules\n        }, extra); // tslint:disable-line:align\n        this.service.update(config);\n    }\n    setSelection(start = this.selection[0], end = this.selection[1]) {\n        if (this.focused) {\n            invokeElementMethod(this.input, 'setSelectionRange', start, end);\n        }\n    }\n    get emptyMask() {\n        return this.service.maskRaw() === this.maskedValue;\n    }\n    setFocusSelection() {\n        const selectionStart = this.input.nativeElement.selectionStart;\n        const index = this.maskedValue ? this.maskedValue.indexOf(this.prompt) : 0;\n        if (index >= 0 && index < selectionStart) {\n            this.selection = [index, index];\n            this.setSelection();\n        }\n    }\n    get focused() {\n        return this.isFocused;\n    }\n    set focused(value) {\n        if (this.isFocused !== value && this.hostElement) {\n            const element = this.hostElement.nativeElement;\n            if (value) {\n                this.renderer.addClass(element, FOCUSED$3);\n            }\n            else {\n                this.renderer.removeClass(element, FOCUSED$3);\n            }\n            this.isFocused = value;\n        }\n    }\n    normalizeValue(value = this.value) {\n        const present = isPresent(value);\n        if (present && typeof value !== 'string') {\n            if (isDevMode()) {\n                throw new Error('The MaskedTextBox component supports only string values.');\n            }\n            return String(value);\n        }\n        return present ? value : '';\n    }\n}\nMaskedTextBoxComponent.decorators = [\n    { type: Component, args: [{\n                exportAs: 'kendoMaskedTextBox',\n                providers: [\n                    MaskingService,\n                    {\n                        multi: true,\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => MaskedTextBoxComponent) /* tslint:disable-line */\n                    },\n                    {\n                        multi: true,\n                        provide: NG_VALIDATORS,\n                        useExisting: forwardRef(() => MaskedTextBoxComponent) /* tslint:disable-line */\n                    },\n                    {\n                        provide: KendoInput,\n                        useExisting: forwardRef(() => MaskedTextBoxComponent)\n                    }\n                ],\n                selector: 'kendo-maskedtextbox',\n                template: `\n        <input type=\"text\"\n            #input\n            autocomplete=\"off\"\n            autocorrect=\"off\"\n            autocapitalize=\"off\"\n            spellcheck=\"false\"\n            class=\"k-textbox\"\n            [id]=\"focusableId\"\n            [tabindex]=\"tabIndex\"\n            [attr.title]=\"title\"\n            [disabled]=\"disabled\"\n            [readonly]=\"readonly\"\n            [kendoEventsOutsideAngular]=\"{\n                focus: handleFocus,\n                blur: handleBlur,\n                click: handleClick,\n                dragstart: handleDragDrop,\n                drop: handleDragDrop\n            }\"\n        />\n    `\n            },] },\n];\n/** @nocollapse */\nMaskedTextBoxComponent.ctorParameters = () => [\n    { type: MaskingService },\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Injector },\n    { type: ChangeDetectorRef },\n    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] }] }\n];\nMaskedTextBoxComponent.propDecorators = {\n    focusableId: [{ type: Input }],\n    disabled: [{ type: Input }],\n    readonly: [{ type: Input }],\n    title: [{ type: Input }],\n    direction: [{ type: HostBinding, args: ['attr.dir',] }],\n    hostClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-maskedtextbox',] }],\n    hostDisabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }],\n    mask: [{ type: Input }],\n    value: [{ type: Input }],\n    rules: [{ type: Input }],\n    prompt: [{ type: Input }],\n    promptPlaceholder: [{ type: Input }],\n    includeLiterals: [{ type: Input }],\n    maskOnFocus: [{ type: Input }],\n    maskValidation: [{ type: Input }],\n    tabindex: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    onFocus: [{ type: Output, args: ['focus',] }],\n    onBlur: [{ type: Output, args: ['blur',] }],\n    valueChange: [{ type: Output }],\n    input: [{ type: ViewChild, args: ['input', { static: true },] }],\n    pasteHandler: [{ type: HostListener, args: ['paste', ['$event'],] }],\n    inputHandler: [{ type: HostListener, args: ['input', ['$event'],] }]\n};\n\n/* tslint:disable:component-selector */\n/**\n * @hidden\n */\nclass SliderTick {\n    constructor(value) {\n        this.value = value;\n        this.classes = {\n            'k-tick': true\n        };\n    }\n}\n/**\n * @hidden\n */\nclass SliderTicksComponent {\n    constructor(rtl) {\n        this.rtl = rtl;\n        this.wrapperClasses = 'k-reset k-slider-items';\n        this.ticks = [];\n    }\n    ngOnChanges(_) {\n        this.createTicks();\n    }\n    createTicks() {\n        const count = calculateTicksCount(this.min, this.max, this.step);\n        const largeStep = this.largeStep;\n        const tickValueProps = {\n            max: this.max,\n            min: this.min,\n            smallStep: this.step\n        };\n        let result = [];\n        for (let i = 0; i < count; i++) {\n            result.push(new SliderTick(calculateValueFromTick(i, tickValueProps)));\n            if (largeStep && i % largeStep === 0) {\n                result[i].large = true;\n                result[i].classes['k-tick-large'] = true;\n            }\n        }\n        if (this.rtl || this.vertical) {\n            result = result.reverse();\n        }\n        if (result.length > 0) {\n            Object.assign(result[0].classes, this.endTickClasses(true));\n            Object.assign(result[result.length - 1].classes, this.endTickClasses(false));\n        }\n        this.ticks = result;\n    }\n    endTickClasses(first) {\n        return {\n            'k-first': (first && !this.vertical) || (!first && this.vertical),\n            'k-last': (!first && !this.vertical) || (first && this.vertical)\n        };\n    }\n}\nSliderTicksComponent.decorators = [\n    { type: Component, args: [{\n                selector: '[kendoSliderTicks]',\n                template: `\n    <li #tickElement *ngFor=\"let tick of ticks;\"\n        [ngClass]=\"tick.classes\"\n        title=\"{{ tickTitle(tick.value) }}\"\n        role=\"presentation\"\n     >\n         <ng-container [ngSwitch]=\"tick.large\">\n            <span class=\"k-label\" *ngSwitchCase=\"true\">\n                <ng-container [ngTemplateOutlet]=\"labelTemplate || defaultLabel\" [ngTemplateOutletContext]=\"tick\">\n                </ng-container>\n            </span>\n            <ng-container *ngSwitchCase=\"false\">&nbsp;</ng-container>\n         </ng-container>\n     </li>\n\n     <ng-template #defaultLabel let-value=\"value\">\n        {{ tickTitle(value) }}\n     </ng-template>\n  `\n            },] },\n];\n/** @nocollapse */\nSliderTicksComponent.ctorParameters = () => [\n    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] }] }\n];\nSliderTicksComponent.propDecorators = {\n    wrapperClasses: [{ type: HostBinding, args: ['class',] }],\n    tickTitle: [{ type: Input }],\n    vertical: [{ type: Input }],\n    step: [{ type: Input }],\n    largeStep: [{ type: Input }],\n    min: [{ type: Input }],\n    max: [{ type: Input }],\n    labelTemplate: [{ type: Input }],\n    tickElements: [{ type: ViewChildren, args: ['tickElement',] }]\n};\n\n/**\n * @hidden\n */\nclass SlidersCommonModule {\n}\nSlidersCommonModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    SliderTicksComponent,\n                    LabelTemplateDirective\n                ],\n                exports: [\n                    LabelTemplateDirective,\n                    SliderTicksComponent,\n                    DraggableModule,\n                    EventsModule,\n                    ResizeSensorModule\n                ],\n                imports: [CommonModule, DraggableModule, EventsModule, ResizeSensorModule]\n            },] },\n];\n\n/**\n * @hidden\n */\nclass SliderMessages extends ComponentMessages {\n}\nSliderMessages.propDecorators = {\n    decrement: [{ type: Input }],\n    increment: [{ type: Input }],\n    dragHandle: [{ type: Input }]\n};\n\n/**\n * @hidden\n */\nclass LocalizedSliderMessagesDirective extends SliderMessages {\n    constructor(service) {\n        super();\n        this.service = service;\n    }\n}\nLocalizedSliderMessagesDirective.decorators = [\n    { type: Directive, args: [{\n                providers: [\n                    {\n                        provide: SliderMessages,\n                        useExisting: forwardRef(() => LocalizedSliderMessagesDirective) // tslint:disable-line:no-forward-ref\n                    }\n                ],\n                selector: '[kendoSliderLocalizedMessages]'\n            },] },\n];\n/** @nocollapse */\nLocalizedSliderMessagesDirective.ctorParameters = () => [\n    { type: LocalizationService }\n];\n\n/**\n * Custom component messages override default component messages.\n */\nclass SliderCustomMessagesComponent extends SliderMessages {\n    constructor(service) {\n        super();\n        this.service = service;\n    }\n    get override() {\n        return true;\n    }\n}\nSliderCustomMessagesComponent.decorators = [\n    { type: Component, args: [{\n                providers: [\n                    {\n                        provide: SliderMessages,\n                        useExisting: forwardRef(() => SliderCustomMessagesComponent) // tslint:disable-line:no-forward-ref\n                    }\n                ],\n                selector: 'kendo-slider-messages',\n                template: ``\n            },] },\n];\n/** @nocollapse */\nSliderCustomMessagesComponent.ctorParameters = () => [\n    { type: LocalizationService }\n];\n\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Slider component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Inputs module\n * import { SliderModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, BrowserAnimationsModule, SliderModule], // import Slider module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nclass SliderModule {\n}\nSliderModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    SliderComponent,\n                    SliderCustomMessagesComponent,\n                    LocalizedSliderMessagesDirective\n                ],\n                exports: [\n                    SliderComponent,\n                    SliderCustomMessagesComponent,\n                    LabelTemplateDirective,\n                    LocalizedSliderMessagesDirective\n                ],\n                imports: [CommonModule, SlidersCommonModule]\n            },] },\n];\n\n/**\n * @hidden\n */\nclass RangeSliderMessages extends ComponentMessages {\n}\nRangeSliderMessages.propDecorators = {\n    dragHandleStart: [{ type: Input }],\n    dragHandleEnd: [{ type: Input }]\n};\n\n/**\n * @hidden\n */\nclass LocalizedRangeSliderMessagesDirective extends RangeSliderMessages {\n    constructor(service) {\n        super();\n        this.service = service;\n    }\n}\nLocalizedRangeSliderMessagesDirective.decorators = [\n    { type: Directive, args: [{\n                providers: [\n                    {\n                        provide: RangeSliderMessages,\n                        useExisting: forwardRef(() => LocalizedRangeSliderMessagesDirective) // tslint:disable-line:no-forward-ref\n                    }\n                ],\n                selector: '[kendoSliderLocalizedMessages]'\n            },] },\n];\n/** @nocollapse */\nLocalizedRangeSliderMessagesDirective.ctorParameters = () => [\n    { type: LocalizationService }\n];\n\n/**\n * Custom component messages override default component messages.\n */\nclass RangeSliderCustomMessagesComponent extends RangeSliderMessages {\n    constructor(service) {\n        super();\n        this.service = service;\n    }\n    get override() {\n        return true;\n    }\n}\nRangeSliderCustomMessagesComponent.decorators = [\n    { type: Component, args: [{\n                providers: [\n                    {\n                        provide: RangeSliderMessages,\n                        useExisting: forwardRef(() => RangeSliderCustomMessagesComponent) // tslint:disable-line:no-forward-ref\n                    }\n                ],\n                selector: 'kendo-rangeslider-messages',\n                template: ``\n            },] },\n];\n/** @nocollapse */\nRangeSliderCustomMessagesComponent.ctorParameters = () => [\n    { type: LocalizationService }\n];\n\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the RangeSlider component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Inputs module\n * import { RangeSliderModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, BrowserAnimationsModule, RangeSliderModule], // import RangeSlider module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nclass RangeSliderModule {\n}\nRangeSliderModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    RangeSliderComponent,\n                    RangeSliderCustomMessagesComponent,\n                    LocalizedRangeSliderMessagesDirective\n                ],\n                exports: [\n                    RangeSliderComponent,\n                    RangeSliderCustomMessagesComponent,\n                    LocalizedRangeSliderMessagesDirective,\n                    LabelTemplateDirective\n                ],\n                imports: [CommonModule, SlidersCommonModule]\n            },] },\n];\n\n/**\n * @hidden\n */\nclass Messages extends ComponentMessages {\n}\nMessages.propDecorators = {\n    on: [{ type: Input }],\n    off: [{ type: Input }]\n};\n\n/**\n * @hidden\n */\nclass LocalizedSwitchMessagesDirective extends Messages {\n    constructor(service) {\n        super();\n        this.service = service;\n    }\n}\nLocalizedSwitchMessagesDirective.decorators = [\n    { type: Directive, args: [{\n                providers: [\n                    {\n                        provide: Messages,\n                        useExisting: forwardRef(() => LocalizedSwitchMessagesDirective) // tslint:disable-line:no-forward-ref\n                    }\n                ],\n                selector: '[kendoSwitchLocalizedMessages]'\n            },] },\n];\n/** @nocollapse */\nLocalizedSwitchMessagesDirective.ctorParameters = () => [\n    { type: LocalizationService }\n];\n\n/**\n * Custom component messages override default component messages.\n */\nclass SwitchCustomMessagesComponent extends Messages {\n    constructor(service) {\n        super();\n        this.service = service;\n    }\n    get override() {\n        return true;\n    }\n}\nSwitchCustomMessagesComponent.decorators = [\n    { type: Component, args: [{\n                providers: [\n                    {\n                        provide: Messages,\n                        useExisting: forwardRef(() => SwitchCustomMessagesComponent) // tslint:disable-line:no-forward-ref\n                    }\n                ],\n                selector: 'kendo-switch-messages',\n                template: ``\n            },] },\n];\n/** @nocollapse */\nSwitchCustomMessagesComponent.ctorParameters = () => [\n    { type: LocalizationService }\n];\n\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Switch component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Switch module\n * import { SwitchModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, SwitchModule], // import Switch module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nclass SwitchModule {\n}\nSwitchModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    SwitchComponent,\n                    SwitchCustomMessagesComponent,\n                    LocalizedSwitchMessagesDirective\n                ],\n                exports: [\n                    SwitchComponent,\n                    SwitchCustomMessagesComponent,\n                    LocalizedSwitchMessagesDirective\n                ],\n                imports: [CommonModule, EventsModule, ResizeSensorModule]\n            },] },\n];\n\n/**\n * @hidden\n */\nclass LocalizedNumericTextBoxMessagesDirective extends NumericTextBoxMessages {\n    constructor(service) {\n        super();\n        this.service = service;\n    }\n}\nLocalizedNumericTextBoxMessagesDirective.decorators = [\n    { type: Directive, args: [{\n                providers: [\n                    {\n                        provide: NumericTextBoxMessages,\n                        useExisting: forwardRef(() => LocalizedNumericTextBoxMessagesDirective) // tslint:disable-line:no-forward-ref\n                    }\n                ],\n                selector: '[kendoNumericTextBoxLocalizedMessages]'\n            },] },\n];\n/** @nocollapse */\nLocalizedNumericTextBoxMessagesDirective.ctorParameters = () => [\n    { type: LocalizationService }\n];\n\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the NumericTextBox component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the NumericTextBox module\n * import { NumericTextBoxModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, NumericTextBoxModule], // import NumericTextBox module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nclass NumericTextBoxModule {\n}\nNumericTextBoxModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    LocalizedNumericTextBoxMessagesDirective,\n                    NumericTextBoxComponent,\n                    NumericTextBoxCustomMessagesComponent\n                ],\n                exports: [\n                    NumericTextBoxComponent,\n                    NumericTextBoxCustomMessagesComponent\n                ],\n                imports: [CommonModule, EventsModule]\n            },] },\n];\n\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the MaskedTextBox component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the MaskedTextBox module\n * import { MaskedTextBoxModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, MaskedTextBoxModule], // import MaskedTextBox module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nclass MaskedTextBoxModule {\n}\nMaskedTextBoxModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [MaskedTextBoxComponent],\n                exports: [MaskedTextBoxComponent],\n                imports: [CommonModule, EventsModule]\n            },] },\n];\n\n/**\n * Specifies the adornments in the suffix container ([see examples]({% slug adornments_textbox %}#toc-suffixadornments)).\n *  @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-textbox>\n *    <ng-template kendoTextBoxSuffixTemplate>\n *        <button kendoButton look=\"clear\" icon=\"image\"></button>\n *    </ng-template>\n *  </kendo-textbox>\n * `\n * })\n * class AppComponent {}\n * ```\n */\nclass TextBoxSuffixTemplateDirective {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nTextBoxSuffixTemplateDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[kendoTextBoxSuffixTemplate]'\n            },] },\n];\n/** @nocollapse */\nTextBoxSuffixTemplateDirective.ctorParameters = () => [\n    { type: TemplateRef, decorators: [{ type: Optional }] }\n];\n\n/**\n * Specifies the adornments in the prefix container ([see examples]({% slug adornments_textbox %}#toc-prefixadornments)).\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-textbox>\n *    <ng-template kendoTextBoxPrefixTemplate>\n *        <button kendoButton look=\"clear\" icon=\"image\"></button>\n *    </ng-template>\n *  </kendo-textbox>\n * `\n * })\n * class AppComponent {}\n * ```\n */\nclass TextBoxPrefixTemplateDirective {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nTextBoxPrefixTemplateDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[kendoTextBoxPrefixTemplate]'\n            },] },\n];\n/** @nocollapse */\nTextBoxPrefixTemplateDirective.ctorParameters = () => [\n    { type: TemplateRef, decorators: [{ type: Optional }] }\n];\n\nclass TextBoxComponent {\n    constructor(localizationService, ngZone, changeDetector, renderer, injector, hostElement) {\n        this.localizationService = localizationService;\n        this.ngZone = ngZone;\n        this.changeDetector = changeDetector;\n        this.renderer = renderer;\n        this.injector = injector;\n        this.hostElement = hostElement;\n        /**\n         * Sets the `title` attribute of the `input` element of the TextBox.\n         */\n        this.title = '';\n        /**\n         * Sets the disabled state of the component.\n         */\n        this.disabled = false;\n        /**\n         * Sets the read-only state of the component.\n         */\n        this.readonly = false;\n        /**\n         * Specifies the `tabindex` of the TextBox.\n         */\n        this.tabindex = 0;\n        /**\n         * Provides a value for the TextBox.\n         */\n        this.value = null;\n        /**\n         * Determines whether the whole value will be selected when the TextBox is clicked. Defaults to `true`.\n         */\n        this.selectOnFocus = false;\n        /**\n         * Specifies when the Success icon will be shown ([see example]({% slug validation_textbox %})).\n         *\n         * The possible values are:\n         *\n         * * (Default) `initial`&mdash;The Success icon will be displayed when the component state is neither\n         * `invalid` nor `touched` or `dirty`.\n         * * `boolean`&mdash;The Success icon is displayed, if the condition given by the developer is met.\n         *\n         */\n        this.showSuccessIcon = 'initial';\n        /**\n         * Specifies when the Error icon will be shown ([see example]({% slug validation_textbox %})).\n         *\n         * The possible values are:\n         *\n         * * (Default) `initial`&mdash;The Error icon will be displayed when the component state is\n         * `invalid` and `touched` or `dirty`.\n         * * `boolean`&mdash;The Error icon is displayed, if the condition given by the developer is met.\n         *\n         */\n        this.showErrorIcon = 'initial';\n        /**\n         * Specifies whether a Clear button will be rendered.\n         */\n        this.clearButton = false;\n        /**\n         * Fires each time the value is changed&mdash;\n         * when the component is blurred or the value is cleared through the **Clear** button\n         * ([see example]({% slug overview_textbox %}#toc-events)).\n         * When the value of the component is programmatically changed to `ngModel` or `formControl`\n         * through its API or form binding, the `valueChange` event is not triggered because it\n         * might cause a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time the user focuses the `input` element.\n         */\n        this.inputFocus = new EventEmitter();\n        /**\n         * Fires each time the `input` element gets blurred.\n         */\n        this.inputBlur = new EventEmitter();\n        /**\n         * Fires each time the user focuses the TextBox component.\n         *\n         * > To wire the event programmatically, use the `onFocus` property.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-textbox (focus)=\"handleFocus()\"></kendo-textbox>\n         * `\n         * })\n         * class AppComponent {\n         *   public handleFocus(): void {\n         *      console.log('Component is isFocused');\n         *   }\n         * }\n         * ```\n         */\n        this.onFocus = new EventEmitter();\n        /**\n         * Fires each time the TextBox component gets blurred.\n         *\n         * > To wire the event programmatically, use the `onBlur` property.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-textbox (blur)=\"handleBlur()\"></kendo-textbox>\n         * `\n         * })\n         * class AppComponent {\n         *   public handleBlur(): void {\n         *      console.log('Component is blurred');\n         *   }\n         * }\n         * ```\n         */\n        this.onBlur = new EventEmitter();\n        this.hostClass = true;\n        this._isFocused = false;\n        this.focusChangedProgrammatically = false;\n        /**\n         * @hidden\n         */\n        this.handleInputFocus = () => {\n            if (!this.isDisabled) {\n                if (this.selectOnFocus && this.value) {\n                    this.ngZone.run(() => {\n                        setTimeout(() => { this.selectAll(); });\n                    });\n                }\n                if (hasObservers(this.onFocus)) {\n                    if (!this.isFocused) {\n                        this.ngZone.run(() => {\n                            this.onFocus.emit();\n                        });\n                    }\n                }\n                if (hasObservers(this.inputFocus)) {\n                    if (!this.focusChangedProgrammatically || (this.focusChangedProgrammatically && this.clearButtonClicked)) {\n                        this.ngZone.run(() => {\n                            this.inputFocus.emit();\n                        });\n                    }\n                }\n                this.ngZone.run(() => {\n                    this.isFocused = true;\n                });\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.handleInputBlur = () => {\n            this.changeDetector.markForCheck();\n            if (hasObservers(this.inputBlur) || requiresZoneOnBlur(this.control)) {\n                this.ngZone.run(() => {\n                    this.ngTouched();\n                    this.inputBlur.emit();\n                });\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.handleInput = (ev) => {\n            let incomingValue = ev.target.value;\n            this.updateValue(incomingValue);\n        };\n        this.ngChange = (_) => { };\n        this.ngTouched = () => { };\n        this.direction = localizationService.rtl ? 'rtl' : 'ltr';\n    }\n    /**\n     * @hidden\n     */\n    set tabIndex(tabIndex) {\n        this.tabindex = tabIndex;\n    }\n    get tabIndex() {\n        return this.tabindex;\n    }\n    get disabledClass() {\n        return this.disabled;\n    }\n    get isFocused() {\n        return this.disabled ? false : this._isFocused;\n    }\n    set isFocused(isFocused) {\n        this._isFocused = isFocused;\n    }\n    ngOnInit() {\n        this.control = this.injector.get(NgControl, null);\n        this.checkClearButton();\n        this.subscriptions = this.localizationService.changes.subscribe(({ rtl }) => {\n            this.direction = rtl ? 'rtl' : 'ltr';\n        });\n    }\n    ngAfterViewInit() {\n        const hostElement = this.hostElement.nativeElement;\n        let cursorInsideWrapper = false;\n        let tabbing = false;\n        this.ngZone.runOutsideAngular(() => {\n            // focusIn and focusOut are relative to the host element\n            this.subscriptions.add(this.renderer.listen(hostElement, 'focusin', () => {\n                if (!this.isFocused) {\n                    this.ngZone.run(() => {\n                        this.onFocus.emit();\n                        this.isFocused = true;\n                    });\n                }\n            }));\n            this.subscriptions.add(this.renderer.listen(hostElement, 'focusout', (args) => {\n                if (!this.isFocused) {\n                    return;\n                }\n                if (tabbing) {\n                    const closestTextbox = closest(args.relatedTarget, (element) => element.tagName === 'KENDO-TEXTBOX');\n                    if (!closestTextbox) {\n                        this.handleBlur();\n                    }\n                    tabbing = false;\n                }\n                else {\n                    if (!cursorInsideWrapper && !this.clearButtonClicked) {\n                        this.handleBlur();\n                    }\n                }\n            }));\n            this.subscriptions.add(this.renderer.listen(hostElement, 'mouseenter', () => {\n                cursorInsideWrapper = true;\n            }));\n            this.subscriptions.add(this.renderer.listen(hostElement, 'mouseleave', () => {\n                cursorInsideWrapper = false;\n            }));\n            this.subscriptions.add(this.renderer.listen(hostElement, 'keydown', (args) => {\n                if (args.keyCode === Keys.Tab) {\n                    tabbing = true;\n                }\n                else {\n                    tabbing = false;\n                }\n            }));\n        });\n    }\n    ngOnChanges(changes) {\n        if (changes.disabled || changes.readonly) {\n            this.checkClearButton();\n        }\n    }\n    ngOnDestroy() {\n        this.subscriptions.unsubscribe();\n    }\n    /**\n     * Focuses the TextBox.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"input.focus()\">Focus the input</button>\n     *  <kendo-textbox #input></kendo-textbox>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    focus() {\n        if (!this.input) {\n            return;\n        }\n        this.focusChangedProgrammatically = true;\n        this.isFocused = true;\n        this.input.nativeElement.focus();\n        this.focusChangedProgrammatically = false;\n    }\n    /**\n     * Blurs the TextBox.\n     */\n    blur() {\n        this.focusChangedProgrammatically = true;\n        const isFocusedElement = this.hostElement.nativeElement.querySelector(':focus');\n        if (isFocusedElement) {\n            isFocusedElement.blur();\n        }\n        this.isFocused = false;\n        this.focusChangedProgrammatically = false;\n    }\n    /**\n     * @hidden\n     */\n    clearTitle() {\n        return this.localizationService.get('clear');\n    }\n    /**\n     * @hidden\n     */\n    checkClearButton() {\n        this.showClearButton =\n            !this.disabled &&\n                !this.readonly &&\n                this.clearButton &&\n                !!this.value;\n    }\n    /**\n     * @hidden\n     */\n    clearValue() {\n        this.clearButtonClicked = true;\n        this.input.nativeElement.value = '';\n        this.input.nativeElement.focus();\n        this.updateValue(null);\n        this.checkClearButton();\n        this.clearButtonClicked = false;\n    }\n    /**\n     * @hidden\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * @hidden\n     */\n    registerOnChange(fn) {\n        this.ngChange = fn;\n    }\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn) {\n        this.ngTouched = fn;\n    }\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     *\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * @hidden\n     */\n    showErrorsInitial() {\n        if (!this.control) {\n            return false;\n        }\n        const { invalid, dirty, touched } = this.control;\n        return invalid && (dirty || touched);\n    }\n    /**\n     * @hidden\n     */\n    showSuccessInitial() {\n        if (!this.control) {\n            return false;\n        }\n        const { valid, dirty, touched } = this.control;\n        return valid && (dirty || touched);\n    }\n    /**\n     * @hidden\n     */\n    get successIconClasses() {\n        return this.successIcon\n            ? `k-text-success ${this.successIcon}`\n            : `k-text-success k-icon k-i-check-outline`;\n    }\n    /**\n     * @hidden\n     */\n    get errorIconClasses() {\n        return this.errorIcon\n            ? `k-text-error ${this.errorIcon}`\n            : `k-text-error k-icon k-i-warning`;\n    }\n    /**\n     * @hidden\n     */\n    get clearButtonClasses() {\n        return this.clearButtonIcon\n            ? this.clearButtonIcon\n            : `k-icon k-i-close-circle`;\n    }\n    /**\n     * @hidden\n     */\n    get hasErrors() {\n        return this.showErrorIcon === 'initial'\n            ? this.showErrorsInitial()\n            : this.showErrorIcon;\n    }\n    /**\n     * @hidden\n     */\n    get isSuccessful() {\n        return this.showSuccessIcon === 'initial'\n            ? this.showSuccessInitial()\n            : this.showSuccessIcon;\n    }\n    get isDisabled() {\n        return this.disabled || this.readonly;\n    }\n    setSelection(start, end) {\n        if (this.isFocused) {\n            invokeElementMethod(this.input, 'setSelectionRange', start, end);\n        }\n    }\n    selectAll() {\n        if (this.value) {\n            this.setSelection(0, this.value.length);\n        }\n    }\n    updateValue(value) {\n        if (!areSame(this.value, value)) {\n            this.ngZone.run(() => {\n                this.value = value;\n                this.ngChange(value);\n                this.valueChange.emit(value);\n                this.checkClearButton();\n                this.changeDetector.markForCheck();\n            });\n        }\n    }\n    handleBlur() {\n        this.ngZone.run(() => {\n            if (!this.focusChangedProgrammatically) {\n                this.onBlur.emit();\n            }\n            this.isFocused = false;\n        });\n    }\n}\nTextBoxComponent.decorators = [\n    { type: Component, args: [{\n                exportAs: 'kendoTextBox',\n                providers: [\n                    LocalizationService,\n                    { provide: L10N_PREFIX, useValue: 'kendo.textbox' },\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => TextBoxComponent),\n                        multi: true\n                    },\n                    { provide: KendoInput, useExisting: forwardRef(() => TextBoxComponent) }\n                ],\n                selector: 'kendo-textbox',\n                template: `\n        <ng-container kendoTextBoxLocalizedMessages\n            i18n-clear=\"kendo.textbox.clear|The title for the **Clear** button in the TextBox.\"\n            clear=\"Clear\">\n        </ng-container>\n        <span class=\"k-input-prefix\">\n            <ng-template\n                *ngIf=\"prefixTemplate\"\n                [ngTemplateOutlet]=\"prefixTemplate?.templateRef\">\n            </ng-template>\n        </span>\n        <input\n            class=\"k-input\"\n            #input\n            [disabled]=\"disabled\"\n            [readonly]=\"readonly\"\n            [attr.tabindex]=\"disabled ? undefined : tabindex\"\n            [value]=\"value\"\n            [attr.placeholder]=\"placeholder\"\n            [attr.title]=\"title\"\n            [kendoEventsOutsideAngular]=\"{\n                focus: handleInputFocus,\n                blur: handleInputBlur,\n                input: handleInput}\"/>\n        <span class=\"k-input-suffix\">\n            <span *ngIf=\"hasErrors\" [ngClass]=\"errorIconClasses\"></span>\n            <span *ngIf=\"isSuccessful\" [ngClass]=\"successIconClasses\"></span>\n            <span\n                role=\"button\"\n                class=\"k-clear-value\"\n                *ngIf=\"showClearButton\"\n                (click)=\"clearValue()\"\n                (mousedown)=\"$event.preventDefault()\"\n                [tabindex]=\"tabIndex\"\n                [attr.aria-label]=\"clearTitle()\"\n                [title]=\"clearTitle()\"\n                (keydown.enter)=\"clearValue()\"\n                (keydown.space)=\"clearValue()\"\n                >\n                <span [ngClass]=\"clearButtonClasses\"></span>\n            </span>\n            <ng-template\n                *ngIf=\"suffixTemplate\"\n                [ngTemplateOutlet]=\"suffixTemplate?.templateRef\">\n            </ng-template>\n        </span>\n    `\n            },] },\n];\n/** @nocollapse */\nTextBoxComponent.ctorParameters = () => [\n    { type: LocalizationService },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: Renderer2 },\n    { type: Injector },\n    { type: ElementRef }\n];\nTextBoxComponent.propDecorators = {\n    title: [{ type: Input }],\n    disabled: [{ type: Input }],\n    readonly: [{ type: Input }],\n    tabindex: [{ type: Input }],\n    value: [{ type: Input }],\n    selectOnFocus: [{ type: Input }],\n    showSuccessIcon: [{ type: Input }],\n    showErrorIcon: [{ type: Input }],\n    clearButton: [{ type: Input }],\n    successIcon: [{ type: Input }],\n    errorIcon: [{ type: Input }],\n    clearButtonIcon: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    inputFocus: [{ type: Output }],\n    inputBlur: [{ type: Output }],\n    onFocus: [{ type: Output, args: ['focus',] }],\n    onBlur: [{ type: Output, args: ['blur',] }],\n    input: [{ type: ViewChild, args: ['input', { static: true },] }],\n    suffixTemplate: [{ type: ContentChild, args: [TextBoxSuffixTemplateDirective,] }],\n    prefixTemplate: [{ type: ContentChild, args: [TextBoxPrefixTemplateDirective,] }],\n    disabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }],\n    hostClass: [{ type: HostBinding, args: ['class.k-textbox',] }],\n    isFocused: [{ type: HostBinding, args: ['class.k-state-focused',] }],\n    direction: [{ type: HostBinding, args: ['attr.dir',] }]\n};\n\n/**\n * Specifies a separator in the content of the TextBox ([see examples]({% slug adornments_textbox %}#toc-separator)).\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-textbox>\n *    <ng-template kendoTextBoxSuffixTemplate>\n *        <button kendoButton look=\"clear\" icon=\"image\"></button>\n *        <kendo-textbox-separator></kendo-textbox-separator>\n *    </ng-template>\n *  </kendo-textbox>\n * `\n * })\n * class AppComponent {}\n * ```\n */\nclass TextBoxSeparatorComponent {\n    constructor() {\n        this.hostClass = true;\n    }\n}\nTextBoxSeparatorComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'kendo-textbox-separator',\n                template: ``\n            },] },\n];\nTextBoxSeparatorComponent.propDecorators = {\n    hostClass: [{ type: HostBinding, args: ['class.k-textbox-separator',] }]\n};\n\n/**\n * @hidden\n */\nclass TextBoxMessages extends ComponentMessages {\n}\nTextBoxMessages.propDecorators = {\n    clear: [{ type: Input }]\n};\n\n/**\n * Custom component messages override default component messages.\n */\nclass TextBoxCustomMessagesComponent extends TextBoxMessages {\n    constructor(service) {\n        super();\n        this.service = service;\n    }\n    get override() {\n        return true;\n    }\n}\nTextBoxCustomMessagesComponent.decorators = [\n    { type: Component, args: [{\n                providers: [\n                    {\n                        provide: TextBoxMessages,\n                        useExisting: forwardRef(() => TextBoxCustomMessagesComponent) // tslint:disable-line:no-forward-ref\n                    }\n                ],\n                selector: 'kendo-textbox-messages',\n                template: ``\n            },] },\n];\n/** @nocollapse */\nTextBoxCustomMessagesComponent.ctorParameters = () => [\n    { type: LocalizationService }\n];\n\n/**\n * @hidden\n */\nclass LocalizedTextBoxMessagesDirective extends TextBoxMessages {\n    constructor(service) {\n        super();\n        this.service = service;\n    }\n}\nLocalizedTextBoxMessagesDirective.decorators = [\n    { type: Directive, args: [{\n                providers: [\n                    {\n                        provide: TextBoxMessages,\n                        useExisting: forwardRef(() => LocalizedTextBoxMessagesDirective) // tslint:disable-line:no-forward-ref\n                    }\n                ],\n                selector: '[kendoTextBoxLocalizedMessages]'\n            },] },\n];\n/** @nocollapse */\nLocalizedTextBoxMessagesDirective.ctorParameters = () => [\n    { type: LocalizationService }\n];\n\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the TextBox directive.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the TextBox module\n * import { TextBoxModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, TextBoxModule], // import TextBox module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nclass TextBoxModule {\n}\nTextBoxModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    TextBoxDirective,\n                    TextAreaDirective,\n                    TextBoxContainerComponent,\n                    TextBoxComponent,\n                    TextBoxSeparatorComponent,\n                    TextBoxSuffixTemplateDirective,\n                    TextBoxPrefixTemplateDirective,\n                    TextBoxCustomMessagesComponent,\n                    LocalizedTextBoxMessagesDirective\n                ],\n                exports: [\n                    TextBoxDirective,\n                    TextAreaDirective,\n                    TextBoxContainerComponent,\n                    TextBoxComponent,\n                    TextBoxSeparatorComponent,\n                    TextBoxSuffixTemplateDirective,\n                    TextBoxPrefixTemplateDirective,\n                    EventsModule,\n                    TextBoxCustomMessagesComponent,\n                    LocalizedTextBoxMessagesDirective\n                ],\n                imports: [CommonModule, EventsModule]\n            },] },\n];\n\n/**\n * @hidden\n */\nclass PreventableEvent {\n    constructor() {\n        this.prevented = false;\n    }\n    /**\n     * Prevents the default action for a specified event.\n     * In this way, the source component suppresses the built-in behavior that follows the event.\n     */\n    preventDefault() {\n        this.prevented = true;\n    }\n    /**\n     * If the event is prevented by any of its subscribers, returns `true`.\n     *\n     * @returns - `true` if the default action was prevented. Otherwise, returns `false`.\n     */\n    isDefaultPrevented() {\n        return this.prevented;\n    }\n}\n\n/**\n * Fires each time the left side of the ColorPicker wrapper is clicked.\n * The event is triggered regardless of whether a ColorPicker icon is set or not.\n *\n * Provides information about the current active color and gives the option to prevent the opening of the popup.\n *\n * @example\n *\n * ```ts\n * _@Component({\n *   selector: 'my-app',\n *   template: `\n *       <kendo-colorpicker\n *           [icon]=\"'edit-tools'\"\n *           [value]=\"'#900'\"\n *           (activeColorClick)=\"handleActiveColorClick($event)\"\n *       >\n *       </kendo-colorpicker>\n *   `\n * })\n * class AppComponent {\n *     public handleActiveColorClick(event: ActiveColorClickEvent): void {\n *         event.preventOpen();\n *\n *         console.log('Open prevented:', event.isOpenPrevented());\n *         console.log('Current color:', event.color);\n *     }\n *  }\n * ```\n */\nclass ActiveColorClickEvent {\n    /**\n     * @hidden\n     * @param color Represents the current value of the ColorPicker.\n     */\n    constructor(color) {\n        this.color = color;\n        this.openPrevented = false;\n    }\n    /**\n     * Prevents the opening of the popup.\n     */\n    preventOpen() {\n        this.openPrevented = true;\n    }\n    /**\n     * Returns `true` if the popup opening is prevented by any of its subscribers.\n     *\n     * @returns - Returns `true` if the open action was prevented. Otherwise, returns `false`.\n     */\n    isOpenPrevented() {\n        return this.openPrevented;\n    }\n}\n\n/**\n * @hidden\n *\n * Returns the hex or rgba string representation of the color.\n */\nconst parseColor$1 = (value, format, safe = true) => {\n    const allowedFormats = ['hex', 'rgba', 'name'];\n    if (allowedFormats.indexOf(format) === -1) {\n        throw new Error(`Unsupported color output format '${format}'. The available options are 'hex', 'rgba' or 'name'.`);\n    }\n    if (!isPresent(value)) {\n        return;\n    }\n    if (format === 'name') {\n        return nameFormat(value, safe);\n    }\n    const parsedColor = parseColor(value.trim(), safe);\n    if (!isPresent(parsedColor)) {\n        return;\n    }\n    return format === 'hex' ? parsedColor.toCss() : parsedColor.toCssRgba();\n};\n/**\n * @hidden\n *\n * Returns an HSV object representation of the color string.\n */\nconst getHSV = (value, safe = true) => {\n    const parsed = parseColor(value, safe);\n    if (!isPresent(parsed)) {\n        return {};\n    }\n    return parsed.toHSV();\n};\n/**\n * @hidden\n *\n * Returns an RGBA object representation of the color string.\n */\nconst getRGBA = (value, safe = true) => {\n    const parsed = parseColor(value, safe);\n    if (!isPresent(parsed)) {\n        return {};\n    }\n    return parsed.toBytes();\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color.\n */\nconst getColorFromHSV = (hsva) => {\n    const hue = fitIntoBounds(hsva.h, 0, 359.9);\n    const saturation = fitIntoBounds(hsva.s, 0, 1);\n    const value = fitIntoBounds(hsva.v, 0, 1);\n    const alpha = fitIntoBounds(hsva.a, 0, 1);\n    return Color.fromHSV(hue, saturation, value, alpha).toCssRgba();\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color based on the `hue`, assuming the `value`, `saturation` and `alpha` have value of `1`.\n */\nconst getColorFromHue = (hue) => {\n    return getColorFromHSV({ h: hue, s: 1, v: 1, a: 1 });\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color.\n */\nconst getColorFromRGBA = (rgba) => {\n    const red = fitIntoBounds(rgba.r, 0, 255);\n    const green = fitIntoBounds(rgba.g, 0, 255);\n    const blue = fitIntoBounds(rgba.b, 0, 255);\n    const alpha = fitIntoBounds(rgba.a, 0, 1);\n    return Color.fromBytes(red, green, blue, alpha).toCssRgba();\n};\n/**\n *\n * @hidden\n */\nfunction nameFormat(value, safe) {\n    value = value.toLowerCase().trim();\n    if (isPresent(namedColors[value])) {\n        return value;\n    }\n    if (parseColor(value, safe)) {\n        value = parseColor(value, safe).toHex();\n    }\n    const key = Object.keys(namedColors).find(key => namedColors[key] === value);\n    if (!key && !safe) {\n        throw new Error(`The provided color ${value} is not supported for 'format=\"name\"' property.To display ${value} color, the component 'format' property shoud be set to 'hex' or 'rgba' `);\n    }\n    return key;\n}\n\n// tslint:disable:max-line-length\n/**\n * @hidden\n */\nconst PALETTEPRESETS = {\n    basic: {\n        colors: '000000,7f7f7f,880015,ed1c24,ff7f27,fff200,22b14c,00a2e8,3f48cc,a349a4,ffffff,c3c3c3,b97a57,ffaec9,ffc90e,efe4b0,b5e61d,99d9ea,7092be,c8bfe7',\n        columns: 10\n    },\n    office: {\n        colors: 'ffffff, 000000, e6e6e6, 435569, 4371c4, ed7e32, a5a4a5, febf04, 5a9bd5, 71ae48, f2f2f3, 7f7f7f, d1cece, d5dde3, dae1f4, fce5d4, deeded, fff2cc, deeaf6, e1efd9, d7d8d8, 585959, aeabab, adbaca, b4c5e7, f6caac, dbdbdb, ffe498, bcd6ee, c5e0b2, bfbfc0, 3f3f3f, 767070, 8595b1, 8fabdb, f5b183, c9c8c9, fed965, 9bc4e5, a8d08d, a5a5a6, 262625, 393939, 334050, 2e5496, c45a11, 7b7b7a, bf9000, 2f75b5, 548235, 7f7f7f, 0b0c0c, 161616, 222a34, 203764, 843d0b, 525252, 7f6000, 1d4d79, 375623',\n        columns: 10\n    },\n    apex: {\n        colors: 'ffffff, 000000, c9c2d1, 69676d, ceb966, 9cb084, 6bb1c9, 6585cf, 7e6bc9, a379bb, f2f2f2, 7f7f7f, f4f2f5, e0e0e2, f5f1e0, ebefe6, e1eff4, e0e6f5, e5e1f4, ece4f1, d8d8d8, 595959, e9e6ec, c2c1c5, ebe3c1, d7dfcd, c3dfe9, c1ceeb, cbc3e9, dac9e3, bfbfbf, 3f3f3f, dedae3, a4a3a8, e1d5a3, c3cfb5, a6d0de, a2b5e2, b1a6de, c7aed6, a5a5a5, 262626, 9688a5, 4e4d51, ae9638, 758c5a, 3d8da9, 365bb0, 533da9, 7d4d99, 7f7f7f, 0c0c0c, 635672, 343336, 746425, 4e5d3c, 295e70, 243c75, 372970, 533366',\n        columns: 10\n    },\n    austin: {\n        colors: 'ffffff, 000000, caf278, 3e3d2d, 94c600, 71685a, ff6700, 909465, 956b43, fea022, f2f2f2, 7f7f7f, f4fce4, dddcd0, efffc0, e3e1dc, ffe0cb, e8e9df, ece1d6, feecd2, d8d8d8, 595959, e9f9c9, bbb9a1, dfff82, c8c3ba, ffc299, d2d4c0, dac3ad, fed9a6, bfbfbf, 3f3f3f, dff7ae, ada598, cfff43, ada598, ffa365, bcbfa1, c8a585, fec67a, a5a5a5, 262626, a9ea25, 2e2d21, 6f9400, 544e43, bf4d00, 6c6f4b, 6f5032, d77b00, 7f7f7f, 0c0c0c, 74a50f, 1f1e16, 4a6300, 38342d, 7f3300, 484a32, 4a3521, 8f5200',\n        columns: 10\n    },\n    clarity: {\n        colors: 'ffffff, 292934, f3f2dc, d2533c, 93a299, ad8f67, 726056, 4c5a6a, 808da0, 79463d, f2f2f2, e7e7ec, e7e5b9, f6dcd8, e9ecea, eee8e0, e4dedb, d8dde3, e5e8ec, e9d6d3, d8d8d8, c4c4d1, d5d185, edbab1, d3d9d6, ded2c2, c9beb8, b2bcc8, ccd1d9, d3aea7, bfbfbf, 8a8aa3, aca73b, e4978a, bec7c1, cdbba3, af9e94, 8c9bac, b2bac6, bd857c, a5a5a5, 56566e, 56531d, a43925, 6b7c72, 866b48, 554840, 39434f, 5c697b, 5a342d, 7f7f7f, 3b3b4b, 22210b, 6d2619, 47534c, 594730, 39302b, 262d35, 3d4652, 3c231e',\n        columns: 10\n    },\n    slipstream: {\n        colors: 'ffffff, 000000, b4dcfa, 212745, 4e67c8, 5eccf3, a7ea52, 5dceaf, ff8021, f14124, f2f2f2, 7f7f7f, 8bc9f7, c7cce4, dbe0f4, def4fc, edfadc, def5ef, ffe5d2, fcd9d3, d8d8d8, 595959, 4facf3, 909aca, b8c2e9, beeafa, dbf6b9, beebdf, ffcca6, f9b3a7, bfbfbf, 3f3f3f, 0d78c9, 5967af, 94a3de, 9ee0f7, caf297, 9de1cf, ffb279, f68d7b, a5a5a5, 262626, 063c64, 181d33, 31479f, 11b2eb, 81d319, 34ac8b, d85c00, c3260c, 7f7f7f, 0c0c0c, 021828, 101322, 202f6a, 0b769c, 568c11, 22725c, 903d00, 821908',\n        columns: 10\n    },\n    metro: {\n        colors: 'ffffff, 000000, d6ecff, 4e5b6f, 7fd13b, ea157a, feb80a, 00addc, 738ac8, 1ab39f, f2f2f2, 7f7f7f, a7d6ff, d9dde4, e5f5d7, fad0e4, fef0cd, c5f2ff, e2e7f4, c9f7f1, d8d8d8, 595959, 60b5ff, b3bcca, cbecb0, f6a1c9, fee29c, 8be6ff, c7d0e9, 94efe3, bfbfbf, 3f3f3f, 007dea, 8d9baf, b2e389, f272af, fed46b, 51d9ff, aab8de, 5fe7d5, a5a5a5, 262626, 003e75, 3a4453, 5ea226, af0f5b, c58c00, 0081a5, 425ea9, 138677, 7f7f7f, 0c0c0c, 00192e, 272d37, 3f6c19, 750a3d, 835d00, 00566e, 2c3f71, 0c594f',\n        columns: 10\n    },\n    flow: {\n        colors: 'ffffff, 000000, dbf5f9, 04617b, 0f6fc6, 009dd9, 0bd0d9, 10cf9b, 7cca62, a5c249, f2f2f2, 7f7f7f, b2e9f2, b4ecfc, c7e2fa, c4eeff, c9fafc, c9faed, e4f4df, edf2da, d8d8d8, 595959, 76d9e8, 6adafa, 90c6f6, 89deff, 93f5f9, 94f6db, cae9c0, dbe6b6, bfbfbf, 3f3f3f, 21b2c8, 20c8f7, 59a9f2, 4fceff, 5df0f6, 5ff2ca, b0dfa0, c9da91, a5a5a5, 262626, 105964, 02485c, 0b5394, 0075a2, 089ca2, 0b9b74, 54a838, 7e9532, 7f7f7f, 0c0c0c, 062328, 01303d, 073763, 004e6c, 05686c, 07674d, 387025, 546321',\n        columns: 10\n    },\n    hardcover: {\n        colors: 'ffffff, 000000, ece9c6, 895d1d, 873624, d6862d, d0be40, 877f6c, 972109, aeb795, f2f2f2, 7f7f7f, e1dca5, f2e0c6, f0d0c9, f6e6d5, f5f2d8, e7e5e1, fbc7bc, eef0e9, d8d8d8, 595959, d0c974, e6c28d, e2a293, eeceaa, ece5b2, cfccc3, f78f7a, dee2d4, bfbfbf, 3f3f3f, a29a36, daa454, d4735e, e6b681, e2d88c, b7b2a5, f35838, ced3bf, a5a5a5, 262626, 514d1b, 664515, 65281a, a2641f, a39428, 655f50, 711806, 879464, 7f7f7f, 0c0c0c, 201e0a, 442e0e, 431b11, 6c4315, 6d621a, 433f35, 4b1004, 5a6243',\n        columns: 10\n    },\n    trek: {\n        colors: 'ffffff, 000000, fbeec9, 4e3b30, f0a22e, a5644e, b58b80, c3986d, a19574, c17529, f2f2f2, 7f7f7f, f7e09e, e1d6cf, fcecd5, eddfda, f0e7e5, f3eae1, ece9e3, f5e3d1, d8d8d8, 595959, f3cc5f, c4ad9f, f9d9ab, dcc0b6, e1d0cc, e7d5c4, d9d4c7, ebc7a3, bfbfbf, 3f3f3f, d29f0f, a78470, f6c781, cba092, d2b9b2, dbc1a7, c6bfab, e1ac76, a5a5a5, 262626, 694f07, 3a2c24, c87d0e, 7b4b3a, 926255, a17242, 7b7153, 90571e, 7f7f7f, 0c0c0c, 2a1f03, 271d18, 855309, 523226, 614138, 6b4c2c, 524b37, 603a14',\n        columns: 10\n    },\n    verve: {\n        colors: 'ffffff, 000000, d2d2d2, 666666, ff388c, e40059, 9c007f, 68007f, 005bd3, 00349e, f2f2f2, 7f7f7f, bdbdbd, e0e0e0, ffd7e8, ffc6dc, ffb8f1, f1b2ff, c3dcff, b8cfff, d8d8d8, 595959, 9d9d9d, c1c1c1, ffafd1, ff8eba, ff71e4, e365ff, 87baff, 72a0ff, bfbfbf, 3f3f3f, 696969, a3a3a3, ff87ba, ff5597, ff2ad7, d519ff, 4b98ff, 2b71ff, a5a5a5, 262626, 343434, 4c4c4c, e90062, ab0042, 75005f, 4e005f, 00449e, 002676, 7f7f7f, 0c0c0c, 151515, 333333, 9b0041, 72002c, 4e003f, 34003f, 002d69, 00194f',\n        columns: 10\n    },\n    monochrome: {\n        colors: '000000, 1a1a1a, 333333, 4d4d4d, 666666, 808080, 999999, b3b3b3, cccccc, e6e6e6, f2f2f2, ffffff',\n        columns: 12\n    },\n    accessible: {\n        colors: 'black, grey, darkred, red, darkorange, gold, green, blue, darkblue, purple, white, darkgrey, saddlebrown, pink, orange, yellow, lightgreen, lightskyblue, lightblue, mediumpurple',\n        columns: 10\n    }\n};\n\nconst DEFAULT_PRESET = 'office';\nconst DEFAULT_ACCESSIBLE_PRESET = 'accessible';\nlet serial = 0;\n/**\n * Represents the [Kendo UI ColorPicker component for Angular]({% slug overview_colorpicker %}).\n * Designed to replace the `<input type=\"color\">` HTML5 tag which is not widely supported in browsers.\n */\nclass ColorPickerComponent {\n    constructor(popupService, localizationService) {\n        this.popupService = popupService;\n        /**\n         * @hidden\n         */\n        this.hostClasses = true;\n        /**\n         * @hidden\n         */\n        this.focusableId = `k-colorpicker-${serial++}`;\n        /**\n         * Sets what view the ColorPicker will render in the popup.\n         */\n        this.view = 'gradient';\n        /**\n         * Sets the read-only state of the ColorPicker.\n         */\n        this.readonly = false;\n        /**\n         * Sets the disabled state of the ColorPicker.\n         */\n        this.disabled = false;\n        /**\n         * Specifies the output format of the ColorPicker.\n         * The input value may be in a different format. However, it will be parsed into the output `format`\n         * after the component processes it.\n         *\n         * If the `gradient` view is used with the `opacity` option set to true, this setting will be ignored and `rgba` will be used instead.\n         *\n         * The supported values are:\n         * * `rgba` (default)\n         * * `hex`\n         * * [`name`](https://www.w3.org/wiki/CSS/Properties/color/keywords)\n         */\n        this.format = 'rgba';\n        /**\n         * Fires each time the value is changed.\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time the popup is about to open.\n         * This event is preventable. If you cancel it, the popup will remain closed.\n         */\n        this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close.\n         * This event is preventable. If you cancel it, the popup will remain open.\n         */\n        this.close = new EventEmitter();\n        /**\n         * Fires each time ColorPicker is focused.\n         */\n        this.onFocus = new EventEmitter();\n        /**\n         * Fires each time the ColorPicker is blurred.\n         */\n        this.onBlur = new EventEmitter();\n        /**\n         * Fires each time the left side of the ColorPicker wrapper is clicked.\n         * The event is triggered regardless of whether a ColorPicker icon is set or not.\n         *\n         * The [`ActiveColorClickEvent`]({% slug api_inputs_activecolorclickevent %}) event provides the option to prevent the popup opening.\n         */\n        this.activeColorClick = new EventEmitter();\n        this._tabindex = 0;\n        this._popupSettings = { animate: true };\n        this._paletteSettings = {};\n        this._gradientSettings = { opacity: true, clearButton: false };\n        this.notifyNgTouched = () => { };\n        this.notifyNgChanged = () => { };\n        this.dynamicRTLSubscription = localizationService.changes.subscribe(({ rtl }) => {\n            this.direction = rtl ? 'rtl' : 'ltr';\n        });\n    }\n    /**\n     * Specifies the value of the initially selected color.\n     */\n    set value(value) {\n        this._value = parseColor$1(value, this.format);\n    }\n    get value() {\n        return this._value;\n    }\n    /**\n     * Configures the popup of the ColorPicker.\n     */\n    set popupSettings(value) {\n        this._popupSettings = Object.assign(this._popupSettings, value);\n    }\n    get popupSettings() {\n        return this._popupSettings;\n    }\n    /**\n     * Configures the palette that is displayed in the ColorPicker popup.\n     */\n    set paletteSettings(value) {\n        this._paletteSettings = Object.assign(this._paletteSettings, value);\n    }\n    get paletteSettings() {\n        return this._paletteSettings;\n    }\n    /**\n     * Configures the gradient that is displayed in the ColorPicker popup.\n     */\n    set gradientSettings(value) {\n        this._gradientSettings = Object.assign(this._gradientSettings, value);\n    }\n    get gradientSettings() {\n        return this._gradientSettings;\n    }\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n    set tabindex(value) {\n        const tabindex = Number(value);\n        const defaultValue = 0;\n        this._tabindex = !isNaN(tabindex) ? tabindex : defaultValue;\n    }\n    get tabindex() {\n        return !this.disabled ? this._tabindex : undefined;\n    }\n    /**\n     * Indicates whether the ColorPicker popup is open.\n     */\n    get isOpen() {\n        return isPresent(this.popupRef);\n    }\n    /**\n     * @hidden\n     */\n    get iconStyles() {\n        if (this.iconClass) {\n            return this.iconClass;\n        }\n        if (this.icon) {\n            return `k-icon k-i-${this.icon}`;\n        }\n    }\n    ngOnInit() {\n        const defaultPreset = (this.format !== 'name') ? DEFAULT_PRESET : DEFAULT_ACCESSIBLE_PRESET;\n        const settingsPalette = this._paletteSettings.palette;\n        const presetColumns = typeof settingsPalette === 'string' && PALETTEPRESETS[settingsPalette] ?\n            PALETTEPRESETS[settingsPalette].columns :\n            undefined;\n        this._paletteSettings = {\n            palette: settingsPalette || defaultPreset,\n            tileSize: this._paletteSettings.tileSize || 24,\n            columns: this._paletteSettings.columns || presetColumns || 10\n        };\n    }\n    ngOnChanges(changes) {\n        if (changes.format && changes.format.currentValue === 'name') {\n            this.view = 'palette';\n        }\n        if (this.view === 'gradient' && this.gradientSettings.opacity) {\n            this.format = 'rgba';\n            this.value = parseColor$1(this.value, this.format);\n        }\n    }\n    ngOnDestroy() {\n        this.closePopup();\n        if (this.dynamicRTLSubscription) {\n            this.dynamicRTLSubscription.unsubscribe();\n        }\n    }\n    /**\n     * @hidden\n     */\n    handleWrapperClick() {\n        this.toggleWithEvents(!this.isOpen);\n        this.focus();\n    }\n    /**\n     * @hidden\n     */\n    handleActiveColorClick() {\n        this.focus();\n        const event = new ActiveColorClickEvent(this.value);\n        this.activeColorClick.emit(event);\n        if (!event.isOpenPrevented() || this.isOpen) {\n            this.handleWrapperClick();\n        }\n    }\n    /**\n     * Focuses the wrapper of the ColorPicker.\n     */\n    focus() {\n        if (this.disabled) {\n            return;\n        }\n        this.wrapper.nativeElement.focus();\n    }\n    /**\n     * @hidden\n     */\n    handleWrapperFocus() {\n        if (isPresent(this.palette)) {\n            this.palette.nativeElement.focus();\n        }\n        if (this.isFocused) {\n            return;\n        }\n        this.isFocused = true;\n        this.onFocus.emit();\n    }\n    /**\n     * Blurs the ColorPicker.\n     */\n    blur() {\n        this.wrapper.nativeElement.blur();\n    }\n    /**\n     * @hidden\n     */\n    handleWrapperBlur() {\n        if (this.isOpen) {\n            return;\n        }\n        this.isFocused = false;\n        this.onBlur.emit();\n        this.notifyNgTouched();\n    }\n    /**\n     * Clears the color value of the ColorPicker.\n     */\n    reset() {\n        if (!isPresent(this.value)) {\n            return;\n        }\n        this._value = undefined;\n        this.notifyNgChanged(undefined);\n    }\n    /**\n     * Toggles the popup of the ColorPicker.\n     * Does not trigger the `open` and `close` events of the component.\n     *\n     * @param open An optional parameter. Specifies whether the popup will be opened or closed.\n     */\n    toggle(open) {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        this.closePopup();\n        open = isPresent(open) ? open : !this.isOpen;\n        if (open) {\n            this.openPopup();\n        }\n    }\n    /**\n     * @hidden\n     */\n    handleValueChange(color, closePopup) {\n        const parsedColor = parseColor$1(color, this.format);\n        const valueChange = parsedColor !== this.value;\n        if (closePopup) {\n            this.toggleWithEvents(false);\n            this.focus();\n        }\n        if (valueChange) {\n            this.value = parsedColor;\n            this.valueChange.emit(parsedColor);\n            this.notifyNgChanged(parsedColor);\n        }\n    }\n    /**\n     * @hidden\n     */\n    handlePopupBlur(event) {\n        const focusInPopupElement = this.popupRef.popupElement.contains(event.relatedTarget);\n        const wrapperClicked = event.relatedTarget === this.wrapper.nativeElement;\n        if (!this.isFocused || wrapperClicked || focusInPopupElement) {\n            return;\n        }\n        this.isFocused = false;\n        this.onBlur.emit();\n        this.notifyNgTouched();\n        this.toggleWithEvents(false);\n    }\n    /**\n     * @hidden\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * @hidden\n     */\n    registerOnChange(fn) {\n        this.notifyNgChanged = fn;\n    }\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn) {\n        this.notifyNgTouched = fn;\n    }\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * @hidden\n     */\n    handleWrapperKeyDown(event) {\n        if (event.keyCode === Keys.ArrowDown || event.keyCode === Keys.Enter) {\n            event.preventDefault();\n            this.toggleWithEvents(true);\n        }\n    }\n    /**\n     * @hidden\n     */\n    handlePopupKeyDown(keyCode) {\n        if (keyCode === Keys.Tab || keyCode === Keys.Escape) {\n            this.toggleWithEvents(false);\n            this.wrapper.nativeElement.focus();\n        }\n    }\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty.\n     */\n    isEmpty() {\n        return false;\n    }\n    toggleWithEvents(open) {\n        const sameState = this.isOpen === open;\n        if (this.disabled || this.readonly || sameState) {\n            return;\n        }\n        const eventArgs = new PreventableEvent();\n        open ? this.open.emit(eventArgs) : this.close.emit(eventArgs);\n        if (!eventArgs.isDefaultPrevented()) {\n            this.toggle(open);\n        }\n    }\n    openPopup() {\n        const horizontalAlign = this.direction === \"rtl\" ? \"right\" : \"left\";\n        const anchorPosition = { horizontal: horizontalAlign, vertical: \"bottom\" };\n        const popupPosition = { horizontal: horizontalAlign, vertical: \"top\" };\n        this.popupRef = this.popupService.open({\n            anchor: this.wrapper,\n            animate: this.popupSettings.animate,\n            appendTo: this.popupSettings.appendTo,\n            popupAlign: popupPosition,\n            anchorAlign: anchorPosition,\n            popupClass: 'k-colorpicker-popup',\n            content: this.popupTemplate,\n            positionMode: 'absolute'\n        });\n        this.popupRef.popupAnchorViewportLeave.subscribe(() => {\n            this.toggleWithEvents(false);\n            if (!this.isOpen) {\n                this.wrapper.nativeElement.focus({\n                    preventScroll: true\n                });\n            }\n        });\n    }\n    closePopup() {\n        if (!this.isOpen) {\n            return;\n        }\n        this.popupRef.close();\n        this.popupRef = null;\n        this.palette = null;\n    }\n}\nColorPickerComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'kendo-colorpicker',\n                providers: [{\n                        multi: true,\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => ColorPickerComponent)\n                    }, {\n                        provide: KendoInput,\n                        useExisting: forwardRef(() => ColorPickerComponent)\n                    },\n                    LocalizationService,\n                    {\n                        provide: L10N_PREFIX,\n                        useValue: 'kendo.colorpicker'\n                    }\n                ],\n                template: `\n        <span\n            #wrapper\n            [ngClass]=\"{\n                'k-picker-wrap': true,\n                'k-state-default': !this.disabled,\n                'k-state-disabled': this.disabled,\n                'k-state-focused': this.isFocused\n            }\"\n            role=\"listbox\"\n            [attr.aria-expanded]=\"isOpen\"\n            [id]=\"focusableId\"\n            [attr.tabindex]=\"tabindex\"\n            (focus)=\"handleWrapperFocus()\"\n            (blur)=\"handleWrapperBlur()\"\n            (mousedown)=\"$event.preventDefault()\"\n            (keydown)=\"handleWrapperKeyDown($event)\"\n        >\n            <span *ngIf=\"!iconStyles\" class=\"k-selected-color\" [style.background-color]=\"value\" (click)=\"handleActiveColorClick()\">\n                <span class=\"k-icon k-i-line\" *ngIf=\"!value\"></span>\n            </span>\n            <span *ngIf=\"iconStyles\" class=\"k-tool-icon\" [ngClass]=\"iconStyles\" (click)=\"handleActiveColorClick()\">\n                <span class=\"k-selected-color\" [style.background-color]=\"value\"></span>\n            </span>\n            <span class=\"k-select\" (click)=\"handleWrapperClick()\">\n                <span class=\"k-icon k-i-arrow-s\"></span>\n            </span>\n        </span>\n        <ng-template #popupTemplate>\n            <kendo-colorgradient\n                *ngIf=\"view === 'gradient' || view === 'combo'\"\n                kendoFocusOnDomReady\n                [value]=\"value\"\n                [format]=\"format\"\n                [opacity]=\"gradientSettings.opacity\"\n                [clearButton]=\"gradientSettings.clearButton\"\n                (focusout)=\"handlePopupBlur($event)\"\n                (valueChange)=\"handleValueChange($event, false)\"\n                (keydown)=\"handlePopupKeyDown($event.keyCode)\"\n            >\n            </kendo-colorgradient>\n            <kendo-colorpalette\n                #palette\n                *ngIf=\"view === 'palette' || view === 'combo'\"\n                kendoFocusOnDomReady\n                [palette]=\"paletteSettings.palette\"\n                [columns]=\"paletteSettings.columns\"\n                [tileSize]=\"paletteSettings.tileSize\"\n                [format]=\"format\"\n                [value]=\"value\"\n                (blur)=\"handlePopupBlur($event)\"\n                (cellSelection)=\"handleValueChange($event, true)\"\n                (mousedown)=\"$event.preventDefault()\"\n                (keydown)=\"handlePopupKeyDown($event.keyCode)\"\n            >\n            </kendo-colorpalette>\n        </ng-template>\n        <ng-container #container></ng-container>\n    `\n            },] },\n];\n/** @nocollapse */\nColorPickerComponent.ctorParameters = () => [\n    { type: PopupService },\n    { type: LocalizationService }\n];\nColorPickerComponent.propDecorators = {\n    hostClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-colorpicker',] }],\n    direction: [{ type: HostBinding, args: ['attr.dir',] }],\n    focusableId: [{ type: Input }],\n    view: [{ type: Input }],\n    readonly: [{ type: Input }],\n    disabled: [{ type: Input }],\n    format: [{ type: Input }],\n    value: [{ type: Input }],\n    popupSettings: [{ type: Input }],\n    paletteSettings: [{ type: Input }],\n    gradientSettings: [{ type: Input }],\n    icon: [{ type: Input }],\n    iconClass: [{ type: Input }],\n    tabindex: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    open: [{ type: Output }],\n    close: [{ type: Output }],\n    onFocus: [{ type: Output, args: ['focus',] }],\n    onBlur: [{ type: Output, args: ['blur',] }],\n    activeColorClick: [{ type: Output }],\n    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],\n    wrapper: [{ type: ViewChild, args: ['wrapper',] }],\n    popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],\n    palette: [{ type: ViewChild, args: ['palette', { read: ElementRef },] }]\n};\n\n/**\n * @hidden\n */\nclass ColorPaletteService {\n    constructor() {\n        this.colorRows = [];\n    }\n    setColorMatrix(palette, columns) {\n        this.colorRows = [];\n        if (!(isPresent(palette) && palette.length)) {\n            return;\n        }\n        columns = columns || palette.length;\n        for (let start = 0; start < palette.length; start += columns) {\n            const row = palette.slice(start, columns + start);\n            this.colorRows.push(row);\n        }\n    }\n    getCellCoordsFor(color) {\n        if (!isPresent(color)) {\n            return;\n        }\n        for (let row = 0; row < this.colorRows.length; row++) {\n            for (let col = 0; col < this.colorRows[row].length; col++) {\n                if (this.colorRows[row][col] === color) {\n                    return { row, col };\n                }\n            }\n        }\n    }\n    getColorAt(cellCoords) {\n        if (!(isPresent(cellCoords) && isPresent(this.colorRows[cellCoords.row]))) {\n            return;\n        }\n        return this.colorRows[cellCoords.row][cellCoords.col];\n    }\n    getNextCell(current, horizontalStep, verticalStep) {\n        if (!(isPresent(current) && isPresent(current.row) && isPresent(current.col))) {\n            return { row: 0, col: 0 };\n        }\n        const row = this.clampIndex(current.row + verticalStep, this.colorRows.length - 1);\n        const col = this.clampIndex(current.col + horizontalStep, this.colorRows[row].length - 1);\n        return { row, col };\n    }\n    clampIndex(index, max) {\n        const minArrayIndex = 0;\n        if (index < minArrayIndex) {\n            return minArrayIndex;\n        }\n        if (index > max) {\n            return max;\n        }\n        return index;\n    }\n}\nColorPaletteService.decorators = [\n    { type: Injectable },\n];\n\nconst DEFAULT_TILE_SIZE = 24;\nconst DEFAULT_COLUMNS_COUNT = 10;\nconst DEFAULT_PRESET$1 = 'office';\nconst DEFAULT_ACCESSIBLE_PRESET$1 = 'accessible';\nlet serial$1 = 0;\n/**\n * The ColorPalette component provides a set of predefined palette presets and enables you to implement a custom color palette.\n * The ColorPalette is independently used by `kendo-colorpicker` and can be directly added to the page.\n */\nclass ColorPaletteComponent {\n    constructor(service, localizationService) {\n        this.service = service;\n        /**\n         * @hidden\n         */\n        this.id = `k-colorpalette-${serial$1++}`;\n        /**\n         * Specifies the output format of the ColorPaletteComponent.\n         * The input value may be in a different format. However, it will be parsed into the output `format`\n         * after the component processes it.\n         *\n         * The supported values are:\n         * * (Default) `hex`\n         * * `rgba`\n         * * `name`\n         */\n        this.format = 'hex';\n        /**\n         * Specifies the size of a color cell.\n         *\n         * The possible values are:\n         * * (Default) `tileSize = 24`\n         * * `{ width: number, height: number }`\n         */\n        this.tileSize = { width: DEFAULT_TILE_SIZE, height: DEFAULT_TILE_SIZE };\n        /**\n         * Fires each time the color selection is changed.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Fires each time the value is changed.\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time the user selects a cell with the mouse or presses `Enter`.\n         *\n         * @hidden\n         */\n        this.cellSelection = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.hostClasses = true;\n        this._tabindex = 0;\n        this.notifyNgTouched = () => { };\n        this.notifyNgChanged = () => { };\n        this.dynamicRTLSubscription = localizationService.changes.subscribe(({ rtl }) => {\n            this.direction = rtl ? 'rtl' : 'ltr';\n        });\n    }\n    /**\n     * @hidden\n     */\n    get paletteId() {\n        return this.id;\n    }\n    /**\n     * Specifies the value of the initially selected color.\n     */\n    set value(value) {\n        this._value = parseColor$1(value, this.format);\n    }\n    get value() {\n        return this._value;\n    }\n    /**\n     * Specifies the number of columns that will be displayed.\n     * Defaults to `10`.\n     */\n    set columns(value) {\n        const minColumnsCount = 1;\n        this._columns = value > minColumnsCount ? value : minColumnsCount;\n    }\n    get columns() {\n        return this._columns;\n    }\n    /**\n     * The color palette that will be displayed.\n     *\n     * The supported values are:\n     * * The name of the predefined palette preset (for example, `office`, `basic`, and `apex`).\n     * * A string with comma-separated colors.\n     * * A string array.\n     */\n    set palette(value) {\n        if (!isPresent(value)) {\n            value = DEFAULT_PRESET$1;\n        }\n        if (typeof value === 'string' && isPresent(PALETTEPRESETS[value])) {\n            this.columns = this.columns || PALETTEPRESETS[value].columns;\n            value = PALETTEPRESETS[value].colors;\n        }\n        const colors = (typeof value === 'string') ? value.split(',') : value;\n        this._palette = colors.map(color => parseColor$1(color, this.format, false));\n    }\n    get palette() {\n        return this._palette;\n    }\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n    set tabindex(value) {\n        const tabindex = Number(value);\n        const defaultValue = 0;\n        this._tabindex = !isNaN(tabindex) ? tabindex : defaultValue;\n    }\n    get tabindex() {\n        return !this.disabled ? this._tabindex : undefined;\n    }\n    /**\n     * @hidden\n     */\n    get tileLayout() {\n        if (typeof this.tileSize !== 'number') {\n            return this.tileSize;\n        }\n        return { width: this.tileSize, height: this.tileSize };\n    }\n    /**\n     * @hidden\n     */\n    get colorRows() {\n        return this.service.colorRows;\n    }\n    /**\n     * @hidden\n     */\n    get hostTabindex() { return this.tabindex; }\n    /**\n     * @hidden\n     */\n    get disabledClass() { return this.disabled; }\n    ngOnInit() {\n        if (this.colorRows.length === 0) {\n            const defaultPreset = (this.format !== 'name') ? DEFAULT_PRESET$1 : DEFAULT_ACCESSIBLE_PRESET$1;\n            this.palette = this.palette || defaultPreset;\n            this.setRows();\n            this.focusedCell = this.service.getCellCoordsFor(this.value);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dynamicRTLSubscription) {\n            this.dynamicRTLSubscription.unsubscribe();\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes.palette || changes.columns) {\n            this.setRows();\n        }\n        if (changes.palette || changes.value || changes.columns) {\n            this.focusedCell = this.service.getCellCoordsFor(this.value);\n        }\n    }\n    /**\n     * @hidden\n     */\n    handleKeydown(event) {\n        const isRTL = this.direction === 'rtl';\n        switch (event.keyCode) {\n            case Keys.ArrowDown:\n                this.handleCellNavigation(0, 1);\n                break;\n            case Keys.ArrowUp:\n                this.handleCellNavigation(0, -1);\n                break;\n            case Keys.ArrowRight:\n                this.handleCellNavigation(isRTL ? -1 : 1, 0);\n                break;\n            case Keys.ArrowLeft:\n                this.handleCellNavigation(isRTL ? 1 : -1, 0);\n                break;\n            case Keys.Enter:\n                this.handleEnter();\n                break;\n            default: return;\n        }\n        event.preventDefault();\n    }\n    /**\n     * @hidden\n     */\n    handleHostBlur() {\n        this.notifyNgTouched();\n    }\n    /**\n     * @hidden\n     */\n    handleCellSelection(value, focusedCell) {\n        if (this.readonly) {\n            return;\n        }\n        this.focusedCell = focusedCell;\n        const parsedColor = parseColor$1(value, this.format, false);\n        this.cellSelection.emit(parsedColor);\n        if (this.value !== parsedColor) {\n            this.value = parsedColor;\n            this.valueChange.emit(parsedColor);\n            this.notifyNgChanged(parsedColor);\n        }\n        if (this.selection !== parsedColor) {\n            this.selection = parsedColor;\n            this.selectionChange.emit(parsedColor);\n        }\n    }\n    /**\n     * @hidden\n     */\n    writeValue(value) {\n        this.value = value;\n        this.focusedCell = this.service.getCellCoordsFor(this.value);\n    }\n    /**\n     * @hidden\n     */\n    registerOnChange(fn) {\n        this.notifyNgChanged = fn;\n    }\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn) {\n        this.notifyNgTouched = fn;\n    }\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty.\n     */\n    isEmpty() {\n        return false;\n    }\n    /**\n     * Clears the color value of the ColorPalette.\n     */\n    reset() {\n        this.focusedCell = null;\n        if (isPresent(this.value)) {\n            this._value = undefined;\n            this.notifyNgChanged(undefined);\n        }\n    }\n    setRows() {\n        if (!isPresent(this.palette)) {\n            return;\n        }\n        this.columns = this.columns || DEFAULT_COLUMNS_COUNT;\n        this.service.setColorMatrix(this.palette, this.columns);\n    }\n    handleCellNavigation(horizontalStep, verticalStep) {\n        if (this.readonly) {\n            return;\n        }\n        this.focusedCell = this.service.getNextCell(this.focusedCell, horizontalStep, verticalStep);\n        const selection = this.service.getColorAt(this.focusedCell);\n        if (this.selection !== selection) {\n            this.selection = selection;\n            this.selectionChange.emit(selection);\n        }\n    }\n    handleEnter() {\n        if (!isPresent(this.focusedCell)) {\n            return;\n        }\n        const selectedColor = this.service.getColorAt(this.focusedCell);\n        this.handleCellSelection(selectedColor, this.focusedCell);\n    }\n}\nColorPaletteComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'kendo-colorpalette',\n                providers: [\n                    {\n                        multi: true,\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => ColorPaletteComponent) // tslint:disable-line:no-forward-ref\n                    }, {\n                        provide: KendoInput,\n                        useExisting: forwardRef(() => ColorPaletteComponent)\n                    },\n                    ColorPaletteService,\n                    LocalizationService,\n                    {\n                        provide: L10N_PREFIX,\n                        useValue: 'kendo.colorpalette'\n                    }\n                ],\n                template: `\n        <div role=\"grid\">\n            <table class=\"k-palette k-reset\" role=\"presentation\">\n                <tbody>\n                    <tr role=\"row\" *ngFor=\"let row of colorRows; let rowIndex = index\">\n                        <td *ngFor=\"let color of row; let colIndex = index\"\n                            [class.k-state-selected]=\"focusedCell?.row === rowIndex && focusedCell?.col === colIndex\"\n                            class=\"k-item\"\n                            [attr.value]=\"color\"\n                            (click)=\"handleCellSelection(color, { row: rowIndex, col: colIndex })\"\n                            [ngStyle]=\"{\n                                backgroundColor: color,\n                                width: tileLayout.width + 'px',\n                                height: tileLayout.height + 'px',\n                                minWidth: tileLayout.width + 'px'\n                            }\">\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    `\n            },] },\n];\n/** @nocollapse */\nColorPaletteComponent.ctorParameters = () => [\n    { type: ColorPaletteService },\n    { type: LocalizationService }\n];\nColorPaletteComponent.propDecorators = {\n    direction: [{ type: HostBinding, args: ['attr.dir',] }],\n    paletteId: [{ type: HostBinding, args: ['attr.id',] }],\n    id: [{ type: Input }],\n    format: [{ type: Input }],\n    value: [{ type: Input }],\n    columns: [{ type: Input }],\n    palette: [{ type: Input }],\n    tabindex: [{ type: Input }],\n    disabled: [{ type: Input }],\n    readonly: [{ type: Input }],\n    tileSize: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    cellSelection: [{ type: Output }],\n    hostTabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],\n    hostClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-colorpalette',] }],\n    disabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }],\n    handleKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],\n    handleHostBlur: [{ type: HostListener, args: ['blur',] }]\n};\n\nconst DEFAULT_OUTPUT_FORMAT = 'rgba';\nconst DEFAULT_BACKGROUND_COLOR = 'rgba(255, 0, 0, 1)';\nlet serial$2 = 0;\n/**\n * The ColorGradient component enables smooth color transitions and provides options for selecting specific colors over the drag handle.\n * The ColorGradient is independently used by `kendo-colorpicker` and can be directly added to the page.\n */\nclass ColorGradientComponent {\n    constructor(host, ngZone, renderer, cdr, localizationService) {\n        this.host = host;\n        this.ngZone = ngZone;\n        this.renderer = renderer;\n        this.cdr = cdr;\n        this.hostClasses = true;\n        /**\n         * @hidden\n         */\n        this.id = `k-colorgradient-${serial$2++}`;\n        /**\n         * Defines whether the alpha slider will be displayed.\n         */\n        this.opacity = true;\n        /**\n         * Sets the disabled state of the ColorGradient.\n         */\n        this.disabled = false;\n        /**\n         * Sets the read-only state of the ColorGradient.\n         */\n        this.readonly = false;\n        /**\n         * Specifies whether the ColorGradient should display a 'Clear color' button.\n         */\n        this.clearButton = false;\n        /**\n         * Fires each time the user selects a new color.\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.backgroundColor = DEFAULT_BACKGROUND_COLOR;\n        /**\n         * @hidden\n         *\n         * Represents the currently selected `hue`, `saturation`, `value`, and `alpha` values.\n         * The values are initially set in `ngOnInit` or in `ngOnChanges` and are\n         * updated on moving the drag handle or the sliders.\n         */\n        this.hsva = {};\n        /**\n         * Specifies the output format of the ColorGradientComponent.\n         * The input value may be in a different format. However, it will be parsed into the output `format`\n         * after the component processes it.\n         *\n         * The supported values are:\n         * * (Default) `rgba`\n         * * `hex`\n         */\n        this.format = DEFAULT_OUTPUT_FORMAT;\n        this._tabindex = 0;\n        this.listeners = [];\n        this.notifyNgChanged = () => { };\n        this.notifyNgTouched = () => { };\n        this.dynamicRTLSubscription = localizationService.changes.subscribe(({ rtl }) => {\n            this.direction = rtl ? 'rtl' : 'ltr';\n        });\n    }\n    get disabledClass() {\n        return this.disabled;\n    }\n    get hostTabindex() {\n        return this.tabindex;\n    }\n    /**\n     * @hidden\n     */\n    get gradientId() {\n        return this.id;\n    }\n    /**\n     * Specifies the value of the initially selected color.\n     */\n    set value(value) {\n        this._value = parseColor$1(value, this.format);\n    }\n    get value() {\n        return this._value;\n    }\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n    set tabindex(value) {\n        const tabindex = Number(value);\n        const defaultValue = 0;\n        this._tabindex = !isNaN(tabindex) ? tabindex : defaultValue;\n    }\n    get tabindex() {\n        return !this.disabled ? this._tabindex : undefined;\n    }\n    /**\n     * Indicates whether the ColorGradient or any of its content is focused.\n     */\n    get isFocused() {\n        if (!(isDocumentAvailable() && isPresent(this.host))) {\n            return false;\n        }\n        return this.host.nativeElement === document.activeElement || this.host.nativeElement.contains(document.activeElement);\n    }\n    /**\n     * @hidden\n     */\n    get alphaSliderValue() {\n        // setting the initial value to undefined to force the slider to recalculate the height of the slider track on the next cdr run\n        if (!(isPresent(this.hsva) && isPresent(this.hsva.a))) {\n            return;\n        }\n        return this.hsva.a * 100;\n    }\n    get gradientRect() {\n        return this.gradientWrapper.nativeElement.getBoundingClientRect();\n    }\n    ngAfterViewInit() {\n        this.updateUI();\n        this.cdr.detectChanges();\n        this.addEventListeners();\n    }\n    ngOnChanges(changes) {\n        if (isChanged('value', changes) && !this.isFocused) {\n            this.updateUI();\n        }\n    }\n    ngOnDestroy() {\n        this.listeners.forEach(removeListener => removeListener());\n        if (this.dynamicRTLSubscription) {\n            this.dynamicRTLSubscription.unsubscribe();\n        }\n    }\n    /**\n     * Focuses the component.\n     */\n    focus() {\n        if (this.disabled) {\n            return;\n        }\n        this.host.nativeElement.focus();\n    }\n    /**\n     * @hidden\n     */\n    reset() {\n        this.handleValueChange(undefined);\n        this.updateUI();\n    }\n    /**\n     * @hidden\n     */\n    handleDragPress(args) {\n        if (this.disabled || this.readonly || !isPresent(args.originalEvent)) {\n            return;\n        }\n        this.focus();\n        args.originalEvent.preventDefault();\n    }\n    /**\n     * @hidden\n     */\n    onHandleDrag(args) {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        this.renderer.addClass(this.gradientWrapper.nativeElement, 'k-dragging');\n        this.changePosition(args);\n    }\n    /**\n     * @hidden\n     */\n    onHandleRelease() {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        this.renderer.removeClass(this.gradientWrapper.nativeElement, 'k-dragging');\n    }\n    /**\n     * @hidden\n     */\n    changePosition(position) {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        this.ngZone.run(() => this.moveDragHandle(position));\n    }\n    /**\n     * @hidden\n     */\n    handleHueSliderChange(hue) {\n        this.handleValueChange(getColorFromHSV(this.hsva));\n        this.backgroundColor = getColorFromHue(hue);\n        this.setAlphaSliderBackground(this.backgroundColor);\n    }\n    /**\n     * @hidden\n     */\n    handleAlphaSliderChange(alpha) {\n        this.hsva.a = alpha / 100;\n        this.handleValueChange(getColorFromHSV(this.hsva));\n    }\n    /**\n     * @hidden\n     */\n    handleInputsValueChange(color) {\n        const parsed = parseColor$1(color, this.format);\n        if (this.value !== parsed) {\n            this.handleValueChange(parsed);\n            this.updateUI();\n        }\n    }\n    /**\n     * @hidden\n     */\n    writeValue(value) {\n        this.value = value;\n        if (isPresent(this.gradientWrapper)) {\n            this.updateUI();\n        }\n    }\n    /**\n     * @hidden\n     */\n    registerOnChange(fn) {\n        this.notifyNgChanged = fn;\n    }\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn) {\n        this.notifyNgTouched = fn;\n    }\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty.\n     */\n    isEmpty() {\n        return false;\n    }\n    moveDragHandle(position) {\n        const deltaX = position.clientX - this.gradientRect.left;\n        const deltaY = position.clientY - this.gradientRect.top;\n        const top = fitIntoBounds(deltaY, 0, this.gradientRect.height);\n        const left = fitIntoBounds(deltaX, 0, this.gradientRect.width);\n        this.setDragHandleElementPosition(top, left);\n        this.hsva.s = left / this.gradientRect.width;\n        this.hsva.v = 1 - top / this.gradientRect.height;\n        this.handleValueChange(getColorFromHSV(this.hsva));\n        this.setAlphaSliderBackground(getColorFromHSV(Object.assign({}, this.hsva, { a: 1 })));\n    }\n    updateUI() {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.hsva = this.value ? getHSV(this.value) : { h: 0, s: 0, v: 1, a: 1 };\n        const top = (1 - this.hsva.v) * this.gradientRect.height;\n        const left = this.hsva.s * this.gradientRect.width;\n        this.setDragHandleElementPosition(top, left);\n        this.backgroundColor = getColorFromHue(this.hsva.h);\n        this.setAlphaSliderBackground(this.backgroundColor);\n    }\n    handleValueChange(color) {\n        if (this.value === color) {\n            return;\n        }\n        this.value = color;\n        this.valueChange.emit(color);\n        this.notifyNgChanged(color);\n    }\n    setDragHandleElementPosition(top, left) {\n        const dragHandle = this.dragHandle.nativeElement;\n        this.renderer.setStyle(dragHandle, 'top', `${top}px`);\n        this.renderer.setStyle(dragHandle, 'left', `${left}px`);\n    }\n    setAlphaSliderBackground(backgroundColor) {\n        if (!isPresent(this.alphaSlider)) {\n            return;\n        }\n        const sliderTrack = this.alphaSlider.track.nativeElement;\n        this.renderer.setStyle(sliderTrack, 'background', `linear-gradient(to top, transparent, ${backgroundColor})`);\n    }\n    addEventListeners() {\n        this.ngZone.runOutsideAngular(() => {\n            const focusOutListener = this.renderer.listen(this.host.nativeElement, 'focusout', (event) => {\n                if (!containsFocus(this.host.nativeElement, event.relatedTarget) && isUntouched(this.host)) {\n                    this.ngZone.run(() => this.notifyNgTouched());\n                }\n            });\n            this.listeners.push(focusOutListener);\n        });\n    }\n}\nColorGradientComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'kendo-colorgradient',\n                providers: [{\n                        multi: true,\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => ColorGradientComponent)\n                    }, {\n                        provide: KendoInput,\n                        useExisting: forwardRef(() => ColorGradientComponent)\n                    },\n                    LocalizationService,\n                    {\n                        provide: L10N_PREFIX,\n                        useValue: 'kendo.colorgradient'\n                    }\n                ],\n                template: `\n        <div class=\"k-hbox k-hsv-wrap\">\n            <div class=\"k-hsv-rectangle\" [style.background-color]=\"backgroundColor\">\n                <div\n                    #gradientWrapper\n                    kendoDraggable\n                    class=\"k-hsv-gradient\"\n                    (click)=\"changePosition($event)\"\n                    (kendoPress)=\"handleDragPress($event)\"\n                    (kendoDrag)=\"onHandleDrag($event)\"\n                    (kendoRelease)=\"onHandleRelease()\">\n                    <div\n                        #dragHandle\n                        class=\"k-draghandle\"\n                    >\n                    </div>\n                </div>\n            </div>\n            <div class=\"k-hbox k-sliders-wrap {{ clearButton ? 'k-sliders-wrap-clearable' : '' }}\">\n                <span class=\"k-clear-color k-button k-bare k-button-icon\" *ngIf=\"clearButton\" (click)=\"reset()\">\n                    <span class=\"k-icon k-i-reset-color\"></span>\n                </span>\n                <kendo-slider\n                    class=\"k-hue-slider\"\n                    [disabled]=\"disabled\"\n                    [readonly]=\"readonly\"\n                    [showButtons]=\"false\"\n                    [tickPlacement]=\"'none'\"\n                    [vertical]=\"true\"\n                    [min]=\"0\"\n                    [max]=\"360\"\n                    [smallStep]=\"5\"\n                    [largeStep]=\"10\"\n                    [(value)]=\"hsva.h\"\n                    (valueChange)=\"handleHueSliderChange($event)\"\n                >\n                </kendo-slider>\n                <kendo-slider\n                    *ngIf=\"opacity && format === 'rgba'\"\n                    #alphaSlider\n                    class=\"k-alpha-slider\"\n                    [disabled]=\"disabled\"\n                    [readonly]=\"readonly\"\n                    [showButtons]=\"false\"\n                    [tickPlacement]=\"'none'\"\n                    [vertical]=\"true\"\n                    [min]=\"0\"\n                    [max]=\"100\"\n                    [smallStep]=\"1\"\n                    [largeStep]=\"10\"\n                    [value]=\"alphaSliderValue\"\n                    (valueChange)=\"handleAlphaSliderChange($event)\"\n                >\n                </kendo-slider>\n            </div>\n        </div>\n        <kendo-colorinput\n            [opacity]=\"opacity\"\n            [value]=\"value\"\n            [disabled]=\"disabled\"\n            [readonly]=\"readonly\"\n            (valueChange)=\"handleInputsValueChange($event)\"\n        >\n        </kendo-colorinput>\n`\n            },] },\n];\n/** @nocollapse */\nColorGradientComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Renderer2 },\n    { type: ChangeDetectorRef },\n    { type: LocalizationService }\n];\nColorGradientComponent.propDecorators = {\n    hostClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-flatcolorpicker',] }],\n    disabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }],\n    hostTabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],\n    gradientId: [{ type: HostBinding, args: ['attr.id',] }],\n    id: [{ type: Input }],\n    direction: [{ type: HostBinding, args: ['attr.dir',] }],\n    opacity: [{ type: Input }],\n    disabled: [{ type: Input }],\n    readonly: [{ type: Input }],\n    clearButton: [{ type: Input }],\n    value: [{ type: Input }],\n    tabindex: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    format: [{ type: Input }],\n    alphaSlider: [{ type: ViewChild, args: ['alphaSlider',] }],\n    gradientWrapper: [{ type: ViewChild, args: ['gradientWrapper',] }],\n    dragHandle: [{ type: ViewChild, args: ['dragHandle',] }]\n};\n\n/**\n * @hidden\n */\nclass ColorInputComponent {\n    constructor(host) {\n        this.host = host;\n        /**\n         * Sets whether the alpha slider will be shown.\n         */\n        this.opacity = true;\n        /**\n         * Sets the disabled state of the ColorInput.\n         */\n        this.disabled = false;\n        /**\n         * Sets the read-only state of the ColorInput.\n         */\n        this.readonly = false;\n        /**\n         * Emits a parsed rgba string color.\n         */\n        this.valueChange = new EventEmitter();\n        this.colorInputClass = true;\n        /**\n         * The rgba inputs values.\n         */\n        this.rgba = {};\n    }\n    /**\n     * Indicates whether any of the inputs are focused.\n     */\n    get isFocused() {\n        if (!(isDocumentAvailable() && isPresent(this.host))) {\n            return false;\n        }\n        const activeElement = document.activeElement;\n        return this.host.nativeElement.contains(activeElement);\n    }\n    /**\n     * Indicates whether any of the rgba inputs have value.\n     */\n    get rgbaInputValid() {\n        return Object.keys(this.rgba).every(key => isPresent(this.rgba[key]));\n    }\n    ngOnChanges(changes) {\n        if (isPresent(changes.value) && !this.isFocused) {\n            this.hex = parseColor$1(this.value, 'hex');\n            this.rgba = getRGBA(this.value);\n            this.rgba.a = parseColor$1(this.value, 'rgba') ? this.rgba.a : 1;\n        }\n    }\n    handleRgbaValueChange() {\n        const color = getColorFromRGBA(this.rgba);\n        if (!this.rgbaInputValid || color === this.value) {\n            return;\n        }\n        this.value = color;\n        this.rgba = getRGBA(this.value);\n        this.hex = parseColor$1(color, 'hex');\n        this.valueChange.emit(color);\n    }\n    handleHexValueChange(hex) {\n        this.hex = hex;\n        const color = parseColor$1(hex, 'rgba');\n        if (!isPresent(color) || color === this.value) {\n            return;\n        }\n        this.value = color;\n        this.rgba = getRGBA(color);\n        this.valueChange.emit(color);\n    }\n    handleRgbaInputBlur() {\n        if (!this.rgbaInputValid) {\n            this.rgba = getRGBA(this.value);\n        }\n    }\n    handleHexInputBlur() {\n        this.hex = parseColor$1(this.value, 'hex');\n    }\n}\nColorInputComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'kendo-colorinput',\n                template: `\n        <div class=\"k-hbox k-gradient-values\">\n            <input\n                #hexInput\n                class=\"k-textbox k-hex-value\"\n                [disabled]=\"disabled\"\n                [readonly]=\"readonly\"\n                [value]=\"hex || ''\"\n                placeholder=\"no color\"\n                (blur)=\"handleHexInputBlur()\"\n                (input)=\"handleHexValueChange(hexInput.value)\"\n            />\n            <kendo-numerictextbox\n                [disabled]=\"disabled\"\n                [readonly]=\"readonly\"\n                [min]=\"0\"\n                [max]=\"255\"\n                placeholder=\"R\"\n                [(value)]=\"rgba.r\"\n                [autoCorrect]=\"true\"\n                [spinners]=\"false\"\n                [format]=\"'n'\"\n                [decimals]=\"0\"\n                (blur)=\"handleRgbaInputBlur()\"\n                (valueChange)=\"handleRgbaValueChange()\"\n            >\n            </kendo-numerictextbox>\n            <kendo-numerictextbox\n                [disabled]=\"disabled\"\n                [readonly]=\"readonly\"\n                [min]=\"0\"\n                [max]=\"255\"\n                placeholder=\"G\"\n                [(value)]=\"rgba.g\"\n                [autoCorrect]=\"true\"\n                [spinners]=\"false\"\n                [format]=\"'n'\"\n                [decimals]=\"0\"\n                (blur)=\"handleRgbaInputBlur()\"\n                (valueChange)=\"handleRgbaValueChange()\"\n            >\n            </kendo-numerictextbox>\n            <kendo-numerictextbox\n                [disabled]=\"disabled\"\n                [readonly]=\"readonly\"\n                [min]=\"0\"\n                [max]=\"255\"\n                placeholder=\"B\"\n                [(value)]=\"rgba.b\"\n                [autoCorrect]=\"true\"\n                [spinners]=\"false\"\n                [format]=\"'n'\"\n                [decimals]=\"0\"\n                (blur)=\"handleRgbaInputBlur()\"\n                (valueChange)=\"handleRgbaValueChange()\"\n            >\n            </kendo-numerictextbox>\n            <kendo-numerictextbox\n                *ngIf=\"opacity\"\n                [disabled]=\"disabled\"\n                [readonly]=\"readonly\"\n                [min]=\"0\"\n                [max]=\"1\"\n                placeholder=\"A\"\n                [(value)]=\"rgba.a\"\n                [autoCorrect]=\"true\"\n                [spinners]=\"false\"\n                [step]=\"0.01\"\n                [format]=\"'n2'\"\n                [decimals]=\"2\"\n                (blur)=\"handleRgbaInputBlur()\"\n                (valueChange)=\"handleRgbaValueChange()\"\n            >\n            </kendo-numerictextbox>\n        </div>\n        <div class=\"k-hbox k-gradient-values\">\n            <div class=\"k-hex-value\">hex</div>\n            <div>r</div>\n            <div>g</div>\n            <div>b</div>\n            <div *ngIf=\"opacity\">a</div>\n        </div>\n    `\n            },] },\n];\n/** @nocollapse */\nColorInputComponent.ctorParameters = () => [\n    { type: ElementRef }\n];\nColorInputComponent.propDecorators = {\n    value: [{ type: Input }],\n    opacity: [{ type: Input }],\n    disabled: [{ type: Input }],\n    readonly: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    colorInputClass: [{ type: HostBinding, args: ['class.k-colorinputs',] }]\n};\n\n/**\n * @hidden\n */\nclass FocusOnDomReadyDirective {\n    constructor(host, ngZone) {\n        this.host = host;\n        this.ngZone = ngZone;\n    }\n    ngAfterContentInit() {\n        this.focusOnNextTick();\n    }\n    focusOnNextTick() {\n        this.ngZone.runOutsideAngular(() => setTimeout(() => this.host.nativeElement.focus()));\n    }\n}\nFocusOnDomReadyDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[kendoFocusOnDomReady]'\n            },] },\n];\n/** @nocollapse */\nFocusOnDomReadyDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone }\n];\n\nconst PUBLIC_DIRECTIVES = [\n    ColorPickerComponent,\n    ColorPaletteComponent,\n    ColorGradientComponent\n];\nconst INTERNAL_DIRECTIVES = [\n    ColorInputComponent,\n    FocusOnDomReadyDirective\n];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the ColorPicker.\n */\nclass ColorPickerModule {\n}\nColorPickerModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    PUBLIC_DIRECTIVES,\n                    INTERNAL_DIRECTIVES\n                ],\n                exports: [PUBLIC_DIRECTIVES],\n                imports: [\n                    SliderModule,\n                    NumericTextBoxModule,\n                    CommonModule,\n                    PopupModule,\n                    DraggableModule\n                ]\n            },] },\n];\n\n/**\n * Represents the directive that renders the [Kendo UI CheckBox]({% slug overview_checkbox %}) input component.\n * The directive is placed on input type=\"checkbox\" elements.\n *\n * @example\n * ```ts-no-run\n * <input type=\"checkbox\" kendoCheckBox />\n * ```\n */\nclass CheckBoxDirective {\n    constructor() {\n        this.kendoClass = true;\n    }\n}\nCheckBoxDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[kendoCheckBox]'\n            },] },\n];\nCheckBoxDirective.propDecorators = {\n    kendoClass: [{ type: HostBinding, args: ['class.k-checkbox',] }]\n};\n\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the CheckBox directive.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the CheckBox module\n * import { CheckBoxModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, CheckBoxModule], // import CheckBox module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nclass CheckBoxModule {\n}\nCheckBoxModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [CheckBoxDirective],\n                exports: [CheckBoxDirective],\n                imports: [CommonModule]\n            },] },\n];\n\n/**\n * Represents the directive that renders the [Kendo UI RadioButton]({% slug overview_checkbox %}) input component.\n * The directive is placed on input type=\"radio\" elements.\n *\n * @example\n * ```ts-no-run\n * <input type=\"radio\" kendoRadioButton />\n * ```\n */\nclass RadioButtonDirective {\n    constructor() {\n        this.kendoClass = true;\n    }\n}\nRadioButtonDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[kendoRadioButton]'\n            },] },\n];\nRadioButtonDirective.propDecorators = {\n    kendoClass: [{ type: HostBinding, args: ['class.k-radio',] }]\n};\n\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the RadioButton directive.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the RadioButton module\n * import { RadioButtonModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, RadioButtonModule], // import RadioButton module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nclass RadioButtonModule {\n}\nRadioButtonModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [RadioButtonDirective],\n                exports: [RadioButtonDirective],\n                imports: [CommonModule]\n            },] },\n];\n\nlet serial$3 = 0;\n/**\n * Represents an error message that will be shown underneath\n * a Kendo control or native HTML form-bound component after a validation.\n */\nclass ErrorComponent {\n    constructor() {\n        this.hostClass = true;\n        /**\n         * Specifies the alignment of the Error message.\n         *\n         * The possible values are:\n         * * (Default) `start`\n         * * `end`\n         */\n        this.align = 'start';\n        /**\n         * @hidden\n         */\n        this.id = `kendo-error-${serial$3++}`;\n        this.roleAttribute = 'alert';\n    }\n    get startClass() {\n        return this.align === 'start';\n    }\n    get endClass() {\n        return this.align === 'end';\n    }\n    get idAttribute() {\n        return this.id;\n    }\n}\nErrorComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'kendo-formerror',\n                template: `\n        <ng-content></ng-content>\n    `\n            },] },\n];\nErrorComponent.propDecorators = {\n    hostClass: [{ type: HostBinding, args: ['class.k-form-error',] }],\n    align: [{ type: Input }],\n    roleAttribute: [{ type: HostBinding, args: ['attr.role',] }],\n    startClass: [{ type: HostBinding, args: ['class.k-text-start',] }],\n    endClass: [{ type: HostBinding, args: ['class.k-text-end',] }],\n    idAttribute: [{ type: HostBinding, args: ['attr.id',] }]\n};\n\nlet serial$4 = 0;\n/**\n * Represents a hint message that will be shown underneath a form-bound component.\n */\nclass HintComponent {\n    constructor() {\n        /**\n         * Specifies the alignment of the Hint message.\n         *\n         * The possible values are:\n         * * (Default) `start`\n         * * `end`\n         */\n        this.align = 'start';\n        /**\n         * @hidden\n         */\n        this.id = `kendo-hint-${serial$4++}`;\n        this.hostClass = true;\n    }\n    get startClass() {\n        return this.align === 'start';\n    }\n    get endClass() {\n        return this.align === 'end';\n    }\n    get idAttribute() {\n        return this.id;\n    }\n}\nHintComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'kendo-formhint',\n                template: `\n        <ng-content></ng-content>\n    `\n            },] },\n];\nHintComponent.propDecorators = {\n    align: [{ type: Input }],\n    hostClass: [{ type: HostBinding, args: ['class.k-form-hint',] }],\n    startClass: [{ type: HostBinding, args: ['class.k-text-start',] }],\n    endClass: [{ type: HostBinding, args: ['class.k-text-end',] }],\n    idAttribute: [{ type: HostBinding, args: ['attr.id',] }]\n};\n\n/**\n * Specifies a container for form-bound controls (Kendo controls or native HTML controls).\n * Applies styling and behavior rules.\n */\nclass FormFieldComponent {\n    constructor(renderer, localizationService) {\n        this.renderer = renderer;\n        this.localizationService = localizationService;\n        this.hostClass = true;\n        /**\n         *\n         * Specifies when the Hint messages will be shown.\n         *\n         * The possible values are:\n         *\n         * * (Default) `initial`&mdash;Allows displaying hints when the form-bound component state is\n         * `valid` or `untouched` and `pristine`.\n         * * `always`&mdash;Allows full control over the visibility of the hints.\n         *\n         */\n        this.showHints = 'initial';\n        /**\n         * Specifies the layout orientation of the form field.\n         *\n         * * The possible values are:\n         *\n         * * (Default) `vertical`\n         * * `horizontal`\n         */\n        this.orientation = 'vertical';\n        /**\n         * Specifies when the Error messages will be shown.\n         *\n         * The possible values are:\n         *\n         * * (Default) `initial`&mdash;Allows displaying errors when the form-bound component state is\n         * `invalid` and `touched` or `dirty`.\n         * * `always`&mdash;Allows full control over the visibility of the errors.\n         *\n         */\n        this.showErrors = 'initial';\n        this.subscriptions = new Subscription();\n        this.rtl = false;\n        this.subscriptions.add(this.localizationService.changes.subscribe(({ rtl }) => {\n            this.rtl = rtl;\n            this.direction = this.rtl ? 'rtl' : 'ltr';\n        }));\n    }\n    get errorClass() {\n        if (!this.control) {\n            return false;\n        }\n        return this.control.invalid && (this.control.touched || this.control.dirty);\n    }\n    get disabledClass() {\n        if (!this.control) {\n            return false;\n        }\n        // radiobutton group\n        if (this.isRadioControl(this.control)) {\n            return false;\n        }\n        return this.disabledControl() ||\n            this.disabledElement() ||\n            this.disabledKendoInput();\n    }\n    set formControls(formControls) {\n        this.validateFormControl(formControls);\n        this.control = formControls.first;\n    }\n    /**\n     * @hidden\n     */\n    get horizontal() {\n        return this.orientation === 'horizontal';\n    }\n    /**\n     * @hidden\n     */\n    get hasHints() {\n        return this.showHints === 'always' ? true : this.showHintsInitial();\n    }\n    /**\n     * @hidden\n     */\n    get hasErrors() {\n        return this.showErrors === 'always' ? true : this.showErrorsInitial();\n    }\n    ngAfterViewInit() {\n        this.setDescription();\n    }\n    ngOnDestroy() {\n        this.subscriptions.unsubscribe();\n    }\n    disabledKendoInput() {\n        return this.kendoInput && this.kendoInput.disabled;\n    }\n    disabledControl() {\n        return this.control.disabled;\n    }\n    disabledElement() {\n        const elements = this.controlElementRefs.toArray();\n        return elements.every(e => e.nativeElement.hasAttribute('disabled'));\n    }\n    validateFormControl(formControls) {\n        if (isDevMode() && formControls.length !== 1 && !this.isControlGroup(formControls)) {\n            throw new Error('The `kendo-formfield` component should contain ' +\n                'only one control of type NgControl with a formControlName(https://angular.io/api/forms/FormControlName)' +\n                'or an ngModel(https://angular.io/api/forms/NgModel) binding.');\n        }\n    }\n    isControlGroup(formControls) {\n        if (!formControls.length) {\n            return false;\n        }\n        const name = formControls.first.name;\n        return formControls.toArray().every(c => c.name === name && (this.isRadioControl(c)));\n    }\n    isRadioControl(control) {\n        return control.valueAccessor instanceof RadioControlValueAccessor;\n    }\n    updateDescription() {\n        const controls = this.findControlElements();\n        if (!controls) {\n            return;\n        }\n        controls.forEach((control) => {\n            const ariaIds = this.generateDescriptionIds(control);\n            this.renderer.setAttribute(control, 'aria-describedby', ariaIds);\n        });\n    }\n    findControlElements() {\n        if (!this.controlElementRefs) {\n            return;\n        }\n        // if the control is KendoInput and has focusableId - dropdowns, dateinputs\n        if (this.kendoInput && this.kendoInput.focusableId && isDocumentAvailable()) {\n            return [document.getElementById(this.kendoInput.focusableId)];\n        }\n        return this.controlElementRefs.map(el => el.nativeElement);\n    }\n    generateDescriptionIds(control) {\n        const ids = new Set();\n        if (control.hasAttribute('aria-describedby')) {\n            const attributes = control.getAttribute('aria-describedby').split(' ');\n            attributes.forEach((attr) => {\n                if (attr.includes('kendo-hint-') || attr.includes('kendo-error-')) {\n                    return;\n                }\n                ids.add(attr);\n            });\n        }\n        this.hintChildren.forEach((hint) => {\n            ids.add(hint.id);\n        });\n        this.errorChildren.forEach((error) => {\n            ids.add(error.id);\n        });\n        return Array.from(ids).join(' ');\n    }\n    showHintsInitial() {\n        if (!this.control) {\n            return true;\n        }\n        const { valid, untouched, pristine } = this.control;\n        return valid || (untouched && pristine);\n    }\n    showErrorsInitial() {\n        if (!this.control) {\n            return false;\n        }\n        const { invalid, dirty, touched } = this.control;\n        return invalid && (dirty || touched);\n    }\n    setDescription() {\n        this.updateDescription();\n        this.subscriptions.add(this.errorChildren.changes.subscribe(() => this.updateDescription()));\n        this.subscriptions.add(this.hintChildren.changes.subscribe(() => this.updateDescription()));\n    }\n}\nFormFieldComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'kendo-formfield',\n                template: `\n        <ng-content select=\"label, kendo-label\"></ng-content>\n        <div [class.k-form-field-wrap]=\"horizontal\">\n            <ng-content></ng-content>\n            <ng-content select=\"kendo-formhint\" *ngIf=\"hasHints\"></ng-content>\n            <ng-content select=\"kendo-formerror\" *ngIf=\"hasErrors\"></ng-content>\n        </div>\n    `,\n                providers: [\n                    LocalizationService,\n                    {\n                        provide: L10N_PREFIX,\n                        useValue: 'kendo.formfield'\n                    }\n                ]\n            },] },\n];\n/** @nocollapse */\nFormFieldComponent.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: LocalizationService }\n];\nFormFieldComponent.propDecorators = {\n    hostClass: [{ type: HostBinding, args: ['class.k-form-field',] }],\n    direction: [{ type: HostBinding, args: ['attr.dir',] }],\n    errorClass: [{ type: HostBinding, args: ['class.k-form-field-error',] }],\n    disabledClass: [{ type: HostBinding, args: ['class.k-form-field-disabled',] }],\n    formControls: [{ type: ContentChildren, args: [NgControl, { descendants: true, static: true },] }],\n    controlElementRefs: [{ type: ContentChildren, args: [NgControl, { read: ElementRef, descendants: true, static: true },] }],\n    kendoInput: [{ type: ContentChild, args: [KendoInput, { static: true },] }],\n    errorChildren: [{ type: ContentChildren, args: [ErrorComponent, { descendants: true, static: true },] }],\n    hintChildren: [{ type: ContentChildren, args: [HintComponent, { descendants: true, static: true },] }],\n    showHints: [{ type: Input }],\n    orientation: [{ type: Input }],\n    showErrors: [{ type: Input }]\n};\n\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the FormField, Error and Hint components.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the FormField module\n * import { FormFieldModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, FormFieldModule], // import FormField module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nclass FormFieldModule {\n}\nFormFieldModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [HintComponent, ErrorComponent, FormFieldComponent],\n                exports: [HintComponent, ErrorComponent, FormFieldComponent],\n                imports: [CommonModule]\n            },] },\n];\n\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Inputs components.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Inputs module\n * import { InputsModule } from '@progress/kendo-angular-inputs';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, BrowserAnimationsModule, InputsModule], // import Inputs module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nclass InputsModule {\n}\nInputsModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [TextBoxModule, SliderModule, RangeSliderModule, SwitchModule, NumericTextBoxModule, MaskedTextBoxModule, ColorPickerModule, CheckBoxModule, RadioButtonModule, FormFieldModule],\n                imports: [CommonModule]\n            },] },\n];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CheckBoxModule, ColorInputComponent, FocusOnDomReadyDirective, ColorPaletteService, MaskingService, NumericTextBoxMessages, RadioButtonModule, RangeSliderCustomMessagesComponent, RangeSliderMessages, SliderCustomMessagesComponent, SliderMessages, SliderBase, SlidersCommonModule, SwitchCustomMessagesComponent, Messages, TextBoxCustomMessagesComponent, LocalizedTextBoxMessagesDirective, TextBoxMessages, TextBoxPrefixTemplateDirective, TextBoxSeparatorComponent, TextBoxSuffixTemplateDirective, TextBoxComponent, SliderComponent, RangeSliderComponent, LabelTemplateDirective, SwitchComponent, TextBoxContainerComponent, TextBoxDirective, TextAreaDirective, NumericTextBoxComponent, NumericTextBoxCustomMessagesComponent, MaskedTextBoxComponent, InputsModule, SliderTicksComponent, SliderModule, RangeSliderModule, SwitchModule, NumericTextBoxModule, MaskedTextBoxModule, TextBoxModule, ColorPickerComponent, ColorPaletteComponent, ColorGradientComponent, ColorPickerModule, ActiveColorClickEvent, CheckBoxDirective, RadioButtonDirective, HintComponent, ErrorComponent, FormFieldComponent, FormFieldModule, LocalizedNumericTextBoxMessagesDirective, LocalizedSliderMessagesDirective, LocalizedRangeSliderMessagesDirective, LocalizedSwitchMessagesDirective };\n"]},"metadata":{},"sourceType":"module"}