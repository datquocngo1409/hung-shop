{"ast":null,"code":"import _inherits from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**-----------------------------------------------------------------------------------------\n* Copyright © 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { EventEmitter, Injectable, LOCALE_ID, defineInjectable, inject, Inject, Pipe, NgModule } from '@angular/core';\nimport { dateFormatNames, dateFieldName, firstDay, format, formatDate, formatNumber, load, numberSymbols, parseDate, parseNumber, splitDateFormat, toString, weekendRange, setData, localeInfo } from '@telerik/kendo-intl';\nimport * as ɵngcc0 from '@angular/core';\nvar DOCS_URL = 'http://www.telerik.com/kendo-angular-ui/components/internationalization/troubleshooting/';\n/**\n * @hidden\n */\n\nvar errorSolutions = {\n  'NoCurrency': \"Solution: \".concat(DOCS_URL, \"#toc-no-currency\"),\n  'NoCurrencyDisplay': \"Solution: \".concat(DOCS_URL, \"#toc-no-currency-display\"),\n  'NoCurrencyRegion': \"Solution: \".concat(DOCS_URL, \"#toc-no-currency-region\"),\n  'NoDateFieldNames': \"Solution: \".concat(DOCS_URL, \"#toc-no-date-filed-names\"),\n  'NoFirstDay': \"Solution: \".concat(DOCS_URL, \"#toc-no-first-day\"),\n  'NoGMTInfo': \"Solution: \".concat(DOCS_URL, \"#toc-no-gmt-info\"),\n  'NoLocale': \"Solution: \".concat(DOCS_URL, \"#toc-no-locale\"),\n  'NoValidCurrency': \"Solution: \".concat(DOCS_URL, \"#toc-no-valid-currency\"),\n  'NoWeekData': \"Solution: \".concat(DOCS_URL, \"#toc-no-week-data\")\n};\n\nfunction formatMessage(error) {\n  var message = error.message;\n  var errorSolution = errorSolutions[Object.keys(errorSolutions).filter(function (key) {\n    return message.indexOf(key) === 0;\n  })[0]];\n  return errorSolution ? \"\".concat(message, \" \").concat(errorSolution) : message;\n}\n\nfunction intlMethod(fn) {\n  return function () {\n    try {\n      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n        values[_key] = arguments[_key];\n      }\n\n      return fn.apply(null, values);\n    } catch (error) {\n      error.message = formatMessage(error);\n      throw error;\n    }\n  };\n}\n/**\n * @hidden\n */\n\n\nvar dateFormatNames$1 = intlMethod(dateFormatNames);\n/**\n * @hidden\n */\n\nvar dateFieldName$1 = intlMethod(dateFieldName);\n/**\n * @hidden\n */\n\nvar firstDay$1 = intlMethod(firstDay);\n/**\n * @hidden\n */\n\nvar format$1 = intlMethod(format);\n/**\n * @hidden\n */\n\nvar formatDate$1 = intlMethod(formatDate);\n/**\n * @hidden\n */\n\nvar formatNumber$1 = intlMethod(formatNumber);\n/**\n * @hidden\n */\n\nvar load$1 = intlMethod(load);\n/**\n * @hidden\n */\n\nvar numberSymbols$1 = intlMethod(numberSymbols);\n/**\n * @hidden\n */\n\nvar parseDate$1 = intlMethod(parseDate);\n/**\n * @hidden\n */\n\nvar parseNumber$1 = intlMethod(parseNumber);\n/**\n * @hidden\n */\n\nvar splitDateFormat$1 = intlMethod(splitDateFormat);\n/**\n * @hidden\n */\n\nvar toString$1 = intlMethod(toString);\n/**\n * @hidden\n */\n\nvar weekendRange$1 = intlMethod(weekendRange);\n/**\n * Sets a pre-built locale.\n *\n * @params data - The pre-built locale data.\n */\n\nvar setData$1 = function setData$1(data) {\n  return setData(data);\n};\n/**\n * Retrieves the locale data for the specified locale.\n *\n * @params locale - The locale id.\n * @returns data - The locale data.\n */\n\n\nvar localeData = function localeData(locale) {\n  try {\n    return localeInfo(locale);\n  } catch (error) {\n    error.message = formatMessage(error);\n    throw error;\n  }\n};\n\nvar LOCALE_REGEX = /_/g;\n/**\n * @hidden\n */\n\nfunction cldrServiceFactory(localeId) {\n  return new CldrIntlService(localeId);\n}\n/**\n * An abstract base class that implements\n * the Internationalization service methods\n * for the current locale.\n */\n\n\nvar IntlService = /*#__PURE__*/function () {\n  function IntlService() {\n    _classCallCheck(this, IntlService);\n\n    /**\n     * @hidden\n     */\n    this.changes = new EventEmitter();\n  }\n  /**\n   * Notifies that the service was changed.\n   */\n\n\n  _createClass(IntlService, [{\n    key: \"notify\",\n    value: function notify() {\n      this.changes.emit();\n    }\n  }]);\n\n  return IntlService;\n}();\n\nIntlService.ɵfac = function IntlService_Factory(t) {\n  return new (t || IntlService)();\n};\n\nIntlService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: IntlService,\n  factory: function IntlService_Factory(t) {\n    var r = null;\n\n    if (t) {\n      r = new t();\n    } else {\n      r = cldrServiceFactory(ɵngcc0.ɵɵinject(LOCALE_ID));\n    }\n\n    return r;\n  },\n  providedIn: 'root'\n});\nIntlService.ngInjectableDef = defineInjectable({\n  factory: function IntlService_Factory() {\n    return cldrServiceFactory(inject(LOCALE_ID));\n  },\n  token: IntlService,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(IntlService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      useFactory: cldrServiceFactory,\n      deps: [LOCALE_ID]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * The Internationalization service implemented by using\n * the CLDR Database via the `@telerik/kendo-intl` package.\n */\n\n\nvar CldrIntlService = /*#__PURE__*/function (_IntlService) {\n  _inherits(CldrIntlService, _IntlService);\n\n  var _super = _createSuper(CldrIntlService);\n\n  /**\n   * Creates a new instance of the service with the ID of the specified locale.\n   *\n   * Note that the parts of the locale ID can be separated by either `_` (underscore)\n   * or `-` (dash).\n   *\n   * @param localeId - The default locale ID.\n   */\n  function CldrIntlService(localeId) {\n    var _this;\n\n    _classCallCheck(this, CldrIntlService);\n\n    _this = _super.call(this);\n    _this.localeId = localeId;\n    return _this;\n  }\n  /**\n   * Gets or sets the current locale ID.\n   */\n\n\n  _createClass(CldrIntlService, [{\n    key: \"format\",\n\n    /**\n     * Formats a string with placeholders such as\n     * `Total amount {0:c}`.\n     *\n     * @param format - The format string.\n     * @param values - One or more values to output in the format string placeholders.\n     * @return - The formatted string.\n     */\n    value: function format(format$$1) {\n      for (var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        values[_key2 - 1] = arguments[_key2];\n      }\n\n      return format$1(format$$1, values, this.localeId);\n    }\n    /**\n     * Converts an object into a string based on the specified format.\n     *\n     * @param value - The value to format.\n     * @param format - The format to use.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted object.\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString(value, format$$1, localeId) {\n      return toString$1(value, format$$1, localeId || this.localeId);\n    }\n    /**\n     * Converts a `Date` object into a string based on the specified format.\n     * If no format is provided, the default short date format is used.\n     *\n     * @param value - The date to format.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted date.\n     */\n\n  }, {\n    key: \"formatDate\",\n    value: function formatDate(value, format$$1, localeId) {\n      return formatDate$1(value, format$$1, localeId || this.localeId);\n    }\n    /**\n     * Converts a string into a `Date` object based on the specified format.\n     *\n     * @param value - The string to convert.\n     * @param format - The format strings or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The parsed date.\n     */\n\n  }, {\n    key: \"parseDate\",\n    value: function parseDate(value, format$$1, localeId) {\n      return parseDate$1(value, format$$1, localeId || this.localeId);\n    }\n    /**\n     * Converts a string into a `Number`.\n     *\n     * @param value - The string to convert.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The parsed number.\n     */\n\n  }, {\n    key: \"parseNumber\",\n    value: function parseNumber(value, format$$1, localeId) {\n      return parseNumber$1(value, localeId || this.localeId, format$$1);\n    }\n    /**\n     * Converts a `Number` into a string based on the specified format.\n     *\n     * @param value - The number to format.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted number.\n     */\n\n  }, {\n    key: \"formatNumber\",\n    value: function formatNumber(value, format$$1, localeId) {\n      return formatNumber$1(value, format$$1, localeId || this.localeId);\n    }\n    /**\n     * Returns the date names from the current locale based on the option.\n     *\n     * The available `type` values are:\n     * - `era`\n     * - `year`\n     * - `quarter`\n     * - `month`\n     * - `week`\n     * - `day`\n     * - `dayperiod`\n     * - `hour`\n     * - `minute`\n     * - `second`\n     * - `zone`\n     *\n     * The available `nameType` values are:\n     * - `wide`\n     * - `narrow`\n     * - `short`\n     *\n     * @param options - Detailed configuration for the desired date field name.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The day names from the current locale based on the option.\n     * @returns The localized date field name from the current locale based on the option.\n     *\n     * @example\n     * ```\n     * dateFieldName({ type: 'day' });                      //returns 'day';\n     * dateFieldName({ type: 'day', nameType: 'wide' });    //returns 'day';\n     * dateFieldName({ type: 'month', nameType: 'short' }); //returns 'mo.';\n     * dateFieldName({ type: 'month', nameType: 'wide' });  //returns 'month';\n     * ```\n     */\n\n  }, {\n    key: \"dateFieldName\",\n    value: function dateFieldName(options, localeId) {\n      return dateFieldName$1(options, localeId || this.localeId);\n    }\n    /**\n     * Returns a localized date field name based on specific dateFieldName options.\n     *\n     * The available type values are:\n     * - `day`\n     * - `dayperiod`\n     * - `months`\n     * - `quarters`\n     * - `eras`\n     *\n     * @param options - Detailed configuration for the desired date format.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The day names from the current locale based on the option.\n     */\n\n  }, {\n    key: \"dateFormatNames\",\n    value: function dateFormatNames(options, localeId) {\n      return dateFormatNames$1(localeId || this.localeId, options);\n    }\n    /**\n     * Splits the date format into objects containing information about each part of the pattern.\n     *\n     * @param format The format string or options.\n     * @param localeId The optional locale id. If not specified, the `\"en\"` locale id is used.\n     * @returns The date format parts.\n     */\n\n  }, {\n    key: \"splitDateFormat\",\n    value: function splitDateFormat(format$$1, localeId) {\n      return splitDateFormat$1(format$$1, localeId || this.localeId);\n    }\n    /**\n     * Returns the number symbols from the current locale based on the option.\n     *\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The number symbols from the current locale.\n     */\n\n  }, {\n    key: \"numberSymbols\",\n    value: function numberSymbols(localeId) {\n      return numberSymbols$1(localeId || this.localeId);\n    }\n    /**\n     * Returns the first day index starting from Sunday.\n     *\n     * @param localeId - The locale ID. Defaults to the current locale ID.\n     * @return - The index of the first day of the week (0 == Sunday).\n     */\n\n  }, {\n    key: \"firstDay\",\n    value: function firstDay(localeId) {\n      return firstDay$1(localeId || this.localeId);\n    }\n    /**\n     * Returns the start and end index of the locale weekend starting from Sunday.\n     *\n     * @param localeId - The locale ID. Defaults to the current locale ID.\n     * @return - The the start and end index of the locale weekend (0 == Sunday).\n     */\n\n  }, {\n    key: \"weekendRange\",\n    value: function weekendRange(localeId) {\n      return weekendRange$1(localeId || this.localeId);\n    }\n  }, {\n    key: \"localeId\",\n    get: function get() {\n      return this.locale;\n    },\n    set: function set(value) {\n      // Angular locales use underscore, for example, en_US\n      // while IETF BCP-47 specifies a dash.\n      // https://tools.ietf.org/html/bcp47\n      var locale = value.replace(LOCALE_REGEX, '-');\n\n      if (locale !== this.locale) {\n        this.locale = locale;\n        this.notify();\n      }\n    }\n  }]);\n\n  return CldrIntlService;\n}(IntlService);\n\nCldrIntlService.ɵfac = function CldrIntlService_Factory(t) {\n  return new (t || CldrIntlService)(ɵngcc0.ɵɵinject(LOCALE_ID));\n};\n\nCldrIntlService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: CldrIntlService,\n  factory: CldrIntlService.ɵfac\n});\n/** @nocollapse */\n\nCldrIntlService.ctorParameters = function () {\n  return [{\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [LOCALE_ID]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CldrIntlService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [LOCALE_ID]\n      }]\n    }];\n  }, null);\n})();\n\nvar isNumeric = function isNumeric(value) {\n  return !isNaN(value - parseFloat(value));\n};\n\nvar ɵ0 = isNumeric;\n/**\n * Formats a date value to a string based on the requested format.\n * This pipe uses the [IntlService]({% slug api_intl_intlservice %}).\n *\n * @example\n * ```ng-template-no-run\n * <ul>\n *    <li>{{date | kendoDate }}</li>\n *    <li>{{milliseconds | kendoDate: 'M/dd/yyy' }}</li>\n *    <li>{{stringDate | kendoDate: 'G' }}</li>\n * </ul>\n * ```\n */\n\nvar DatePipe = /*#__PURE__*/function () {\n  /**\n   * @hidden\n   */\n  function DatePipe(intlService) {\n    _classCallCheck(this, DatePipe);\n\n    this.intlService = intlService;\n  }\n  /**\n   * Converts a `Date` object into a string based on the specified format.\n   * If no format is provided, the default short date format is used.\n   *\n   * @param value - The date to format.\n   * @param format - The format string or options.\n   * @param localeId - (Optional) The ID of the locale which will be used instead of the default one.\n   * @return - The formatted date.\n   */\n\n\n  _createClass(DatePipe, [{\n    key: \"transform\",\n    value: function transform(value) {\n      var format$$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n      var localeId = arguments.length > 2 ? arguments[2] : undefined;\n      value = this.normalize(value);\n\n      if (value) {\n        return this.intlService.formatDate(value, format$$1, localeId);\n      }\n\n      return value;\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize(value) {\n      if (value && typeof value === 'string') {\n        value = this.intlService.parseDate(value);\n      } else if (value && isNumeric(value)) {\n        value = new Date(parseFloat(value));\n      }\n\n      return value;\n    }\n  }]);\n\n  return DatePipe;\n}();\n\nDatePipe.ɵfac = function DatePipe_Factory(t) {\n  return new (t || DatePipe)(ɵngcc0.ɵɵdirectiveInject(IntlService));\n};\n\nDatePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"kendoDate\",\n  type: DatePipe,\n  pure: true\n});\n/** @nocollapse */\n\nDatePipe.ctorParameters = function () {\n  return [{\n    type: IntlService\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(DatePipe, [{\n    type: Pipe,\n    args: [{\n      name: 'kendoDate'\n    }]\n  }], function () {\n    return [{\n      type: IntlService\n    }];\n  }, null);\n})();\n/**\n * Formats a number value to a string based on the requested format.\n * This pipe uses the [`IntlService`]({% slug api_intl_intlservice %}).\n *\n * @example\n * ```ng-template-no-run\n *   <ul>\n *     <li>{{decimal | kendoNumber:'c' }}</li>\n *     <li>{{stringNumber | kendoNumber:'p' }}</li>\n *     <li>{{int | kendoNumber:'##.00' }}</li>\n *  </ul>\n * ```\n */\n\n\nvar NumberPipe = /*#__PURE__*/function () {\n  /**\n   * @hidden\n   */\n  function NumberPipe(intlService) {\n    _classCallCheck(this, NumberPipe);\n\n    this.intlService = intlService;\n  }\n  /**\n   * Converts a `Number` object into a string based on the specified format.\n   * If no format is provided, the value is formatted as decimal number using the\n   * [`\"n\"`](https://github.com/telerik/kendo-intl/blob/master/docs/num-formatting/index.md#standard) format.\n   *\n   * @param value - The numer that will be formatted.\n   * @param format - The format string or options.\n   * @param localeId - (Optional) The locale ID that will be used in place of the default one.\n   * @return - The formatted number.\n   */\n\n\n  _createClass(NumberPipe, [{\n    key: \"transform\",\n    value: function transform(value, format$$1, localeId) {\n      if (typeof value === 'string') {\n        value = this.intlService.parseNumber(value);\n      }\n\n      if (value !== null && value !== undefined) {\n        return this.intlService.formatNumber(value, format$$1, localeId);\n      }\n\n      return value;\n    }\n  }]);\n\n  return NumberPipe;\n}();\n\nNumberPipe.ɵfac = function NumberPipe_Factory(t) {\n  return new (t || NumberPipe)(ɵngcc0.ɵɵdirectiveInject(IntlService));\n};\n\nNumberPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"kendoNumber\",\n  type: NumberPipe,\n  pure: true\n});\n/** @nocollapse */\n\nNumberPipe.ctorParameters = function () {\n  return [{\n    type: IntlService\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NumberPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'kendoNumber'\n    }]\n  }], function () {\n    return [{\n      type: IntlService\n    }];\n  }, null);\n})();\n\nvar pipes = [DatePipe, NumberPipe];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }}docs/ts/latest/guide/ngmodule.html)\n * definition for the Intl services.\n */\n\nvar IntlModule = function IntlModule() {\n  _classCallCheck(this, IntlModule);\n};\n\nIntlModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: IntlModule\n});\nIntlModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function IntlModule_Factory(t) {\n    return new (t || IntlModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IntlModule, {\n    declarations: [DatePipe, NumberPipe],\n    exports: [DatePipe, NumberPipe]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(IntlModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [pipes],\n      exports: [pipes]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { cldrServiceFactory, IntlService, CldrIntlService, DatePipe, ɵ0, NumberPipe, IntlModule, dateFormatNames$1 as dateFormatNames, dateFieldName$1 as dateFieldName, firstDay$1 as firstDay, format$1 as format, formatDate$1 as formatDate, formatNumber$1 as formatNumber, load$1 as load, numberSymbols$1 as numberSymbols, parseDate$1 as parseDate, parseNumber$1 as parseNumber, splitDateFormat$1 as splitDateFormat, toString$1 as toString, weekendRange$1 as weekendRange, setData$1 as setData, localeData };","map":{"version":3,"sources":["index.js"],"names":[],"mappings":"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","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright © 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { EventEmitter, Injectable, LOCALE_ID, defineInjectable, inject, Inject, Pipe, NgModule } from '@angular/core';\nimport { dateFormatNames, dateFieldName, firstDay, format, formatDate, formatNumber, load, numberSymbols, parseDate, parseNumber, splitDateFormat, toString, weekendRange, setData, localeInfo } from '@telerik/kendo-intl';\n\nconst DOCS_URL = 'http://www.telerik.com/kendo-angular-ui/components/internationalization/troubleshooting/';\n/**\n * @hidden\n */\nconst errorSolutions = {\n    'NoCurrency': `Solution: ${DOCS_URL}#toc-no-currency`,\n    'NoCurrencyDisplay': `Solution: ${DOCS_URL}#toc-no-currency-display`,\n    'NoCurrencyRegion': `Solution: ${DOCS_URL}#toc-no-currency-region`,\n    'NoDateFieldNames': `Solution: ${DOCS_URL}#toc-no-date-filed-names`,\n    'NoFirstDay': `Solution: ${DOCS_URL}#toc-no-first-day`,\n    'NoGMTInfo': `Solution: ${DOCS_URL}#toc-no-gmt-info`,\n    'NoLocale': `Solution: ${DOCS_URL}#toc-no-locale`,\n    'NoValidCurrency': `Solution: ${DOCS_URL}#toc-no-valid-currency`,\n    'NoWeekData': `Solution: ${DOCS_URL}#toc-no-week-data`\n};\n\nfunction formatMessage(error) {\n    const message = error.message;\n    const errorSolution = errorSolutions[Object.keys(errorSolutions).filter(key => message.indexOf(key) === 0)[0]];\n    return errorSolution ? `${message} ${errorSolution}` : message;\n}\nfunction intlMethod(fn) {\n    return function (...values) {\n        try {\n            return fn.apply(null, values);\n        }\n        catch (error) {\n            error.message = formatMessage(error);\n            throw error;\n        }\n    };\n}\n/**\n * @hidden\n */\nconst dateFormatNames$1 = intlMethod(dateFormatNames);\n/**\n * @hidden\n */\nconst dateFieldName$1 = intlMethod(dateFieldName);\n/**\n * @hidden\n */\nconst firstDay$1 = intlMethod(firstDay);\n/**\n * @hidden\n */\nconst format$1 = intlMethod(format);\n/**\n * @hidden\n */\nconst formatDate$1 = intlMethod(formatDate);\n/**\n * @hidden\n */\nconst formatNumber$1 = intlMethod(formatNumber);\n/**\n * @hidden\n */\nconst load$1 = intlMethod(load);\n/**\n * @hidden\n */\nconst numberSymbols$1 = intlMethod(numberSymbols);\n/**\n * @hidden\n */\nconst parseDate$1 = intlMethod(parseDate);\n/**\n * @hidden\n */\nconst parseNumber$1 = intlMethod(parseNumber);\n/**\n * @hidden\n */\nconst splitDateFormat$1 = intlMethod(splitDateFormat);\n/**\n * @hidden\n */\nconst toString$1 = intlMethod(toString);\n/**\n * @hidden\n */\nconst weekendRange$1 = intlMethod(weekendRange);\n/**\n * Sets a pre-built locale.\n *\n * @params data - The pre-built locale data.\n */\nconst setData$1 = (data) => setData(data);\n/**\n * Retrieves the locale data for the specified locale.\n *\n * @params locale - The locale id.\n * @returns data - The locale data.\n */\nconst localeData = (locale) => {\n    try {\n        return localeInfo(locale);\n    }\n    catch (error) {\n        error.message = formatMessage(error);\n        throw error;\n    }\n};\n\nconst LOCALE_REGEX = /_/g;\n/**\n * @hidden\n */\nfunction cldrServiceFactory(localeId) {\n    return new CldrIntlService(localeId);\n}\n/**\n * An abstract base class that implements\n * the Internationalization service methods\n * for the current locale.\n */\nclass IntlService {\n    constructor() {\n        /**\n         * @hidden\n         */\n        this.changes = new EventEmitter();\n    }\n    /**\n     * Notifies that the service was changed.\n     */\n    notify() {\n        this.changes.emit();\n    }\n}\nIntlService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root',\n                useFactory: cldrServiceFactory,\n                deps: [LOCALE_ID]\n            },] },\n];\nIntlService.ngInjectableDef = defineInjectable({ factory: function IntlService_Factory() { return cldrServiceFactory(inject(LOCALE_ID)); }, token: IntlService, providedIn: \"root\" });\n/**\n * The Internationalization service implemented by using\n * the CLDR Database via the `@telerik/kendo-intl` package.\n */\nclass CldrIntlService extends IntlService {\n    /**\n     * Creates a new instance of the service with the ID of the specified locale.\n     *\n     * Note that the parts of the locale ID can be separated by either `_` (underscore)\n     * or `-` (dash).\n     *\n     * @param localeId - The default locale ID.\n     */\n    constructor(localeId) {\n        super();\n        this.localeId = localeId;\n    }\n    /**\n     * Gets or sets the current locale ID.\n     */\n    get localeId() {\n        return this.locale;\n    }\n    set localeId(value) {\n        // Angular locales use underscore, for example, en_US\n        // while IETF BCP-47 specifies a dash.\n        // https://tools.ietf.org/html/bcp47\n        const locale = value.replace(LOCALE_REGEX, '-');\n        if (locale !== this.locale) {\n            this.locale = locale;\n            this.notify();\n        }\n    }\n    /**\n     * Formats a string with placeholders such as\n     * `Total amount {0:c}`.\n     *\n     * @param format - The format string.\n     * @param values - One or more values to output in the format string placeholders.\n     * @return - The formatted string.\n     */\n    format(format$$1, ...values) {\n        return format$1(format$$1, values, this.localeId);\n    }\n    /**\n     * Converts an object into a string based on the specified format.\n     *\n     * @param value - The value to format.\n     * @param format - The format to use.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted object.\n     */\n    toString(value, format$$1, localeId) {\n        return toString$1(value, format$$1, localeId || this.localeId);\n    }\n    /**\n     * Converts a `Date` object into a string based on the specified format.\n     * If no format is provided, the default short date format is used.\n     *\n     * @param value - The date to format.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted date.\n     */\n    formatDate(value, format$$1, localeId) {\n        return formatDate$1(value, format$$1, localeId || this.localeId);\n    }\n    /**\n     * Converts a string into a `Date` object based on the specified format.\n     *\n     * @param value - The string to convert.\n     * @param format - The format strings or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The parsed date.\n     */\n    parseDate(value, format$$1, localeId) {\n        return parseDate$1(value, format$$1, localeId || this.localeId);\n    }\n    /**\n     * Converts a string into a `Number`.\n     *\n     * @param value - The string to convert.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The parsed number.\n     */\n    parseNumber(value, format$$1, localeId) {\n        return parseNumber$1(value, localeId || this.localeId, format$$1);\n    }\n    /**\n     * Converts a `Number` into a string based on the specified format.\n     *\n     * @param value - The number to format.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted number.\n     */\n    formatNumber(value, format$$1, localeId) {\n        return formatNumber$1(value, format$$1, localeId || this.localeId);\n    }\n    /**\n     * Returns the date names from the current locale based on the option.\n     *\n     * The available `type` values are:\n     * - `era`\n     * - `year`\n     * - `quarter`\n     * - `month`\n     * - `week`\n     * - `day`\n     * - `dayperiod`\n     * - `hour`\n     * - `minute`\n     * - `second`\n     * - `zone`\n     *\n     * The available `nameType` values are:\n     * - `wide`\n     * - `narrow`\n     * - `short`\n     *\n     * @param options - Detailed configuration for the desired date field name.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The day names from the current locale based on the option.\n     * @returns The localized date field name from the current locale based on the option.\n     *\n     * @example\n     * ```\n     * dateFieldName({ type: 'day' });                      //returns 'day';\n     * dateFieldName({ type: 'day', nameType: 'wide' });    //returns 'day';\n     * dateFieldName({ type: 'month', nameType: 'short' }); //returns 'mo.';\n     * dateFieldName({ type: 'month', nameType: 'wide' });  //returns 'month';\n     * ```\n     */\n    dateFieldName(options, localeId) {\n        return dateFieldName$1(options, localeId || this.localeId);\n    }\n    /**\n     * Returns a localized date field name based on specific dateFieldName options.\n     *\n     * The available type values are:\n     * - `day`\n     * - `dayperiod`\n     * - `months`\n     * - `quarters`\n     * - `eras`\n     *\n     * @param options - Detailed configuration for the desired date format.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The day names from the current locale based on the option.\n     */\n    dateFormatNames(options, localeId) {\n        return dateFormatNames$1(localeId || this.localeId, options);\n    }\n    /**\n     * Splits the date format into objects containing information about each part of the pattern.\n     *\n     * @param format The format string or options.\n     * @param localeId The optional locale id. If not specified, the `\"en\"` locale id is used.\n     * @returns The date format parts.\n     */\n    splitDateFormat(format$$1, localeId) {\n        return splitDateFormat$1(format$$1, localeId || this.localeId);\n    }\n    /**\n     * Returns the number symbols from the current locale based on the option.\n     *\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The number symbols from the current locale.\n     */\n    numberSymbols(localeId) {\n        return numberSymbols$1(localeId || this.localeId);\n    }\n    /**\n     * Returns the first day index starting from Sunday.\n     *\n     * @param localeId - The locale ID. Defaults to the current locale ID.\n     * @return - The index of the first day of the week (0 == Sunday).\n     */\n    firstDay(localeId) {\n        return firstDay$1(localeId || this.localeId);\n    }\n    /**\n     * Returns the start and end index of the locale weekend starting from Sunday.\n     *\n     * @param localeId - The locale ID. Defaults to the current locale ID.\n     * @return - The the start and end index of the locale weekend (0 == Sunday).\n     */\n    weekendRange(localeId) {\n        return weekendRange$1(localeId || this.localeId);\n    }\n}\nCldrIntlService.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nCldrIntlService.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n\nconst isNumeric = (value) => !isNaN(value - parseFloat(value));\nconst ɵ0 = isNumeric;\n/**\n * Formats a date value to a string based on the requested format.\n * This pipe uses the [IntlService]({% slug api_intl_intlservice %}).\n *\n * @example\n * ```ng-template-no-run\n * <ul>\n *    <li>{{date | kendoDate }}</li>\n *    <li>{{milliseconds | kendoDate: 'M/dd/yyy' }}</li>\n *    <li>{{stringDate | kendoDate: 'G' }}</li>\n * </ul>\n * ```\n */\nclass DatePipe {\n    /**\n     * @hidden\n     */\n    constructor(intlService) {\n        this.intlService = intlService;\n    }\n    /**\n     * Converts a `Date` object into a string based on the specified format.\n     * If no format is provided, the default short date format is used.\n     *\n     * @param value - The date to format.\n     * @param format - The format string or options.\n     * @param localeId - (Optional) The ID of the locale which will be used instead of the default one.\n     * @return - The formatted date.\n     */\n    transform(value, format$$1 = \"\", localeId) {\n        value = this.normalize(value);\n        if (value) {\n            return this.intlService.formatDate(value, format$$1, localeId);\n        }\n        return value;\n    }\n    normalize(value) {\n        if (value && typeof value === 'string') {\n            value = this.intlService.parseDate(value);\n        }\n        else if (value && isNumeric(value)) {\n            value = new Date(parseFloat(value));\n        }\n        return value;\n    }\n}\nDatePipe.decorators = [\n    { type: Pipe, args: [{\n                name: 'kendoDate'\n            },] },\n];\n/** @nocollapse */\nDatePipe.ctorParameters = () => [\n    { type: IntlService }\n];\n\n/**\n * Formats a number value to a string based on the requested format.\n * This pipe uses the [`IntlService`]({% slug api_intl_intlservice %}).\n *\n * @example\n * ```ng-template-no-run\n *   <ul>\n *     <li>{{decimal | kendoNumber:'c' }}</li>\n *     <li>{{stringNumber | kendoNumber:'p' }}</li>\n *     <li>{{int | kendoNumber:'##.00' }}</li>\n *  </ul>\n * ```\n */\nclass NumberPipe {\n    /**\n     * @hidden\n     */\n    constructor(intlService) {\n        this.intlService = intlService;\n    }\n    /**\n     * Converts a `Number` object into a string based on the specified format.\n     * If no format is provided, the value is formatted as decimal number using the\n     * [`\"n\"`](https://github.com/telerik/kendo-intl/blob/master/docs/num-formatting/index.md#standard) format.\n     *\n     * @param value - The numer that will be formatted.\n     * @param format - The format string or options.\n     * @param localeId - (Optional) The locale ID that will be used in place of the default one.\n     * @return - The formatted number.\n     */\n    transform(value, format$$1, localeId) {\n        if (typeof value === 'string') {\n            value = this.intlService.parseNumber(value);\n        }\n        if (value !== null && value !== undefined) {\n            return this.intlService.formatNumber(value, format$$1, localeId);\n        }\n        return value;\n    }\n}\nNumberPipe.decorators = [\n    { type: Pipe, args: [{\n                name: 'kendoNumber'\n            },] },\n];\n/** @nocollapse */\nNumberPipe.ctorParameters = () => [\n    { type: IntlService }\n];\n\nconst pipes = [\n    DatePipe,\n    NumberPipe\n];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }}docs/ts/latest/guide/ngmodule.html)\n * definition for the Intl services.\n */\nclass IntlModule {\n}\nIntlModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [pipes],\n                exports: [pipes]\n            },] },\n];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { cldrServiceFactory, IntlService, CldrIntlService, DatePipe, ɵ0, NumberPipe, IntlModule, dateFormatNames$1 as dateFormatNames, dateFieldName$1 as dateFieldName, firstDay$1 as firstDay, format$1 as format, formatDate$1 as formatDate, formatNumber$1 as formatNumber, load$1 as load, numberSymbols$1 as numberSymbols, parseDate$1 as parseDate, parseNumber$1 as parseNumber, splitDateFormat$1 as splitDateFormat, toString$1 as toString, weekendRange$1 as weekendRange, setData$1 as setData, localeData };\n"]},"metadata":{},"sourceType":"module"}