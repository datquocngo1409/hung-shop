{"ast":null,"code":"import _toConsumableArray from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { queueScheduler, asyncScheduler } from 'rxjs';\nimport { tap, subscribeOn, observeOn } from 'rxjs/operators';\nimport { InjectionToken, Version, NgZone, Optional, VERSION as VERSION$1, NgModule, Inject, PLATFORM_ID } from '@angular/core';\nimport { apps, initializeApp, registerVersion } from 'firebase/app';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction noop() {}\n/**\n * Schedules tasks so that they are invoked inside the Zone that is passed in the constructor.\n */\n// tslint:disable-next-line:class-name\n\n\nvar ɵZoneScheduler = /*#__PURE__*/function () {\n  /**\n   * @param {?} zone\n   * @param {?=} delegate\n   */\n  function ɵZoneScheduler(zone) {\n    var delegate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : queueScheduler;\n\n    _classCallCheck(this, ɵZoneScheduler);\n\n    this.zone = zone;\n    this.delegate = delegate;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(ɵZoneScheduler, [{\n    key: \"now\",\n    value: function now() {\n      return this.delegate.now();\n    }\n    /**\n     * @param {?} work\n     * @param {?=} delay\n     * @param {?=} state\n     * @return {?}\n     */\n\n  }, {\n    key: \"schedule\",\n    value: function schedule(work, delay, state) {\n      /** @type {?} */\n      var targetZone = this.zone; // Wrap the specified work function to make sure that if nested scheduling takes place the\n      // work is executed in the correct zone\n\n      /** @type {?} */\n\n      var workInZone =\n      /**\n      * @this {?}\n      * @param {?} state\n      * @return {?}\n      */\n      function workInZone(state) {\n        var _this = this;\n\n        targetZone.runGuarded(\n        /**\n        * @return {?}\n        */\n        function () {\n          work.apply(_this, [state]);\n        });\n      }; // Scheduling itself needs to be run in zone to ensure setInterval calls for async scheduling are done\n      // inside the correct zone. This scheduler needs to schedule asynchronously always to ensure that\n      // firebase emissions are never synchronous. Specifying a delay causes issues with the queueScheduler delegate.\n\n\n      return this.delegate.schedule(workInZone, delay, state);\n    }\n  }]);\n\n  return ɵZoneScheduler;\n}();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  ɵZoneScheduler.prototype.zone;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ɵZoneScheduler.prototype.delegate;\n} // tslint:disable-next-line:class-name\n\n/**\n * @template T\n */\n\n\nvar ɵBlockUntilFirstOperator = /*#__PURE__*/function () {\n  /**\n   * @param {?} zone\n   */\n  function ɵBlockUntilFirstOperator(zone) {\n    _classCallCheck(this, ɵBlockUntilFirstOperator);\n\n    this.zone = zone;\n    this.task = null;\n  }\n  /**\n   * @param {?} subscriber\n   * @param {?} source\n   * @return {?}\n   */\n\n\n  _createClass(ɵBlockUntilFirstOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      /** @type {?} */\n      var unscheduleTask = this.unscheduleTask.bind(this);\n      this.task = this.zone.run(\n      /**\n      * @return {?}\n      */\n      function () {\n        return Zone.current.scheduleMacroTask('firebaseZoneBlock', noop, {}, noop, noop);\n      });\n      return source.pipe(tap({\n        next: unscheduleTask,\n        complete: unscheduleTask,\n        error: unscheduleTask\n      })).subscribe(subscriber).add(unscheduleTask);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"unscheduleTask\",\n    value: function unscheduleTask() {\n      var _this2 = this;\n\n      // maybe this is a race condition, invoke in a timeout\n      // hold for 10ms while I try to figure out what is going on\n      setTimeout(\n      /**\n      * @return {?}\n      */\n      function () {\n        if (_this2.task != null && _this2.task.state === 'scheduled') {\n          _this2.task.invoke();\n\n          _this2.task = null;\n        }\n      }, 10);\n    }\n  }]);\n\n  return ɵBlockUntilFirstOperator;\n}();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  ɵBlockUntilFirstOperator.prototype.task;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ɵBlockUntilFirstOperator.prototype.zone;\n} // tslint:disable-next-line:class-name\n\n\nvar ɵAngularFireSchedulers =\n/**\n * @param {?} ngZone\n */\nfunction ɵAngularFireSchedulers(ngZone) {\n  _classCallCheck(this, ɵAngularFireSchedulers);\n\n  this.ngZone = ngZone;\n  this.outsideAngular = ngZone.runOutsideAngular(\n  /**\n  * @return {?}\n  */\n  function () {\n    return new ɵZoneScheduler(Zone.current);\n  });\n  this.insideAngular = ngZone.run(\n  /**\n  * @return {?}\n  */\n  function () {\n    return new ɵZoneScheduler(Zone.current, asyncScheduler);\n  });\n};\n\nif (false) {\n  /** @type {?} */\n  ɵAngularFireSchedulers.prototype.outsideAngular;\n  /** @type {?} */\n\n  ɵAngularFireSchedulers.prototype.insideAngular;\n  /** @type {?} */\n\n  ɵAngularFireSchedulers.prototype.ngZone;\n}\n/**\n * Operator to block the zone until the first value has been emitted or the observable\n * has completed/errored. This is used to make sure that universal waits until the first\n * value from firebase but doesn't block the zone forever since the firebase subscription\n * is still alive.\n * @param {?} schedulers\n * @return {?}\n */\n\n\nfunction ɵkeepUnstableUntilFirstFactory(schedulers) {\n  return (\n    /**\n    * @template T\n    * @param {?} obs$\n    * @return {?}\n    */\n    function keepUnstableUntilFirst(obs$) {\n      obs$ = obs$.lift(new ɵBlockUntilFirstOperator(schedulers.ngZone));\n      return obs$.pipe( // Run the subscribe body outside of Angular (e.g. calling Firebase SDK to add a listener to a change event)\n      subscribeOn(schedulers.outsideAngular), // Run operators inside the angular zone (e.g. side effects via tap())\n      observeOn(schedulers.insideAngular) // INVESTIGATE https://github.com/angular/angularfire/pull/2315\n      // share()\n      );\n    }\n  );\n} // DEBUG quick debugger function for inline logging that typescript doesn't complain about\n//       wrote it for debugging the ɵlazySDKProxy, commenting out for now; should consider exposing a\n//       verbose mode for AngularFire in a future release that uses something like this in multiple places\n//       usage: () => log('something') || returnValue\n// const log = (...args: any[]): false => { console.log(...args); return false }\n// The problem here are things like ngOnDestroy are missing, then triggering the service\n// rather than dig too far; I'm capturing these as I go.\n\n/** @type {?} */\n\n\nvar noopFunctions = ['ngOnDestroy']; // INVESTIGATE should we make the Proxy revokable and do some cleanup?\n//             right now it's fairly simple but I'm sure this will grow in complexity\n\n/** @type {?} */\n\nvar ɵlazySDKProxy =\n/**\n* @param {?} klass\n* @param {?} observable\n* @param {?} zone\n* @return {?}\n*/\nfunction ɵlazySDKProxy(klass, observable, zone) {\n  return new Proxy(klass, {\n    get:\n    /**\n    * @param {?} _\n    * @param {?} name\n    * @return {?}\n    */\n    function get(_, name) {\n      return zone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      function () {\n        if (klass[name]) {\n          return klass[name];\n        }\n\n        if (noopFunctions.includes(name)) {\n          return (\n            /**\n            * @return {?}\n            */\n            function () {}\n          );\n        }\n        /** @type {?} */\n\n\n        var promise = observable.toPromise().then(\n        /**\n        * @param {?} mod\n        * @return {?}\n        */\n        function (mod) {\n          /** @type {?} */\n          var ret = mod && mod[name]; // TODO move to proper type guards\n\n          if (typeof ret === 'function') {\n            return ret.bind(mod);\n          } else if (ret && ret.then) {\n            return ret.then(\n            /**\n            * @param {?} res\n            * @return {?}\n            */\n            function (res) {\n              return zone.run(\n              /**\n              * @return {?}\n              */\n              function () {\n                return res;\n              });\n            });\n          } else {\n            return zone.run(\n            /**\n            * @return {?}\n            */\n            function () {\n              return ret;\n            });\n          }\n        }); // recurse the proxy\n\n        return new Proxy(\n        /**\n        * @return {?}\n        */\n        function () {\n          return undefined;\n        }, {\n          get:\n          /**\n          * @param {?} _\n          * @param {?} name\n          * @return {?}\n          */\n          function get(_, name) {\n            return promise[name];\n          },\n          // TODO handle callbacks as transparently as I can\n          apply:\n          /**\n          * @param {?} self\n          * @param {?} _\n          * @param {?} args\n          * @return {?}\n          */\n          function apply(self, _, args) {\n            return promise.then(\n            /**\n            * @param {?} it\n            * @return {?}\n            */\n            function (it) {\n              return it && it.apply(void 0, _toConsumableArray(args));\n            });\n          }\n        });\n      });\n    }\n  });\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n */\n\n\nfunction FirebaseOptions() {}\n/**\n * @record\n */\n\n\nfunction FirebaseAppConfig() {}\n/** @type {?} */\n\n\nvar FIREBASE_OPTIONS = new InjectionToken('angularfire2.app.options');\n/** @type {?} */\n\nvar FIREBASE_APP_NAME = new InjectionToken('angularfire2.app.nameOrConfig'); // Have to implement as we need to return a class from the provider, we should consider exporting\n// this in the firebase/app types as this is our highest risk of breaks\n\nvar FirebaseApp = function FirebaseApp() {\n  _classCallCheck(this, FirebaseApp);\n};\n\nif (false) {\n  /** @type {?} */\n  FirebaseApp.prototype.name;\n  /** @type {?} */\n\n  FirebaseApp.prototype.options;\n  /** @type {?} */\n\n  FirebaseApp.prototype.analytics;\n  /** @type {?} */\n\n  FirebaseApp.prototype.auth;\n  /** @type {?} */\n\n  FirebaseApp.prototype.database;\n  /** @type {?} */\n\n  FirebaseApp.prototype.messaging;\n  /** @type {?} */\n\n  FirebaseApp.prototype.performance;\n  /** @type {?} */\n\n  FirebaseApp.prototype.storage;\n  /** @type {?} */\n\n  FirebaseApp.prototype.delete;\n  /** @type {?} */\n\n  FirebaseApp.prototype.firestore;\n  /** @type {?} */\n\n  FirebaseApp.prototype.functions;\n  /** @type {?} */\n\n  FirebaseApp.prototype.remoteConfig;\n}\n/** @type {?} */\n\n\nvar VERSION = new Version('6.0.2');\n/**\n * @param {?} options\n * @param {?} zone\n * @param {?=} nameOrConfig\n * @return {?}\n */\n\nfunction ɵfirebaseAppFactory(options, zone, nameOrConfig) {\n  /** @type {?} */\n  var name = typeof nameOrConfig === 'string' && nameOrConfig || '[DEFAULT]';\n  /** @type {?} */\n\n  var config = typeof nameOrConfig === 'object' && nameOrConfig || {};\n  config.name = config.name || name; // Added any due to some inconsistency between @firebase/app and firebase types\n\n  /** @type {?} */\n\n  var existingApp =\n  /** @type {?} */\n  apps.filter(\n  /**\n  * @param {?} app\n  * @return {?}\n  */\n  function (app) {\n    return app && app.name === config.name;\n  })[0]; // We support FirebaseConfig, initializeApp's public type only accepts string; need to cast as any\n  // Could be solved with https://github.com/firebase/firebase-js-sdk/pull/1206\n\n  return (\n    /** @type {?} */\n    existingApp || zone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    function () {\n      return initializeApp(options,\n      /** @type {?} */\n      config);\n    })\n  );\n}\n/** @type {?} */\n\n\nvar FIREBASE_APP_PROVIDER = {\n  provide: FirebaseApp,\n  useFactory: ɵfirebaseAppFactory,\n  deps: [FIREBASE_OPTIONS, NgZone, [new Optional(), FIREBASE_APP_NAME]]\n};\n\nvar AngularFireModule = /*#__PURE__*/function () {\n  // tslint:disable-next-line:ban-types\n\n  /**\n   * @param {?} platformId\n   */\n  function AngularFireModule(platformId) {\n    _classCallCheck(this, AngularFireModule);\n\n    registerVersion('angularfire', VERSION.full, platformId.toString());\n    registerVersion('angular', VERSION$1.full);\n  }\n  /**\n   * @param {?} options\n   * @param {?=} nameOrConfig\n   * @return {?}\n   */\n\n\n  _createClass(AngularFireModule, null, [{\n    key: \"initializeApp\",\n    value: function initializeApp(options, nameOrConfig) {\n      return {\n        ngModule: AngularFireModule,\n        providers: [{\n          provide: FIREBASE_OPTIONS,\n          useValue: options\n        }, {\n          provide: FIREBASE_APP_NAME,\n          useValue: nameOrConfig\n        }]\n      };\n    }\n  }]);\n\n  return AngularFireModule;\n}();\n\nAngularFireModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: AngularFireModule\n});\nAngularFireModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function AngularFireModule_Factory(t) {\n    return new (t || AngularFireModule)(ɵngcc0.ɵɵinject(PLATFORM_ID));\n  },\n  providers: [FIREBASE_APP_PROVIDER]\n});\n/** @nocollapse */\n\nAngularFireModule.ctorParameters = function () {\n  return [{\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AngularFireModule, [{\n    type: NgModule,\n    args: [{\n      providers: [FIREBASE_APP_PROVIDER]\n    }]\n  }], function () {\n    return [{\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { AngularFireModule, FIREBASE_APP_NAME, FIREBASE_OPTIONS, FirebaseApp, VERSION, ɵAngularFireSchedulers, ɵBlockUntilFirstOperator, ɵZoneScheduler, ɵfirebaseAppFactory, ɵkeepUnstableUntilFirstFactory, ɵlazySDKProxy };","map":{"version":3,"sources":["../../../src/core/angularfire2.ts","../../../src/core/firebase.app.module.ts"],"names":["firebase.apps","firebase.initializeApp","firebase.registerVersion","NG_VERSION"],"mappings":"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","sourcesContent":["import { NgZone } from '@angular/core';\nimport {\n  asyncScheduler,\n  Observable,\n  Operator,\n  queueScheduler,\n  SchedulerAction,\n  SchedulerLike,\n  Subscriber,\n  Subscription,\n  TeardownLogic\n} from 'rxjs';\nimport { observeOn, subscribeOn, tap } from 'rxjs/operators';\n\nfunction noop() {\n}\n\n/**\n * Schedules tasks so that they are invoked inside the Zone that is passed in the constructor.\n */\n// tslint:disable-next-line:class-name\nexport class ɵZoneScheduler implements SchedulerLike {\n  constructor(private zone: any, private delegate: any = queueScheduler) {\n  }\n\n  now() {\n    return this.delegate.now();\n  }\n\n  schedule(work: (this: SchedulerAction<any>, state?: any) => void, delay?: number, state?: any): Subscription {\n    const targetZone = this.zone;\n    // Wrap the specified work function to make sure that if nested scheduling takes place the\n    // work is executed in the correct zone\n    const workInZone = function(this: SchedulerAction<any>, state: any) {\n      targetZone.runGuarded(() => {\n        work.apply(this, [state]);\n      });\n    };\n\n    // Scheduling itself needs to be run in zone to ensure setInterval calls for async scheduling are done\n    // inside the correct zone. This scheduler needs to schedule asynchronously always to ensure that\n    // firebase emissions are never synchronous. Specifying a delay causes issues with the queueScheduler delegate.\n    return this.delegate.schedule(workInZone, delay, state);\n  }\n}\n\n// tslint:disable-next-line:class-name\nexport class ɵBlockUntilFirstOperator<T> implements Operator<T, T> {\n  private task: MacroTask | null = null;\n\n  constructor(private zone: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: Observable<T>): TeardownLogic {\n    const unscheduleTask = this.unscheduleTask.bind(this);\n    this.task = this.zone.run(() => Zone.current.scheduleMacroTask('firebaseZoneBlock', noop, {}, noop, noop));\n\n    return source.pipe(\n      tap({ next: unscheduleTask, complete: unscheduleTask, error: unscheduleTask })\n    ).subscribe(subscriber).add(unscheduleTask);\n  }\n\n  private unscheduleTask() {\n    // maybe this is a race condition, invoke in a timeout\n    // hold for 10ms while I try to figure out what is going on\n    setTimeout(() => {\n      if (this.task != null && this.task.state === 'scheduled') {\n        this.task.invoke();\n        this.task = null;\n      }\n    }, 10);\n  }\n}\n\n// tslint:disable-next-line:class-name\nexport class ɵAngularFireSchedulers {\n  public readonly outsideAngular: ɵZoneScheduler;\n  public readonly insideAngular: ɵZoneScheduler;\n\n  constructor(public ngZone: NgZone) {\n    this.outsideAngular = ngZone.runOutsideAngular(() => new ɵZoneScheduler(Zone.current));\n    this.insideAngular = ngZone.run(() => new ɵZoneScheduler(Zone.current, asyncScheduler));\n  }\n}\n\n/**\n * Operator to block the zone until the first value has been emitted or the observable\n * has completed/errored. This is used to make sure that universal waits until the first\n * value from firebase but doesn't block the zone forever since the firebase subscription\n * is still alive.\n */\nexport function ɵkeepUnstableUntilFirstFactory(schedulers: ɵAngularFireSchedulers) {\n  return function keepUnstableUntilFirst<T>(obs$: Observable<T>): Observable<T> {\n    obs$ = obs$.lift(\n      new ɵBlockUntilFirstOperator(schedulers.ngZone)\n    );\n\n    return obs$.pipe(\n      // Run the subscribe body outside of Angular (e.g. calling Firebase SDK to add a listener to a change event)\n      subscribeOn(schedulers.outsideAngular),\n      // Run operators inside the angular zone (e.g. side effects via tap())\n      observeOn(schedulers.insideAngular)\n      // INVESTIGATE https://github.com/angular/angularfire/pull/2315\n      // share()\n    );\n  };\n}\n\n// tslint:disable:ban-types\ntype FunctionPropertyNames<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T];\ntype PromiseReturningFunctionPropertyNames<T> = {\n  [K in FunctionPropertyNames<T>]: ReturnType<T[K]> extends Promise<any> ? K : never\n}[FunctionPropertyNames<T>];\ntype NonPromiseReturningFunctionPropertyNames<T> = {\n  [K in FunctionPropertyNames<T>]: ReturnType<T[K]> extends Promise<any> ? never : K\n}[FunctionPropertyNames<T>];\ntype NonFunctionPropertyNames<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T];\n// tslint:enable:ban-types\n\nexport type ɵPromiseProxy<T> = { [K in NonFunctionPropertyNames<T>]: Promise<T[K]> } &\n  { [K in NonPromiseReturningFunctionPropertyNames<T>]: (...args: Parameters<T[K]>) => Promise<ReturnType<T[K]>> } &\n  { [K in PromiseReturningFunctionPropertyNames<T>]: (...args: Parameters<T[K]>) => ReturnType<T[K]> };\n\n\n// DEBUG quick debugger function for inline logging that typescript doesn't complain about\n//       wrote it for debugging the ɵlazySDKProxy, commenting out for now; should consider exposing a\n//       verbose mode for AngularFire in a future release that uses something like this in multiple places\n//       usage: () => log('something') || returnValue\n// const log = (...args: any[]): false => { console.log(...args); return false }\n\n// The problem here are things like ngOnDestroy are missing, then triggering the service\n// rather than dig too far; I'm capturing these as I go.\nconst noopFunctions = ['ngOnDestroy'];\n\n// INVESTIGATE should we make the Proxy revokable and do some cleanup?\n//             right now it's fairly simple but I'm sure this will grow in complexity\nexport const ɵlazySDKProxy = (klass: any, observable: Observable<any>, zone: NgZone) => {\n  return new Proxy(klass, {\n    get: (_, name: string) => zone.runOutsideAngular(() => {\n      if (klass[name]) {\n        return klass[name];\n      }\n      if (noopFunctions.includes(name)) {\n        return () => {\n        };\n      }\n      const promise = observable.toPromise().then(mod => {\n        const ret = mod && mod[name];\n        // TODO move to proper type guards\n        if (typeof ret === 'function') {\n          return ret.bind(mod);\n        } else if (ret && ret.then) {\n          return ret.then((res: any) => zone.run(() => res));\n        } else {\n          return zone.run(() => ret);\n        }\n      });\n      // recurse the proxy\n      return new Proxy(() => undefined, {\n          get: (_, name) => promise[name],\n          // TODO handle callbacks as transparently as I can\n          apply: (self, _, args) => promise.then(it => it && it(...args))\n        }\n      );\n    })\n  });\n};\n","import { Inject, InjectionToken, NgModule, NgZone, Optional, PLATFORM_ID, VERSION as NG_VERSION, Version } from '@angular/core';\nimport * as firebase from 'firebase/app';\nimport { analytics, app, auth, database, firestore, functions, messaging, performance, remoteConfig, storage } from 'firebase/app';\n\n// INVESTIGATE Public types don't expose FirebaseOptions or FirebaseAppConfig, is this the case anylonger?\nexport interface FirebaseOptions {\n  [key: string]: any;\n}\n\nexport interface FirebaseAppConfig {\n  [key: string]: any;\n}\n\nexport const FIREBASE_OPTIONS = new InjectionToken<FirebaseOptions>('angularfire2.app.options');\nexport const FIREBASE_APP_NAME = new InjectionToken<string | FirebaseAppConfig | undefined>('angularfire2.app.nameOrConfig');\n\n// Have to implement as we need to return a class from the provider, we should consider exporting\n// this in the firebase/app types as this is our highest risk of breaks\nexport class FirebaseApp implements Partial<app.App> {\n  name: string;\n  options: {};\n  analytics: () => analytics.Analytics;\n  auth: () => auth.Auth;\n  database: (databaseURL?: string) => database.Database;\n  messaging: () => messaging.Messaging;\n  performance: () => performance.Performance;\n  storage: (storageBucket?: string) => storage.Storage;\n  delete: () => Promise<void>;\n  firestore: () => firestore.Firestore;\n  functions: (region?: string) => functions.Functions;\n  remoteConfig: () => remoteConfig.RemoteConfig;\n}\n\nexport const VERSION = new Version('ANGULARFIRE2_VERSION');\n\nexport function ɵfirebaseAppFactory(options: FirebaseOptions, zone: NgZone, nameOrConfig?: string | FirebaseAppConfig | null) {\n  const name = typeof nameOrConfig === 'string' && nameOrConfig || '[DEFAULT]';\n  const config = typeof nameOrConfig === 'object' && nameOrConfig || {};\n  config.name = config.name || name;\n  // Added any due to some inconsistency between @firebase/app and firebase types\n  const existingApp = firebase.apps.filter(app => app && app.name === config.name)[0] as any;\n  // We support FirebaseConfig, initializeApp's public type only accepts string; need to cast as any\n  // Could be solved with https://github.com/firebase/firebase-js-sdk/pull/1206\n  return (existingApp || zone.runOutsideAngular(() => firebase.initializeApp(options, config as any))) as FirebaseApp;\n}\n\nconst FIREBASE_APP_PROVIDER = {\n  provide: FirebaseApp,\n  useFactory: ɵfirebaseAppFactory,\n  deps: [\n    FIREBASE_OPTIONS,\n    NgZone,\n    [new Optional(), FIREBASE_APP_NAME]\n  ]\n};\n\n@NgModule({\n  providers: [FIREBASE_APP_PROVIDER]\n})\nexport class AngularFireModule {\n  static initializeApp(options: FirebaseOptions, nameOrConfig?: string | FirebaseAppConfig) {\n    return {\n      ngModule: AngularFireModule,\n      providers: [\n        { provide: FIREBASE_OPTIONS, useValue: options },\n        { provide: FIREBASE_APP_NAME, useValue: nameOrConfig }\n      ]\n    };\n  }\n\n  // tslint:disable-next-line:ban-types\n  constructor(@Inject(PLATFORM_ID) platformId: Object) {\n    firebase.registerVersion('angularfire', VERSION.full, platformId.toString());\n    firebase.registerVersion('angular', NG_VERSION.full);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}