{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { defined } from '../util';\nvar GRADIENT = \"Gradient\";\n\nvar paintable = function paintable(TBase) {\n  return /*#__PURE__*/function (_TBase) {\n    _inherits(_class, _TBase);\n\n    var _super = _createSuper(_class);\n\n    function _class() {\n      _classCallCheck(this, _class);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(_class, [{\n      key: \"fill\",\n      value: function fill(color, opacity) {\n        var options = this.options;\n\n        if (defined(color)) {\n          if (color && color.nodeType !== GRADIENT) {\n            var newFill = {\n              color: color\n            };\n\n            if (defined(opacity)) {\n              newFill.opacity = opacity;\n            }\n\n            options.set(\"fill\", newFill);\n          } else {\n            options.set(\"fill\", color);\n          }\n\n          return this;\n        }\n\n        return options.get(\"fill\");\n      }\n    }, {\n      key: \"stroke\",\n      value: function stroke(color, width, opacity) {\n        if (defined(color)) {\n          this.options.set(\"stroke.color\", color);\n\n          if (defined(width)) {\n            this.options.set(\"stroke.width\", width);\n          }\n\n          if (defined(opacity)) {\n            this.options.set(\"stroke.opacity\", opacity);\n          }\n\n          return this;\n        }\n\n        return this.options.get(\"stroke\");\n      }\n    }]);\n\n    return _class;\n  }(TBase);\n};\n\nexport default paintable;","map":{"version":3,"sources":["/home/datquocngo/Project/Hung/gts-fe/node_modules/@progress/kendo-drawing/dist/es2015/mixins/paintable.js"],"names":["defined","GRADIENT","paintable","TBase","color","opacity","options","nodeType","newFill","set","get","width"],"mappings":";;;;AAAA,SAASA,OAAT,QAAwB,SAAxB;AAEA,IAAMC,QAAQ,GAAG,UAAjB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,2BAEVC,KAFU,EAEHC,OAFG,EAEM;AACjB,YAAMC,OAAO,GAAG,KAAKA,OAArB;;AAEA,YAAIN,OAAO,CAACI,KAAD,CAAX,EAAoB;AAChB,cAAIA,KAAK,IAAIA,KAAK,CAACG,QAAN,KAAmBN,QAAhC,EAA0C;AACtC,gBAAMO,OAAO,GAAG;AACZJ,cAAAA,KAAK,EAAEA;AADK,aAAhB;;AAGA,gBAAIJ,OAAO,CAACK,OAAD,CAAX,EAAsB;AAClBG,cAAAA,OAAO,CAACH,OAAR,GAAkBA,OAAlB;AACH;;AACDC,YAAAA,OAAO,CAACG,GAAR,CAAY,MAAZ,EAAoBD,OAApB;AACH,WARD,MAQO;AACHF,YAAAA,OAAO,CAACG,GAAR,CAAY,MAAZ,EAAoBL,KAApB;AACH;;AAED,iBAAO,IAAP;AACH;;AAED,eAAOE,OAAO,CAACI,GAAR,CAAY,MAAZ,CAAP;AACH;AAtBc;AAAA;AAAA,6BAwBRN,KAxBQ,EAwBDO,KAxBC,EAwBMN,OAxBN,EAwBe;AAC1B,YAAIL,OAAO,CAACI,KAAD,CAAX,EAAoB;AAChB,eAAKE,OAAL,CAAaG,GAAb,CAAiB,cAAjB,EAAiCL,KAAjC;;AAEA,cAAIJ,OAAO,CAACW,KAAD,CAAX,EAAoB;AAChB,iBAAKL,OAAL,CAAaG,GAAb,CAAiB,cAAjB,EAAiCE,KAAjC;AACH;;AAED,cAAIX,OAAO,CAACK,OAAD,CAAX,EAAsB;AAClB,iBAAKC,OAAL,CAAaG,GAAb,CAAiB,gBAAjB,EAAmCJ,OAAnC;AACH;;AAED,iBAAO,IAAP;AACH;;AAED,eAAO,KAAKC,OAAL,CAAaI,GAAb,CAAiB,QAAjB,CAAP;AACH;AAxCc;;AAAA;AAAA,IACLP,KADK;AAAA,CAAvB;;AA4CA,eAAeD,SAAf","sourcesContent":["import { defined } from '../util';\n\nconst GRADIENT = \"Gradient\";\n\nconst paintable = TBase => (\n    class extends TBase {\n        fill(color, opacity) {\n            const options = this.options;\n\n            if (defined(color)) {\n                if (color && color.nodeType !== GRADIENT) {\n                    const newFill = {\n                        color: color\n                    };\n                    if (defined(opacity)) {\n                        newFill.opacity = opacity;\n                    }\n                    options.set(\"fill\", newFill);\n                } else {\n                    options.set(\"fill\", color);\n                }\n\n                return this;\n            }\n\n            return options.get(\"fill\");\n        }\n\n        stroke(color, width, opacity) {\n            if (defined(color)) {\n                this.options.set(\"stroke.color\", color);\n\n                if (defined(width)) {\n                    this.options.set(\"stroke.width\", width);\n                }\n\n                if (defined(opacity)) {\n                    this.options.set(\"stroke.opacity\", opacity);\n                }\n\n                return this;\n            }\n\n            return this.options.get(\"stroke\");\n        }\n}\n);\n\nexport default paintable;\n"]},"metadata":{},"sourceType":"module"}