{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport Element from './element';\nimport Point from '../geometry/point';\nimport Rect from '../geometry/rect';\nimport toMatrix from '../geometry/to-matrix';\nimport paintable from '../mixins/paintable';\nimport withPoints from '../mixins/with-points';\nimport { defined, measureText } from '../util';\nvar DEFAULT_FONT = \"12px sans-serif\";\nvar DEFAULT_FILL = \"#000\";\n\nvar Text = /*#__PURE__*/function (_paintable) {\n  _inherits(Text, _paintable);\n\n  var _super = _createSuper(Text);\n\n  _createClass(Text, [{\n    key: \"nodeType\",\n    get: function get() {\n      return \"Text\";\n    }\n  }]);\n\n  function Text(content) {\n    var _this;\n\n    var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Point();\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, Text);\n\n    _this = _super.call(this, options);\n\n    _this.content(content);\n\n    _this.position(position);\n\n    if (!_this.options.font) {\n      _this.options.font = DEFAULT_FONT;\n    }\n\n    if (!defined(_this.options.fill)) {\n      _this.fill(DEFAULT_FILL);\n    }\n\n    return _this;\n  }\n\n  _createClass(Text, [{\n    key: \"content\",\n    value: function content(value) {\n      if (defined(value)) {\n        this.options.set(\"content\", value);\n        return this;\n      }\n\n      return this.options.get(\"content\");\n    }\n  }, {\n    key: \"measure\",\n    value: function measure() {\n      var metrics = measureText(this.content(), {\n        font: this.options.get(\"font\")\n      });\n      return metrics;\n    }\n  }, {\n    key: \"rect\",\n    value: function rect() {\n      var size = this.measure();\n      var pos = this.position().clone();\n      return new Rect(pos, [size.width, size.height]);\n    }\n  }, {\n    key: \"bbox\",\n    value: function bbox(transformation) {\n      var combinedMatrix = toMatrix(this.currentTransform(transformation));\n      return this.rect().bbox(combinedMatrix);\n    }\n  }, {\n    key: \"rawBBox\",\n    value: function rawBBox() {\n      return this.rect().bbox();\n    }\n  }, {\n    key: \"_containsPoint\",\n    value: function _containsPoint(point) {\n      return this.rect().containsPoint(point);\n    }\n  }]);\n\n  return Text;\n}(paintable(withPoints(Element, [\"position\"])));\n\nexport default Text;","map":{"version":3,"sources":["/home/datquocngo/Project/UET/gts-fe/node_modules/@progress/kendo-drawing/dist/es2015/shapes/text.js"],"names":["Element","Point","Rect","toMatrix","paintable","withPoints","defined","measureText","DEFAULT_FONT","DEFAULT_FILL","Text","content","position","options","font","fill","value","set","get","metrics","size","measure","pos","clone","width","height","transformation","combinedMatrix","currentTransform","rect","bbox","point","containsPoint"],"mappings":";;;;AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,SAArC;AAGA,IAAMC,YAAY,GAAG,iBAArB;AACA,IAAMC,YAAY,GAAG,MAArB;;IAEMC,I;;;;;;;wBACa;AACX,aAAO,MAAP;AACH;;;AAED,gBAAYC,OAAZ,EAA2D;AAAA;;AAAA,QAAtCC,QAAsC,uEAA3B,IAAIX,KAAJ,EAA2B;AAAA,QAAdY,OAAc,uEAAJ,EAAI;;AAAA;;AACvD,8BAAMA,OAAN;;AAEA,UAAKF,OAAL,CAAaA,OAAb;;AACA,UAAKC,QAAL,CAAcA,QAAd;;AAEA,QAAI,CAAC,MAAKC,OAAL,CAAaC,IAAlB,EAAwB;AACpB,YAAKD,OAAL,CAAaC,IAAb,GAAoBN,YAApB;AACH;;AAED,QAAI,CAACF,OAAO,CAAC,MAAKO,OAAL,CAAaE,IAAd,CAAZ,EAAiC;AAC7B,YAAKA,IAAL,CAAUN,YAAV;AACH;;AAZsD;AAa1D;;;;4BAEOO,K,EAAO;AACX,UAAIV,OAAO,CAACU,KAAD,CAAX,EAAoB;AAChB,aAAKH,OAAL,CAAaI,GAAb,CAAiB,SAAjB,EAA4BD,KAA5B;AACA,eAAO,IAAP;AACH;;AAED,aAAO,KAAKH,OAAL,CAAaK,GAAb,CAAiB,SAAjB,CAAP;AACH;;;8BAES;AACN,UAAMC,OAAO,GAAGZ,WAAW,CAAC,KAAKI,OAAL,EAAD,EAAiB;AACxCG,QAAAA,IAAI,EAAE,KAAKD,OAAL,CAAaK,GAAb,CAAiB,MAAjB;AADkC,OAAjB,CAA3B;AAIA,aAAOC,OAAP;AACH;;;2BAEM;AACH,UAAMC,IAAI,GAAG,KAAKC,OAAL,EAAb;AACA,UAAMC,GAAG,GAAG,KAAKV,QAAL,GAAgBW,KAAhB,EAAZ;AACA,aAAO,IAAIrB,IAAJ,CAASoB,GAAT,EAAc,CAAEF,IAAI,CAACI,KAAP,EAAcJ,IAAI,CAACK,MAAnB,CAAd,CAAP;AACH;;;yBAEIC,c,EAAgB;AACjB,UAAMC,cAAc,GAAGxB,QAAQ,CAAC,KAAKyB,gBAAL,CAAsBF,cAAtB,CAAD,CAA/B;AACA,aAAO,KAAKG,IAAL,GAAYC,IAAZ,CAAiBH,cAAjB,CAAP;AACH;;;8BAES;AACN,aAAO,KAAKE,IAAL,GAAYC,IAAZ,EAAP;AACH;;;mCAEcC,K,EAAO;AAClB,aAAO,KAAKF,IAAL,GAAYG,aAAZ,CAA0BD,KAA1B,CAAP;AACH;;;;EAtDc3B,SAAS,CAACC,UAAU,CAACL,OAAD,EAAU,CAAE,UAAF,CAAV,CAAX,C;;AAyD5B,eAAeU,IAAf","sourcesContent":["import Element from './element';\nimport Point from '../geometry/point';\nimport Rect from '../geometry/rect';\nimport toMatrix from '../geometry/to-matrix';\nimport paintable from '../mixins/paintable';\nimport withPoints from '../mixins/with-points';\nimport { defined, measureText } from '../util';\n\n\nconst DEFAULT_FONT = \"12px sans-serif\";\nconst DEFAULT_FILL = \"#000\";\n\nclass Text extends paintable(withPoints(Element, [ \"position\" ])) {\n    get nodeType() {\n        return \"Text\";\n    }\n\n    constructor(content, position = new Point(), options = {}) {\n        super(options);\n\n        this.content(content);\n        this.position(position);\n\n        if (!this.options.font) {\n            this.options.font = DEFAULT_FONT;\n        }\n\n        if (!defined(this.options.fill)) {\n            this.fill(DEFAULT_FILL);\n        }\n    }\n\n    content(value) {\n        if (defined(value)) {\n            this.options.set(\"content\", value);\n            return this;\n        }\n\n        return this.options.get(\"content\");\n    }\n\n    measure() {\n        const metrics = measureText(this.content(), {\n            font: this.options.get(\"font\")\n        });\n\n        return metrics;\n    }\n\n    rect() {\n        const size = this.measure();\n        const pos = this.position().clone();\n        return new Rect(pos, [ size.width, size.height ]);\n    }\n\n    bbox(transformation) {\n        const combinedMatrix = toMatrix(this.currentTransform(transformation));\n        return this.rect().bbox(combinedMatrix);\n    }\n\n    rawBBox() {\n        return this.rect().bbox();\n    }\n\n    _containsPoint(point) {\n        return this.rect().containsPoint(point);\n    }\n}\n\nexport default Text;\n"]},"metadata":{},"sourceType":"module"}