{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport OptionsStore from '../core/options-store';\nimport Rect from '../geometry/rect';\nimport Matrix from '../geometry/matrix';\nimport createTransform from '../geometry/transform';\nimport toMatrix from '../geometry/to-matrix';\nimport HasObservers from '../core/has-observers';\nimport { defined, definitionId, isTransparent, valueOrDefault } from '../util';\n\nvar Element = /*#__PURE__*/function (_HasObservers) {\n  _inherits(Element, _HasObservers);\n\n  var _super = _createSuper(Element);\n\n  _createClass(Element, [{\n    key: \"nodeType\",\n    get: function get() {\n      return \"Rect\";\n    }\n  }]);\n\n  function Element(options) {\n    var _this;\n\n    _classCallCheck(this, Element);\n\n    _this = _super.call(this);\n\n    _this._initOptions(options);\n\n    return _this;\n  }\n\n  _createClass(Element, [{\n    key: \"_initOptions\",\n    value: function _initOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var clip = options.clip,\n          transform = options.transform;\n\n      if (transform) {\n        options.transform = createTransform(transform);\n      }\n\n      if (clip && !clip.id) {\n        clip.id = definitionId();\n      }\n\n      this.options = new OptionsStore(options);\n      this.options.addObserver(this);\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(value) {\n      if (defined(value)) {\n        this.options.set(\"transform\", createTransform(value));\n      } else {\n        return this.options.get(\"transform\");\n      }\n    }\n  }, {\n    key: \"parentTransform\",\n    value: function parentTransform() {\n      var element = this;\n      var parentMatrix;\n\n      while (element.parent) {\n        element = element.parent;\n        var transformation = element.transform();\n\n        if (transformation) {\n          parentMatrix = transformation.matrix().multiplyCopy(parentMatrix || Matrix.unit());\n        }\n      }\n\n      if (parentMatrix) {\n        return createTransform(parentMatrix);\n      }\n    }\n  }, {\n    key: \"currentTransform\",\n    value: function currentTransform() {\n      var parentTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.parentTransform();\n      var elementTransform = this.transform();\n      var elementMatrix = toMatrix(elementTransform);\n      var parentMatrix = toMatrix(parentTransform);\n      var combinedMatrix;\n\n      if (elementMatrix && parentMatrix) {\n        combinedMatrix = parentMatrix.multiplyCopy(elementMatrix);\n      } else {\n        combinedMatrix = elementMatrix || parentMatrix;\n      }\n\n      if (combinedMatrix) {\n        return createTransform(combinedMatrix);\n      }\n    }\n  }, {\n    key: \"visible\",\n    value: function visible(value) {\n      if (defined(value)) {\n        this.options.set(\"visible\", value);\n        return this;\n      }\n\n      return this.options.get(\"visible\") !== false;\n    }\n  }, {\n    key: \"clip\",\n    value: function clip(value) {\n      var options = this.options;\n\n      if (defined(value)) {\n        if (value && !value.id) {\n          value.id = definitionId();\n        }\n\n        options.set(\"clip\", value);\n        return this;\n      }\n\n      return options.get(\"clip\");\n    }\n  }, {\n    key: \"opacity\",\n    value: function opacity(value) {\n      if (defined(value)) {\n        this.options.set(\"opacity\", value);\n        return this;\n      }\n\n      return valueOrDefault(this.options.get(\"opacity\"), 1);\n    }\n  }, {\n    key: \"clippedBBox\",\n    value: function clippedBBox(transformation) {\n      var bbox = this._clippedBBox(transformation);\n\n      if (bbox) {\n        var clip = this.clip();\n        return clip ? Rect.intersect(bbox, clip.bbox(transformation)) : bbox;\n      }\n    }\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(point, parentTransform) {\n      if (this.visible()) {\n        var transform = this.currentTransform(parentTransform);\n        var transformedPoint = point;\n\n        if (transform) {\n          transformedPoint = point.transformCopy(transform.matrix().invert());\n        }\n\n        return this._hasFill() && this._containsPoint(transformedPoint) || this._isOnPath && this._hasStroke() && this._isOnPath(transformedPoint);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_hasFill\",\n    value: function _hasFill() {\n      var fill = this.options.fill;\n      return fill && !isTransparent(fill.color);\n    }\n  }, {\n    key: \"_hasStroke\",\n    value: function _hasStroke() {\n      var stroke = this.options.stroke;\n      return stroke && stroke.width > 0 && !isTransparent(stroke.color);\n    }\n  }, {\n    key: \"_clippedBBox\",\n    value: function _clippedBBox(transformation) {\n      return this.bbox(transformation);\n    }\n  }]);\n\n  return Element;\n}(HasObservers);\n\nexport default Element;","map":{"version":3,"sources":["/home/datquocngo/Project/Hung/gts-fe/node_modules/@progress/kendo-drawing/dist/es2015/shapes/element.js"],"names":["OptionsStore","Rect","Matrix","createTransform","toMatrix","HasObservers","defined","definitionId","isTransparent","valueOrDefault","Element","options","_initOptions","clip","transform","id","addObserver","value","set","get","element","parentMatrix","parent","transformation","matrix","multiplyCopy","unit","parentTransform","elementTransform","elementMatrix","combinedMatrix","bbox","_clippedBBox","intersect","point","visible","currentTransform","transformedPoint","transformCopy","invert","_hasFill","_containsPoint","_isOnPath","_hasStroke","fill","color","stroke","width"],"mappings":"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","sourcesContent":["import OptionsStore from '../core/options-store';\nimport Rect from '../geometry/rect';\nimport Matrix from '../geometry/matrix';\nimport createTransform from '../geometry/transform';\nimport toMatrix from '../geometry/to-matrix';\nimport HasObservers from '../core/has-observers';\nimport { defined, definitionId, isTransparent, valueOrDefault } from '../util';\n\nclass Element extends HasObservers {\n    get nodeType() {\n        return \"Rect\";\n    }\n\n    constructor(options) {\n        super();\n\n        this._initOptions(options);\n    }\n\n    _initOptions(options = {}) {\n        const { clip, transform } = options;\n\n        if (transform) {\n            options.transform = createTransform(transform);\n        }\n\n        if (clip && !clip.id) {\n            clip.id = definitionId();\n        }\n\n        this.options = new OptionsStore(options);\n        this.options.addObserver(this);\n    }\n\n    transform(value) {\n        if (defined(value)) {\n            this.options.set(\"transform\", createTransform(value));\n        } else {\n            return this.options.get(\"transform\");\n        }\n    }\n\n    parentTransform() {\n        let element = this;\n        let parentMatrix;\n\n        while (element.parent) {\n            element = element.parent;\n            let transformation = element.transform();\n            if (transformation) {\n                parentMatrix = transformation.matrix().multiplyCopy(parentMatrix || Matrix.unit());\n            }\n        }\n\n        if (parentMatrix) {\n            return createTransform(parentMatrix);\n        }\n    }\n\n    currentTransform(parentTransform = this.parentTransform()) {\n        const elementTransform = this.transform();\n        const elementMatrix = toMatrix(elementTransform);\n\n        let parentMatrix = toMatrix(parentTransform);\n        let combinedMatrix;\n\n        if (elementMatrix && parentMatrix) {\n            combinedMatrix = parentMatrix.multiplyCopy(elementMatrix);\n        } else {\n            combinedMatrix = elementMatrix || parentMatrix;\n        }\n\n        if (combinedMatrix) {\n            return createTransform(combinedMatrix);\n        }\n    }\n\n    visible(value) {\n        if (defined(value)) {\n            this.options.set(\"visible\", value);\n            return this;\n        }\n\n        return this.options.get(\"visible\") !== false;\n    }\n\n    clip(value) {\n        const options = this.options;\n        if (defined(value)) {\n            if (value && !value.id) {\n                value.id = definitionId();\n            }\n            options.set(\"clip\", value);\n            return this;\n        }\n\n        return options.get(\"clip\");\n    }\n\n    opacity(value) {\n        if (defined(value)) {\n            this.options.set(\"opacity\", value);\n            return this;\n        }\n\n        return valueOrDefault(this.options.get(\"opacity\"), 1);\n    }\n\n    clippedBBox(transformation) {\n        const bbox = this._clippedBBox(transformation);\n        if (bbox) {\n            const clip = this.clip();\n            return clip ? Rect.intersect(bbox, clip.bbox(transformation)) : bbox;\n        }\n    }\n\n    containsPoint(point, parentTransform) {\n        if (this.visible()) {\n            const transform = this.currentTransform(parentTransform);\n            let transformedPoint = point;\n            if (transform) {\n                transformedPoint = point.transformCopy(transform.matrix().invert());\n            }\n            return (this._hasFill() && this._containsPoint(transformedPoint)) || (this._isOnPath && this._hasStroke() && this._isOnPath(transformedPoint));\n        }\n        return false;\n    }\n\n    _hasFill() {\n        const fill = this.options.fill;\n        return fill && !isTransparent(fill.color);\n    }\n\n    _hasStroke() {\n        const stroke = this.options.stroke;\n        return stroke && stroke.width > 0 && !isTransparent(stroke.color);\n    }\n\n    _clippedBBox(transformation) {\n        return this.bbox(transformation);\n    }\n}\n\nexport default Element;\n"]},"metadata":{},"sourceType":"module"}