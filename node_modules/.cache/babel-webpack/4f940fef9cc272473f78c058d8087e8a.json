{"ast":null,"code":"/**\n * Within Viewport\n *\n * @description Determines whether an element is completely within the browser viewport\n * @author      Craig Patik, http://patik.com/\n * @version     2.1.2\n * @date        2019-08-16\n */\n(function (root, name, factory) {\n  // AMD\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } // Node and CommonJS-like environments\n  else if (typeof module !== 'undefined' && typeof exports === 'object') {\n      module.exports = factory();\n    } // Browser global\n    else {\n        root[name] = factory();\n      }\n})(this, 'withinviewport', function () {\n  var canUseWindowDimensions = typeof window !== 'undefined' && window.innerHeight !== undefined; // IE 8 and lower fail this\n\n  /**\n   * Determines whether an element is within the viewport\n   * @param  {Object}  elem       DOM Element (required)\n   * @param  {Object}  options    Optional settings\n   * @return {Boolean}            Whether the element was completely within the viewport\n   */\n\n  var withinviewport = function withinviewport(elem, options) {\n    var result = false;\n    var metadata = {};\n    var config = {};\n    var settings;\n    var isWithin;\n    var isContainerTheWindow;\n    var elemBoundingRect;\n    var containerBoundingRect;\n    var containerScrollTop;\n    var containerScrollLeft;\n    var scrollBarWidths = [0, 0];\n    var sideNamesPattern;\n    var sides;\n    var side;\n    var i; // If invoked by the jQuery plugin, get the actual DOM element\n\n    if (typeof jQuery !== 'undefined' && elem instanceof jQuery) {\n      elem = elem.get(0);\n    }\n\n    if (typeof elem !== 'object' || elem.nodeType !== 1) {\n      throw new Error('First argument must be an element');\n    } // Look for inline settings on the element\n\n\n    if (elem.getAttribute('data-withinviewport-settings') && window.JSON) {\n      metadata = JSON.parse(elem.getAttribute('data-withinviewport-settings'));\n    } // Settings argument may be a simple string (`top`, `right`, etc)\n\n\n    if (typeof options === 'string') {\n      settings = {\n        sides: options\n      };\n    } else {\n      settings = options || {};\n    } // Build configuration from defaults and user-provided settings and metadata\n\n\n    config.container = settings.container || metadata.container || withinviewport.defaults.container || window;\n    config.sides = settings.sides || metadata.sides || withinviewport.defaults.sides || 'all';\n    config.top = settings.top || metadata.top || withinviewport.defaults.top || 0;\n    config.right = settings.right || metadata.right || withinviewport.defaults.right || 0;\n    config.bottom = settings.bottom || metadata.bottom || withinviewport.defaults.bottom || 0;\n    config.left = settings.left || metadata.left || withinviewport.defaults.left || 0; // Extract the DOM node from a jQuery collection\n\n    if (typeof jQuery !== 'undefined' && config.container instanceof jQuery) {\n      config.container = config.container.get(0);\n    } // Use the window as the container if the user specified the body or a non-element\n\n\n    if (config.container === document.body || config.container.nodeType !== 1) {\n      config.container = window;\n    }\n\n    isContainerTheWindow = config.container === window; // Element testing methods\n\n    isWithin = {\n      // Element is below the top edge of the viewport\n      top: function _isWithin_top() {\n        if (isContainerTheWindow) {\n          return elemBoundingRect.top >= config.top;\n        } else {\n          return elemBoundingRect.top >= containerScrollTop - (containerScrollTop - containerBoundingRect.top) + config.top;\n        }\n      },\n      // Element is to the left of the right edge of the viewport\n      right: function _isWithin_right() {\n        // Note that `elemBoundingRect.right` is the distance from the *left* of the viewport to the element's far right edge\n        if (isContainerTheWindow) {\n          return elemBoundingRect.right <= containerBoundingRect.right + containerScrollLeft - config.right;\n        } else {\n          return elemBoundingRect.right <= containerBoundingRect.right - scrollBarWidths[0] - config.right;\n        }\n      },\n      // Element is above the bottom edge of the viewport\n      bottom: function _isWithin_bottom() {\n        var containerHeight = 0;\n\n        if (isContainerTheWindow) {\n          if (canUseWindowDimensions) {\n            containerHeight = config.container.innerHeight;\n          } else if (document && document.documentElement) {\n            containerHeight = document.documentElement.clientHeight;\n          }\n        } else {\n          containerHeight = containerBoundingRect.bottom;\n        } // Note that `elemBoundingRect.bottom` is the distance from the *top* of the viewport to the element's bottom edge\n\n\n        return elemBoundingRect.bottom <= containerHeight - scrollBarWidths[1] - config.bottom;\n      },\n      // Element is to the right of the left edge of the viewport\n      left: function _isWithin_left() {\n        if (isContainerTheWindow) {\n          return elemBoundingRect.left >= config.left;\n        } else {\n          return elemBoundingRect.left >= containerScrollLeft - (containerScrollLeft - containerBoundingRect.left) + config.left;\n        }\n      },\n      // Element is within all four boundaries\n      all: function _isWithin_all() {\n        // Test each boundary in order of efficiency and likeliness to be false. This way we can avoid running all four functions on most elements.\n        //     1. Top: Quickest to calculate + most likely to be false\n        //     2. Bottom: Note quite as quick to calculate, but also very likely to be false\n        //     3-4. Left and right are both equally unlikely to be false since most sites only scroll vertically, but left is faster to calculate\n        return isWithin.top() && isWithin.bottom() && isWithin.left() && isWithin.right();\n      }\n    }; // Get the element's bounding rectangle with respect to the viewport\n\n    elemBoundingRect = elem.getBoundingClientRect(); // Get viewport dimensions and offsets\n\n    if (isContainerTheWindow) {\n      containerBoundingRect = document.documentElement.getBoundingClientRect();\n      containerScrollTop = document.body.scrollTop;\n      containerScrollLeft = window.scrollX || document.body.scrollLeft;\n    } else {\n      containerBoundingRect = config.container.getBoundingClientRect();\n      containerScrollTop = config.container.scrollTop;\n      containerScrollLeft = config.container.scrollLeft;\n    } // Don't count the space consumed by scrollbars\n\n\n    if (containerScrollLeft) {\n      scrollBarWidths[0] = 18;\n    }\n\n    if (containerScrollTop) {\n      scrollBarWidths[1] = 16;\n    } // Test the element against each side of the viewport that was requested\n\n\n    sideNamesPattern = /^top$|^right$|^bottom$|^left$|^all$/; // Loop through all of the sides\n\n    sides = config.sides.split(' ');\n    i = sides.length;\n\n    while (i--) {\n      side = sides[i].toLowerCase();\n\n      if (sideNamesPattern.test(side)) {\n        if (isWithin[side]()) {\n          result = true;\n        } else {\n          result = false; // Quit as soon as the first failure is found\n\n          break;\n        }\n      }\n    }\n\n    return result;\n  }; // Default settings\n\n\n  withinviewport.prototype.defaults = {\n    container: typeof document !== 'undefined' ? document.body : {},\n    sides: 'all',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  };\n  withinviewport.defaults = withinviewport.prototype.defaults;\n  /**\n   * Optional enhancements and shortcuts\n   *\n   * @description Uncomment or comment these pieces as they apply to your project and coding preferences\n   */\n  // Shortcut methods for each side of the viewport\n  // Example: `withinviewport.top(elem)` is the same as `withinviewport(elem, 'top')`\n\n  withinviewport.prototype.top = function _withinviewport_top(element) {\n    return withinviewport(element, 'top');\n  };\n\n  withinviewport.prototype.right = function _withinviewport_right(element) {\n    return withinviewport(element, 'right');\n  };\n\n  withinviewport.prototype.bottom = function _withinviewport_bottom(element) {\n    return withinviewport(element, 'bottom');\n  };\n\n  withinviewport.prototype.left = function _withinviewport_left(element) {\n    return withinviewport(element, 'left');\n  };\n\n  return withinviewport;\n});","map":{"version":3,"sources":["/home/datquocngo/Project/UET/gts-fe/node_modules/withinviewport/withinviewport.js"],"names":["root","name","factory","define","amd","module","exports","canUseWindowDimensions","window","innerHeight","undefined","withinviewport","elem","options","result","metadata","config","settings","isWithin","isContainerTheWindow","elemBoundingRect","containerBoundingRect","containerScrollTop","containerScrollLeft","scrollBarWidths","sideNamesPattern","sides","side","i","jQuery","get","nodeType","Error","getAttribute","JSON","parse","container","defaults","top","right","bottom","left","document","body","_isWithin_top","_isWithin_right","_isWithin_bottom","containerHeight","documentElement","clientHeight","_isWithin_left","all","_isWithin_all","getBoundingClientRect","scrollTop","scrollX","scrollLeft","split","length","toLowerCase","test","prototype","_withinviewport_top","element","_withinviewport_right","_withinviewport_bottom","_withinviewport_left"],"mappings":"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","sourcesContent":["/**\n * Within Viewport\n *\n * @description Determines whether an element is completely within the browser viewport\n * @author      Craig Patik, http://patik.com/\n * @version     2.1.2\n * @date        2019-08-16\n */\n(function (root, name, factory) {\n    // AMD\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    }\n    // Node and CommonJS-like environments\n    else if (typeof module !== 'undefined' && typeof exports === 'object') {\n        module.exports = factory();\n    }\n    // Browser global\n    else {\n        root[name] = factory();\n    }\n}(this, 'withinviewport', function () {\n    var canUseWindowDimensions = typeof window !== 'undefined' && window.innerHeight !== undefined; // IE 8 and lower fail this\n\n    /**\n     * Determines whether an element is within the viewport\n     * @param  {Object}  elem       DOM Element (required)\n     * @param  {Object}  options    Optional settings\n     * @return {Boolean}            Whether the element was completely within the viewport\n     */\n    var withinviewport = function withinviewport(elem, options) {\n        var result = false;\n        var metadata = {};\n        var config = {};\n        var settings;\n        var isWithin;\n        var isContainerTheWindow;\n        var elemBoundingRect;\n        var containerBoundingRect;\n        var containerScrollTop;\n        var containerScrollLeft;\n        var scrollBarWidths = [0, 0];\n        var sideNamesPattern;\n        var sides;\n        var side;\n        var i;\n\n        // If invoked by the jQuery plugin, get the actual DOM element\n        if (typeof jQuery !== 'undefined' && elem instanceof jQuery) {\n            elem = elem.get(0);\n        }\n\n        if (typeof elem !== 'object' || elem.nodeType !== 1) {\n            throw new Error('First argument must be an element');\n        }\n\n        // Look for inline settings on the element\n        if (elem.getAttribute('data-withinviewport-settings') && window.JSON) {\n            metadata = JSON.parse(elem.getAttribute('data-withinviewport-settings'));\n        }\n\n        // Settings argument may be a simple string (`top`, `right`, etc)\n        if (typeof options === 'string') {\n            settings = {\n                sides: options\n            };\n        } else {\n            settings = options || {};\n        }\n\n        // Build configuration from defaults and user-provided settings and metadata\n        config.container = settings.container || metadata.container || withinviewport.defaults.container || window;\n        config.sides = settings.sides || metadata.sides || withinviewport.defaults.sides || 'all';\n        config.top = settings.top || metadata.top || withinviewport.defaults.top || 0;\n        config.right = settings.right || metadata.right || withinviewport.defaults.right || 0;\n        config.bottom = settings.bottom || metadata.bottom || withinviewport.defaults.bottom || 0;\n        config.left = settings.left || metadata.left || withinviewport.defaults.left || 0;\n\n        // Extract the DOM node from a jQuery collection\n        if (typeof jQuery !== 'undefined' && config.container instanceof jQuery) {\n            config.container = config.container.get(0);\n        }\n\n        // Use the window as the container if the user specified the body or a non-element\n        if (config.container === document.body || config.container.nodeType !== 1) {\n            config.container = window;\n        }\n\n        isContainerTheWindow = (config.container === window);\n\n        // Element testing methods\n        isWithin = {\n            // Element is below the top edge of the viewport\n            top: function _isWithin_top() {\n                if (isContainerTheWindow) {\n                    return (elemBoundingRect.top >= config.top);\n                } else {\n                    return (elemBoundingRect.top >= containerScrollTop - (containerScrollTop - containerBoundingRect.top) + config.top);\n                }\n            },\n\n            // Element is to the left of the right edge of the viewport\n            right: function _isWithin_right() {\n                // Note that `elemBoundingRect.right` is the distance from the *left* of the viewport to the element's far right edge\n\n                if (isContainerTheWindow) {\n                    return (elemBoundingRect.right <= (containerBoundingRect.right + containerScrollLeft) - config.right);\n                } else {\n                    return (elemBoundingRect.right <= containerBoundingRect.right - scrollBarWidths[0] - config.right);\n                }\n            },\n\n            // Element is above the bottom edge of the viewport\n            bottom: function _isWithin_bottom() {\n                var containerHeight = 0;\n\n                if (isContainerTheWindow) {\n                    if (canUseWindowDimensions) {\n                        containerHeight = config.container.innerHeight;\n                    } else if (document && document.documentElement) {\n                        containerHeight = document.documentElement.clientHeight;\n                    }\n                } else {\n                    containerHeight = containerBoundingRect.bottom;\n                }\n\n                // Note that `elemBoundingRect.bottom` is the distance from the *top* of the viewport to the element's bottom edge\n                return (elemBoundingRect.bottom <= containerHeight - scrollBarWidths[1] - config.bottom);\n            },\n\n            // Element is to the right of the left edge of the viewport\n            left: function _isWithin_left() {\n                if (isContainerTheWindow) {\n                    return (elemBoundingRect.left >= config.left);\n                } else {\n                    return (elemBoundingRect.left >= containerScrollLeft - (containerScrollLeft - containerBoundingRect.left) + config.left);\n                }\n            },\n\n            // Element is within all four boundaries\n            all: function _isWithin_all() {\n                // Test each boundary in order of efficiency and likeliness to be false. This way we can avoid running all four functions on most elements.\n                //     1. Top: Quickest to calculate + most likely to be false\n                //     2. Bottom: Note quite as quick to calculate, but also very likely to be false\n                //     3-4. Left and right are both equally unlikely to be false since most sites only scroll vertically, but left is faster to calculate\n                return (isWithin.top() && isWithin.bottom() && isWithin.left() && isWithin.right());\n            }\n        };\n\n        // Get the element's bounding rectangle with respect to the viewport\n        elemBoundingRect = elem.getBoundingClientRect();\n\n        // Get viewport dimensions and offsets\n        if (isContainerTheWindow) {\n            containerBoundingRect = document.documentElement.getBoundingClientRect();\n            containerScrollTop = document.body.scrollTop;\n            containerScrollLeft = window.scrollX || document.body.scrollLeft;\n        } else {\n            containerBoundingRect = config.container.getBoundingClientRect();\n            containerScrollTop = config.container.scrollTop;\n            containerScrollLeft = config.container.scrollLeft;\n        }\n\n        // Don't count the space consumed by scrollbars\n        if (containerScrollLeft) {\n            scrollBarWidths[0] = 18;\n        }\n\n        if (containerScrollTop) {\n            scrollBarWidths[1] = 16;\n        }\n\n        // Test the element against each side of the viewport that was requested\n        sideNamesPattern = /^top$|^right$|^bottom$|^left$|^all$/;\n\n        // Loop through all of the sides\n        sides = config.sides.split(' ');\n        i = sides.length;\n\n        while (i--) {\n            side = sides[i].toLowerCase();\n\n            if (sideNamesPattern.test(side)) {\n                if (isWithin[side]()) {\n                    result = true;\n                } else {\n                    result = false;\n\n                    // Quit as soon as the first failure is found\n                    break;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // Default settings\n    withinviewport.prototype.defaults = {\n        container: typeof document !== 'undefined' ? document.body : {},\n        sides: 'all',\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n    };\n\n    withinviewport.defaults = withinviewport.prototype.defaults;\n\n    /**\n     * Optional enhancements and shortcuts\n     *\n     * @description Uncomment or comment these pieces as they apply to your project and coding preferences\n     */\n\n    // Shortcut methods for each side of the viewport\n    // Example: `withinviewport.top(elem)` is the same as `withinviewport(elem, 'top')`\n    withinviewport.prototype.top = function _withinviewport_top(element) {\n        return withinviewport(element, 'top');\n    };\n\n    withinviewport.prototype.right = function _withinviewport_right(element) {\n        return withinviewport(element, 'right');\n    };\n\n    withinviewport.prototype.bottom = function _withinviewport_bottom(element) {\n        return withinviewport(element, 'bottom');\n    };\n\n    withinviewport.prototype.left = function _withinviewport_left(element) {\n        return withinviewport(element, 'left');\n    };\n\n    return withinviewport;\n}));\n"]},"metadata":{},"sourceType":"script"}