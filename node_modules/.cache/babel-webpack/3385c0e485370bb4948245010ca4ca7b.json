{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { __decorate, __param, __metadata } from 'tslib';\nimport { CdkTableExporter, ServiceLocatorService, DataExtractorService, CdkTableExporterModule } from 'cdk-table-exporter';\nimport * as ɵngcc0 from '@angular/core';\nexport * from 'cdk-table-exporter';\nimport { MatTable, MatTableModule } from '@angular/material/table';\nimport { Renderer2, Host, Self, Optional, Directive, NgModule } from '@angular/core';\n\nvar MatTableExporterDirective = /*#__PURE__*/function (_CdkTableExporter) {\n  _inherits(MatTableExporterDirective, _CdkTableExporter);\n\n  var _super = _createSuper(MatTableExporterDirective);\n\n  function MatTableExporterDirective(renderer, serviceLocator, dataExtractor, table) {\n    _classCallCheck(this, MatTableExporterDirective);\n\n    return _super.call(this, renderer, serviceLocator, dataExtractor, table);\n  }\n  /**\r\n   * Overriding ngAfterViewInit of TableExporter\r\n   */\n\n\n  _createClass(MatTableExporterDirective, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this = this;\n\n      this.exportStarted.subscribe(function (_) {\n        _this.enablePaginator(false);\n      });\n      this.exportCompleted.subscribe(function (_) {\n        _this.enablePaginator(true);\n      });\n    }\n    /**\r\n     * MatTable implementation of getPageCount\r\n     */\n\n  }, {\n    key: \"getPageCount\",\n    value: function getPageCount() {\n      return this.getPaginator().getNumberOfPages();\n    }\n    /**\r\n     * MatTable implementation of getPageSize\r\n     */\n\n  }, {\n    key: \"getPageSize\",\n    value: function getPageSize() {\n      var _a, _b;\n\n      return _b = (_a = this.getPaginator()) === null || _a === void 0 ? void 0 : _a.pageSize, _b !== null && _b !== void 0 ? _b : 0;\n    }\n    /**\r\n     * MatTable implementation of getCurrentPageIndex\r\n     */\n\n  }, {\n    key: \"getCurrentPageIndex\",\n    value: function getCurrentPageIndex() {\n      var _a, _b;\n\n      return _b = (_a = this.getPaginator()) === null || _a === void 0 ? void 0 : _a.pageIndex, _b !== null && _b !== void 0 ? _b : 0;\n    }\n    /**\r\n     * MatTable implementation of getTotalItemsCount\r\n     */\n\n  }, {\n    key: \"getTotalItemsCount\",\n    value: function getTotalItemsCount() {\n      var _a, _b, _c, _d, _e;\n\n      return _e = (_b = (_a = this.getPaginator()) === null || _a === void 0 ? void 0 : _a.length, _b !== null && _b !== void 0 ? _b : (_d = (_c = this.getDataSource()) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.length), _e !== null && _e !== void 0 ? _e : 0;\n    }\n    /**\r\n     * MatTable implementation of goToPage\r\n     */\n\n  }, {\n    key: \"goToPage\",\n    value: function goToPage(index) {\n      this.getPaginator().pageIndex = index;\n\n      this.getPaginator()._changePageSize(this.getPaginator().pageSize);\n    }\n    /**\r\n     * MatTable implementation of getPageChangeObservable\r\n     */\n\n  }, {\n    key: \"getPageChangeObservable\",\n    value: function getPageChangeObservable() {\n      return this.getPaginator().page;\n    }\n  }, {\n    key: \"getDataSource\",\n    value: function getDataSource() {\n      return this._cdkTable.dataSource;\n    }\n  }, {\n    key: \"getPaginator\",\n    value: function getPaginator() {\n      return this.getDataSource().paginator;\n    }\n  }, {\n    key: \"enablePaginator\",\n    value: function enablePaginator(value) {\n      if (this.getPaginator()) {\n        this.getPaginator().disabled = !value;\n\n        this.getPaginator()._changePageSize(this.getPaginator().pageSize);\n      }\n    }\n  }]);\n\n  return MatTableExporterDirective;\n}(CdkTableExporter);\n\nMatTableExporterDirective.ɵfac = function MatTableExporterDirective_Factory(t) {\n  return new (t || MatTableExporterDirective)(ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ServiceLocatorService), ɵngcc0.ɵɵdirectiveInject(DataExtractorService), ɵngcc0.ɵɵdirectiveInject(MatTable, 11));\n};\n\nMatTableExporterDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTableExporterDirective,\n  selectors: [[\"\", \"matTableExporter\", \"\"]],\n  exportAs: [\"matTableExporter\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nMatTableExporterDirective.ctorParameters = function () {\n  return [{\n    type: Renderer2\n  }, {\n    type: ServiceLocatorService\n  }, {\n    type: DataExtractorService\n  }, {\n    type: MatTable,\n    decorators: [{\n      type: Host\n    }, {\n      type: Self\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\nMatTableExporterDirective = __decorate([__param(3, Host()), __param(3, Self()), __param(3, Optional()), __metadata(\"design:paramtypes\", [Renderer2, ServiceLocatorService, DataExtractorService, MatTable])], MatTableExporterDirective);\n\nvar MatTableExporterModule = function MatTableExporterModule() {\n  _classCallCheck(this, MatTableExporterModule);\n};\n\nMatTableExporterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatTableExporterModule\n});\nMatTableExporterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatTableExporterModule_Factory(t) {\n    return new (t || MatTableExporterModule)();\n  },\n  imports: [[MatTableModule, CdkTableExporterModule]]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTableExporterDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[matTableExporter]',\n      exportAs: 'matTableExporter'\n    }]\n  }], function () {\n    return [{\n      type: Renderer2\n    }, {\n      type: ServiceLocatorService\n    }, {\n      type: DataExtractorService\n    }, {\n      type: MatTable,\n      decorators: [{\n        type: Host\n      }, {\n        type: Self\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTableExporterModule, {\n    declarations: function declarations() {\n      return [MatTableExporterDirective];\n    },\n    imports: function imports() {\n      return [MatTableModule, CdkTableExporterModule];\n    },\n    exports: function exports() {\n      return [MatTableExporterDirective];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTableExporterModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MatTableExporterDirective],\n      imports: [MatTableModule, CdkTableExporterModule],\n      exports: [MatTableExporterDirective]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of mat-table-exporter\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { MatTableExporterDirective, MatTableExporterModule };","map":{"version":3,"sources":["mat-table-exporter/lib/mat-table-exporter.directive.ts","mat-table-exporter/lib/mat-table-exporter.module.ts","mat-table-exporter/public-api.ts","mat-table-exporter/mat-table-exporter.ts"],"names":[],"mappings":";;;;;;;;;;;IAUa,yBAAb;AAAA;;AAAA;;AAaE,qCACE,QADF,EAEE,cAFF,EAGE,aAHF,EAI8B,KAJ9B,EAIkD;AAAA;;AAAA,6BAE1C,QAF0C,EAEhC,cAFgC,EAEhB,aAFgB,EAED,KAFC;AAGjD;AACH;;;;;AArBA;AAAA;AAAA,sCAIiB;AAAA;;AACb,WAAK,aAAL,CAAmB,SAAnB,CAA6B,UAAA,CAAC,EAAA;AAC5B,QAAA,KAAI,CAAC,eAAL,CAAqB,KAArB;AACD,OAFD;AAGA,WAAK,eAAL,CAAqB,SAArB,CAA+B,UAAA,CAAC,EAAA;AAC9B,QAAA,KAAI,CAAC,eAAL,CAAqB,IAArB;AACD,OAFD;AAGD;AACH;;;;AAZA;AAAA;AAAA,mCAyBqB;AACjB,aAAO,KAAK,YAAL,GAAoB,gBAApB,EAAP;AACD;AACH;;;;AA5BA;AAAA;AAAA,kCAgCoB;AAAK,UAAA,EAAA,EAAA,EAAA;;AACrB,aAAA,EAAA,GAAA,CAAA,EAAA,GAAO,KAAK,YAAL,EAAP,MAA0B,IAA1B,IAA0B,EAAA,KAAA,KAAA,CAA1B,GAA0B,KAAA,CAA1B,GAA0B,EAAA,CAAE,QAA5B,EAAoC,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAxC;AACD;AACH;;;;AAnCA;AAAA;AAAA,0CAuC4B;AAAK,UAAA,EAAA,EAAA,EAAA;;AAC7B,aAAA,EAAA,GAAA,CAAA,EAAA,GAAO,KAAK,YAAL,EAAP,MAA0B,IAA1B,IAA0B,EAAA,KAAA,KAAA,CAA1B,GAA0B,KAAA,CAA1B,GAA0B,EAAA,CAAE,SAA5B,EAAqC,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAzC;AACD;AACH;;;;AA1CA;AAAA;AAAA,yCA8C2B;AAAK,UAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;;AAC5B,aAAA,EAAA,IAAA,EAAA,GAAA,CAAA,EAAA,GAAO,KAAK,YAAL,EAAP,MAA0B,IAA1B,IAA0B,EAAA,KAAA,KAAA,CAA1B,GAA0B,KAAA,CAA1B,GAA0B,EAAA,CAAE,MAA5B,EAAkC,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAI,KAAK,aAAL,EAAJ,MAAwB,IAAxB,IAAwB,EAAA,KAAA,KAAA,CAAxB,GAAwB,KAAA,CAAxB,GAAwB,EAAA,CAAE,IAA1B,MAA8B,IAA9B,IAA8B,EAAA,KAAA,KAAA,CAA9B,GAA8B,KAAA,CAA9B,GAA8B,EAAA,CAAE,MAAlE,CAAA,EAAwE,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAA5E;AACD;AACH;;;;AAjDA;AAAA;AAAA,6BAqDkB,KArDlB,EAqD+B;AAC3B,WAAK,YAAL,GAAoB,SAApB,GAAgC,KAAhC;;AACA,WAAK,YAAL,GAAoB,eAApB,CAAoC,KAAK,YAAL,GAAoB,QAAxD;AACD;AACH;;;;AAzDA;AAAA;AAAA,8CA6DgC;AAC5B,aAAO,KAAK,YAAL,GAAoB,IAA3B;AACD;AA/DH;AAAA;AAAA,oCAiEuB;AACnB,aAAO,KAAK,SAAL,CAAe,UAAtB;AACD;AAnEH;AAAA;AAAA,mCAqEsB;AAClB,aAAO,KAAK,aAAL,GAAqB,SAA5B;AACD;AAvEH;AAAA;AAAA,oCAyE0B,KAzE1B,EAyEwC;AACpC,UAAI,KAAK,YAAL,EAAJ,EAAyB;AACvB,aAAK,YAAL,GAAoB,QAApB,GAA+B,CAAC,KAAhC;;AACA,aAAK,YAAL,GAAoB,eAApB,CAAoC,KAAK,YAAL,GAAoB,QAAxD;AACD;AACF;AA9EH;;AAAA;AAAA,EAA+C,gBAA/C,C;;;;;;;;;;oBAgFC,0B;;;AACD,yBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAAmD;AAAA,IAAA,IAAA,EAnErC;AAmEqC,GAAnD,EAlEE;AAAA,IAAA,IAAA,EAAkB;AAAlB,GAkEF,EAjEE;AAAA,IAAA,IAAA,EAAiB;AAAjB,GAiEF,EAhEE;AAAA,IAAA,IAAA,EAAqC,QAArC;AAA6C,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAA1C;AAA0C,KAAA,EAAtC;AAAA,MAAA,IAAA,EAAI;AAAJ,KAAsC,EAA9B;AAAA,MAAA,IAAA,EAAI;AAAJ,KAA8B;AAA7C,GAgEF,CAAA;AAAA,CAAA;;AAjFa,yBAAyB,GAAA,UAAA,CAAlC,CAJH,OAAA,CAAA,CAAA,EAAS,IAqBD,EArBR,CAIG,EAHF,OAAA,CAAA,CAAA,EAAQ,IAoBO,EApBf,CAGE,EAiBiB,OAAA,CAAA,CAAA,EApBW,QAoBH,EAAR,CAjBjB,EAFM,UAAE,CAAA,mBAAA,EACV,CAeY,SAfZ,EAgBkB,qBAhBlB,EAiBiB,oBAjBjB,EAkBqC,QAlBrC,CADU,CAER,CAAkC,EAAzB,yBAAyB,CAAzB;;AAiFX,IC7EW,sBAAb;AAAA;AAAA,CD6EE;;AC7EW,sBAAsB,CAAA,IAAtB,GAAsB,MAAA,CARlC,gBAQkC,CARzB;AAAA,EAAA,IAAA,EACR;AADQ,CAQyB,CAAtB;AAP6B,sBAAC,CACzC,IADwC,GACjC,MAAE,CAAA,gBAAF,CACL;AAAA,EAAA,OAAc,EAAA,SACd,8BADc,CACQ,CADR,EAEf;AAAA,WACD,KAAA,CAAO,IAAG,sBAAV,GADC;AACmC,GAHlC;AAGkC,EAAA,OAEzB,EAAA,CAAA,CAAsB,cAAtB,E,sBAAA,CAAA;AALT,CADK,CADiC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQ1C,C;ACdA;;;;ACDA;;;;;AAIA,SAAA,yBAAA,EAAA,sBAAA","sourcesContent":["import { AfterViewInit, Directive, Host, Optional, Renderer2, Self } from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\r\nimport { CdkTableExporter, DataExtractorService, ServiceLocatorService } from 'cdk-table-exporter';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Directive({\r\n  selector: '[matTableExporter]',\r\n  exportAs: 'matTableExporter'\r\n})\r\nexport class MatTableExporterDirective extends CdkTableExporter implements AfterViewInit {\r\n  /**\r\n   * Overriding ngAfterViewInit of TableExporter\r\n   */\r\n  ngAfterViewInit(): void {\r\n    this.exportStarted.subscribe(_ => {\r\n      this.enablePaginator(false);\r\n    });\r\n    this.exportCompleted.subscribe(_ => {\r\n      this.enablePaginator(true);\r\n    });\r\n  }\r\n\r\n  constructor(\r\n    renderer: Renderer2,\r\n    serviceLocator: ServiceLocatorService,\r\n    dataExtractor: DataExtractorService,\r\n    @Host() @Self() @Optional() table: MatTable<any>\r\n  ) {\r\n    super(renderer, serviceLocator, dataExtractor, table);\r\n  }\r\n\r\n  /**\r\n   * MatTable implementation of getPageCount\r\n   */\r\n  public getPageCount(): number {\r\n    return this.getPaginator().getNumberOfPages();\r\n  }\r\n\r\n  /**\r\n   * MatTable implementation of getPageSize\r\n   */\r\n  public getPageSize(): number {\r\n    return this.getPaginator()?.pageSize ?? 0;\r\n  }\r\n\r\n  /**\r\n   * MatTable implementation of getCurrentPageIndex\r\n   */\r\n  public getCurrentPageIndex(): number {\r\n    return this.getPaginator()?.pageIndex ?? 0;\r\n  }\r\n\r\n  /**\r\n   * MatTable implementation of getTotalItemsCount\r\n   */\r\n  public getTotalItemsCount(): number {\r\n    return this.getPaginator()?.length ?? this.getDataSource()?.data?.length ?? 0;\r\n  }\r\n\r\n  /**\r\n   * MatTable implementation of goToPage\r\n   */\r\n  public goToPage(index: number): void {\r\n    this.getPaginator().pageIndex = index;\r\n    this.getPaginator()._changePageSize(this.getPaginator().pageSize);\r\n  }\r\n\r\n  /**\r\n   * MatTable implementation of getPageChangeObservable\r\n   */\r\n  public getPageChangeObservable(): Observable<any> {\r\n    return this.getPaginator().page;\r\n  }\r\n\r\n  private getDataSource(): MatTableDataSource<any> {\r\n    return this._cdkTable.dataSource as MatTableDataSource<any>;\r\n  }\r\n\r\n  private getPaginator(): MatPaginator {\r\n    return this.getDataSource().paginator;\r\n  }\r\n\r\n  private enablePaginator(value: boolean) {\r\n    if (this.getPaginator()) {\r\n      this.getPaginator().disabled = !value;\r\n      this.getPaginator()._changePageSize(this.getPaginator().pageSize);\r\n    }\r\n  }\r\n\r\n}\r\n","import { CdkTableExporterModule } from 'cdk-table-exporter';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatTableExporterDirective } from './mat-table-exporter.directive';\r\n\r\n\r\n@NgModule({\r\n  declarations: [MatTableExporterDirective],\r\n  imports: [\r\n    MatTableModule,\r\n    CdkTableExporterModule\r\n  ],\r\n  exports: [MatTableExporterDirective]\r\n})\r\nexport class MatTableExporterModule { }\r\n","\r\n/*\r\n * Public API Surface of mat-table-exporter\r\n */\r\n\r\nexport * from './lib/mat-table-exporter.module';\r\nexport { MatTableExporterDirective } from './lib/mat-table-exporter.directive';\r\nexport * from 'cdk-table-exporter';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}