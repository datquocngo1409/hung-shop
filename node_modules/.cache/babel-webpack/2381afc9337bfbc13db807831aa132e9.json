{"ast":null,"code":"import _inherits from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */\n\n/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */\n\n/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */\n\n/* eslint-disable no-param-reassign, no-var, block-scoped-var */\n\n/*****************************************************************************\\\n *\n * The code in this file, although written from scratch, is influenced by the\n * TrueType parser/encoder in PDFKit -- http://pdfkit.org/ (a CoffeeScript\n * library for producing PDF files).\n *\n * PDFKit is (c) Devon Govett 2014 and released under the MIT License.\n *\n\\*****************************************************************************/\nimport { BinaryStream, ucs2decode } from \"./utils\";\n\nfunction hasOwnProperty(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction sortedKeys(obj) {\n  return Object.keys(obj).sort(function (a, b) {\n    return a - b;\n  }).map(parseFloat);\n} ///\n\n\nvar Directory = /*#__PURE__*/function () {\n  function Directory(data) {\n    _classCallCheck(this, Directory);\n\n    this.raw = data;\n    this.scalerType = data.readLong();\n    this.tableCount = data.readShort();\n    this.searchRange = data.readShort();\n    this.entrySelector = data.readShort();\n    this.rangeShift = data.readShort();\n    var tables = this.tables = {};\n\n    for (var i = 0; i < this.tableCount; ++i) {\n      var entry = {\n        tag: data.readString(4),\n        checksum: data.readLong(),\n        offset: data.readLong(),\n        length: data.readLong()\n      };\n      tables[entry.tag] = entry;\n    }\n  }\n\n  _createClass(Directory, [{\n    key: \"readTable\",\n    value: function readTable(name, Ctor) {\n      var def = this.tables[name];\n\n      if (!def) {\n        throw new Error(\"Table \" + name + \" not found in directory\");\n      }\n\n      return this[name] = def.table = new Ctor(this, def);\n    }\n  }, {\n    key: \"render\",\n    value: function render(tables) {\n      var tableCount = Object.keys(tables).length;\n      var maxpow2 = Math.pow(2, Math.floor(Math.log(tableCount) / Math.LN2));\n      var searchRange = maxpow2 * 16;\n      var entrySelector = Math.floor(Math.log(maxpow2) / Math.LN2);\n      var rangeShift = tableCount * 16 - searchRange;\n      var out = BinaryStream();\n      out.writeLong(this.scalerType);\n      out.writeShort(tableCount);\n      out.writeShort(searchRange);\n      out.writeShort(entrySelector);\n      out.writeShort(rangeShift);\n      var directoryLength = tableCount * 16;\n      var offset = out.offset() + directoryLength;\n      var headOffset = null;\n      var tableData = BinaryStream();\n\n      for (var tag in tables) {\n        if (hasOwnProperty(tables, tag)) {\n          var table = tables[tag];\n          out.writeString(tag);\n          out.writeLong(this.checksum(table));\n          out.writeLong(offset);\n          out.writeLong(table.length);\n          tableData.write(table);\n\n          if (tag == \"head\") {\n            headOffset = offset;\n          }\n\n          offset += table.length;\n\n          while (offset % 4) {\n            tableData.writeByte(0);\n            offset++;\n          }\n        }\n      }\n\n      out.write(tableData.get());\n      var sum = this.checksum(out.get());\n      var adjustment = 0xB1B0AFBA - sum;\n      out.offset(headOffset + 8);\n      out.writeLong(adjustment);\n      return out.get();\n    }\n  }, {\n    key: \"checksum\",\n    value: function checksum(data) {\n      data = BinaryStream(data);\n      var sum = 0;\n\n      while (!data.eof()) {\n        sum += data.readLong();\n      }\n\n      return sum & 0xFFFFFFFF;\n    }\n  }]);\n\n  return Directory;\n}();\n\nvar Table = /*#__PURE__*/function () {\n  function Table(file, def) {\n    _classCallCheck(this, Table);\n\n    this.definition = def;\n    this.length = def.length;\n    this.offset = def.offset;\n    this.file = file;\n    this.rawData = file.raw;\n    this.parse(file.raw);\n  }\n\n  _createClass(Table, [{\n    key: \"raw\",\n    value: function raw() {\n      return this.rawData.slice(this.offset, this.length);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse() {} // abstract\n\n  }]);\n\n  return Table;\n}();\n\nvar HeadTable = /*#__PURE__*/function (_Table) {\n  _inherits(HeadTable, _Table);\n\n  var _super = _createSuper(HeadTable);\n\n  function HeadTable() {\n    _classCallCheck(this, HeadTable);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HeadTable, [{\n    key: \"parse\",\n    value: function parse(data) {\n      data.offset(this.offset);\n      this.version = data.readLong();\n      this.revision = data.readLong();\n      this.checkSumAdjustment = data.readLong();\n      this.magicNumber = data.readLong();\n      this.flags = data.readShort();\n      this.unitsPerEm = data.readShort();\n      this.created = data.read(8);\n      this.modified = data.read(8);\n      this.xMin = data.readShort_();\n      this.yMin = data.readShort_();\n      this.xMax = data.readShort_();\n      this.yMax = data.readShort_();\n      this.macStyle = data.readShort();\n      this.lowestRecPPEM = data.readShort();\n      this.fontDirectionHint = data.readShort_();\n      this.indexToLocFormat = data.readShort_();\n      this.glyphDataFormat = data.readShort_();\n    }\n  }, {\n    key: \"render\",\n    value: function render(indexToLocFormat) {\n      var out = BinaryStream();\n      out.writeLong(this.version);\n      out.writeLong(this.revision);\n      out.writeLong(0); // checksum adjustment; shall be computed later\n\n      out.writeLong(this.magicNumber);\n      out.writeShort(this.flags);\n      out.writeShort(this.unitsPerEm);\n      out.write(this.created);\n      out.write(this.modified);\n      out.writeShort_(this.xMin);\n      out.writeShort_(this.yMin);\n      out.writeShort_(this.xMax);\n      out.writeShort_(this.yMax);\n      out.writeShort(this.macStyle);\n      out.writeShort(this.lowestRecPPEM);\n      out.writeShort_(this.fontDirectionHint);\n      out.writeShort_(indexToLocFormat); // this will depend on the `loca` table\n\n      out.writeShort_(this.glyphDataFormat);\n      return out.get();\n    }\n  }]);\n\n  return HeadTable;\n}(Table);\n\nvar LocaTable = /*#__PURE__*/function (_Table2) {\n  _inherits(LocaTable, _Table2);\n\n  var _super2 = _createSuper(LocaTable);\n\n  function LocaTable() {\n    _classCallCheck(this, LocaTable);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(LocaTable, [{\n    key: \"parse\",\n    value: function parse(data) {\n      data.offset(this.offset);\n      var format = this.file.head.indexToLocFormat;\n\n      if (format === 0) {\n        this.offsets = data.times(this.length / 2, function () {\n          return 2 * data.readShort();\n        });\n      } else {\n        this.offsets = data.times(this.length / 4, data.readLong);\n      }\n    }\n  }, {\n    key: \"offsetOf\",\n    value: function offsetOf(id) {\n      return this.offsets[id];\n    }\n  }, {\n    key: \"lengthOf\",\n    value: function lengthOf(id) {\n      return this.offsets[id + 1] - this.offsets[id];\n    }\n  }, {\n    key: \"render\",\n    value: function render(offsets) {\n      var out = BinaryStream();\n      var needsLongFormat = offsets[offsets.length - 1] > 0xFFFF;\n\n      for (var i = 0; i < offsets.length; ++i) {\n        if (needsLongFormat) {\n          out.writeLong(offsets[i]);\n        } else {\n          out.writeShort(offsets[i] / 2);\n        }\n      }\n\n      return {\n        format: needsLongFormat ? 1 : 0,\n        table: out.get()\n      };\n    }\n  }]);\n\n  return LocaTable;\n}(Table);\n\nvar HheaTable = /*#__PURE__*/function (_Table3) {\n  _inherits(HheaTable, _Table3);\n\n  var _super3 = _createSuper(HheaTable);\n\n  function HheaTable() {\n    _classCallCheck(this, HheaTable);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(HheaTable, [{\n    key: \"parse\",\n    value: function parse(data) {\n      data.offset(this.offset);\n      this.version = data.readLong();\n      this.ascent = data.readShort_();\n      this.descent = data.readShort_();\n      this.lineGap = data.readShort_();\n      this.advanceWidthMax = data.readShort();\n      this.minLeftSideBearing = data.readShort_();\n      this.minRightSideBearing = data.readShort_();\n      this.xMaxExtent = data.readShort_();\n      this.caretSlopeRise = data.readShort_();\n      this.caretSlopeRun = data.readShort_();\n      this.caretOffset = data.readShort_();\n      data.skip(4 * 2); // reserved\n\n      this.metricDataFormat = data.readShort_();\n      this.numOfLongHorMetrics = data.readShort();\n    }\n  }, {\n    key: \"render\",\n    value: function render(ids) {\n      var out = BinaryStream();\n      out.writeLong(this.version);\n      out.writeShort_(this.ascent);\n      out.writeShort_(this.descent);\n      out.writeShort_(this.lineGap);\n      out.writeShort(this.advanceWidthMax);\n      out.writeShort_(this.minLeftSideBearing);\n      out.writeShort_(this.minRightSideBearing);\n      out.writeShort_(this.xMaxExtent);\n      out.writeShort_(this.caretSlopeRise);\n      out.writeShort_(this.caretSlopeRun);\n      out.writeShort_(this.caretOffset);\n      out.write([0, 0, 0, 0, 0, 0, 0, 0]); // reserved bytes\n\n      out.writeShort_(this.metricDataFormat);\n      out.writeShort(ids.length);\n      return out.get();\n    }\n  }]);\n\n  return HheaTable;\n}(Table);\n\nvar MaxpTable = /*#__PURE__*/function (_Table4) {\n  _inherits(MaxpTable, _Table4);\n\n  var _super4 = _createSuper(MaxpTable);\n\n  function MaxpTable() {\n    _classCallCheck(this, MaxpTable);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(MaxpTable, [{\n    key: \"parse\",\n    value: function parse(data) {\n      data.offset(this.offset);\n      this.version = data.readLong();\n      this.numGlyphs = data.readShort();\n      this.maxPoints = data.readShort();\n      this.maxContours = data.readShort();\n      this.maxComponentPoints = data.readShort();\n      this.maxComponentContours = data.readShort();\n      this.maxZones = data.readShort();\n      this.maxTwilightPoints = data.readShort();\n      this.maxStorage = data.readShort();\n      this.maxFunctionDefs = data.readShort();\n      this.maxInstructionDefs = data.readShort();\n      this.maxStackElements = data.readShort();\n      this.maxSizeOfInstructions = data.readShort();\n      this.maxComponentElements = data.readShort();\n      this.maxComponentDepth = data.readShort();\n    }\n  }, {\n    key: \"render\",\n    value: function render(glyphIds) {\n      var out = BinaryStream();\n      out.writeLong(this.version);\n      out.writeShort(glyphIds.length);\n      out.writeShort(this.maxPoints);\n      out.writeShort(this.maxContours);\n      out.writeShort(this.maxComponentPoints);\n      out.writeShort(this.maxComponentContours);\n      out.writeShort(this.maxZones);\n      out.writeShort(this.maxTwilightPoints);\n      out.writeShort(this.maxStorage);\n      out.writeShort(this.maxFunctionDefs);\n      out.writeShort(this.maxInstructionDefs);\n      out.writeShort(this.maxStackElements);\n      out.writeShort(this.maxSizeOfInstructions);\n      out.writeShort(this.maxComponentElements);\n      out.writeShort(this.maxComponentDepth);\n      return out.get();\n    }\n  }]);\n\n  return MaxpTable;\n}(Table);\n\nvar HmtxTable = /*#__PURE__*/function (_Table5) {\n  _inherits(HmtxTable, _Table5);\n\n  var _super5 = _createSuper(HmtxTable);\n\n  function HmtxTable() {\n    _classCallCheck(this, HmtxTable);\n\n    return _super5.apply(this, arguments);\n  }\n\n  _createClass(HmtxTable, [{\n    key: \"parse\",\n    value: function parse(data) {\n      data.offset(this.offset);\n      var dir = this.file,\n          hhea = dir.hhea;\n      this.metrics = data.times(hhea.numOfLongHorMetrics, function () {\n        return {\n          advance: data.readShort(),\n          lsb: data.readShort_()\n        };\n      });\n      var lsbCount = dir.maxp.numGlyphs - dir.hhea.numOfLongHorMetrics;\n      this.leftSideBearings = data.times(lsbCount, data.readShort_);\n    }\n  }, {\n    key: \"forGlyph\",\n    value: function forGlyph(id) {\n      var metrics = this.metrics;\n      var n = metrics.length;\n\n      if (id < n) {\n        return metrics[id];\n      }\n\n      return {\n        advance: metrics[n - 1].advance,\n        lsb: this.leftSideBearings[id - n]\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render(glyphIds) {\n      var out = BinaryStream();\n\n      for (var i = 0; i < glyphIds.length; ++i) {\n        var m = this.forGlyph(glyphIds[i]);\n        out.writeShort(m.advance);\n        out.writeShort_(m.lsb);\n      }\n\n      return out.get();\n    }\n  }]);\n\n  return HmtxTable;\n}(Table);\n\nvar GlyfTable = function () {\n  var SimpleGlyph = /*#__PURE__*/function () {\n    _createClass(SimpleGlyph, [{\n      key: \"compound\",\n      get: function get() {\n        return false;\n      }\n    }]);\n\n    function SimpleGlyph(raw) {\n      _classCallCheck(this, SimpleGlyph);\n\n      this.raw = raw;\n    }\n\n    _createClass(SimpleGlyph, [{\n      key: \"render\",\n      value: function render() {\n        return this.raw.get();\n      }\n    }]);\n\n    return SimpleGlyph;\n  }();\n\n  var ARG_1_AND_2_ARE_WORDS = 0x0001;\n  var WE_HAVE_A_SCALE = 0x0008;\n  var MORE_COMPONENTS = 0x0020;\n  var WE_HAVE_AN_X_AND_Y_SCALE = 0x0040;\n  var WE_HAVE_A_TWO_BY_TWO = 0x0080; //var WE_HAVE_INSTRUCTIONS      = 0x0100;\n\n  var CompoundGlyph = /*#__PURE__*/function () {\n    _createClass(CompoundGlyph, [{\n      key: \"compound\",\n      get: function get() {\n        return true;\n      }\n    }]);\n\n    function CompoundGlyph(data) {\n      _classCallCheck(this, CompoundGlyph);\n\n      this.raw = data;\n      var ids = this.glyphIds = [];\n      var offsets = this.idOffsets = [];\n\n      while (true) {\n        // eslint-disable-line no-constant-condition\n        var flags = data.readShort();\n        offsets.push(data.offset());\n        ids.push(data.readShort());\n\n        if (!(flags & MORE_COMPONENTS)) {\n          break;\n        }\n\n        data.skip(flags & ARG_1_AND_2_ARE_WORDS ? 4 : 2);\n\n        if (flags & WE_HAVE_A_TWO_BY_TWO) {\n          data.skip(8);\n        } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {\n          data.skip(4);\n        } else if (flags & WE_HAVE_A_SCALE) {\n          data.skip(2);\n        }\n      }\n    }\n\n    _createClass(CompoundGlyph, [{\n      key: \"render\",\n      value: function render(old2new) {\n        var out = BinaryStream(this.raw.get());\n\n        for (var i = 0; i < this.glyphIds.length; ++i) {\n          var id = this.glyphIds[i];\n          out.offset(this.idOffsets[i]);\n          out.writeShort(old2new[id]);\n        }\n\n        return out.get();\n      }\n    }]);\n\n    return CompoundGlyph;\n  }();\n\n  return /*#__PURE__*/function (_Table6) {\n    _inherits(_class, _Table6);\n\n    var _super6 = _createSuper(_class);\n\n    function _class() {\n      _classCallCheck(this, _class);\n\n      return _super6.apply(this, arguments);\n    }\n\n    _createClass(_class, [{\n      key: \"parse\",\n      value: function parse() {\n        this.cache = {};\n      }\n    }, {\n      key: \"glyphFor\",\n      value: function glyphFor(id) {\n        var cache = this.cache;\n\n        if (hasOwnProperty(cache, id)) {\n          return cache[id];\n        }\n\n        var loca = this.file.loca;\n        var length = loca.lengthOf(id);\n\n        if (length === 0) {\n          return cache[id] = null;\n        }\n\n        var data = this.rawData;\n        var offset = this.offset + loca.offsetOf(id);\n        var raw = BinaryStream(data.slice(offset, length));\n        var numberOfContours = raw.readShort_();\n        var xMin = raw.readShort_();\n        var yMin = raw.readShort_();\n        var xMax = raw.readShort_();\n        var yMax = raw.readShort_();\n        var glyph = cache[id] = numberOfContours < 0 ? new CompoundGlyph(raw) : new SimpleGlyph(raw);\n        glyph.numberOfContours = numberOfContours;\n        glyph.xMin = xMin;\n        glyph.yMin = yMin;\n        glyph.xMax = xMax;\n        glyph.yMax = yMax;\n        return glyph;\n      }\n    }, {\n      key: \"render\",\n      value: function render(glyphs, oldIds, old2new) {\n        var out = BinaryStream(),\n            offsets = [];\n\n        for (var i = 0; i < oldIds.length; ++i) {\n          var id = oldIds[i];\n          var glyph = glyphs[id];\n\n          if (out.offset() % 2) {\n            out.writeByte(0);\n          }\n\n          offsets.push(out.offset());\n\n          if (glyph) {\n            out.write(glyph.render(old2new));\n          }\n        }\n\n        if (out.offset() % 2) {\n          out.writeByte(0);\n        }\n\n        offsets.push(out.offset());\n        return {\n          table: out.get(),\n          offsets: offsets\n        };\n      }\n    }]);\n\n    return _class;\n  }(Table);\n}();\n\nvar NameTable = function () {\n  var NameEntry = function NameEntry(text, entry) {\n    _classCallCheck(this, NameEntry);\n\n    this.text = text;\n    this.length = text.length;\n    this.platformID = entry.platformID;\n    this.platformSpecificID = entry.platformSpecificID;\n    this.languageID = entry.languageID;\n    this.nameID = entry.nameID;\n  };\n\n  return /*#__PURE__*/function (_Table7) {\n    _inherits(_class2, _Table7);\n\n    var _super7 = _createSuper(_class2);\n\n    function _class2() {\n      _classCallCheck(this, _class2);\n\n      return _super7.apply(this, arguments);\n    }\n\n    _createClass(_class2, [{\n      key: \"parse\",\n      value: function parse(data) {\n        data.offset(this.offset);\n        data.readShort(); // format\n\n        var count = data.readShort();\n        var stringOffset = this.offset + data.readShort();\n        var nameRecords = data.times(count, function () {\n          return {\n            platformID: data.readShort(),\n            platformSpecificID: data.readShort(),\n            languageID: data.readShort(),\n            nameID: data.readShort(),\n            length: data.readShort(),\n            offset: data.readShort() + stringOffset\n          };\n        });\n        var strings = this.strings = {};\n\n        for (var i = 0; i < nameRecords.length; ++i) {\n          var rec = nameRecords[i];\n          data.offset(rec.offset);\n          var text = data.readString(rec.length);\n\n          if (!strings[rec.nameID]) {\n            strings[rec.nameID] = [];\n          }\n\n          strings[rec.nameID].push(new NameEntry(text, rec));\n        }\n\n        this.postscriptEntry = strings[6][0];\n        this.postscriptName = this.postscriptEntry.text.replace(/[^\\x20-\\x7F]/g, \"\");\n      }\n    }, {\n      key: \"render\",\n      value: function render(psName) {\n        var strings = this.strings;\n        var strCount = 0;\n\n        for (var i in strings) {\n          if (hasOwnProperty(strings, i)) {\n            strCount += strings[i].length;\n          }\n        }\n\n        var out = BinaryStream();\n        var strTable = BinaryStream();\n        out.writeShort(0); // format\n\n        out.writeShort(strCount);\n        out.writeShort(6 + 12 * strCount); // stringOffset\n\n        for (i in strings) {\n          if (hasOwnProperty(strings, i)) {\n            var list = i == 6 ? [new NameEntry(psName, this.postscriptEntry)] : strings[i];\n\n            for (var j = 0; j < list.length; ++j) {\n              var str = list[j];\n              out.writeShort(str.platformID);\n              out.writeShort(str.platformSpecificID);\n              out.writeShort(str.languageID);\n              out.writeShort(str.nameID);\n              out.writeShort(str.length);\n              out.writeShort(strTable.offset());\n              strTable.writeString(str.text);\n            }\n          }\n        }\n\n        out.write(strTable.get());\n        return out.get();\n      }\n    }]);\n\n    return _class2;\n  }(Table);\n}();\n\nvar PostTable = function () {\n  var POSTSCRIPT_GLYPHS = \".notdef .null nonmarkingreturn space exclam quotedbl numbersign dollar percent ampersand quotesingle parenleft parenright asterisk plus comma hyphen period slash zero one two three four five six seven eight nine colon semicolon less equal greater question at A B C D E F G H I J K L M N O P Q R S T U V W X Y Z bracketleft backslash bracketright asciicircum underscore grave a b c d e f g h i j k l m n o p q r s t u v w x y z braceleft bar braceright asciitilde Adieresis Aring Ccedilla Eacute Ntilde Odieresis Udieresis aacute agrave acircumflex adieresis atilde aring ccedilla eacute egrave ecircumflex edieresis iacute igrave icircumflex idieresis ntilde oacute ograve ocircumflex odieresis otilde uacute ugrave ucircumflex udieresis dagger degree cent sterling section bullet paragraph germandbls registered copyright trademark acute dieresis notequal AE Oslash infinity plusminus lessequal greaterequal yen mu partialdiff summation product pi integral ordfeminine ordmasculine Omega ae oslash questiondown exclamdown logicalnot radical florin approxequal Delta guillemotleft guillemotright ellipsis nonbreakingspace Agrave Atilde Otilde OE oe endash emdash quotedblleft quotedblright quoteleft quoteright divide lozenge ydieresis Ydieresis fraction currency guilsinglleft guilsinglright fi fl daggerdbl periodcentered quotesinglbase quotedblbase perthousand Acircumflex Ecircumflex Aacute Edieresis Egrave Iacute Icircumflex Idieresis Igrave Oacute Ocircumflex apple Ograve Uacute Ucircumflex Ugrave dotlessi circumflex tilde macron breve dotaccent ring cedilla hungarumlaut ogonek caron Lslash lslash Scaron scaron Zcaron zcaron brokenbar Eth eth Yacute yacute Thorn thorn minus multiply onesuperior twosuperior threesuperior onehalf onequarter threequarters franc Gbreve gbreve Idotaccent Scedilla scedilla Cacute cacute Ccaron ccaron dcroat\".split(/\\s+/g);\n  return /*#__PURE__*/function (_Table8) {\n    _inherits(_class3, _Table8);\n\n    var _super8 = _createSuper(_class3);\n\n    function _class3() {\n      _classCallCheck(this, _class3);\n\n      return _super8.apply(this, arguments);\n    }\n\n    _createClass(_class3, [{\n      key: \"parse\",\n      value: function parse(data) {\n        data.offset(this.offset);\n        this.format = data.readLong();\n        this.italicAngle = data.readFixed_();\n        this.underlinePosition = data.readShort_();\n        this.underlineThickness = data.readShort_();\n        this.isFixedPitch = data.readLong();\n        this.minMemType42 = data.readLong();\n        this.maxMemType42 = data.readLong();\n        this.minMemType1 = data.readLong();\n        this.maxMemType1 = data.readLong();\n        var numberOfGlyphs;\n\n        switch (this.format) {\n          case 0x00010000:\n          case 0x00030000:\n            break;\n\n          case 0x00020000:\n            numberOfGlyphs = data.readShort();\n            this.glyphNameIndex = data.times(numberOfGlyphs, data.readShort);\n            this.names = [];\n            var limit = this.offset + this.length;\n\n            while (data.offset() < limit) {\n              this.names.push(data.readString(data.readByte()));\n            }\n\n            break;\n\n          case 0x00025000:\n            numberOfGlyphs = data.readShort();\n            this.offsets = data.read(numberOfGlyphs);\n            break;\n\n          case 0x00040000:\n            this.map = data.times(this.file.maxp.numGlyphs, data.readShort);\n            break;\n        }\n      }\n    }, {\n      key: \"glyphFor\",\n      value: function glyphFor(code) {\n        switch (this.format) {\n          case 0x00010000:\n            return POSTSCRIPT_GLYPHS[code] || \".notdef\";\n\n          case 0x00020000:\n            var index = this.glyphNameIndex[code];\n\n            if (index < POSTSCRIPT_GLYPHS.length) {\n              return POSTSCRIPT_GLYPHS[index];\n            }\n\n            return this.names[index - POSTSCRIPT_GLYPHS.length] || \".notdef\";\n\n          case 0x00025000:\n          case 0x00030000:\n            return \".notdef\";\n\n          case 0x00040000:\n            return this.map[code] || 0xFFFF;\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render(mapping) {\n        if (this.format == 0x00030000) {\n          return this.raw();\n        } // keep original header, but set format to 2.0\n\n\n        var out = BinaryStream(this.rawData.slice(this.offset, 32));\n        out.writeLong(0x00020000);\n        out.offset(32);\n        var indexes = [];\n        var strings = [];\n\n        for (var i = 0; i < mapping.length; ++i) {\n          var id = mapping[i];\n          var post = this.glyphFor(id);\n          var index = POSTSCRIPT_GLYPHS.indexOf(post);\n\n          if (index >= 0) {\n            indexes.push(index);\n          } else {\n            indexes.push(POSTSCRIPT_GLYPHS.length + strings.length);\n            strings.push(post);\n          }\n        }\n\n        out.writeShort(mapping.length);\n\n        for (i = 0; i < indexes.length; ++i) {\n          out.writeShort(indexes[i]);\n        }\n\n        for (i = 0; i < strings.length; ++i) {\n          out.writeByte(strings[i].length);\n          out.writeString(strings[i]);\n        }\n\n        return out.get();\n      }\n    }]);\n\n    return _class3;\n  }(Table);\n}();\n\nvar CmapTable = function () {\n  var CmapEntry = function CmapEntry(data, offset, codeMap) {\n    _classCallCheck(this, CmapEntry);\n\n    var self = this;\n    self.platformID = data.readShort();\n    self.platformSpecificID = data.readShort();\n    self.offset = offset + data.readLong();\n    data.saveExcursion(function () {\n      var code;\n      data.offset(self.offset);\n      self.format = data.readShort();\n\n      switch (self.format) {\n        case 0:\n          self.length = data.readShort();\n          self.language = data.readShort();\n\n          for (var i = 0; i < 256; ++i) {\n            codeMap[i] = data.readByte();\n          }\n\n          break;\n\n        case 4:\n          self.length = data.readShort();\n          self.language = data.readShort();\n          var segCount = data.readShort() / 2;\n          data.skip(6); // searchRange, entrySelector, rangeShift\n\n          var endCode = data.times(segCount, data.readShort);\n          data.skip(2); // reserved pad\n\n          var startCode = data.times(segCount, data.readShort);\n          var idDelta = data.times(segCount, data.readShort_);\n          var idRangeOffset = data.times(segCount, data.readShort);\n          var count = (self.length + self.offset - data.offset()) / 2;\n          var glyphIds = data.times(count, data.readShort);\n\n          for (i = 0; i < segCount; ++i) {\n            var start = startCode[i],\n                end = endCode[i];\n\n            for (code = start; code <= end; ++code) {\n              var glyphId;\n\n              if (idRangeOffset[i] === 0) {\n                glyphId = code + idDelta[i];\n              } else {\n                ///\n                // When non-zero, idRangeOffset contains for each segment the byte offset of the Glyph ID\n                // into the glyphIds table, from the *current* `i` cell of idRangeOffset.  In other words,\n                // this offset spans from the first into the second array.  This works, because the arrays\n                // are consecutive in the TTF file:\n                //\n                //     [ ...idRangeOffset... ][ ...glyphIds... ]\n                //       ...... 48 ......       .... ID ....\n                //              ^----- 48 bytes -----^\n                //\n                // (but I can't stop wondering why is it not just a plain index, possibly incremented by 1\n                // so that we can have that special `zero` value.)\n                //\n                // The elements of idRangeOffset are even numbers, because both arrays contain 16-bit words,\n                // yet the offset is in bytes.  That is why we divide it by 2.  Then we subtract the\n                // remaining segments (segCount-i), and add the code-start offset, to which we need to add\n                // the corresponding delta to get the actual glyph ID.\n                ///\n                var index = idRangeOffset[i] / 2 - (segCount - i) + (code - start);\n                glyphId = glyphIds[index] || 0;\n\n                if (glyphId !== 0) {\n                  glyphId += idDelta[i];\n                }\n              }\n\n              codeMap[code] = glyphId & 0xFFFF;\n            }\n          }\n\n          break;\n\n        case 6:\n          self.length = data.readShort();\n          self.language = data.readShort();\n          code = data.readShort();\n          var length = data.readShort();\n\n          while (length-- > 0) {\n            codeMap[code++] = data.readShort();\n          }\n\n          break;\n\n        case 12:\n          data.readShort(); // reserved\n\n          self.length = data.readLong();\n          self.language = data.readLong();\n          var ngroups = data.readLong();\n\n          while (ngroups-- > 0) {\n            code = data.readLong();\n            var endCharCode = data.readLong();\n            var glyphCode = data.readLong();\n\n            while (code <= endCharCode) {\n              codeMap[code++] = glyphCode++;\n            }\n          }\n\n          break;\n\n        default:\n          if (window.console) {\n            window.console.error(\"Unhandled CMAP format: \" + self.format);\n          }\n\n      }\n    });\n  };\n\n  function renderCharmap(ncid2ogid, ogid2ngid) {\n    var codes = sortedKeys(ncid2ogid);\n    var startCodes = [];\n    var endCodes = [];\n    var last = null;\n    var diff = null;\n\n    function new_gid(charcode) {\n      return ogid2ngid[ncid2ogid[charcode]];\n    }\n\n    for (var i = 0; i < codes.length; ++i) {\n      var code = codes[i];\n      var gid = new_gid(code);\n      var delta = gid - code;\n\n      if (last == null || delta !== diff) {\n        if (last) {\n          endCodes.push(last);\n        }\n\n        startCodes.push(code);\n        diff = delta;\n      }\n\n      last = code;\n    }\n\n    if (last) {\n      endCodes.push(last);\n    }\n\n    endCodes.push(0xFFFF);\n    startCodes.push(0xFFFF);\n    var segCount = startCodes.length;\n    var segCountX2 = segCount * 2;\n    var searchRange = 2 * Math.pow(2, Math.floor(Math.log(segCount) / Math.LN2));\n    var entrySelector = Math.log(searchRange / 2) / Math.LN2;\n    var rangeShift = segCountX2 - searchRange;\n    var deltas = [];\n    var rangeOffsets = [];\n    var glyphIds = [];\n\n    for (i = 0; i < segCount; ++i) {\n      var startCode = startCodes[i];\n      var endCode = endCodes[i];\n\n      if (startCode == 0xFFFF) {\n        deltas.push(0);\n        rangeOffsets.push(0);\n        break;\n      }\n\n      var startGlyph = new_gid(startCode);\n\n      if (startCode - startGlyph >= 0x8000) {\n        deltas.push(0);\n        rangeOffsets.push(2 * (glyphIds.length + segCount - i));\n\n        for (var j = startCode; j <= endCode; ++j) {\n          glyphIds.push(new_gid(j));\n        }\n      } else {\n        deltas.push(startGlyph - startCode);\n        rangeOffsets.push(0);\n      }\n    }\n\n    var out = BinaryStream();\n    out.writeShort(3); // platformID\n\n    out.writeShort(1); // platformSpecificID\n\n    out.writeLong(12); // offset\n\n    out.writeShort(4); // format\n\n    out.writeShort(16 + segCount * 8 + glyphIds.length * 2); // length\n\n    out.writeShort(0); // language\n\n    out.writeShort(segCountX2);\n    out.writeShort(searchRange);\n    out.writeShort(entrySelector);\n    out.writeShort(rangeShift);\n    endCodes.forEach(out.writeShort);\n    out.writeShort(0); // reserved pad\n\n    startCodes.forEach(out.writeShort);\n    deltas.forEach(out.writeShort_);\n    rangeOffsets.forEach(out.writeShort);\n    glyphIds.forEach(out.writeShort);\n    return out.get();\n  }\n\n  return /*#__PURE__*/function (_Table9) {\n    _inherits(_class4, _Table9);\n\n    var _super9 = _createSuper(_class4);\n\n    function _class4() {\n      _classCallCheck(this, _class4);\n\n      return _super9.apply(this, arguments);\n    }\n\n    _createClass(_class4, [{\n      key: \"parse\",\n      value: function parse(data) {\n        var self = this;\n        var offset = self.offset;\n        data.offset(offset);\n        self.codeMap = {};\n        self.version = data.readShort();\n        var tableCount = data.readShort();\n        self.tables = data.times(tableCount, function () {\n          return new CmapEntry(data, offset, self.codeMap);\n        });\n      }\n    }], [{\n      key: \"render\",\n      value: function render(ncid2ogid, ogid2ngid) {\n        var out = BinaryStream();\n        out.writeShort(0); // version\n\n        out.writeShort(1); // tableCount\n\n        out.write(renderCharmap(ncid2ogid, ogid2ngid));\n        return out.get();\n      }\n    }]);\n\n    return _class4;\n  }(Table);\n}();\n\nvar OS2Table = /*#__PURE__*/function (_Table10) {\n  _inherits(OS2Table, _Table10);\n\n  var _super10 = _createSuper(OS2Table);\n\n  function OS2Table() {\n    _classCallCheck(this, OS2Table);\n\n    return _super10.apply(this, arguments);\n  }\n\n  _createClass(OS2Table, [{\n    key: \"parse\",\n    value: function parse(data) {\n      data.offset(this.offset);\n      this.version = data.readShort();\n      this.averageCharWidth = data.readShort_();\n      this.weightClass = data.readShort();\n      this.widthClass = data.readShort();\n      this.type = data.readShort();\n      this.ySubscriptXSize = data.readShort_();\n      this.ySubscriptYSize = data.readShort_();\n      this.ySubscriptXOffset = data.readShort_();\n      this.ySubscriptYOffset = data.readShort_();\n      this.ySuperscriptXSize = data.readShort_();\n      this.ySuperscriptYSize = data.readShort_();\n      this.ySuperscriptXOffset = data.readShort_();\n      this.ySuperscriptYOffset = data.readShort_();\n      this.yStrikeoutSize = data.readShort_();\n      this.yStrikeoutPosition = data.readShort_();\n      this.familyClass = data.readShort_();\n      this.panose = data.times(10, data.readByte);\n      this.charRange = data.times(4, data.readLong);\n      this.vendorID = data.readString(4);\n      this.selection = data.readShort();\n      this.firstCharIndex = data.readShort();\n      this.lastCharIndex = data.readShort();\n\n      if (this.version > 0) {\n        this.ascent = data.readShort_();\n        this.descent = data.readShort_();\n        this.lineGap = data.readShort_();\n        this.winAscent = data.readShort();\n        this.winDescent = data.readShort();\n        this.codePageRange = data.times(2, data.readLong);\n\n        if (this.version > 1) {\n          this.xHeight = data.readShort();\n          this.capHeight = data.readShort();\n          this.defaultChar = data.readShort();\n          this.breakChar = data.readShort();\n          this.maxContext = data.readShort();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.raw();\n    }\n  }]);\n\n  return OS2Table;\n}(Table);\n\nvar subsetTag = 100000;\n\nfunction nextSubsetTag() {\n  var ret = \"\",\n      n = String(subsetTag);\n\n  for (var i = 0; i < n.length; ++i) {\n    ret += String.fromCharCode(n.charCodeAt(i) - 48 + 65);\n  }\n\n  ++subsetTag;\n  return ret;\n}\n\nvar Subfont = /*#__PURE__*/function () {\n  function Subfont(font) {\n    _classCallCheck(this, Subfont);\n\n    this.font = font;\n    this.subset = {};\n    this.unicodes = {};\n    this.ogid2ngid = {\n      0: 0\n    };\n    this.ngid2ogid = {\n      0: 0\n    };\n    this.ncid2ogid = {};\n    this.next = this.firstChar = 1;\n    this.nextGid = 1;\n    this.psName = nextSubsetTag() + \"+\" + this.font.psName;\n  }\n\n  _createClass(Subfont, [{\n    key: \"use\",\n    value: function use(ch) {\n      var self = this;\n\n      if (typeof ch == \"string\") {\n        return ucs2decode(ch).reduce(function (ret, code) {\n          return ret + String.fromCharCode(self.use(code));\n        }, \"\");\n      }\n\n      var code = self.unicodes[ch];\n\n      if (!code) {\n        code = self.next++;\n        self.subset[code] = ch;\n        self.unicodes[ch] = code; // generate new GID (glyph ID) and maintain newGID ->\n        // oldGID and back mappings\n\n        var old_gid = self.font.cmap.codeMap[ch];\n\n        if (old_gid) {\n          self.ncid2ogid[code] = old_gid;\n\n          if (self.ogid2ngid[old_gid] == null) {\n            var new_gid = self.nextGid++;\n            self.ogid2ngid[old_gid] = new_gid;\n            self.ngid2ogid[new_gid] = old_gid;\n          }\n        }\n      }\n\n      return code;\n    }\n  }, {\n    key: \"encodeText\",\n    value: function encodeText(text) {\n      return this.use(text);\n    }\n  }, {\n    key: \"glyphIds\",\n    value: function glyphIds() {\n      return sortedKeys(this.ogid2ngid);\n    }\n  }, {\n    key: \"glyphsFor\",\n    value: function glyphsFor(glyphIds, result) {\n      if (!result) {\n        result = {};\n      }\n\n      for (var i = 0; i < glyphIds.length; ++i) {\n        var id = glyphIds[i];\n\n        if (!result[id]) {\n          var glyph = result[id] = this.font.glyf.glyphFor(id);\n\n          if (glyph && glyph.compound) {\n            this.glyphsFor(glyph.glyphIds, result);\n          }\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var glyphs = this.glyphsFor(this.glyphIds()); // add missing sub-glyphs\n\n      for (var old_gid in glyphs) {\n        if (hasOwnProperty(glyphs, old_gid)) {\n          old_gid = parseInt(old_gid, 10);\n\n          if (this.ogid2ngid[old_gid] == null) {\n            var new_gid = this.nextGid++;\n            this.ogid2ngid[old_gid] = new_gid;\n            this.ngid2ogid[new_gid] = old_gid;\n          }\n        }\n      } // must obtain old_gid_ids in an order matching sorted\n      // new_gid_ids\n\n\n      var new_gid_ids = sortedKeys(this.ngid2ogid);\n      var old_gid_ids = new_gid_ids.map(function (id) {\n        return this.ngid2ogid[id];\n      }, this);\n      var font = this.font;\n      var glyf = font.glyf.render(glyphs, old_gid_ids, this.ogid2ngid);\n      var loca = font.loca.render(glyf.offsets);\n      this.lastChar = this.next - 1;\n      var tables = {\n        \"cmap\": CmapTable.render(this.ncid2ogid, this.ogid2ngid),\n        \"glyf\": glyf.table,\n        \"loca\": loca.table,\n        \"hmtx\": font.hmtx.render(old_gid_ids),\n        \"hhea\": font.hhea.render(old_gid_ids),\n        \"maxp\": font.maxp.render(old_gid_ids),\n        \"post\": font.post.render(old_gid_ids),\n        \"name\": font.name.render(this.psName),\n        \"head\": font.head.render(loca.format),\n        \"OS/2\": font.os2.render()\n      };\n      return this.font.directory.render(tables);\n    }\n  }, {\n    key: \"cidToGidMap\",\n    value: function cidToGidMap() {\n      var out = BinaryStream(),\n          len = 0;\n\n      for (var cid = this.firstChar; cid < this.next; ++cid) {\n        while (len < cid) {\n          out.writeShort(0);\n          len++;\n        }\n\n        var old_gid = this.ncid2ogid[cid];\n\n        if (old_gid) {\n          var new_gid = this.ogid2ngid[old_gid];\n          out.writeShort(new_gid);\n        } else {\n          out.writeShort(0);\n        }\n\n        len++;\n      }\n\n      return out.get();\n    }\n  }]);\n\n  return Subfont;\n}();\n\nvar TTFFont = /*#__PURE__*/function () {\n  function TTFFont(rawData, name) {\n    _classCallCheck(this, TTFFont);\n\n    var self = this;\n    var data = self.contents = BinaryStream(rawData);\n\n    if (data.readString(4) == \"ttcf\") {\n      var offset;\n\n      var parse = function parse() {\n        data.offset(offset);\n        self.parse();\n      };\n\n      if (!name) {\n        throw new Error(\"Must specify a name for TTC files\");\n      }\n\n      data.readLong(); // version\n\n      var numFonts = data.readLong();\n\n      for (var i = 0; i < numFonts; ++i) {\n        offset = data.readLong();\n        data.saveExcursion(parse);\n\n        if (self.psName == name) {\n          return;\n        }\n      }\n\n      throw new Error(\"Font \" + name + \" not found in collection\");\n    } else {\n      data.offset(0);\n      self.parse();\n    }\n  }\n\n  _createClass(TTFFont, [{\n    key: \"parse\",\n    value: function parse() {\n      var dir = this.directory = new Directory(this.contents);\n      this.head = dir.readTable(\"head\", HeadTable);\n      this.loca = dir.readTable(\"loca\", LocaTable);\n      this.hhea = dir.readTable(\"hhea\", HheaTable);\n      this.maxp = dir.readTable(\"maxp\", MaxpTable);\n      this.hmtx = dir.readTable(\"hmtx\", HmtxTable);\n      this.glyf = dir.readTable(\"glyf\", GlyfTable);\n      this.name = dir.readTable(\"name\", NameTable);\n      this.post = dir.readTable(\"post\", PostTable);\n      this.cmap = dir.readTable(\"cmap\", CmapTable);\n      this.os2 = dir.readTable(\"OS/2\", OS2Table);\n      this.psName = this.name.postscriptName;\n      this.ascent = this.os2.ascent || this.hhea.ascent;\n      this.descent = this.os2.descent || this.hhea.descent;\n      this.lineGap = this.os2.lineGap || this.hhea.lineGap;\n      this.scale = 1000 / this.head.unitsPerEm;\n    }\n  }, {\n    key: \"widthOfGlyph\",\n    value: function widthOfGlyph(glyph) {\n      return this.hmtx.forGlyph(glyph).advance * this.scale;\n    }\n  }, {\n    key: \"makeSubset\",\n    value: function makeSubset() {\n      return new Subfont(this);\n    }\n  }]);\n\n  return TTFFont;\n}();\n\nexport { TTFFont };","map":{"version":3,"sources":["/home/datquocngo/Project/UET/gts-fe/node_modules/@progress/kendo-drawing/dist/es2015/pdf/ttf.js"],"names":["BinaryStream","ucs2decode","hasOwnProperty","obj","key","Object","prototype","call","sortedKeys","keys","sort","a","b","map","parseFloat","Directory","data","raw","scalerType","readLong","tableCount","readShort","searchRange","entrySelector","rangeShift","tables","i","entry","tag","readString","checksum","offset","length","name","Ctor","def","Error","table","maxpow2","Math","pow","floor","log","LN2","out","writeLong","writeShort","directoryLength","headOffset","tableData","writeString","write","writeByte","get","sum","adjustment","eof","Table","file","definition","rawData","parse","slice","HeadTable","version","revision","checkSumAdjustment","magicNumber","flags","unitsPerEm","created","read","modified","xMin","readShort_","yMin","xMax","yMax","macStyle","lowestRecPPEM","fontDirectionHint","indexToLocFormat","glyphDataFormat","writeShort_","LocaTable","format","head","offsets","times","id","needsLongFormat","HheaTable","ascent","descent","lineGap","advanceWidthMax","minLeftSideBearing","minRightSideBearing","xMaxExtent","caretSlopeRise","caretSlopeRun","caretOffset","skip","metricDataFormat","numOfLongHorMetrics","ids","MaxpTable","numGlyphs","maxPoints","maxContours","maxComponentPoints","maxComponentContours","maxZones","maxTwilightPoints","maxStorage","maxFunctionDefs","maxInstructionDefs","maxStackElements","maxSizeOfInstructions","maxComponentElements","maxComponentDepth","glyphIds","HmtxTable","dir","hhea","metrics","advance","lsb","lsbCount","maxp","leftSideBearings","n","m","forGlyph","GlyfTable","SimpleGlyph","ARG_1_AND_2_ARE_WORDS","WE_HAVE_A_SCALE","MORE_COMPONENTS","WE_HAVE_AN_X_AND_Y_SCALE","WE_HAVE_A_TWO_BY_TWO","CompoundGlyph","idOffsets","push","old2new","cache","loca","lengthOf","offsetOf","numberOfContours","glyph","glyphs","oldIds","render","NameTable","NameEntry","text","platformID","platformSpecificID","languageID","nameID","count","stringOffset","nameRecords","strings","rec","postscriptEntry","postscriptName","replace","psName","strCount","strTable","list","j","str","PostTable","POSTSCRIPT_GLYPHS","split","italicAngle","readFixed_","underlinePosition","underlineThickness","isFixedPitch","minMemType42","maxMemType42","minMemType1","maxMemType1","numberOfGlyphs","glyphNameIndex","names","limit","readByte","code","index","mapping","indexes","post","glyphFor","indexOf","CmapTable","CmapEntry","codeMap","self","saveExcursion","language","segCount","endCode","startCode","idDelta","idRangeOffset","start","end","glyphId","ngroups","endCharCode","glyphCode","window","console","error","renderCharmap","ncid2ogid","ogid2ngid","codes","startCodes","endCodes","last","diff","new_gid","charcode","gid","delta","segCountX2","deltas","rangeOffsets","startGlyph","forEach","OS2Table","averageCharWidth","weightClass","widthClass","type","ySubscriptXSize","ySubscriptYSize","ySubscriptXOffset","ySubscriptYOffset","ySuperscriptXSize","ySuperscriptYSize","ySuperscriptXOffset","ySuperscriptYOffset","yStrikeoutSize","yStrikeoutPosition","familyClass","panose","charRange","vendorID","selection","firstCharIndex","lastCharIndex","winAscent","winDescent","codePageRange","xHeight","capHeight","defaultChar","breakChar","maxContext","subsetTag","nextSubsetTag","ret","String","fromCharCode","charCodeAt","Subfont","font","subset","unicodes","ngid2ogid","next","firstChar","nextGid","ch","reduce","use","old_gid","cmap","result","glyf","compound","glyphsFor","parseInt","new_gid_ids","old_gid_ids","lastChar","hmtx","os2","directory","len","cid","TTFFont","contents","numFonts","readTable","scale"],"mappings":"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","sourcesContent":["/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */\n/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */\n/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */\n/* eslint-disable no-param-reassign, no-var, block-scoped-var */\n\n/*****************************************************************************\\\n *\n * The code in this file, although written from scratch, is influenced by the\n * TrueType parser/encoder in PDFKit -- http://pdfkit.org/ (a CoffeeScript\n * library for producing PDF files).\n *\n * PDFKit is (c) Devon Govett 2014 and released under the MIT License.\n *\n\\*****************************************************************************/\n\nimport { BinaryStream, ucs2decode } from \"./utils\";\n\nfunction hasOwnProperty(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction sortedKeys(obj) {\n    return Object.keys(obj).sort(function(a, b){ return a - b; }).map(parseFloat);\n}\n\n///\nclass Directory {\n    constructor(data) {\n        this.raw = data;\n        this.scalerType = data.readLong();\n        this.tableCount = data.readShort();\n        this.searchRange = data.readShort();\n        this.entrySelector = data.readShort();\n        this.rangeShift = data.readShort();\n\n        var tables = this.tables = {};\n        for (var i = 0; i < this.tableCount; ++i) {\n            var entry = {\n                tag      : data.readString(4),\n                checksum : data.readLong(),\n                offset   : data.readLong(),\n                length   : data.readLong()\n            };\n            tables[entry.tag] = entry;\n        }\n    }\n\n    readTable(name, Ctor) {\n        var def = this.tables[name];\n        if (!def) {\n            throw new Error(\"Table \" + name + \" not found in directory\");\n        }\n        return (this[name] = def.table = new Ctor(this, def));\n    }\n\n    render(tables) {\n        var tableCount = Object.keys(tables).length;\n\n        var maxpow2 = Math.pow(2, Math.floor(Math.log(tableCount) / Math.LN2));\n        var searchRange = maxpow2 * 16;\n        var entrySelector = Math.floor(Math.log(maxpow2) / Math.LN2);\n        var rangeShift = tableCount * 16 - searchRange;\n\n        var out = BinaryStream();\n        out.writeLong(this.scalerType);\n        out.writeShort(tableCount);\n        out.writeShort(searchRange);\n        out.writeShort(entrySelector);\n        out.writeShort(rangeShift);\n\n        var directoryLength = tableCount * 16;\n        var offset = out.offset() + directoryLength;\n        var headOffset = null;\n        var tableData = BinaryStream();\n\n        for (var tag in tables) {\n            if (hasOwnProperty(tables, tag)) {\n                var table = tables[tag];\n\n                out.writeString(tag);\n                out.writeLong(this.checksum(table));\n                out.writeLong(offset);\n                out.writeLong(table.length);\n\n                tableData.write(table);\n                if (tag == \"head\") {\n                    headOffset = offset;\n                }\n                offset += table.length;\n\n                while (offset % 4) {\n                    tableData.writeByte(0);\n                    offset++;\n                }\n            }\n        }\n\n        out.write(tableData.get());\n        var sum = this.checksum(out.get());\n        var adjustment = 0xB1B0AFBA - sum;\n\n        out.offset(headOffset + 8);\n        out.writeLong(adjustment);\n        return out.get();\n    }\n\n    checksum(data) {\n        data = BinaryStream(data);\n        var sum = 0;\n        while (!data.eof()) {\n            sum += data.readLong();\n        }\n        return sum & 0xFFFFFFFF;\n    }\n}\n\nclass Table {\n    constructor(file, def) {\n        this.definition = def;\n        this.length = def.length;\n        this.offset = def.offset;\n        this.file = file;\n        this.rawData = file.raw;\n        this.parse(file.raw);\n    }\n\n    raw() {\n        return this.rawData.slice(this.offset, this.length);\n    }\n\n    parse() {} // abstract\n}\n\nclass HeadTable extends Table {\n    parse(data) {\n        data.offset(this.offset);\n        this.version             = data.readLong();\n        this.revision            = data.readLong();\n        this.checkSumAdjustment  = data.readLong();\n        this.magicNumber         = data.readLong();\n        this.flags               = data.readShort();\n        this.unitsPerEm          = data.readShort();\n        this.created             = data.read(8);\n        this.modified            = data.read(8);\n\n        this.xMin = data.readShort_();\n        this.yMin = data.readShort_();\n        this.xMax = data.readShort_();\n        this.yMax = data.readShort_();\n\n        this.macStyle           = data.readShort();\n        this.lowestRecPPEM      = data.readShort();\n        this.fontDirectionHint  = data.readShort_();\n        this.indexToLocFormat   = data.readShort_();\n        this.glyphDataFormat    = data.readShort_();\n    }\n\n    render(indexToLocFormat) {\n        var out = BinaryStream();\n        out.writeLong(this.version);\n        out.writeLong(this.revision);\n        out.writeLong(0);       // checksum adjustment; shall be computed later\n        out.writeLong(this.magicNumber);\n        out.writeShort(this.flags);\n        out.writeShort(this.unitsPerEm);\n        out.write(this.created);\n        out.write(this.modified);\n        out.writeShort_(this.xMin);\n        out.writeShort_(this.yMin);\n        out.writeShort_(this.xMax);\n        out.writeShort_(this.yMax);\n        out.writeShort(this.macStyle);\n        out.writeShort(this.lowestRecPPEM);\n        out.writeShort_(this.fontDirectionHint);\n        out.writeShort_(indexToLocFormat); // this will depend on the `loca` table\n        out.writeShort_(this.glyphDataFormat);\n        return out.get();\n    }\n}\n\nclass LocaTable extends Table {\n    parse(data) {\n        data.offset(this.offset);\n        var format = this.file.head.indexToLocFormat;\n        if (format === 0) {\n            this.offsets = data.times(this.length / 2, function(){\n                return 2 * data.readShort();\n            });\n        } else {\n            this.offsets = data.times(this.length / 4, data.readLong);\n        }\n    }\n\n    offsetOf(id) {\n        return this.offsets[id];\n    }\n\n    lengthOf(id) {\n        return this.offsets[id + 1] - this.offsets[id];\n    }\n\n    render(offsets) {\n        var out = BinaryStream();\n        var needsLongFormat = offsets[offsets.length - 1] > 0xFFFF;\n        for (var i = 0; i < offsets.length; ++i) {\n            if (needsLongFormat) {\n                out.writeLong(offsets[i]);\n            } else {\n                out.writeShort(offsets[i] / 2);\n            }\n        }\n        return {\n            format: needsLongFormat ? 1 : 0,\n            table: out.get()\n        };\n    }\n}\n\nclass HheaTable extends Table {\n    parse(data) {\n        data.offset(this.offset);\n\n        this.version              = data.readLong();\n        this.ascent               = data.readShort_();\n        this.descent              = data.readShort_();\n        this.lineGap              = data.readShort_();\n        this.advanceWidthMax      = data.readShort();\n        this.minLeftSideBearing   = data.readShort_();\n        this.minRightSideBearing  = data.readShort_();\n        this.xMaxExtent           = data.readShort_();\n        this.caretSlopeRise       = data.readShort_();\n        this.caretSlopeRun        = data.readShort_();\n        this.caretOffset          = data.readShort_();\n\n        data.skip(4 * 2);       // reserved\n\n        this.metricDataFormat     = data.readShort_();\n        this.numOfLongHorMetrics  = data.readShort();\n    }\n\n    render(ids) {\n        var out = BinaryStream();\n        out.writeLong(this.version);\n        out.writeShort_(this.ascent);\n        out.writeShort_(this.descent);\n        out.writeShort_(this.lineGap);\n        out.writeShort(this.advanceWidthMax);\n        out.writeShort_(this.minLeftSideBearing);\n        out.writeShort_(this.minRightSideBearing);\n        out.writeShort_(this.xMaxExtent);\n        out.writeShort_(this.caretSlopeRise);\n        out.writeShort_(this.caretSlopeRun);\n        out.writeShort_(this.caretOffset);\n\n        out.write([ 0, 0, 0, 0, 0, 0, 0, 0 ]); // reserved bytes\n\n        out.writeShort_(this.metricDataFormat);\n        out.writeShort(ids.length);\n        return out.get();\n    }\n}\n\nclass MaxpTable extends Table {\n    parse(data) {\n        data.offset(this.offset);\n        this.version = data.readLong();\n        this.numGlyphs = data.readShort();\n        this.maxPoints = data.readShort();\n        this.maxContours = data.readShort();\n        this.maxComponentPoints = data.readShort();\n        this.maxComponentContours = data.readShort();\n        this.maxZones = data.readShort();\n        this.maxTwilightPoints = data.readShort();\n        this.maxStorage = data.readShort();\n        this.maxFunctionDefs = data.readShort();\n        this.maxInstructionDefs = data.readShort();\n        this.maxStackElements = data.readShort();\n        this.maxSizeOfInstructions = data.readShort();\n        this.maxComponentElements = data.readShort();\n        this.maxComponentDepth = data.readShort();\n    }\n\n    render(glyphIds) {\n        var out = BinaryStream();\n        out.writeLong(this.version);\n        out.writeShort(glyphIds.length);\n        out.writeShort(this.maxPoints);\n        out.writeShort(this.maxContours);\n        out.writeShort(this.maxComponentPoints);\n        out.writeShort(this.maxComponentContours);\n        out.writeShort(this.maxZones);\n        out.writeShort(this.maxTwilightPoints);\n        out.writeShort(this.maxStorage);\n        out.writeShort(this.maxFunctionDefs);\n        out.writeShort(this.maxInstructionDefs);\n        out.writeShort(this.maxStackElements);\n        out.writeShort(this.maxSizeOfInstructions);\n        out.writeShort(this.maxComponentElements);\n        out.writeShort(this.maxComponentDepth);\n        return out.get();\n    }\n}\n\nclass HmtxTable extends Table {\n    parse(data) {\n        data.offset(this.offset);\n        var dir = this.file, hhea = dir.hhea;\n        this.metrics = data.times(hhea.numOfLongHorMetrics, function(){\n            return {\n                advance: data.readShort(),\n                lsb: data.readShort_()\n            };\n        });\n        var lsbCount = dir.maxp.numGlyphs - dir.hhea.numOfLongHorMetrics;\n        this.leftSideBearings = data.times(lsbCount, data.readShort_);\n    }\n\n    forGlyph(id) {\n        var metrics = this.metrics;\n        var n = metrics.length;\n        if (id < n) {\n            return metrics[id];\n        }\n        return {\n            advance: metrics[n - 1].advance,\n            lsb: this.leftSideBearings[id - n]\n        };\n    }\n\n    render(glyphIds) {\n        var out = BinaryStream();\n        for (var i = 0; i < glyphIds.length; ++i) {\n            var m = this.forGlyph(glyphIds[i]);\n            out.writeShort(m.advance);\n            out.writeShort_(m.lsb);\n        }\n        return out.get();\n    }\n}\n\nvar GlyfTable = (function(){\n    class SimpleGlyph {\n        get compound() {\n            return false;\n        }\n\n        constructor(raw) {\n            this.raw = raw;\n        }\n\n        render() {\n            return this.raw.get();\n        }\n    }\n\n    var ARG_1_AND_2_ARE_WORDS     = 0x0001;\n    var WE_HAVE_A_SCALE           = 0x0008;\n    var MORE_COMPONENTS           = 0x0020;\n    var WE_HAVE_AN_X_AND_Y_SCALE  = 0x0040;\n    var WE_HAVE_A_TWO_BY_TWO      = 0x0080;\n    //var WE_HAVE_INSTRUCTIONS      = 0x0100;\n\n    class CompoundGlyph {\n        get compound() {\n            return true;\n        }\n\n        constructor(data) {\n            this.raw = data;\n            var ids = this.glyphIds = [];\n            var offsets = this.idOffsets = [];\n            while (true) {          // eslint-disable-line no-constant-condition\n                var flags = data.readShort();\n                offsets.push(data.offset());\n                ids.push(data.readShort());\n\n                if (!(flags & MORE_COMPONENTS)) {\n                    break;\n                }\n\n                data.skip(flags & ARG_1_AND_2_ARE_WORDS ? 4 : 2);\n\n                if (flags & WE_HAVE_A_TWO_BY_TWO) {\n                    data.skip(8);\n                } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {\n                    data.skip(4);\n                } else if (flags & WE_HAVE_A_SCALE) {\n                    data.skip(2);\n                }\n            }\n        }\n\n        render(old2new) {\n            var out = BinaryStream(this.raw.get());\n            for (var i = 0; i < this.glyphIds.length; ++i) {\n                var id = this.glyphIds[i];\n                out.offset(this.idOffsets[i]);\n                out.writeShort(old2new[id]);\n            }\n            return out.get();\n        }\n    }\n\n    return class extends Table {\n        parse() {\n            this.cache = {};\n        }\n\n        glyphFor(id) {\n            var cache = this.cache;\n            if (hasOwnProperty(cache, id)) {\n                return cache[id];\n            }\n\n            var loca = this.file.loca;\n            var length = loca.lengthOf(id);\n\n            if (length === 0) {\n                return (cache[id] = null);\n            }\n\n            var data = this.rawData;\n            var offset = this.offset + loca.offsetOf(id);\n            var raw = BinaryStream(data.slice(offset, length));\n\n            var numberOfContours = raw.readShort_();\n            var xMin = raw.readShort_();\n            var yMin = raw.readShort_();\n            var xMax = raw.readShort_();\n            var yMax = raw.readShort_();\n\n            var glyph = cache[id] = numberOfContours < 0 ? new CompoundGlyph(raw) : new SimpleGlyph(raw);\n\n            glyph.numberOfContours = numberOfContours;\n            glyph.xMin = xMin;\n            glyph.yMin = yMin;\n            glyph.xMax = xMax;\n            glyph.yMax = yMax;\n\n            return glyph;\n        }\n\n        render(glyphs, oldIds, old2new) {\n            var out = BinaryStream(), offsets = [];\n            for (var i = 0; i < oldIds.length; ++i) {\n                var id = oldIds[i];\n                var glyph = glyphs[id];\n                if (out.offset() % 2) {\n                    out.writeByte(0);\n                }\n                offsets.push(out.offset());\n                if (glyph) {\n                    out.write(glyph.render(old2new));\n                }\n            }\n            if (out.offset() % 2) {\n                out.writeByte(0);\n            }\n            offsets.push(out.offset());\n            return {\n                table: out.get(),\n                offsets: offsets\n            };\n        }\n    };\n}());\n\nvar NameTable = (function(){\n    class NameEntry {\n        constructor(text, entry) {\n            this.text = text;\n            this.length = text.length;\n            this.platformID = entry.platformID;\n            this.platformSpecificID = entry.platformSpecificID;\n            this.languageID = entry.languageID;\n            this.nameID = entry.nameID;\n        }\n    }\n\n    return class extends Table {\n        parse(data) {\n            data.offset(this.offset);\n            data.readShort();   // format\n            var count = data.readShort();\n            var stringOffset = this.offset + data.readShort();\n            var nameRecords = data.times(count, function(){\n                return {\n                    platformID         : data.readShort(),\n                    platformSpecificID : data.readShort(),\n                    languageID         : data.readShort(),\n                    nameID             : data.readShort(),\n                    length             : data.readShort(),\n                    offset             : data.readShort() + stringOffset\n                };\n            });\n            var strings = this.strings = {};\n            for (var i = 0; i < nameRecords.length; ++i) {\n                var rec = nameRecords[i];\n                data.offset(rec.offset);\n                var text = data.readString(rec.length);\n                if (!strings[rec.nameID]) {\n                    strings[rec.nameID] = [];\n                }\n                strings[rec.nameID].push(new NameEntry(text, rec));\n            }\n            this.postscriptEntry = strings[6][0];\n            this.postscriptName = this.postscriptEntry.text.replace(/[^\\x20-\\x7F]/g, \"\");\n        }\n\n        render(psName) {\n            var strings = this.strings;\n            var strCount = 0;\n            for (var i in strings) {\n                if (hasOwnProperty(strings, i)) {\n                    strCount += strings[i].length;\n                }\n            }\n            var out = BinaryStream();\n            var strTable = BinaryStream();\n\n            out.writeShort(0);  // format\n            out.writeShort(strCount);\n            out.writeShort(6 + 12 * strCount); // stringOffset\n\n            for (i in strings) {\n                if (hasOwnProperty(strings, i)) {\n                    var list = i == 6 ? [\n                        new NameEntry(psName, this.postscriptEntry)\n                    ] : strings[i];\n                    for (var j = 0; j < list.length; ++j) {\n                        var str = list[j];\n                        out.writeShort(str.platformID);\n                        out.writeShort(str.platformSpecificID);\n                        out.writeShort(str.languageID);\n                        out.writeShort(str.nameID);\n                        out.writeShort(str.length);\n                        out.writeShort(strTable.offset());\n\n                        strTable.writeString(str.text);\n                    }\n                }\n            }\n\n            out.write(strTable.get());\n\n            return out.get();\n        }\n    };\n})();\n\nvar PostTable = (function(){\n    var POSTSCRIPT_GLYPHS = \".notdef .null nonmarkingreturn space exclam quotedbl numbersign dollar percent ampersand quotesingle parenleft parenright asterisk plus comma hyphen period slash zero one two three four five six seven eight nine colon semicolon less equal greater question at A B C D E F G H I J K L M N O P Q R S T U V W X Y Z bracketleft backslash bracketright asciicircum underscore grave a b c d e f g h i j k l m n o p q r s t u v w x y z braceleft bar braceright asciitilde Adieresis Aring Ccedilla Eacute Ntilde Odieresis Udieresis aacute agrave acircumflex adieresis atilde aring ccedilla eacute egrave ecircumflex edieresis iacute igrave icircumflex idieresis ntilde oacute ograve ocircumflex odieresis otilde uacute ugrave ucircumflex udieresis dagger degree cent sterling section bullet paragraph germandbls registered copyright trademark acute dieresis notequal AE Oslash infinity plusminus lessequal greaterequal yen mu partialdiff summation product pi integral ordfeminine ordmasculine Omega ae oslash questiondown exclamdown logicalnot radical florin approxequal Delta guillemotleft guillemotright ellipsis nonbreakingspace Agrave Atilde Otilde OE oe endash emdash quotedblleft quotedblright quoteleft quoteright divide lozenge ydieresis Ydieresis fraction currency guilsinglleft guilsinglright fi fl daggerdbl periodcentered quotesinglbase quotedblbase perthousand Acircumflex Ecircumflex Aacute Edieresis Egrave Iacute Icircumflex Idieresis Igrave Oacute Ocircumflex apple Ograve Uacute Ucircumflex Ugrave dotlessi circumflex tilde macron breve dotaccent ring cedilla hungarumlaut ogonek caron Lslash lslash Scaron scaron Zcaron zcaron brokenbar Eth eth Yacute yacute Thorn thorn minus multiply onesuperior twosuperior threesuperior onehalf onequarter threequarters franc Gbreve gbreve Idotaccent Scedilla scedilla Cacute cacute Ccaron ccaron dcroat\".split(/\\s+/g);\n\n    return class extends Table {\n        parse(data) {\n            data.offset(this.offset);\n\n            this.format = data.readLong();\n            this.italicAngle = data.readFixed_();\n            this.underlinePosition = data.readShort_();\n            this.underlineThickness = data.readShort_();\n            this.isFixedPitch = data.readLong();\n            this.minMemType42 = data.readLong();\n            this.maxMemType42 = data.readLong();\n            this.minMemType1 = data.readLong();\n            this.maxMemType1 = data.readLong();\n\n            var numberOfGlyphs;\n\n            switch (this.format) {\n              case 0x00010000:\n              case 0x00030000:\n                break;\n\n              case 0x00020000:\n                numberOfGlyphs = data.readShort();\n                this.glyphNameIndex = data.times(numberOfGlyphs, data.readShort);\n                this.names = [];\n                var limit = this.offset + this.length;\n                while (data.offset() < limit) {\n                    this.names.push(data.readString(data.readByte()));\n                }\n                break;\n\n              case 0x00025000:\n                numberOfGlyphs = data.readShort();\n                this.offsets = data.read(numberOfGlyphs);\n                break;\n\n              case 0x00040000:\n                this.map = data.times(this.file.maxp.numGlyphs, data.readShort);\n                break;\n            }\n        }\n\n        glyphFor(code) {\n            switch (this.format) {\n              case 0x00010000:\n                return POSTSCRIPT_GLYPHS[code] || \".notdef\";\n\n              case 0x00020000:\n                var index = this.glyphNameIndex[code];\n                if (index < POSTSCRIPT_GLYPHS.length) {\n                    return POSTSCRIPT_GLYPHS[index];\n                }\n                return this.names[index - POSTSCRIPT_GLYPHS.length] || \".notdef\";\n\n              case 0x00025000:\n\n              case 0x00030000:\n                return \".notdef\";\n\n              case 0x00040000:\n                return this.map[code] || 0xFFFF;\n            }\n        }\n\n        render(mapping) {\n            if (this.format == 0x00030000) {\n                return this.raw();\n            }\n\n            // keep original header, but set format to 2.0\n            var out = BinaryStream(this.rawData.slice(this.offset, 32));\n            out.writeLong(0x00020000);\n            out.offset(32);\n\n            var indexes = [];\n            var strings = [];\n\n            for (var i = 0; i < mapping.length; ++i) {\n                var id = mapping[i];\n                var post = this.glyphFor(id);\n                var index = POSTSCRIPT_GLYPHS.indexOf(post);\n                if (index >= 0) {\n                    indexes.push(index);\n                } else {\n                    indexes.push(POSTSCRIPT_GLYPHS.length + strings.length);\n                    strings.push(post);\n                }\n            }\n\n            out.writeShort(mapping.length);\n\n            for (i = 0; i < indexes.length; ++i) {\n                out.writeShort(indexes[i]);\n            }\n\n            for (i = 0; i < strings.length; ++i) {\n                out.writeByte(strings[i].length);\n                out.writeString(strings[i]);\n            }\n\n            return out.get();\n        }\n    };\n})();\n\nvar CmapTable = (function(){\n    class CmapEntry {\n        constructor(data, offset, codeMap) {\n            var self = this;\n            self.platformID = data.readShort();\n            self.platformSpecificID = data.readShort();\n            self.offset = offset + data.readLong();\n\n            data.saveExcursion(function(){\n                var code;\n                data.offset(self.offset);\n                self.format = data.readShort();\n\n                switch (self.format) {\n                case 0:\n                    self.length = data.readShort();\n                    self.language = data.readShort();\n                    for (var i = 0; i < 256; ++i) {\n                        codeMap[i] = data.readByte();\n                    }\n                    break;\n\n                case 4:\n                    self.length = data.readShort();\n                    self.language = data.readShort();\n                    var segCount = data.readShort() / 2;\n\n                    data.skip(6);       // searchRange, entrySelector, rangeShift\n                    var endCode = data.times(segCount, data.readShort);\n                    data.skip(2);       // reserved pad\n                    var startCode = data.times(segCount, data.readShort);\n                    var idDelta = data.times(segCount, data.readShort_);\n                    var idRangeOffset = data.times(segCount, data.readShort);\n\n                    var count = (self.length + self.offset - data.offset()) / 2;\n                    var glyphIds = data.times(count, data.readShort);\n\n                    for (i = 0; i < segCount; ++i) {\n                        var start = startCode[i], end = endCode[i];\n                        for (code = start; code <= end; ++code) {\n                            var glyphId;\n                            if (idRangeOffset[i] === 0) {\n                                glyphId = code + idDelta[i];\n                            } else {\n                                ///\n                                // When non-zero, idRangeOffset contains for each segment the byte offset of the Glyph ID\n                                // into the glyphIds table, from the *current* `i` cell of idRangeOffset.  In other words,\n                                // this offset spans from the first into the second array.  This works, because the arrays\n                                // are consecutive in the TTF file:\n                                //\n                                //     [ ...idRangeOffset... ][ ...glyphIds... ]\n                                //       ...... 48 ......       .... ID ....\n                                //              ^----- 48 bytes -----^\n                                //\n                                // (but I can't stop wondering why is it not just a plain index, possibly incremented by 1\n                                // so that we can have that special `zero` value.)\n                                //\n                                // The elements of idRangeOffset are even numbers, because both arrays contain 16-bit words,\n                                // yet the offset is in bytes.  That is why we divide it by 2.  Then we subtract the\n                                // remaining segments (segCount-i), and add the code-start offset, to which we need to add\n                                // the corresponding delta to get the actual glyph ID.\n                                ///\n                                var index = idRangeOffset[i] / 2 - (segCount - i) + (code - start);\n                                glyphId = glyphIds[index] || 0;\n                                if (glyphId !== 0) {\n                                    glyphId += idDelta[i];\n                                }\n                            }\n                            codeMap[code] = glyphId & 0xFFFF;\n                        }\n                    }\n                    break;\n\n                case 6:\n                    self.length = data.readShort();\n                    self.language = data.readShort();\n                    code = data.readShort();\n                    var length = data.readShort();\n                    while (length-- > 0) {\n                        codeMap[code++] = data.readShort();\n                    }\n                    break;\n\n                case 12:\n                    data.readShort(); // reserved\n                    self.length = data.readLong();\n                    self.language = data.readLong();\n                    var ngroups = data.readLong();\n                    while (ngroups-- > 0) {\n                        code = data.readLong();\n                        var endCharCode = data.readLong();\n                        var glyphCode = data.readLong();\n                        while (code <= endCharCode) {\n                            codeMap[code++] = glyphCode++;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (window.console) {\n                        window.console.error(\"Unhandled CMAP format: \" + self.format);\n                    }\n                }\n            });\n        }\n    }\n\n    function renderCharmap(ncid2ogid, ogid2ngid) {\n        var codes = sortedKeys(ncid2ogid);\n        var startCodes = [];\n        var endCodes = [];\n        var last = null;\n        var diff = null;\n\n        function new_gid(charcode) {\n            return ogid2ngid[ncid2ogid[charcode]];\n        }\n\n        for (var i = 0; i < codes.length; ++i) {\n            var code = codes[i];\n            var gid = new_gid(code);\n            var delta = gid - code;\n            if (last == null || delta !== diff) {\n                if (last) {\n                    endCodes.push(last);\n                }\n                startCodes.push(code);\n                diff = delta;\n            }\n            last = code;\n        }\n\n        if (last) {\n            endCodes.push(last);\n        }\n        endCodes.push(0xFFFF);\n        startCodes.push(0xFFFF);\n\n        var segCount = startCodes.length;\n        var segCountX2 = segCount * 2;\n        var searchRange = 2 * Math.pow(2, Math.floor(Math.log(segCount) / Math.LN2));\n        var entrySelector = Math.log(searchRange / 2) / Math.LN2;\n        var rangeShift = segCountX2 - searchRange;\n\n        var deltas = [];\n        var rangeOffsets = [];\n        var glyphIds = [];\n\n        for (i = 0; i < segCount; ++i) {\n            var startCode = startCodes[i];\n            var endCode = endCodes[i];\n            if (startCode == 0xFFFF) {\n                deltas.push(0);\n                rangeOffsets.push(0);\n                break;\n            }\n            var startGlyph = new_gid(startCode);\n            if (startCode - startGlyph >= 0x8000) {\n                deltas.push(0);\n                rangeOffsets.push(2 * (glyphIds.length + segCount - i));\n                for (var j = startCode; j <= endCode; ++j) {\n                    glyphIds.push(new_gid(j));\n                }\n            } else {\n                deltas.push(startGlyph - startCode);\n                rangeOffsets.push(0);\n            }\n        }\n\n        var out = BinaryStream();\n\n        out.writeShort(3);      // platformID\n        out.writeShort(1);      // platformSpecificID\n        out.writeLong(12);      // offset\n        out.writeShort(4);      // format\n        out.writeShort(16 + segCount * 8 + glyphIds.length * 2); // length\n        out.writeShort(0);      // language\n        out.writeShort(segCountX2);\n        out.writeShort(searchRange);\n        out.writeShort(entrySelector);\n        out.writeShort(rangeShift);\n\n        endCodes.forEach(out.writeShort);\n        out.writeShort(0);      // reserved pad\n        startCodes.forEach(out.writeShort);\n        deltas.forEach(out.writeShort_);\n        rangeOffsets.forEach(out.writeShort);\n        glyphIds.forEach(out.writeShort);\n\n        return out.get();\n    }\n\n    return class extends Table {\n        parse(data) {\n            var self = this;\n            var offset = self.offset;\n            data.offset(offset);\n            self.codeMap = {};\n            self.version = data.readShort();\n            var tableCount = data.readShort();\n            self.tables = data.times(tableCount, function(){\n                return new CmapEntry(data, offset, self.codeMap);\n            });\n        }\n\n        static render(ncid2ogid, ogid2ngid) {\n            var out = BinaryStream();\n            out.writeShort(0);  // version\n            out.writeShort(1);  // tableCount\n            out.write(renderCharmap(ncid2ogid, ogid2ngid));\n            return out.get();\n        }\n    };\n\n})();\n\nclass OS2Table extends Table {\n    parse(data) {\n        data.offset(this.offset);\n        this.version = data.readShort();\n        this.averageCharWidth = data.readShort_();\n        this.weightClass = data.readShort();\n        this.widthClass = data.readShort();\n        this.type = data.readShort();\n        this.ySubscriptXSize = data.readShort_();\n        this.ySubscriptYSize = data.readShort_();\n        this.ySubscriptXOffset = data.readShort_();\n        this.ySubscriptYOffset = data.readShort_();\n        this.ySuperscriptXSize = data.readShort_();\n        this.ySuperscriptYSize = data.readShort_();\n        this.ySuperscriptXOffset = data.readShort_();\n        this.ySuperscriptYOffset = data.readShort_();\n        this.yStrikeoutSize = data.readShort_();\n        this.yStrikeoutPosition = data.readShort_();\n        this.familyClass = data.readShort_();\n\n        this.panose = data.times(10, data.readByte);\n        this.charRange = data.times(4, data.readLong);\n\n        this.vendorID = data.readString(4);\n        this.selection = data.readShort();\n        this.firstCharIndex = data.readShort();\n        this.lastCharIndex = data.readShort();\n\n        if (this.version > 0) {\n            this.ascent = data.readShort_();\n            this.descent = data.readShort_();\n            this.lineGap = data.readShort_();\n            this.winAscent = data.readShort();\n            this.winDescent = data.readShort();\n            this.codePageRange = data.times(2, data.readLong);\n\n            if (this.version > 1) {\n                this.xHeight = data.readShort();\n                this.capHeight = data.readShort();\n                this.defaultChar = data.readShort();\n                this.breakChar = data.readShort();\n                this.maxContext = data.readShort();\n            }\n        }\n    }\n\n    render() {\n        return this.raw();\n    }\n}\n\nvar subsetTag = 100000;\n\nfunction nextSubsetTag() {\n    var ret = \"\", n = String(subsetTag);\n    for (var i = 0; i < n.length; ++i) {\n        ret += String.fromCharCode(n.charCodeAt(i) - 48 + 65);\n    }\n    ++subsetTag;\n    return ret;\n}\n\nclass Subfont {\n    constructor(font) {\n        this.font = font;\n        this.subset = {};\n        this.unicodes = {};\n        this.ogid2ngid = { 0: 0 };\n        this.ngid2ogid = { 0: 0 };\n        this.ncid2ogid = {};\n        this.next = this.firstChar = 1;\n        this.nextGid = 1;\n        this.psName = nextSubsetTag() + \"+\" + this.font.psName;\n    }\n\n    use(ch) {\n        var self = this;\n        if (typeof ch == \"string\") {\n            return ucs2decode(ch).reduce(function(ret, code){\n                return ret + String.fromCharCode(self.use(code));\n            }, \"\");\n        }\n        var code = self.unicodes[ch];\n        if (!code) {\n            code = self.next++;\n            self.subset[code] = ch;\n            self.unicodes[ch] = code;\n\n            // generate new GID (glyph ID) and maintain newGID ->\n            // oldGID and back mappings\n            var old_gid = self.font.cmap.codeMap[ch];\n            if (old_gid) {\n                self.ncid2ogid[code] = old_gid;\n                if (self.ogid2ngid[old_gid] == null) {\n                    var new_gid = self.nextGid++;\n                    self.ogid2ngid[old_gid] = new_gid;\n                    self.ngid2ogid[new_gid] = old_gid;\n                }\n            }\n        }\n        return code;\n    }\n\n    encodeText(text) {\n        return this.use(text);\n    }\n\n    glyphIds() {\n        return sortedKeys(this.ogid2ngid);\n    }\n\n    glyphsFor(glyphIds, result) {\n        if (!result) {\n            result = {};\n        }\n        for (var i = 0; i < glyphIds.length; ++i) {\n            var id = glyphIds[i];\n            if (!result[id]) {\n                var glyph = result[id] = this.font.glyf.glyphFor(id);\n                if (glyph && glyph.compound) {\n                    this.glyphsFor(glyph.glyphIds, result);\n                }\n            }\n        }\n        return result;\n    }\n\n    render() {\n        var glyphs = this.glyphsFor(this.glyphIds());\n\n        // add missing sub-glyphs\n        for (var old_gid in glyphs) {\n            if (hasOwnProperty(glyphs, old_gid)) {\n                old_gid = parseInt(old_gid, 10);\n                if (this.ogid2ngid[old_gid] == null) {\n                    var new_gid = this.nextGid++;\n                    this.ogid2ngid[old_gid] = new_gid;\n                    this.ngid2ogid[new_gid] = old_gid;\n                }\n            }\n        }\n\n        // must obtain old_gid_ids in an order matching sorted\n        // new_gid_ids\n        var new_gid_ids = sortedKeys(this.ngid2ogid);\n        var old_gid_ids = new_gid_ids.map(function(id){\n            return this.ngid2ogid[id];\n        }, this);\n\n        var font = this.font;\n        var glyf = font.glyf.render(glyphs, old_gid_ids, this.ogid2ngid);\n        var loca = font.loca.render(glyf.offsets);\n\n        this.lastChar = this.next - 1;\n\n        var tables = {\n            \"cmap\" : CmapTable.render(this.ncid2ogid, this.ogid2ngid),\n            \"glyf\" : glyf.table,\n            \"loca\" : loca.table,\n            \"hmtx\" : font.hmtx.render(old_gid_ids),\n            \"hhea\" : font.hhea.render(old_gid_ids),\n            \"maxp\" : font.maxp.render(old_gid_ids),\n            \"post\" : font.post.render(old_gid_ids),\n            \"name\" : font.name.render(this.psName),\n            \"head\" : font.head.render(loca.format),\n            \"OS/2\" : font.os2.render()\n        };\n\n        return this.font.directory.render(tables);\n    }\n\n    cidToGidMap() {\n        var out = BinaryStream(), len = 0;\n        for (var cid = this.firstChar; cid < this.next; ++cid) {\n            while (len < cid) {\n                out.writeShort(0);\n                len++;\n            }\n            var old_gid = this.ncid2ogid[cid];\n            if (old_gid) {\n                var new_gid = this.ogid2ngid[old_gid];\n                out.writeShort(new_gid);\n            } else {\n                out.writeShort(0);\n            }\n            len++;\n        }\n        return out.get();\n    }\n}\n\nclass TTFFont {\n    constructor(rawData, name) {\n        var self = this;\n        var data = self.contents = BinaryStream(rawData);\n        if (data.readString(4) == \"ttcf\") {\n            var offset;\n            const parse = function() {\n                data.offset(offset);\n                self.parse();\n            };\n            if (!name) {\n                throw new Error(\"Must specify a name for TTC files\");\n            }\n            data.readLong();        // version\n            var numFonts = data.readLong();\n            for (var i = 0; i < numFonts; ++i) {\n                offset = data.readLong();\n                data.saveExcursion(parse);\n                if (self.psName == name) {\n                    return;\n                }\n            }\n            throw new Error(\"Font \" + name + \" not found in collection\");\n        } else {\n            data.offset(0);\n            self.parse();\n        }\n    }\n\n    parse() {\n        var dir = this.directory = new Directory(this.contents);\n\n        this.head = dir.readTable(\"head\", HeadTable);\n        this.loca = dir.readTable(\"loca\", LocaTable);\n        this.hhea = dir.readTable(\"hhea\", HheaTable);\n        this.maxp = dir.readTable(\"maxp\", MaxpTable);\n        this.hmtx = dir.readTable(\"hmtx\", HmtxTable);\n        this.glyf = dir.readTable(\"glyf\", GlyfTable);\n        this.name = dir.readTable(\"name\", NameTable);\n        this.post = dir.readTable(\"post\", PostTable);\n        this.cmap = dir.readTable(\"cmap\", CmapTable);\n        this.os2  = dir.readTable(\"OS/2\", OS2Table);\n\n        this.psName = this.name.postscriptName;\n        this.ascent = this.os2.ascent || this.hhea.ascent;\n        this.descent = this.os2.descent || this.hhea.descent;\n        this.lineGap = this.os2.lineGap || this.hhea.lineGap;\n        this.scale = 1000 / this.head.unitsPerEm;\n    }\n\n    widthOfGlyph(glyph) {\n        return this.hmtx.forGlyph(glyph).advance * this.scale;\n    }\n\n    makeSubset() {\n        return new Subfont(this);\n    }\n}\n\nexport { TTFFont };\n"]},"metadata":{},"sourceType":"module"}