{"ast":null,"code":"import { fieldList } from './field-list';\nvar setterCache = {}; // tslint:disable-next-line:no-string-literal\n\nsetterCache['undefined'] = function (obj) {\n  return obj;\n};\n\nvar defaultValue = function defaultValue(nextField, options) {\n  return options && options.arrays && !isNaN(Number(nextField)) ? [] : {};\n};\n/**\n * @hidden\n */\n\n\nexport function setter(field) {\n  if (setterCache[field]) {\n    return setterCache[field];\n  }\n\n  var fields = fieldList(field);\n\n  setterCache[field] = function (obj, value, options) {\n    var root = obj;\n    var depth = fields.length - 1;\n\n    for (var idx = 0; idx < depth && root; idx++) {\n      root = root[fields[idx]] = root[fields[idx]] || defaultValue(fields[idx + 1], options);\n    }\n\n    root[fields[depth]] = value;\n  };\n\n  return setterCache[field];\n}","map":{"version":3,"sources":["/home/datquocngo/Project/UET/gts-fe/node_modules/@progress/kendo-common/dist/es2015/accessors/setter.js"],"names":["fieldList","setterCache","obj","defaultValue","nextField","options","arrays","isNaN","Number","setter","field","fields","value","root","depth","length","idx"],"mappings":"AAAA,SAASA,SAAT,QAA0B,cAA1B;AACA,IAAMC,WAAW,GAAG,EAApB,C,CACA;;AACAA,WAAW,CAAC,WAAD,CAAX,GAA2B,UAAAC,GAAG;AAAA,SAAIA,GAAJ;AAAA,CAA9B;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAAYC,OAAZ;AAAA,SAAwBA,OAAO,IAAIA,OAAO,CAACC,MAAnB,IAA6B,CAACC,KAAK,CAACC,MAAM,CAACJ,SAAD,CAAP,CAAnC,GAAyD,EAAzD,GAA8D,EAAtF;AAAA,CAArB;AACA;;;;;AAGA,OAAO,SAASK,MAAT,CAAgBC,KAAhB,EAAuB;AAC1B,MAAIT,WAAW,CAACS,KAAD,CAAf,EAAwB;AACpB,WAAOT,WAAW,CAACS,KAAD,CAAlB;AACH;;AACD,MAAMC,MAAM,GAAGX,SAAS,CAACU,KAAD,CAAxB;;AACAT,EAAAA,WAAW,CAACS,KAAD,CAAX,GAAqB,UAACR,GAAD,EAAMU,KAAN,EAAaP,OAAb,EAAyB;AAC1C,QAAIQ,IAAI,GAAGX,GAAX;AACA,QAAMY,KAAK,GAAGH,MAAM,CAACI,MAAP,GAAgB,CAA9B;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,KAAN,IAAeD,IAAjC,EAAuCG,GAAG,EAA1C,EAA8C;AAC1CH,MAAAA,IAAI,GAAGA,IAAI,CAACF,MAAM,CAACK,GAAD,CAAP,CAAJ,GAAoBH,IAAI,CAACF,MAAM,CAACK,GAAD,CAAP,CAAJ,IAAqBb,YAAY,CAACQ,MAAM,CAACK,GAAG,GAAG,CAAP,CAAP,EAAkBX,OAAlB,CAA5D;AACH;;AACDQ,IAAAA,IAAI,CAACF,MAAM,CAACG,KAAD,CAAP,CAAJ,GAAsBF,KAAtB;AACH,GAPD;;AAQA,SAAOX,WAAW,CAACS,KAAD,CAAlB;AACH","sourcesContent":["import { fieldList } from './field-list';\nconst setterCache = {};\n// tslint:disable-next-line:no-string-literal\nsetterCache['undefined'] = obj => obj;\nconst defaultValue = (nextField, options) => options && options.arrays && !isNaN(Number(nextField)) ? [] : {};\n/**\n * @hidden\n */\nexport function setter(field) {\n    if (setterCache[field]) {\n        return setterCache[field];\n    }\n    const fields = fieldList(field);\n    setterCache[field] = (obj, value, options) => {\n        let root = obj;\n        const depth = fields.length - 1;\n        for (let idx = 0; idx < depth && root; idx++) {\n            root = root[fields[idx]] = root[fields[idx]] || defaultValue(fields[idx + 1], options);\n        }\n        root[fields[depth]] = value;\n    };\n    return setterCache[field];\n}\n"]},"metadata":{},"sourceType":"module"}