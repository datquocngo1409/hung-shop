{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport LinearGradient from '../gradients/linear-gradient';\nimport RadialGradient from '../gradients/radial-gradient';\nimport LinearGradientNode from './linear-gradient-node';\nimport RadialGradientNode from './radial-gradient-node';\nimport Node from './node';\nimport ClipNode from './clip-node';\n\nvar DefinitionNode = /*#__PURE__*/function (_Node) {\n  _inherits(DefinitionNode, _Node);\n\n  var _super = _createSuper(DefinitionNode);\n\n  function DefinitionNode() {\n    var _this;\n\n    _classCallCheck(this, DefinitionNode);\n\n    _this = _super.call(this);\n    _this.definitionMap = {};\n    return _this;\n  }\n\n  _createClass(DefinitionNode, [{\n    key: \"attachTo\",\n    value: function attachTo(domElement) {\n      this.element = domElement;\n    }\n  }, {\n    key: \"template\",\n    value: function template() {\n      return \"<defs>\".concat(this.renderChildren(), \"</defs>\");\n    }\n  }, {\n    key: \"definitionChange\",\n    value: function definitionChange(e) {\n      var definitions = e.definitions,\n          action = e.action;\n\n      if (action === \"add\") {\n        this.addDefinitions(definitions);\n      } else if (action === \"remove\") {\n        this.removeDefinitions(definitions);\n      }\n    }\n  }, {\n    key: \"createDefinition\",\n    value: function createDefinition(type, item) {\n      var nodeType;\n\n      if (type === \"clip\") {\n        nodeType = ClipNode;\n      } else if (type === \"fill\") {\n        if (item instanceof LinearGradient) {\n          nodeType = LinearGradientNode;\n        } else if (item instanceof RadialGradient) {\n          nodeType = RadialGradientNode;\n        }\n      }\n\n      return new nodeType(item);\n    }\n  }, {\n    key: \"addDefinitions\",\n    value: function addDefinitions(definitions) {\n      for (var field in definitions) {\n        this.addDefinition(field, definitions[field]);\n      }\n    }\n  }, {\n    key: \"addDefinition\",\n    value: function addDefinition(type, srcElement) {\n      var element = this.element,\n          definitionMap = this.definitionMap;\n      var id = srcElement.id;\n      var mapItem = definitionMap[id];\n\n      if (!mapItem) {\n        var node = this.createDefinition(type, srcElement);\n        definitionMap[id] = {\n          element: node,\n          count: 1\n        };\n        this.append(node);\n\n        if (element) {\n          node.attachTo(this.element);\n        }\n      } else {\n        mapItem.count++;\n      }\n    }\n  }, {\n    key: \"removeDefinitions\",\n    value: function removeDefinitions(definitions) {\n      for (var field in definitions) {\n        this.removeDefinition(definitions[field]);\n      }\n    }\n  }, {\n    key: \"removeDefinition\",\n    value: function removeDefinition(srcElement) {\n      var definitionMap = this.definitionMap;\n      var id = srcElement.id;\n      var mapItem = definitionMap[id];\n\n      if (mapItem) {\n        mapItem.count--;\n\n        if (mapItem.count === 0) {\n          this.remove(this.childNodes.indexOf(mapItem.element), 1);\n          delete definitionMap[id];\n        }\n      }\n    }\n  }]);\n\n  return DefinitionNode;\n}(Node);\n\nexport default DefinitionNode;","map":{"version":3,"sources":["/home/datquocngo/Project/Hung/gts-fe/node_modules/@progress/kendo-drawing/dist/es2015/svg/definition-node.js"],"names":["LinearGradient","RadialGradient","LinearGradientNode","RadialGradientNode","Node","ClipNode","DefinitionNode","definitionMap","domElement","element","renderChildren","e","definitions","action","addDefinitions","removeDefinitions","type","item","nodeType","field","addDefinition","srcElement","id","mapItem","node","createDefinition","count","append","attachTo","removeDefinition","remove","childNodes","indexOf"],"mappings":"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","sourcesContent":["import LinearGradient from '../gradients/linear-gradient';\nimport RadialGradient from '../gradients/radial-gradient';\nimport LinearGradientNode from './linear-gradient-node';\nimport RadialGradientNode from './radial-gradient-node';\nimport Node from './node';\nimport ClipNode from './clip-node';\n\nclass DefinitionNode extends Node {\n    constructor() {\n        super();\n        this.definitionMap = {};\n    }\n\n    attachTo(domElement) {\n        this.element = domElement;\n    }\n\n    template() {\n        return `<defs>${ this.renderChildren() }</defs>`;\n    }\n\n    definitionChange(e) {\n        const { definitions, action } = e;\n\n        if (action === \"add\") {\n            this.addDefinitions(definitions);\n        } else if (action === \"remove\") {\n            this.removeDefinitions(definitions);\n        }\n    }\n\n    createDefinition(type, item) {\n        let nodeType;\n        if (type === \"clip\") {\n            nodeType = ClipNode;\n        } else if (type === \"fill\") {\n            if (item instanceof LinearGradient) {\n                nodeType = LinearGradientNode;\n            } else if (item instanceof RadialGradient) {\n                nodeType = RadialGradientNode;\n            }\n        }\n        return new nodeType(item);\n    }\n\n    addDefinitions(definitions) {\n        for (let field in definitions) {\n            this.addDefinition(field, definitions[field]);\n        }\n    }\n\n    addDefinition(type, srcElement) {\n        const { element, definitionMap } = this;\n        const id = srcElement.id;\n        const mapItem = definitionMap[id];\n        if (!mapItem) {\n            const node = this.createDefinition(type, srcElement);\n            definitionMap[id] = {\n                element: node,\n                count: 1\n            };\n            this.append(node);\n            if (element) {\n                node.attachTo(this.element);\n            }\n        } else {\n            mapItem.count++;\n        }\n    }\n\n    removeDefinitions(definitions) {\n        for (let field in definitions) {\n            this.removeDefinition(definitions[field]);\n        }\n    }\n\n    removeDefinition(srcElement) {\n        const definitionMap = this.definitionMap;\n        const id = srcElement.id;\n        const mapItem = definitionMap[id];\n\n        if (mapItem) {\n            mapItem.count--;\n            if (mapItem.count === 0) {\n                this.remove(this.childNodes.indexOf(mapItem.element), 1);\n                delete definitionMap[id];\n            }\n        }\n    }\n}\n\nexport default DefinitionNode;"]},"metadata":{},"sourceType":"module"}