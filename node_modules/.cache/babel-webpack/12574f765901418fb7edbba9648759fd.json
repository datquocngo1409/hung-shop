{"ast":null,"code":"import _toConsumableArray from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate, __param, __metadata } from 'tslib';\nimport { InjectionToken, Inject, PLATFORM_ID, Optional, ɵɵdefineInjectable, ɵɵinject, Injectable, Input, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport { Subject, of, timer, combineLatest } from 'rxjs';\nimport { take, map, tap, startWith, switchMap, shareReplay } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction LoadingBarComponent_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵelement(1, \"div\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"width\", ctx_r2.diameter)(\"height\", ctx_r2.diameter);\n  }\n}\n\nfunction LoadingBarComponent_ng_container_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 5);\n  }\n\n  if (rf & 2) {\n    var progress_r1 = ɵngcc0.ɵɵnextContext().ngIf;\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"background\", ctx_r3.color)(\"height\", ctx_r3.height)(\"width\", progress_r1 + \"%\");\n  }\n}\n\nfunction LoadingBarComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, LoadingBarComponent_ng_container_0_div_1_Template, 2, 4, \"div\", 1);\n    ɵngcc0.ɵɵtemplate(2, LoadingBarComponent_ng_container_0_div_2_Template, 1, 6, \"div\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.includeSpinner);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.includeBar);\n  }\n}\n\nvar LoadingBarState = /*#__PURE__*/function () {\n  function LoadingBarState() {\n    var _this = this;\n\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, LoadingBarState);\n\n    this.config = config;\n    this.state = {\n      action: null,\n      value: 0,\n      initialValue: 0\n    };\n    this.requests = null;\n    this.disabled = false;\n    this.stream$ = new Subject();\n    this._value$ = null;\n\n    this.timer$ = function (s) {\n      var state$ = of(s);\n\n      switch (s.action) {\n        case 'start':\n        case 'increment':\n        case 'set':\n          {\n            if (s.action === 'start' && _this.config.latencyThreshold === 0 && s.value === 0) {\n              s.value = s.initialValue;\n            }\n\n            if (_this.requests > 0) {\n              state$ = timer(_this.config.latencyThreshold, 250).pipe(map(function (t) {\n                return Object.assign(Object.assign({}, s), {\n                  value: t === 0 ? _this.state.value || s.initialValue : _this._increment()\n                });\n              }));\n            }\n\n            break;\n          }\n\n        case 'complete':\n        case 'stop':\n          {\n            // Attempt to aggregate any start/complete calls within 500ms:\n            state$ = s.value === 0 ? of(Object.assign({}, s)) : timer(0, 500).pipe(take(2), map(function (t) {\n              return {\n                value: t === 0 ? 100 : 0\n              };\n            }));\n            break;\n          }\n      }\n\n      return state$.pipe(map(function (next) {\n        return Object.assign(Object.assign({}, next), {\n          action: 'set'\n        });\n      }), tap(function (next) {\n        return _this.next(next, false);\n      }));\n    };\n\n    this.config = Object.assign({\n      latencyThreshold: 0\n    }, config);\n  }\n\n  _createClass(LoadingBarState, [{\n    key: \"start\",\n    value: function start() {\n      var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n\n      if (this.disabled) {\n        return;\n      }\n\n      this.next({\n        action: 'start',\n        initialValue: initialValue\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.next({\n        action: 'stop'\n      });\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this.next({\n        action: 'complete'\n      });\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.disabled = true;\n    }\n  }, {\n    key: \"set\",\n    value: function set(value) {\n      this.next({\n        action: 'set',\n        value: value\n      });\n    }\n  }, {\n    key: \"increment\",\n    value: function increment() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      this.next({\n        action: 'increment',\n        value: value\n      });\n    }\n  }, {\n    key: \"next\",\n    value: function next(state) {\n      var emitEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      switch (state.action) {\n        case 'start':\n          this.requests = (this.requests || 0) + 1;\n          break;\n\n        case 'complete':\n          this.requests = (this.requests || 1) - 1;\n\n          if (this.requests > 0) {\n            return;\n          }\n\n          break;\n\n        case 'stop':\n          this.requests = 0;\n          break;\n\n        case 'increment':\n          state.value = this._increment(state.value);\n          break;\n      }\n\n      this.state = Object.assign(Object.assign(Object.assign({}, this.state), {\n        action: null\n      }), state);\n\n      if (emitEvent) {\n        this.stream$.next(this.state);\n      }\n    }\n  }, {\n    key: \"_increment\",\n    value: function _increment() {\n      var rnd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var stat = this.state.value;\n\n      if (stat >= 99) {\n        rnd = 0;\n      }\n\n      if (rnd === 0) {\n        if (stat >= 0 && stat < 25) {\n          // Start out between 3 - 6% increments\n          rnd = Math.random() * (5 - 3 + 1) + 3;\n        } else if (stat >= 25 && stat < 65) {\n          // increment between 0 - 3%\n          rnd = Math.random() * 3;\n        } else if (stat >= 65 && stat < 90) {\n          // increment between 0 - 2%\n          rnd = Math.random() * 2;\n        } else if (stat >= 90 && stat < 99) {\n          // finally, increment it .5 %\n          rnd = 0.5;\n        } else {\n          // after 99%, don't increment:\n          rnd = 0;\n        }\n      }\n\n      return rnd + stat;\n    }\n  }, {\n    key: \"value$\",\n    get: function get() {\n      var _this2 = this;\n\n      if (this._value$) {\n        return this._value$;\n      }\n\n      return this._value$ = this.stream$.asObservable().pipe(startWith(this.state), switchMap(function (s) {\n        return _this2.timer$(s);\n      }), shareReplay(), map(function (s) {\n        return s.value;\n      }));\n    }\n  }]);\n\n  return LoadingBarState;\n}();\n\nvar LOADING_BAR_CONFIG = new InjectionToken('LOADING_BAR_CONFIG');\n\nvar LoadingBarService = /*#__PURE__*/function () {\n  function LoadingBarService(platformId) {\n    var _this3 = this;\n\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, LoadingBarService);\n\n    this.platformId = platformId;\n    this.config = config;\n    this.refs = {};\n    this.streams$ = new Subject();\n    this.value$ = this.streams$.asObservable().pipe(startWith(null), switchMap(function () {\n      return combineLatest.apply(void 0, _toConsumableArray(Object.keys(_this3.refs).map(function (s) {\n        return _this3.refs[s].value$;\n      })));\n    }), map(function (v) {\n      return Math.max.apply(Math, [0].concat(_toConsumableArray(v)));\n    }));\n  }\n  /** @deprecated use `value$` instead. */\n\n\n  _createClass(LoadingBarService, [{\n    key: \"start\",\n\n    /** @deprecated use `useRef` instead. */\n    value: function start() {\n      var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      this.useRef().start(initialValue);\n    }\n    /** @deprecated use `useRef` instead. */\n\n  }, {\n    key: \"set\",\n    value: function set(value) {\n      this.useRef().set(value);\n    }\n    /** @deprecated use `useRef` instead. */\n\n  }, {\n    key: \"increment\",\n    value: function increment(value) {\n      this.useRef().increment(value);\n    }\n    /** @deprecated use `useRef` instead. */\n\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this.useRef().complete();\n    }\n    /** @deprecated use `useRef` instead. */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.useRef().stop();\n    }\n  }, {\n    key: \"useRef\",\n    value: function useRef() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n\n      if (!this.refs[id]) {\n        this.refs[id] = new LoadingBarState(this.config);\n        this.streams$.next();\n\n        if (!isPlatformBrowser(this.platformId)) {\n          this.refs[id].disable();\n        }\n      }\n\n      return this.refs[id];\n    }\n  }, {\n    key: \"progress$\",\n    get: function get() {\n      return this.value$;\n    }\n  }]);\n\n  return LoadingBarService;\n}();\n\nLoadingBarService.ɵfac = function LoadingBarService_Factory(t) {\n  return new (t || LoadingBarService)(ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(LOADING_BAR_CONFIG, 8));\n};\n\nLoadingBarService.ctorParameters = function () {\n  return [{\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [LOADING_BAR_CONFIG]\n    }]\n  }];\n};\n\nLoadingBarService.ɵprov = ɵɵdefineInjectable({\n  factory: function LoadingBarService_Factory() {\n    return new LoadingBarService(ɵɵinject(PLATFORM_ID), ɵɵinject(LOADING_BAR_CONFIG, 8));\n  },\n  token: LoadingBarService,\n  providedIn: \"root\"\n});\nLoadingBarService = __decorate([__param(0, Inject(PLATFORM_ID)), __param(1, Optional()), __param(1, Inject(LOADING_BAR_CONFIG)), __metadata(\"design:paramtypes\", [Object, Object])], LoadingBarService);\n\nvar LoadingBarComponent = /*#__PURE__*/function () {\n  function LoadingBarComponent(loader) {\n    _classCallCheck(this, LoadingBarComponent);\n\n    this.loader = loader;\n    this.includeSpinner = true;\n    this.includeBar = true;\n    this.fixed = true;\n    this.color = '#29d';\n  }\n\n  _createClass(LoadingBarComponent, [{\n    key: \"value$\",\n    get: function get() {\n      return this.ref ? this.loader.useRef(this.ref).value$ : this.loader.value$;\n    }\n  }]);\n\n  return LoadingBarComponent;\n}();\n\nLoadingBarComponent.ɵfac = function LoadingBarComponent_Factory(t) {\n  return new (t || LoadingBarComponent)(ɵngcc0.ɵɵdirectiveInject(LoadingBarService));\n};\n\nLoadingBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: LoadingBarComponent,\n  selectors: [[\"ngx-loading-bar\"]],\n  hostVars: 3,\n  hostBindings: function LoadingBarComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"fixed\", ctx.fixed);\n      ɵngcc0.ɵɵstyleProp(\"color\", ctx.color);\n    }\n  },\n  inputs: {\n    includeSpinner: \"includeSpinner\",\n    includeBar: \"includeBar\",\n    fixed: \"fixed\",\n    color: \"color\",\n    value: \"value\",\n    ref: \"ref\",\n    height: \"height\",\n    diameter: \"diameter\"\n  },\n  decls: 2,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [\"class\", \"ngx-spinner\", 4, \"ngIf\"], [\"class\", \"ngx-bar\", 3, \"background\", \"height\", \"width\", 4, \"ngIf\"], [1, \"ngx-spinner\"], [1, \"ngx-spinner-icon\"], [1, \"ngx-bar\"]],\n  template: function LoadingBarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, LoadingBarComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n      ɵngcc0.ɵɵpipe(1, \"async\");\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.value != null ? ctx.value : ɵngcc0.ɵɵpipeBind1(1, 1, ctx.value$));\n    }\n  },\n  directives: [ɵngcc1.NgIf],\n  pipes: [ɵngcc1.AsyncPipe],\n  styles: [\"[_nghost-%COMP%]{position:relative;display:block;pointer-events:none}[_nghost-%COMP%]   .ngx-spinner[_ngcontent-%COMP%]{transition:350ms linear;display:block;position:absolute;top:5px;left:0}[_nghost-%COMP%]   .ngx-spinner[_ngcontent-%COMP%]   .ngx-spinner-icon[_ngcontent-%COMP%]{width:14px;height:14px;border:2px solid transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;-webkit-animation:.4s linear infinite loading-bar-spinner;animation:.4s linear infinite loading-bar-spinner}[_nghost-%COMP%]   .ngx-bar[_ngcontent-%COMP%]{transition:width 350ms;position:absolute;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}[dir=rtl]   [_nghost-%COMP%]   .ngx-bar[_ngcontent-%COMP%]{right:0;left:unset}[fixed=true][_nghost-%COMP%]{z-index:10002}[fixed=true][_nghost-%COMP%]   .ngx-bar[_ngcontent-%COMP%]{position:fixed}[fixed=true][_nghost-%COMP%]   .ngx-spinner[_ngcontent-%COMP%]{position:fixed;top:10px;left:10px}[dir=rtl]   [fixed=true][_nghost-%COMP%]   .ngx-spinner[_ngcontent-%COMP%]{right:10px;left:unset}@-webkit-keyframes loading-bar-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes loading-bar-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}\"],\n  changeDetection: 0\n});\n\nLoadingBarComponent.ctorParameters = function () {\n  return [{\n    type: LoadingBarService\n  }];\n};\n\n__decorate([Input(), __metadata(\"design:type\", Object)], LoadingBarComponent.prototype, \"includeSpinner\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], LoadingBarComponent.prototype, \"includeBar\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], LoadingBarComponent.prototype, \"fixed\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], LoadingBarComponent.prototype, \"color\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Number)], LoadingBarComponent.prototype, \"value\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], LoadingBarComponent.prototype, \"ref\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], LoadingBarComponent.prototype, \"height\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], LoadingBarComponent.prototype, \"diameter\", void 0);\n\nLoadingBarComponent = __decorate([__metadata(\"design:paramtypes\", [LoadingBarService])], LoadingBarComponent);\n\nvar LoadingBarModule = function LoadingBarModule() {\n  _classCallCheck(this, LoadingBarModule);\n};\n\nLoadingBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: LoadingBarModule\n});\nLoadingBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function LoadingBarModule_Factory(t) {\n    return new (t || LoadingBarModule)();\n  },\n  imports: [[CommonModule]]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LoadingBarService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LOADING_BAR_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LoadingBarComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-loading-bar',\n      template: \"\\n    <ng-container *ngIf=\\\"value != null ? value : (value$ | async) as progress\\\">\\n      <div *ngIf=\\\"includeSpinner\\\" class=\\\"ngx-spinner\\\">\\n        <div [style.width]=\\\"diameter\\\" [style.height]=\\\"diameter\\\" class=\\\"ngx-spinner-icon\\\"></div>\\n      </div>\\n      <div\\n        *ngIf=\\\"includeBar\\\"\\n        class=\\\"ngx-bar\\\"\\n        [style.background]=\\\"color\\\"\\n        [style.height]=\\\"height\\\"\\n        [style.width]=\\\"progress + '%'\\\"\\n      ></div>\\n    </ng-container>\\n  \",\n      preserveWhitespaces: false,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.Emulated,\n      host: {\n        '[attr.fixed]': 'fixed',\n        '[style.color]': 'color'\n      },\n      styles: [\":host{position:relative;display:block;pointer-events:none}:host .ngx-spinner{transition:350ms linear;display:block;position:absolute;top:5px;left:0}:host .ngx-spinner .ngx-spinner-icon{width:14px;height:14px;border:2px solid transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;-webkit-animation:.4s linear infinite loading-bar-spinner;animation:.4s linear infinite loading-bar-spinner}:host .ngx-bar{transition:width 350ms;position:absolute;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}[dir=rtl] :host .ngx-bar{right:0;left:unset}:host[fixed=true]{z-index:10002}:host[fixed=true] .ngx-bar{position:fixed}:host[fixed=true] .ngx-spinner{position:fixed;top:10px;left:10px}[dir=rtl] :host[fixed=true] .ngx-spinner{right:10px;left:unset}@-webkit-keyframes loading-bar-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes loading-bar-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}\"]\n    }]\n  }], function () {\n    return [{\n      type: LoadingBarService\n    }];\n  }, {\n    includeSpinner: [{\n      type: Input\n    }],\n    includeBar: [{\n      type: Input\n    }],\n    fixed: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    ref: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    diameter: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LoadingBarModule, {\n    declarations: function declarations() {\n      return [LoadingBarComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [LoadingBarComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LoadingBarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [LoadingBarComponent],\n      exports: [LoadingBarComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { LOADING_BAR_CONFIG, LoadingBarComponent, LoadingBarModule, LoadingBarService };","map":{"version":3,"sources":["@ngx-loading-bar/core/loading-bar.state.ts","@ngx-loading-bar/core/loading-bar.config.ts","@ngx-loading-bar/core/loading-bar.service.ts","@ngx-loading-bar/core/loading-bar.component.ts","@ngx-loading-bar/core/core.module.ts","@ngx-loading-bar/core/ngx-loading-bar-core.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subject, timer, of, Observable } from 'rxjs';\nimport { map, switchMap, take, tap, startWith, shareReplay } from 'rxjs/operators';\nimport { LoadingBarConfig } from './loading-bar.config';\n\ninterface ILoadingBarState {\n  action: 'start' | 'complete' | 'set' | 'stop' | 'increment';\n  value: number;\n  initialValue: number;\n}\n\nexport class LoadingBarState {\n  private state: ILoadingBarState = {\n    action: null,\n    value: 0,\n    initialValue: 0,\n  };\n  private requests = null;\n  private disabled = false;\n  private stream$ = new Subject<ILoadingBarState>();\n  private _value$ = null;\n\n  constructor(private config: LoadingBarConfig = {}) {\n    this.config = {\n      latencyThreshold: 0,\n      ...config,\n    };\n  }\n\n  get value$() {\n    if (this._value$) {\n      return this._value$;\n    }\n\n    return (this._value$ = this.stream$.asObservable().pipe(\n      startWith(this.state),\n      switchMap((s) => this.timer$(s)),\n      shareReplay(),\n      map((s) => s.value),\n    ));\n  }\n\n  start(initialValue = 2) {\n    if (this.disabled) {\n      return;\n    }\n\n    this.next({ action: 'start', initialValue });\n  }\n\n  stop() {\n    this.next({ action: 'stop' });\n  }\n\n  complete() {\n    this.next({ action: 'complete' });\n  }\n\n  disable() {\n    this.disabled = true;\n  }\n\n  set(value: number) {\n    this.next({ action: 'set', value });\n  }\n\n  increment(value = 0) {\n    this.next({ action: 'increment', value });\n  }\n\n  private next(state: Partial<ILoadingBarState>, emitEvent = true) {\n    switch (state.action) {\n      case 'start':\n        this.requests = (this.requests || 0) + 1;\n        break;\n      case 'complete':\n        this.requests = (this.requests || 1) - 1;\n        if (this.requests > 0) {\n          return;\n        }\n        break;\n      case 'stop':\n        this.requests = 0;\n        break;\n      case 'increment':\n        state.value = this._increment(state.value);\n        break;\n    }\n\n    this.state = { ...this.state, action: null, ...state };\n    if (emitEvent) {\n      this.stream$.next(this.state);\n    }\n  }\n\n  private timer$ = (s: ILoadingBarState) => {\n    let state$: Observable<Partial<ILoadingBarState>> = of(s);\n    switch (s.action) {\n      case 'start':\n      case 'increment':\n      case 'set': {\n        if (s.action === 'start' && this.config.latencyThreshold === 0 && s.value === 0) {\n          s.value = s.initialValue;\n        }\n\n        if (this.requests > 0) {\n          state$ = timer(this.config.latencyThreshold, 250).pipe(\n            map((t) => ({ ...s, value: t === 0 ? this.state.value || s.initialValue : this._increment() })),\n          );\n        }\n        break;\n      }\n      case 'complete':\n      case 'stop': {\n        // Attempt to aggregate any start/complete calls within 500ms:\n        state$ =\n          s.value === 0\n            ? of({ ...s })\n            : timer(0, 500).pipe(\n                take(2),\n                map((t) => ({ value: t === 0 ? 100 : 0 })),\n              );\n        break;\n      }\n    }\n\n    return state$.pipe(\n      map((next) => <ILoadingBarState>{ ...next, action: 'set' }),\n      tap((next) => this.next(next, false)),\n    );\n  };\n\n  private _increment(rnd = 0) {\n    const stat = this.state.value;\n    if (stat >= 99) {\n      rnd = 0;\n    }\n\n    if (rnd === 0) {\n      if (stat >= 0 && stat < 25) {\n        // Start out between 3 - 6% increments\n        rnd = Math.random() * (5 - 3 + 1) + 3;\n      } else if (stat >= 25 && stat < 65) {\n        // increment between 0 - 3%\n        rnd = Math.random() * 3;\n      } else if (stat >= 65 && stat < 90) {\n        // increment between 0 - 2%\n        rnd = Math.random() * 2;\n      } else if (stat >= 90 && stat < 99) {\n        // finally, increment it .5 %\n        rnd = 0.5;\n      } else {\n        // after 99%, don't increment:\n        rnd = 0;\n      }\n    }\n\n    return rnd + stat;\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport interface LoadingBarConfig {\n  latencyThreshold?: number;\n}\n\nexport const LOADING_BAR_CONFIG = new InjectionToken<LoadingBarConfig>('LOADING_BAR_CONFIG');\n","import { Injectable, InjectionToken, Optional } from '@angular/core';\nimport { PLATFORM_ID, Inject } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { LoadingBarState } from './loading-bar.state';\nimport { Subject, combineLatest } from 'rxjs';\nimport { switchMap, map, startWith } from 'rxjs/operators';\nimport { LOADING_BAR_CONFIG, LoadingBarConfig } from './loading-bar.config';\n\n@Injectable({ providedIn: 'root' })\nexport class LoadingBarService {\n  private refs: { [id: string]: LoadingBarState } = {};\n  private streams$ = new Subject<void>();\n  readonly value$ = this.streams$.asObservable().pipe(\n    startWith(null),\n    switchMap(() => combineLatest(...Object.keys(this.refs).map((s) => this.refs[s].value$))),\n    map((v) => Math.max(0, ...v)),\n  );\n\n  /** @deprecated use `value$` instead. */\n  get progress$() {\n    return this.value$;\n  }\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Optional() @Inject(LOADING_BAR_CONFIG) private config: LoadingBarConfig = {},\n  ) {}\n\n  /** @deprecated use `useRef` instead. */\n  start(initialValue = 2) {\n    this.useRef().start(initialValue);\n  }\n\n  /** @deprecated use `useRef` instead. */\n  set(value: number) {\n    this.useRef().set(value);\n  }\n\n  /** @deprecated use `useRef` instead. */\n  increment(value?: number) {\n    this.useRef().increment(value);\n  }\n\n  /** @deprecated use `useRef` instead. */\n  complete() {\n    this.useRef().complete();\n  }\n\n  /** @deprecated use `useRef` instead. */\n  stop() {\n    this.useRef().stop();\n  }\n\n  useRef(id: string = 'default'): LoadingBarState {\n    if (!this.refs[id]) {\n      this.refs[id] = new LoadingBarState(this.config);\n      this.streams$.next();\n\n      if (!isPlatformBrowser(this.platformId)) {\n        this.refs[id].disable();\n      }\n    }\n\n    return this.refs[id];\n  }\n}\n","import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';\nimport { LoadingBarService } from './loading-bar.service';\n\n@Component({\n  selector: 'ngx-loading-bar',\n  template: `\n    <ng-container *ngIf=\"value != null ? value : (value$ | async) as progress\">\n      <div *ngIf=\"includeSpinner\" class=\"ngx-spinner\">\n        <div [style.width]=\"diameter\" [style.height]=\"diameter\" class=\"ngx-spinner-icon\"></div>\n      </div>\n      <div\n        *ngIf=\"includeBar\"\n        class=\"ngx-bar\"\n        [style.background]=\"color\"\n        [style.height]=\"height\"\n        [style.width]=\"progress + '%'\"\n      ></div>\n    </ng-container>\n  `,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.Emulated,\n  styleUrls: ['./loading-bar.component.scss'],\n  host: {\n    '[attr.fixed]': 'fixed',\n    '[style.color]': 'color',\n  },\n})\nexport class LoadingBarComponent {\n  @Input() includeSpinner = true;\n  @Input() includeBar = true;\n  @Input() fixed = true;\n  @Input() color = '#29d';\n  @Input() value: number;\n  @Input() ref: string;\n  @Input() height: string;\n  @Input() diameter: string;\n\n  get value$() {\n    return this.ref ? this.loader.useRef(this.ref).value$ : this.loader.value$;\n  }\n\n  constructor(private loader: LoadingBarService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoadingBarComponent } from './loading-bar.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [LoadingBarComponent],\n  exports: [LoadingBarComponent],\n})\nexport class LoadingBarModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}