{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { defined } from '../util';\nimport Point from '../geometry/point';\n\nfunction pointAccessor(name) {\n  var fieldName = \"_\" + name;\n  return function (value) {\n    if (defined(value)) {\n      this._observerField(fieldName, Point.create(value));\n\n      this.geometryChange();\n      return this;\n    }\n\n    return this[fieldName];\n  };\n}\n\nfunction definePointAccessors(fn, names) {\n  for (var i = 0; i < names.length; i++) {\n    fn[names[i]] = pointAccessor(names[i]);\n  }\n}\n\nvar withPoints = function withPoints(TBase, names) {\n  var result = /*#__PURE__*/function (_TBase) {\n    _inherits(result, _TBase);\n\n    var _super = _createSuper(result);\n\n    function result() {\n      _classCallCheck(this, result);\n\n      return _super.apply(this, arguments);\n    }\n\n    return result;\n  }(TBase);\n\n  definePointAccessors(result.prototype, names);\n  return result;\n};\n\nexport default withPoints;","map":{"version":3,"sources":["/home/datquocngo/Project/Hung/gts-fe/node_modules/@progress/kendo-drawing/dist/es2015/mixins/with-points.js"],"names":["defined","Point","pointAccessor","name","fieldName","value","_observerField","create","geometryChange","definePointAccessors","fn","names","i","length","withPoints","TBase","result","prototype"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,SAAxB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,MAAMC,SAAS,GAAG,MAAMD,IAAxB;AACA,SAAO,UAASE,KAAT,EAAgB;AACnB,QAAIL,OAAO,CAACK,KAAD,CAAX,EAAoB;AAChB,WAAKC,cAAL,CAAoBF,SAApB,EAA+BH,KAAK,CAACM,MAAN,CAAaF,KAAb,CAA/B;;AACA,WAAKG,cAAL;AACA,aAAO,IAAP;AACH;;AAED,WAAO,KAAKJ,SAAL,CAAP;AACH,GARD;AASH;;AAED,SAASK,oBAAT,CAA8BC,EAA9B,EAAkCC,KAAlC,EAAyC;AACrC,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCF,IAAAA,EAAE,CAACC,KAAK,CAACC,CAAD,CAAN,CAAF,GAAeV,aAAa,CAACS,KAAK,CAACC,CAAD,CAAN,CAA5B;AACH;AACJ;;AAED,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAQJ,KAAR,EAAkB;AACjC,MAAMK,MAAM;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,IAAiBD,KAAjB,CAAZ;;AACAN,EAAAA,oBAAoB,CAACO,MAAM,CAACC,SAAR,EAAmBN,KAAnB,CAApB;AAEA,SAAOK,MAAP;AACH,CALD;;AAOA,eAAeF,UAAf","sourcesContent":["import { defined } from '../util';\nimport Point from '../geometry/point';\n\nfunction pointAccessor(name) {\n    const fieldName = \"_\" + name;\n    return function(value) {\n        if (defined(value)) {\n            this._observerField(fieldName, Point.create(value));\n            this.geometryChange();\n            return this;\n        }\n\n        return this[fieldName];\n    };\n}\n\nfunction definePointAccessors(fn, names) {\n    for (let i = 0; i < names.length; i++) {\n        fn[names[i]] = pointAccessor(names[i]);\n    }\n}\n\nconst withPoints = (TBase, names) => {\n    const result = class extends TBase {};\n    definePointAccessors(result.prototype, names);\n\n    return result;\n};\n\nexport default withPoints;\n"]},"metadata":{},"sourceType":"module"}