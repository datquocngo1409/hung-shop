{"ast":null,"code":"import { isPresent } from '../utils';\nimport { compose } from '../funcs'; // tslint:enable:max-line-length\n\nvar set = function set(field, target, value) {\n  target[field] = value;\n  return target;\n};\n\nvar toCamelCase = function toCamelCase(str) {\n  return str.replace(/(^[A-Z])/g, function (_, g1) {\n    return g1.toLowerCase();\n  });\n};\n\nvar prop = function prop(fieldName) {\n  return function (obj) {\n    var value = obj[fieldName];\n\n    if (isPresent(value)) {\n      return value;\n    }\n\n    return obj[toCamelCase(fieldName)];\n  };\n};\n\nvar member = prop(\"Member\");\nvar aggregateMethodName = prop(\"AggregateMethodName\");\nvar value = prop(\"Value\");\n\nvar convert = function convert(mapper) {\n  return function (values) {\n    return Object.keys(values).reduce(mapper.bind(null, values), {});\n  };\n};\n\nvar translateAggregate = convert(function (source, acc, field) {\n  return set(field.toLowerCase(), acc, source[field]);\n});\nvar translateAggregates = convert(function (source, acc, field) {\n  return set(field, acc, translateAggregate(source[field]));\n});\n\nvar valueOrDefault = function valueOrDefault(value, defaultValue) {\n  return isPresent(value) ? value : defaultValue;\n};\n\nvar normalizeGroup = function normalizeGroup(group) {\n  return {\n    aggregates: group.Aggregates || group.aggregates,\n    field: group.Member || group.member || group.field,\n    hasSubgroups: group.HasSubgroups || group.hasSubgroups || false,\n    items: group.Items || group.items,\n    value: valueOrDefault(group.Key, valueOrDefault(group.key, group.value))\n  };\n};\n\nvar translateGroup = compose(function (_ref) {\n  var field = _ref.field,\n      hasSubgroups = _ref.hasSubgroups,\n      value = _ref.value,\n      aggregates = _ref.aggregates,\n      items = _ref.items;\n  return {\n    aggregates: translateAggregates(aggregates),\n    field: field,\n    items: hasSubgroups ? items.map(translateGroup) : items,\n    value: value\n  };\n}, normalizeGroup); // tslint:disable:max-line-length\n\n/**\n * Converts the grouped result, which is returned into the `Data` field of the UI for ASP.NET MVC `ToDataSourceResult` method, to a comparable format.\n * @param data - The value of the `Data` field of the response.\n * @returns {GroupResult[]} - The converted result.\n */\n\nexport var translateDataSourceResultGroups = function translateDataSourceResultGroups(data) {\n  return data.map(translateGroup);\n};\n/**\n * Converts the `AggregateResults` field content, which is returned by the UI for ASP.NET MVC `ToDataSourceResult` method, to a comparable format.\n * @param data - The value of the `AggregateResults` field of the response.\n * @returns {AggregateResult} - The converted result.\n */\n// tslint:enable:max-line-length\n\nexport var translateAggregateResults = function translateAggregateResults(data) {\n  return (data || []).reduce(function (acc, x) {\n    return set(member(x), acc, set(aggregateMethodName(x).toLowerCase(), acc[member(x)] || {}, value(x)));\n  }, {});\n};","map":{"version":3,"sources":["/home/datquocngo/Project/Hung/gts-fe/node_modules/@progress/kendo-data-query/dist/es2015/mvc/deserialization.js"],"names":["isPresent","compose","set","field","target","value","toCamelCase","str","replace","_","g1","toLowerCase","prop","fieldName","obj","member","aggregateMethodName","convert","mapper","values","Object","keys","reduce","bind","translateAggregate","source","acc","translateAggregates","valueOrDefault","defaultValue","normalizeGroup","group","aggregates","Aggregates","Member","hasSubgroups","HasSubgroups","items","Items","Key","key","translateGroup","map","translateDataSourceResultGroups","data","translateAggregateResults","x"],"mappings":"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","sourcesContent":["import { isPresent } from '../utils';\nimport { compose } from '../funcs';\n// tslint:enable:max-line-length\nconst set = (field, target, value) => {\n    target[field] = value;\n    return target;\n};\nconst toCamelCase = str => str.replace(/(^[A-Z])/g, (_, g1) => g1.toLowerCase());\nconst prop = (fieldName) => (obj) => {\n    const value = obj[fieldName];\n    if (isPresent(value)) {\n        return value;\n    }\n    return obj[toCamelCase(fieldName)];\n};\nconst member = prop(\"Member\");\nconst aggregateMethodName = prop(\"AggregateMethodName\");\nconst value = prop(\"Value\");\nconst convert = mapper => values => Object.keys(values).reduce(mapper.bind(null, values), {});\nconst translateAggregate = convert((source, acc, field) => set(field.toLowerCase(), acc, source[field]));\nconst translateAggregates = convert((source, acc, field) => set(field, acc, translateAggregate(source[field])));\nconst valueOrDefault = (value, defaultValue) => isPresent(value) ? value : defaultValue;\nconst normalizeGroup = group => ({\n    aggregates: group.Aggregates || group.aggregates,\n    field: group.Member || group.member || group.field,\n    hasSubgroups: group.HasSubgroups || group.hasSubgroups || false,\n    items: group.Items || group.items,\n    value: valueOrDefault(group.Key, valueOrDefault(group.key, group.value))\n});\nconst translateGroup = compose(({ field, hasSubgroups, value, aggregates, items }) => ({\n    aggregates: translateAggregates(aggregates),\n    field,\n    items: hasSubgroups ? items.map(translateGroup) : items,\n    value\n}), normalizeGroup);\n// tslint:disable:max-line-length\n/**\n * Converts the grouped result, which is returned into the `Data` field of the UI for ASP.NET MVC `ToDataSourceResult` method, to a comparable format.\n * @param data - The value of the `Data` field of the response.\n * @returns {GroupResult[]} - The converted result.\n */\nexport const translateDataSourceResultGroups = (data) => data.map(translateGroup);\n/**\n * Converts the `AggregateResults` field content, which is returned by the UI for ASP.NET MVC `ToDataSourceResult` method, to a comparable format.\n * @param data - The value of the `AggregateResults` field of the response.\n * @returns {AggregateResult} - The converted result.\n */\n// tslint:enable:max-line-length\nexport const translateAggregateResults = (data) => ((data || []).reduce((acc, x) => set(member(x), acc, set(aggregateMethodName(x).toLowerCase(), acc[member(x)] || {}, value(x))), {}));\n"]},"metadata":{},"sourceType":"module"}