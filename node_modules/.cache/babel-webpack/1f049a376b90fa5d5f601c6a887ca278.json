{"ast":null,"code":"import _slicedToArray from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { cldr } from './info';\nvar predefinedDatePatterns = {\n  s: \"yyyy'-'MM'-'dd'T'HH':'mm':'ss\",\n  u: \"yyyy'-'MM'-'dd HH':'mm':'ss'Z'\"\n};\nvar YEAR_REGEX = /y+/g;\nvar SHORT_DATE = [[\"dateFormats\", \"short\"]];\nvar datePatterns = {\n  D: [[\"dateFormats\", \"full\"]],\n  m: [[\"dateTimeFormats\", \"availableFormats\", \"MMMd\"]],\n  M: [[\"dateTimeFormats\", \"availableFormats\", \"MMMMd\"]],\n  y: [[\"dateTimeFormats\", \"availableFormats\", \"yMMM\"]],\n  Y: [[\"dateTimeFormats\", \"availableFormats\", \"yMMMM\"]],\n  F: [[\"dateFormats\", \"full\"], [\"timeFormats\", \"medium\"]],\n  g: [[\"dateTimeFormats\", \"availableFormats\", \"yMd\"], [\"timeFormats\", \"short\"]],\n  G: [[\"dateTimeFormats\", \"availableFormats\", \"yMd\"], [\"timeFormats\", \"medium\"]],\n  t: [[\"timeFormats\", \"short\"]],\n  T: [[\"timeFormats\", \"medium\"]]\n};\n\nfunction toArray(obj) {\n  var result = [];\n  var names = Object.getOwnPropertyNames(obj);\n\n  for (var idx = 0; idx < names.length; idx++) {\n    var value = obj[names[idx]];\n    result.push(value);\n  }\n\n  return result;\n}\n\nfunction getCalendarNames(info, isObj) {\n  var result = {};\n\n  for (var formatType in info) {\n    var names = result[formatType] = {};\n\n    for (var format in info[formatType]) {\n      var formats = info[formatType][format];\n      names[format] = isObj ? formats : toArray(formats);\n    }\n  }\n\n  return result;\n}\n\nfunction getEraNames(eras) {\n  var result = {};\n  var format = result.format = {};\n  var eraNameMap = {\n    eraAbbr: \"abbreviated\",\n    eraNames: \"wide\",\n    eraNarrow: \"narrow\"\n  };\n\n  for (var eraFormatName in eras) {\n    var formatName = eraNameMap[eraFormatName];\n    format[formatName] = eras[eraFormatName];\n  }\n\n  return result;\n}\n\nfunction loadCalendarNames(locale, calendar) {\n  var localeCalendar = cldr[locale].calendar;\n  localeCalendar.days = getCalendarNames(calendar.days);\n  localeCalendar.months = getCalendarNames(calendar.months);\n  localeCalendar.quarters = getCalendarNames(calendar.quarters);\n  localeCalendar.dayPeriods = getCalendarNames(calendar.dayPeriods, true);\n  localeCalendar.eras = getEraNames(calendar.eras);\n}\n\nfunction loadCalendarDateFields(locale, fields) {\n  var localeCalendar = cldr[locale].calendar;\n  var dateFields = {};\n\n  for (var field in fields) {\n    var _field$split = field.split('-'),\n        _field$split2 = _slicedToArray(_field$split, 2),\n        fieldName = _field$split2[0],\n        _field$split2$ = _field$split2[1],\n        formatType = _field$split2$ === void 0 ? 'wide' : _field$split2$;\n\n    var fieldInfo = dateFields[fieldName] || {};\n    var displayName = fields[field].displayName;\n\n    if (!displayName) {\n      continue;\n    }\n\n    fieldInfo[formatType] = displayName;\n    dateFields[fieldName] = fieldInfo;\n  }\n\n  localeCalendar.dateFields = dateFields;\n}\n\nfunction getPredefinedFormat(paths, calendar) {\n  var result = [];\n\n  for (var pathIdx = 0; pathIdx < paths.length; pathIdx++) {\n    var fields = paths[pathIdx];\n    var pattern = calendar;\n\n    for (var idx = 0; idx < fields.length; idx++) {\n      pattern = pattern[fields[idx]];\n    }\n\n    result.push(pattern);\n  }\n\n  return result.join(\" \");\n}\n\nfunction loadCalendarPatterns(locale, calendar) {\n  var cldrCalendar = cldr[locale].calendar;\n  var patterns = cldrCalendar.patterns = {};\n  patterns.d = getPredefinedFormat(SHORT_DATE, calendar).replace(YEAR_REGEX, 'y');\n\n  for (var pattern in datePatterns) {\n    patterns[pattern] = getPredefinedFormat(datePatterns[pattern], calendar);\n  }\n\n  for (var _pattern in predefinedDatePatterns) {\n    patterns[_pattern] = predefinedDatePatterns[_pattern];\n  }\n\n  var dateTimeFormats = calendar.dateTimeFormats;\n  cldrCalendar.dateTimeFormats = {\n    full: dateTimeFormats.full,\n    long: dateTimeFormats.long,\n    medium: dateTimeFormats.medium,\n    short: dateTimeFormats.short,\n    availableFormats: dateTimeFormats.availableFormats\n  };\n  cldrCalendar.timeFormats = calendar.timeFormats;\n  cldrCalendar.dateFormats = calendar.dateFormats;\n}\n\nexport default function loadCalendarInfo(locale, info) {\n  var calendar = cldr[locale].calendar = cldr[locale].calendar || {};\n\n  for (var field in info) {\n    if (field === \"timeZoneNames\") {\n      calendar.gmtFormat = info[field].gmtFormat;\n      calendar.gmtZeroFormat = info[field].gmtZeroFormat;\n    } else if (field === \"calendars\" && info[field].gregorian) {\n      loadCalendarPatterns(locale, info[field].gregorian);\n      loadCalendarNames(locale, info[field].gregorian);\n    } else if (field === \"fields\") {\n      loadCalendarDateFields(locale, info.fields);\n    }\n  }\n}","map":{"version":3,"sources":["/home/datquocngo/Project/UET/gts-fe/node_modules/@telerik/kendo-intl/dist/es2015/cldr/load-dates.js"],"names":["cldr","predefinedDatePatterns","s","u","YEAR_REGEX","SHORT_DATE","datePatterns","D","m","M","y","Y","F","g","G","t","T","toArray","obj","result","names","Object","getOwnPropertyNames","idx","length","value","push","getCalendarNames","info","isObj","formatType","format","formats","getEraNames","eras","eraNameMap","eraAbbr","eraNames","eraNarrow","eraFormatName","formatName","loadCalendarNames","locale","calendar","localeCalendar","days","months","quarters","dayPeriods","loadCalendarDateFields","fields","dateFields","field","split","fieldName","fieldInfo","displayName","getPredefinedFormat","paths","pathIdx","pattern","join","loadCalendarPatterns","cldrCalendar","patterns","d","replace","dateTimeFormats","full","long","medium","short","availableFormats","timeFormats","dateFormats","loadCalendarInfo","gmtFormat","gmtZeroFormat","gregorian"],"mappings":";AAAA,SAASA,IAAT,QAAqB,QAArB;AAEA,IAAMC,sBAAsB,GAAG;AAC3BC,EAAAA,CAAC,EAAE,+BADwB;AAE3BC,EAAAA,CAAC,EAAE;AAFwB,CAA/B;AAKA,IAAMC,UAAU,GAAG,KAAnB;AACA,IAAMC,UAAU,GAAG,CAAE,CAAE,aAAF,EAAiB,OAAjB,CAAF,CAAnB;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,CAAC,EAAE,CAAE,CAAE,aAAF,EAAiB,MAAjB,CAAF,CADc;AAEjBC,EAAAA,CAAC,EAAE,CAAE,CAAE,iBAAF,EAAqB,kBAArB,EAAyC,MAAzC,CAAF,CAFc;AAGjBC,EAAAA,CAAC,EAAE,CAAE,CAAE,iBAAF,EAAqB,kBAArB,EAAyC,OAAzC,CAAF,CAHc;AAIjBC,EAAAA,CAAC,EAAE,CAAE,CAAE,iBAAF,EAAqB,kBAArB,EAAyC,MAAzC,CAAF,CAJc;AAKjBC,EAAAA,CAAC,EAAE,CAAE,CAAE,iBAAF,EAAqB,kBAArB,EAAyC,OAAzC,CAAF,CALc;AAMjBC,EAAAA,CAAC,EAAE,CAAE,CAAE,aAAF,EAAiB,MAAjB,CAAF,EAA6B,CAAE,aAAF,EAAiB,QAAjB,CAA7B,CANc;AAOjBC,EAAAA,CAAC,EAAE,CAAE,CAAE,iBAAF,EAAqB,kBAArB,EAAyC,KAAzC,CAAF,EAAoD,CAAE,aAAF,EAAiB,OAAjB,CAApD,CAPc;AAQjBC,EAAAA,CAAC,EAAE,CAAE,CAAE,iBAAF,EAAqB,kBAArB,EAAyC,KAAzC,CAAF,EAAoD,CAAE,aAAF,EAAiB,QAAjB,CAApD,CARc;AASjBC,EAAAA,CAAC,EAAE,CAAE,CAAE,aAAF,EAAiB,OAAjB,CAAF,CATc;AAUjBC,EAAAA,CAAC,EAAE,CAAE,CAAE,aAAF,EAAiB,QAAjB,CAAF;AAVc,CAArB;;AAaA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AAClB,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,KAAK,GAAGC,MAAM,CAACC,mBAAP,CAA2BJ,GAA3B,CAAZ;;AACA,OAAK,IAAIK,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,KAAK,CAACI,MAA9B,EAAsCD,GAAG,EAAzC,EAA6C;AACzC,QAAIE,KAAK,GAAGP,GAAG,CAACE,KAAK,CAACG,GAAD,CAAN,CAAf;AACAJ,IAAAA,MAAM,CAACO,IAAP,CAAYD,KAAZ;AACH;;AACD,SAAON,MAAP;AACH;;AAED,SAASQ,gBAAT,CAA0BC,IAA1B,EAAgCC,KAAhC,EAAuC;AACnC,MAAMV,MAAM,GAAG,EAAf;;AACA,OAAK,IAAIW,UAAT,IAAuBF,IAAvB,EAA6B;AACzB,QAAIR,KAAK,GAAGD,MAAM,CAACW,UAAD,CAAN,GAAqB,EAAjC;;AACA,SAAK,IAAIC,MAAT,IAAmBH,IAAI,CAACE,UAAD,CAAvB,EAAqC;AACjC,UAAIE,OAAO,GAAGJ,IAAI,CAACE,UAAD,CAAJ,CAAiBC,MAAjB,CAAd;AACAX,MAAAA,KAAK,CAACW,MAAD,CAAL,GAAgBF,KAAK,GAAGG,OAAH,GAAaf,OAAO,CAACe,OAAD,CAAzC;AACH;AACJ;;AACD,SAAOb,MAAP;AACH;;AAED,SAASc,WAAT,CAAqBC,IAArB,EAA2B;AACvB,MAAMf,MAAM,GAAG,EAAf;AACA,MAAMY,MAAM,GAAGZ,MAAM,CAACY,MAAP,GAAgB,EAA/B;AACA,MAAMI,UAAU,GAAG;AACfC,IAAAA,OAAO,EAAE,aADM;AAEfC,IAAAA,QAAQ,EAAE,MAFK;AAGfC,IAAAA,SAAS,EAAE;AAHI,GAAnB;;AAMA,OAAK,IAAIC,aAAT,IAA0BL,IAA1B,EAAgC;AAC5B,QAAIM,UAAU,GAAGL,UAAU,CAACI,aAAD,CAA3B;AACAR,IAAAA,MAAM,CAACS,UAAD,CAAN,GAAqBN,IAAI,CAACK,aAAD,CAAzB;AACH;;AAED,SAAOpB,MAAP;AACH;;AAED,SAASsB,iBAAT,CAA2BC,MAA3B,EAAmCC,QAAnC,EAA6C;AACzC,MAAMC,cAAc,GAAG5C,IAAI,CAAC0C,MAAD,CAAJ,CAAaC,QAApC;AACAC,EAAAA,cAAc,CAACC,IAAf,GAAsBlB,gBAAgB,CAACgB,QAAQ,CAACE,IAAV,CAAtC;AACAD,EAAAA,cAAc,CAACE,MAAf,GAAwBnB,gBAAgB,CAACgB,QAAQ,CAACG,MAAV,CAAxC;AACAF,EAAAA,cAAc,CAACG,QAAf,GAA0BpB,gBAAgB,CAACgB,QAAQ,CAACI,QAAV,CAA1C;AACAH,EAAAA,cAAc,CAACI,UAAf,GAA4BrB,gBAAgB,CAACgB,QAAQ,CAACK,UAAV,EAAsB,IAAtB,CAA5C;AAEAJ,EAAAA,cAAc,CAACV,IAAf,GAAsBD,WAAW,CAACU,QAAQ,CAACT,IAAV,CAAjC;AACH;;AAED,SAASe,sBAAT,CAAgCP,MAAhC,EAAwCQ,MAAxC,EAAgD;AAC5C,MAAMN,cAAc,GAAG5C,IAAI,CAAC0C,MAAD,CAAJ,CAAaC,QAApC;AACA,MAAMQ,UAAU,GAAG,EAAnB;;AAEA,OAAK,IAAIC,KAAT,IAAkBF,MAAlB,EAA0B;AAAA,uBACqBE,KAAK,CAACC,KAAN,CAAY,GAAZ,CADrB;AAAA;AAAA,QACdC,SADc;AAAA;AAAA,QACHxB,UADG,+BACU,MADV;;AAEtB,QAAMyB,SAAS,GAAGJ,UAAU,CAACG,SAAD,CAAV,IAAyB,EAA3C;AACA,QAAME,WAAW,GAAGN,MAAM,CAACE,KAAD,CAAN,CAAcI,WAAlC;;AAEA,QAAI,CAACA,WAAL,EAAkB;AAAE;AAAW;;AAE/BD,IAAAA,SAAS,CAACzB,UAAD,CAAT,GAAwB0B,WAAxB;AACAL,IAAAA,UAAU,CAACG,SAAD,CAAV,GAAwBC,SAAxB;AACH;;AAEDX,EAAAA,cAAc,CAACO,UAAf,GAA4BA,UAA5B;AACH;;AAED,SAASM,mBAAT,CAA6BC,KAA7B,EAAoCf,QAApC,EAA8C;AAC1C,MAAMxB,MAAM,GAAG,EAAf;;AAEA,OAAK,IAAIwC,OAAO,GAAG,CAAnB,EAAsBA,OAAO,GAAGD,KAAK,CAAClC,MAAtC,EAA8CmC,OAAO,EAArD,EAAyD;AACrD,QAAIT,MAAM,GAAGQ,KAAK,CAAEC,OAAF,CAAlB;AACA,QAAIC,OAAO,GAAGjB,QAAd;;AACA,SAAK,IAAIpB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG2B,MAAM,CAAC1B,MAA/B,EAAuCD,GAAG,EAA1C,EAA8C;AAC1CqC,MAAAA,OAAO,GAAGA,OAAO,CAACV,MAAM,CAAC3B,GAAD,CAAP,CAAjB;AACH;;AACDJ,IAAAA,MAAM,CAACO,IAAP,CAAYkC,OAAZ;AACH;;AAED,SAAOzC,MAAM,CAAC0C,IAAP,CAAY,GAAZ,CAAP;AACH;;AAED,SAASC,oBAAT,CAA8BpB,MAA9B,EAAsCC,QAAtC,EAAgD;AAC5C,MAAMoB,YAAY,GAAG/D,IAAI,CAAC0C,MAAD,CAAJ,CAAaC,QAAlC;AACA,MAAMqB,QAAQ,GAAGD,YAAY,CAACC,QAAb,GAAwB,EAAzC;AAEAA,EAAAA,QAAQ,CAACC,CAAT,GAAaR,mBAAmB,CAACpD,UAAD,EAAasC,QAAb,CAAnB,CAA0CuB,OAA1C,CAAkD9D,UAAlD,EAA8D,GAA9D,CAAb;;AAEA,OAAK,IAAIwD,OAAT,IAAoBtD,YAApB,EAAkC;AAC9B0D,IAAAA,QAAQ,CAACJ,OAAD,CAAR,GAAoBH,mBAAmB,CAACnD,YAAY,CAACsD,OAAD,CAAb,EAAwBjB,QAAxB,CAAvC;AACH;;AAED,OAAK,IAAIiB,QAAT,IAAoB3D,sBAApB,EAA4C;AACxC+D,IAAAA,QAAQ,CAACJ,QAAD,CAAR,GAAoB3D,sBAAsB,CAAC2D,QAAD,CAA1C;AACH;;AAED,MAAMO,eAAe,GAAGxB,QAAQ,CAACwB,eAAjC;AACAJ,EAAAA,YAAY,CAACI,eAAb,GAA+B;AAC3BC,IAAAA,IAAI,EAAED,eAAe,CAACC,IADK;AAE3BC,IAAAA,IAAI,EAAEF,eAAe,CAACE,IAFK;AAG3BC,IAAAA,MAAM,EAAEH,eAAe,CAACG,MAHG;AAI3BC,IAAAA,KAAK,EAAEJ,eAAe,CAACI,KAJI;AAK3BC,IAAAA,gBAAgB,EAAEL,eAAe,CAACK;AALP,GAA/B;AAOAT,EAAAA,YAAY,CAACU,WAAb,GAA2B9B,QAAQ,CAAC8B,WAApC;AACAV,EAAAA,YAAY,CAACW,WAAb,GAA2B/B,QAAQ,CAAC+B,WAApC;AACH;;AAGD,eAAe,SAASC,gBAAT,CAA0BjC,MAA1B,EAAkCd,IAAlC,EAAwC;AACnD,MAAMe,QAAQ,GAAG3C,IAAI,CAAC0C,MAAD,CAAJ,CAAaC,QAAb,GAAwB3C,IAAI,CAAC0C,MAAD,CAAJ,CAAaC,QAAb,IAAyB,EAAlE;;AACA,OAAK,IAAIS,KAAT,IAAkBxB,IAAlB,EAAwB;AACpB,QAAIwB,KAAK,KAAK,eAAd,EAA+B;AAC3BT,MAAAA,QAAQ,CAACiC,SAAT,GAAqBhD,IAAI,CAACwB,KAAD,CAAJ,CAAYwB,SAAjC;AACAjC,MAAAA,QAAQ,CAACkC,aAAT,GAAyBjD,IAAI,CAACwB,KAAD,CAAJ,CAAYyB,aAArC;AACH,KAHD,MAGO,IAAIzB,KAAK,KAAK,WAAV,IAAyBxB,IAAI,CAACwB,KAAD,CAAJ,CAAY0B,SAAzC,EAAoD;AACvDhB,MAAAA,oBAAoB,CAACpB,MAAD,EAASd,IAAI,CAACwB,KAAD,CAAJ,CAAY0B,SAArB,CAApB;AACArC,MAAAA,iBAAiB,CAACC,MAAD,EAASd,IAAI,CAACwB,KAAD,CAAJ,CAAY0B,SAArB,CAAjB;AACH,KAHM,MAGA,IAAI1B,KAAK,KAAK,QAAd,EAAwB;AAC3BH,MAAAA,sBAAsB,CAACP,MAAD,EAASd,IAAI,CAACsB,MAAd,CAAtB;AACH;AACJ;AACJ","sourcesContent":["import { cldr } from './info';\n\nconst predefinedDatePatterns = {\n    s: \"yyyy'-'MM'-'dd'T'HH':'mm':'ss\",\n    u: \"yyyy'-'MM'-'dd HH':'mm':'ss'Z'\"\n};\n\nconst YEAR_REGEX = /y+/g;\nconst SHORT_DATE = [ [ \"dateFormats\", \"short\" ] ];\n\nconst datePatterns = {\n    D: [ [ \"dateFormats\", \"full\" ] ],\n    m: [ [ \"dateTimeFormats\", \"availableFormats\", \"MMMd\" ] ],\n    M: [ [ \"dateTimeFormats\", \"availableFormats\", \"MMMMd\" ] ],\n    y: [ [ \"dateTimeFormats\", \"availableFormats\", \"yMMM\" ] ],\n    Y: [ [ \"dateTimeFormats\", \"availableFormats\", \"yMMMM\" ] ],\n    F: [ [ \"dateFormats\", \"full\" ], [ \"timeFormats\", \"medium\" ] ],\n    g: [ [ \"dateTimeFormats\", \"availableFormats\", \"yMd\" ], [ \"timeFormats\", \"short\" ] ],\n    G: [ [ \"dateTimeFormats\", \"availableFormats\", \"yMd\" ], [ \"timeFormats\", \"medium\" ] ],\n    t: [ [ \"timeFormats\", \"short\" ] ],\n    T: [ [ \"timeFormats\", \"medium\" ] ]\n};\n\nfunction toArray(obj) {\n    let result = [];\n    let names = Object.getOwnPropertyNames(obj);\n    for (let idx = 0; idx < names.length; idx++) {\n        let value = obj[names[idx]];\n        result.push(value);\n    }\n    return result;\n}\n\nfunction getCalendarNames(info, isObj) {\n    const result = {};\n    for (let formatType in info) {\n        let names = result[formatType] = {};\n        for (let format in info[formatType]) {\n            let formats = info[formatType][format];\n            names[format] = isObj ? formats : toArray(formats);\n        }\n    }\n    return result;\n}\n\nfunction getEraNames(eras) {\n    const result = {};\n    const format = result.format = {};\n    const eraNameMap = {\n        eraAbbr: \"abbreviated\",\n        eraNames: \"wide\",\n        eraNarrow: \"narrow\"\n    };\n\n    for (let eraFormatName in eras) {\n        let formatName = eraNameMap[eraFormatName];\n        format[formatName] = eras[eraFormatName];\n    }\n\n    return result;\n}\n\nfunction loadCalendarNames(locale, calendar) {\n    const localeCalendar = cldr[locale].calendar;\n    localeCalendar.days = getCalendarNames(calendar.days);\n    localeCalendar.months = getCalendarNames(calendar.months);\n    localeCalendar.quarters = getCalendarNames(calendar.quarters);\n    localeCalendar.dayPeriods = getCalendarNames(calendar.dayPeriods, true);\n\n    localeCalendar.eras = getEraNames(calendar.eras);\n}\n\nfunction loadCalendarDateFields(locale, fields) {\n    const localeCalendar = cldr[locale].calendar;\n    const dateFields = {};\n\n    for (let field in fields) {\n        const [ fieldName, formatType = 'wide' ] = field.split('-');\n        const fieldInfo = dateFields[fieldName] || {};\n        const displayName = fields[field].displayName;\n\n        if (!displayName) { continue; }\n\n        fieldInfo[formatType] = displayName;\n        dateFields[fieldName] = fieldInfo;\n    }\n\n    localeCalendar.dateFields = dateFields;\n}\n\nfunction getPredefinedFormat(paths, calendar) {\n    const result = [];\n\n    for (let pathIdx = 0; pathIdx < paths.length; pathIdx++) {\n        let fields = paths[ pathIdx ];\n        let pattern = calendar;\n        for (let idx = 0; idx < fields.length; idx++) {\n            pattern = pattern[fields[idx]];\n        }\n        result.push(pattern);\n    }\n\n    return result.join(\" \");\n}\n\nfunction loadCalendarPatterns(locale, calendar) {\n    const cldrCalendar = cldr[locale].calendar;\n    const patterns = cldrCalendar.patterns = {};\n\n    patterns.d = getPredefinedFormat(SHORT_DATE, calendar).replace(YEAR_REGEX, 'y');\n\n    for (let pattern in datePatterns) {\n        patterns[pattern] = getPredefinedFormat(datePatterns[pattern], calendar);\n    }\n\n    for (let pattern in predefinedDatePatterns) {\n        patterns[pattern] = predefinedDatePatterns[pattern];\n    }\n\n    const dateTimeFormats = calendar.dateTimeFormats;\n    cldrCalendar.dateTimeFormats = {\n        full: dateTimeFormats.full,\n        long: dateTimeFormats.long,\n        medium: dateTimeFormats.medium,\n        short: dateTimeFormats.short,\n        availableFormats: dateTimeFormats.availableFormats\n    };\n    cldrCalendar.timeFormats = calendar.timeFormats;\n    cldrCalendar.dateFormats = calendar.dateFormats;\n}\n\n\nexport default function loadCalendarInfo(locale, info) {\n    const calendar = cldr[locale].calendar = cldr[locale].calendar || {};\n    for (let field in info) {\n        if (field === \"timeZoneNames\") {\n            calendar.gmtFormat = info[field].gmtFormat;\n            calendar.gmtZeroFormat = info[field].gmtZeroFormat;\n        } else if (field === \"calendars\" && info[field].gregorian) {\n            loadCalendarPatterns(locale, info[field].gregorian);\n            loadCalendarNames(locale, info[field].gregorian);\n        } else if (field === \"fields\") {\n            loadCalendarDateFields(locale, info.fields);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}