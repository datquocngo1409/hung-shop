{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport HasObservers from '../core/has-observers';\nimport withAccessors from '../mixins/with-accessors';\nimport { defined, round } from '../util';\n\nvar Size = /*#__PURE__*/function (_withAccessors) {\n  _inherits(Size, _withAccessors);\n\n  var _super = _createSuper(Size);\n\n  function Size(width, height) {\n    var _this;\n\n    _classCallCheck(this, Size);\n\n    _this = _super.call(this);\n    _this.width = width || 0;\n    _this.height = height || 0;\n    return _this;\n  }\n\n  _createClass(Size, [{\n    key: \"equals\",\n    value: function equals(other) {\n      return other && other.width === this.width && other.height === this.height;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Size(this.width, this.height);\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray(digits) {\n      var doRound = defined(digits);\n      var width = doRound ? round(this.width, digits) : this.width;\n      var height = doRound ? round(this.height, digits) : this.height;\n      return [width, height];\n    }\n  }], [{\n    key: \"create\",\n    value: function create(arg0, arg1) {\n      if (defined(arg0)) {\n        if (arg0 instanceof Size) {\n          return arg0;\n        } else if (arguments.length === 1 && arg0.length === 2) {\n          return new Size(arg0[0], arg0[1]);\n        }\n\n        return new Size(arg0, arg1);\n      }\n    }\n  }, {\n    key: \"ZERO\",\n    get: function get() {\n      return new Size(0, 0);\n    }\n  }]);\n\n  return Size;\n}(withAccessors(HasObservers, [\"width\", \"height\"]));\n\nexport default Size;","map":{"version":3,"sources":["/home/datquocngo/Project/Hung/gts-fe/node_modules/@progress/kendo-drawing/dist/es2015/geometry/size.js"],"names":["HasObservers","withAccessors","defined","round","Size","width","height","other","digits","doRound","arg0","arg1","arguments","length"],"mappings":";;;;AAAA,OAAOA,YAAP,MAAyB,uBAAzB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,SAA/B;;IAGMC,I;;;;;AACF,gBAAYC,KAAZ,EAAmBC,MAAnB,EAA2B;AAAA;;AAAA;;AACvB;AAEA,UAAKD,KAAL,GAAaA,KAAK,IAAI,CAAtB;AACA,UAAKC,MAAL,GAAcA,MAAM,IAAI,CAAxB;AAJuB;AAK1B;;;;2BAEMC,K,EAAO;AACV,aAAOA,KAAK,IAAIA,KAAK,CAACF,KAAN,KAAgB,KAAKA,KAA9B,IAAuCE,KAAK,CAACD,MAAN,KAAiB,KAAKA,MAApE;AACH;;;4BAEO;AACJ,aAAO,IAAIF,IAAJ,CAAS,KAAKC,KAAd,EAAqB,KAAKC,MAA1B,CAAP;AACH;;;4BAEOE,M,EAAQ;AACZ,UAAMC,OAAO,GAAGP,OAAO,CAACM,MAAD,CAAvB;AACA,UAAMH,KAAK,GAAGI,OAAO,GAAGN,KAAK,CAAC,KAAKE,KAAN,EAAaG,MAAb,CAAR,GAA+B,KAAKH,KAAzD;AACA,UAAMC,MAAM,GAAGG,OAAO,GAAGN,KAAK,CAAC,KAAKG,MAAN,EAAcE,MAAd,CAAR,GAAgC,KAAKF,MAA3D;AAEA,aAAO,CAAED,KAAF,EAASC,MAAT,CAAP;AACH;;;2BAEaI,I,EAAMC,I,EAAM;AACtB,UAAIT,OAAO,CAACQ,IAAD,CAAX,EAAmB;AACf,YAAIA,IAAI,YAAYN,IAApB,EAA0B;AACtB,iBAAOM,IAAP;AACH,SAFD,MAEO,IAAIE,SAAS,CAACC,MAAV,KAAqB,CAArB,IAA0BH,IAAI,CAACG,MAAL,KAAgB,CAA9C,EAAiD;AACpD,iBAAO,IAAIT,IAAJ,CAASM,IAAI,CAAC,CAAD,CAAb,EAAkBA,IAAI,CAAC,CAAD,CAAtB,CAAP;AACH;;AAED,eAAO,IAAIN,IAAJ,CAASM,IAAT,EAAeC,IAAf,CAAP;AACH;AACJ;;;wBAEiB;AACd,aAAO,IAAIP,IAAJ,CAAS,CAAT,EAAY,CAAZ,CAAP;AACH;;;;EAtCcH,aAAa,CAACD,YAAD,EAAe,CAAE,OAAF,EAAW,QAAX,CAAf,C;;AAyChC,eAAeI,IAAf","sourcesContent":["import HasObservers from '../core/has-observers';\nimport withAccessors from '../mixins/with-accessors';\nimport { defined, round } from '../util';\n\n\nclass Size extends withAccessors(HasObservers, [ \"width\", \"height\" ]) {\n    constructor(width, height) {\n        super();\n\n        this.width = width || 0;\n        this.height = height || 0;\n    }\n\n    equals(other) {\n        return other && other.width === this.width && other.height === this.height;\n    }\n\n    clone() {\n        return new Size(this.width, this.height);\n    }\n\n    toArray(digits) {\n        const doRound = defined(digits);\n        const width = doRound ? round(this.width, digits) : this.width;\n        const height = doRound ? round(this.height, digits) : this.height;\n\n        return [ width, height ];\n    }\n\n    static create(arg0, arg1) {\n        if (defined(arg0)) {\n            if (arg0 instanceof Size) {\n                return arg0;\n            } else if (arguments.length === 1 && arg0.length === 2) {\n                return new Size(arg0[0], arg0[1]);\n            }\n\n            return new Size(arg0, arg1);\n        }\n    }\n\n    static get ZERO() {\n        return new Size(0, 0);\n    }\n}\n\nexport default Size;\n"]},"metadata":{},"sourceType":"module"}