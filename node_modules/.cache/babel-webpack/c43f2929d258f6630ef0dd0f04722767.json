{"ast":null,"code":"import _inherits from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**-----------------------------------------------------------------------------------------\n* Copyright © 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { Input, ContentChildren, QueryList, Component, NgZone, Directive, TemplateRef, Optional, forwardRef, SkipSelf, Host, ContentChild, NgModule } from '@angular/core';\nimport { saveAs } from '@progress/kendo-file-saver';\nimport { IntlService, ExcelExporter, Workbook } from '@progress/kendo-ooxml';\nimport * as ɵngcc0 from '@angular/core';\nexport * from '@progress/kendo-ooxml';\nimport { toString } from '@telerik/kendo-intl';\nimport { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\n/* tslint:disable align */\n\n/* tslint:disable:no-use-before-declare */\n\nvar compileTemplate = function compileTemplate(templateRef, context, updateContext) {\n  var embeddedView = templateRef.createEmbeddedView(context);\n\n  var result = function result(data) {\n    updateContext(context, data);\n    embeddedView.detectChanges();\n    return embeddedView.rootNodes.reduce(function (content, rootNode) {\n      return content + rootNode.textContent;\n    }, '').trim();\n  };\n\n  result.destroy = function () {\n    embeddedView.destroy();\n    embeddedView = null;\n  };\n\n  return result;\n};\n\nvar updateGroupHeaderContext = function updateGroupHeaderContext(context, data) {\n  context.$implicit = context.group = data;\n  context.field = data.field;\n  context.value = data.value;\n  context.aggregates = data.aggregates;\n};\n\nvar updateGroupFooterContext = function updateGroupFooterContext(context, data) {\n  context.group = data.group;\n  context.$implicit = context.aggregates = data;\n};\n\nvar updateFooterContext = function updateFooterContext(context, data) {\n  context.aggregates = data.aggregates;\n};\n/**\n * @hidden\n */\n\n\nvar toExporterColumns = function toExporterColumns(sourceColumns) {\n  var exporterColumns = [];\n  var columnIndex = 0;\n\n  var addColumns = function addColumns(columns, result, level) {\n    columns.forEach(function (column) {\n      if (column.level === level) {\n        var exporterColumn = new ExporterColumn(column, columnIndex);\n        result.push(exporterColumn);\n\n        if (column.children && column.children.some(function (c) {\n          return c !== column;\n        })) {\n          var children = exporterColumn.columns = [];\n          addColumns(column.children, children, level + 1);\n        } else {\n          columnIndex++;\n        }\n      }\n    });\n  };\n\n  addColumns(sourceColumns, exporterColumns, 0);\n  return exporterColumns;\n};\n/**\n * @hidden\n */\n\n\nvar destroyColumns = function destroyColumns(columns) {\n  if (columns) {\n    columns.forEach(function (column) {\n      column.destroy();\n    });\n  }\n};\n/**\n * @hidden\n */\n\n\nvar ExporterColumn = /*#__PURE__*/function () {\n  function ExporterColumn(column, columnIndex) {\n    _classCallCheck(this, ExporterColumn);\n\n    this.title = column.title;\n    this.field = column.field;\n    this.hidden = column.hidden;\n    this.locked = column.locked;\n    this.width = column.width;\n    this.headerCellOptions = column.headerCellOptions;\n    this.cellOptions = column.cellOptions;\n    this.groupHeaderCellOptions = column.groupHeaderCellOptions;\n    this.groupFooterCellOptions = column.groupFooterCellOptions;\n    this.footerCellOptions = column.footerCellOptions;\n\n    if (column.footerTemplate) {\n      this.footerTemplate = compileTemplate(column.footerTemplate.templateRef, {\n        $implicit: column,\n        column: column,\n        columnIndex: columnIndex\n      }, updateFooterContext);\n    }\n\n    if (column.groupFooterTemplate) {\n      this.groupFooterTemplate = compileTemplate(column.groupFooterTemplate.templateRef, {\n        column: column,\n        field: column.field\n      }, updateGroupFooterContext);\n    }\n\n    if (column.groupHeaderTemplate) {\n      this.groupHeaderTemplate = compileTemplate(column.groupHeaderTemplate.templateRef, {}, updateGroupHeaderContext);\n    }\n\n    if (column.groupHeaderColumnTemplate) {\n      this.groupHeaderColumnTemplate = compileTemplate(column.groupHeaderColumnTemplate.templateRef, {}, updateGroupHeaderContext);\n    }\n  }\n\n  _createClass(ExporterColumn, [{\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.footerTemplate) {\n        this.footerTemplate.destroy();\n      }\n\n      if (this.groupFooterTemplate) {\n        this.groupFooterTemplate.destroy();\n      }\n\n      if (this.groupHeaderTemplate) {\n        this.groupHeaderTemplate.destroy();\n      }\n\n      if (this.groupHeaderColumnTemplate) {\n        this.groupHeaderColumnTemplate.destroy();\n      }\n\n      destroyColumns(this.columns);\n    }\n  }]);\n\n  return ExporterColumn;\n}();\n\nIntlService.register({\n  toString: toString\n});\n/**\n *\n * @hidden\n */\n\nvar _workbookOptions = function workbookOptions(options) {\n  var columns = toExporterColumns(options.columns);\n  var exporter = new ExcelExporter({\n    columns: columns,\n    data: options.data,\n    filterable: options.filterable,\n    groups: options.group,\n    paddingCellOptions: options.paddingCellOptions,\n    headerPaddingCellOptions: options.headerPaddingCellOptions,\n    collapsible: options.collapsible,\n    hierarchy: options.hierarchy,\n    aggregates: options.aggregates\n  });\n  var result = exporter.workbook();\n  result.creator = options.creator;\n  result.date = options.date;\n  result.rtl = options.rtl;\n  destroyColumns(columns);\n  return result;\n};\n/**\n * @hidden\n */\n\n\nvar _toDataURL = function toDataURL(options) {\n  var workbook = new Workbook(options);\n  return workbook.toDataURL();\n};\n/**\n * @hidden\n */\n\n\nvar isWorkbookOptions = function isWorkbookOptions(value) {\n  return value && value.sheets;\n};\n/**\n * @hidden\n */\n\n\nvar ColumnBase = /*#__PURE__*/function () {\n  function ColumnBase(parent) {\n    _classCallCheck(this, ColumnBase);\n\n    this.parent = parent;\n  }\n  /**\n   * @hidden\n   */\n\n\n  _createClass(ColumnBase, [{\n    key: \"level\",\n    get: function get() {\n      return this.parent ? this.parent.level + 1 : 0;\n    }\n  }]);\n\n  return ColumnBase;\n}();\n\nColumnBase.ɵfac = function ColumnBase_Factory(t) {\n  ɵngcc0.ɵɵinvalidFactory();\n};\n\nColumnBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: ColumnBase,\n  contentQueries: function ColumnBase_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, ColumnBase, false);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);\n    }\n  },\n  inputs: {\n    title: \"title\",\n    width: \"width\",\n    locked: \"locked\",\n    hidden: \"hidden\",\n    headerCellOptions: \"headerCellOptions\"\n  }\n});\nColumnBase.propDecorators = {\n  title: [{\n    type: Input\n  }],\n  width: [{\n    type: Input\n  }],\n  locked: [{\n    type: Input\n  }],\n  hidden: [{\n    type: Input\n  }],\n  headerCellOptions: [{\n    type: Input\n  }],\n  children: [{\n    type: ContentChildren,\n    args: [ColumnBase]\n  }]\n}; // tslint:disable:max-line-length\n\n/**\n * Represents the [Kendo UI Excel Export component for Angular]({% slug overview_excelexport %}).\n * Configures the settings for the Excel export of the Kendo UI Grid.\n */\n\nvar ExcelExportComponent = /*#__PURE__*/function () {\n  function ExcelExportComponent(localization, zone) {\n    _classCallCheck(this, ExcelExportComponent);\n\n    this.localization = localization;\n    this.zone = zone;\n    /**\n     * Specifies the name of the file that is exported to Excel.\n     * @default \"Export.xlsx\"\n     */\n\n    this.fileName = 'Export.xlsx';\n    /**\n     * @hidden\n     */\n\n    this.columns = new QueryList();\n    this.saveFile = this.saveFile.bind(this);\n  }\n  /**\n   * Saves the data to Excel.\n   *\n   * @param exportData - An optional parameter. Can be the data that will be exported or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}).\n   */\n\n\n  _createClass(ExcelExportComponent, [{\n    key: \"save\",\n    value: function save(exportData) {\n      this.toDataURL(exportData).then(this.saveFile);\n    }\n    /**\n     * Based on the specified columns and data, returns\n     * [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %})\n     * ([see example]({% slug customrowsandcells_excelexport %})).\n     *\n     * @param exportData - The optional data to be exported.\n     * @returns {WorkbookOptions} - The workbook options.\n     */\n\n  }, {\n    key: \"workbookOptions\",\n    value: function workbookOptions(exportData) {\n      var currentData = this.getExportData(exportData);\n\n      var options = _workbookOptions({\n        columns: this.columns,\n        data: currentData.data,\n        group: currentData.group,\n        filterable: this.filterable,\n        creator: this.creator,\n        date: this.date,\n        rtl: this.localization.rtl,\n        paddingCellOptions: this.paddingCellOptions,\n        headerPaddingCellOptions: this.headerPaddingCellOptions,\n        collapsible: this.collapsible\n      });\n\n      return options;\n    }\n    /**\n     * Returns a promise which will be resolved with the file data URI\n     * ([see example]({% slug filesaving_excelexport %})).\n     *\n     * @param exportData - The optional data or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}) that will be used to generate the data URI.\n     * @returns {Promise<string>} - The promise that will be resolved by the file data URI.\n     */\n\n  }, {\n    key: \"toDataURL\",\n    value: function toDataURL(exportData) {\n      var options = isWorkbookOptions(exportData) ? exportData : this.workbookOptions(exportData);\n      return this.zone.runOutsideAngular(function () {\n        return _toDataURL(options);\n      });\n    }\n  }, {\n    key: \"getExportData\",\n    value: function getExportData(exportData) {\n      var result;\n\n      if (exportData) {\n        if (Array.isArray(exportData)) {\n          result = {\n            data: exportData\n          };\n        } else {\n          result = exportData;\n        }\n      } else {\n        result = {\n          data: this.data,\n          group: this.group\n        };\n      }\n\n      return result;\n    }\n  }, {\n    key: \"saveFile\",\n    value: function saveFile(dataURL) {\n      saveAs(dataURL, this.fileName, {\n        forceProxy: this.forceProxy,\n        proxyURL: this.proxyURL\n      });\n    }\n  }]);\n\n  return ExcelExportComponent;\n}();\n\nExcelExportComponent.ɵfac = function ExcelExportComponent_Factory(t) {\n  return new (t || ExcelExportComponent)(ɵngcc0.ɵɵdirectiveInject(LocalizationService), ɵngcc0.ɵɵdirectiveInject(NgZone));\n};\n\nExcelExportComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: ExcelExportComponent,\n  selectors: [[\"kendo-excelexport\"]],\n  contentQueries: function ExcelExportComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, ColumnBase, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columns = _t);\n    }\n  },\n  inputs: {\n    fileName: \"fileName\",\n    filterable: \"filterable\",\n    collapsible: \"collapsible\",\n    creator: \"creator\",\n    date: \"date\",\n    forceProxy: \"forceProxy\",\n    proxyURL: \"proxyURL\",\n    data: \"data\",\n    group: \"group\",\n    paddingCellOptions: \"paddingCellOptions\",\n    headerPaddingCellOptions: \"headerPaddingCellOptions\"\n  },\n  exportAs: [\"kendoExcelExport\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([LocalizationService, {\n    provide: L10N_PREFIX,\n    useValue: 'kendo.excelexport'\n  }])],\n  decls: 0,\n  vars: 0,\n  template: function ExcelExportComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\n/** @nocollapse */\n\nExcelExportComponent.ctorParameters = function () {\n  return [{\n    type: LocalizationService\n  }, {\n    type: NgZone\n  }];\n};\n\nExcelExportComponent.propDecorators = {\n  fileName: [{\n    type: Input\n  }],\n  filterable: [{\n    type: Input\n  }],\n  collapsible: [{\n    type: Input\n  }],\n  creator: [{\n    type: Input\n  }],\n  date: [{\n    type: Input\n  }],\n  forceProxy: [{\n    type: Input\n  }],\n  proxyURL: [{\n    type: Input\n  }],\n  data: [{\n    type: Input\n  }],\n  group: [{\n    type: Input\n  }],\n  paddingCellOptions: [{\n    type: Input\n  }],\n  headerPaddingCellOptions: [{\n    type: Input\n  }],\n  columns: [{\n    type: ContentChildren,\n    args: [ColumnBase, {\n      descendants: true\n    }]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ExcelExportComponent, [{\n    type: Component,\n    args: [{\n      exportAs: 'kendoExcelExport',\n      selector: 'kendo-excelexport',\n      providers: [LocalizationService, {\n        provide: L10N_PREFIX,\n        useValue: 'kendo.excelexport'\n      }],\n      template: \"\"\n    }]\n  }], function () {\n    return [{\n      type: LocalizationService\n    }, {\n      type: NgZone\n    }];\n  }, {\n    fileName: [{\n      type: Input\n    }],\n    columns: [{\n      type: ContentChildren,\n      args: [ColumnBase, {\n        descendants: true\n      }]\n    }],\n    filterable: [{\n      type: Input\n    }],\n    collapsible: [{\n      type: Input\n    }],\n    creator: [{\n      type: Input\n    }],\n    date: [{\n      type: Input\n    }],\n    forceProxy: [{\n      type: Input\n    }],\n    proxyURL: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    group: [{\n      type: Input\n    }],\n    paddingCellOptions: [{\n      type: Input\n    }],\n    headerPaddingCellOptions: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Represents the group header cell template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-group-header-template)).\n * Enables you to customize the content of the group header item.\n */\n\n\nvar GroupHeaderTemplateDirective = function GroupHeaderTemplateDirective(templateRef) {\n  _classCallCheck(this, GroupHeaderTemplateDirective);\n\n  this.templateRef = templateRef;\n};\n\nGroupHeaderTemplateDirective.ɵfac = function GroupHeaderTemplateDirective_Factory(t) {\n  return new (t || GroupHeaderTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(TemplateRef, 8));\n};\n\nGroupHeaderTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: GroupHeaderTemplateDirective,\n  selectors: [[\"\", \"kendoExcelExportGroupHeaderTemplate\", \"\"]]\n});\n/** @nocollapse */\n\nGroupHeaderTemplateDirective.ctorParameters = function () {\n  return [{\n    type: TemplateRef,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(GroupHeaderTemplateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoExcelExportGroupHeaderTemplate]'\n    }]\n  }], function () {\n    return [{\n      type: TemplateRef,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Represents the group header column template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-group-header-column-template)).\n */\n\n\nvar GroupHeaderColumnTemplateDirective = function GroupHeaderColumnTemplateDirective(templateRef) {\n  _classCallCheck(this, GroupHeaderColumnTemplateDirective);\n\n  this.templateRef = templateRef;\n};\n\nGroupHeaderColumnTemplateDirective.ɵfac = function GroupHeaderColumnTemplateDirective_Factory(t) {\n  return new (t || GroupHeaderColumnTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(TemplateRef, 8));\n};\n\nGroupHeaderColumnTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: GroupHeaderColumnTemplateDirective,\n  selectors: [[\"\", \"kendoExcelExportGroupHeaderColumnTemplate\", \"\"]]\n});\n/** @nocollapse */\n\nGroupHeaderColumnTemplateDirective.ctorParameters = function () {\n  return [{\n    type: TemplateRef,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(GroupHeaderColumnTemplateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoExcelExportGroupHeaderColumnTemplate]'\n    }]\n  }], function () {\n    return [{\n      type: TemplateRef,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Represents the group footer cell template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-group-footer-template)).\n * Enables you to customize the group footer cell of the column.\n */\n\n\nvar GroupFooterTemplateDirective = function GroupFooterTemplateDirective(templateRef) {\n  _classCallCheck(this, GroupFooterTemplateDirective);\n\n  this.templateRef = templateRef;\n};\n\nGroupFooterTemplateDirective.ɵfac = function GroupFooterTemplateDirective_Factory(t) {\n  return new (t || GroupFooterTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(TemplateRef, 8));\n};\n\nGroupFooterTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: GroupFooterTemplateDirective,\n  selectors: [[\"\", \"kendoExcelExportGroupFooterTemplate\", \"\"]]\n});\n/** @nocollapse */\n\nGroupFooterTemplateDirective.ctorParameters = function () {\n  return [{\n    type: TemplateRef,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(GroupFooterTemplateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoExcelExportGroupFooterTemplate]'\n    }]\n  }], function () {\n    return [{\n      type: TemplateRef,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Represents the footer cell template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-footer-template)).\n * Enables you to customize the footer cell of the column.\n */\n\n\nvar FooterTemplateDirective = function FooterTemplateDirective(templateRef) {\n  _classCallCheck(this, FooterTemplateDirective);\n\n  this.templateRef = templateRef;\n};\n\nFooterTemplateDirective.ɵfac = function FooterTemplateDirective_Factory(t) {\n  return new (t || FooterTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(TemplateRef, 8));\n};\n\nFooterTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: FooterTemplateDirective,\n  selectors: [[\"\", \"kendoExcelExportFooterTemplate\", \"\"]]\n});\n/** @nocollapse */\n\nFooterTemplateDirective.ctorParameters = function () {\n  return [{\n    type: TemplateRef,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(FooterTemplateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoExcelExportFooterTemplate]'\n    }]\n  }], function () {\n    return [{\n      type: TemplateRef,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Represents the columns of the Kendo UI Excel Export component for Angular.\n */\n\n\nvar ColumnComponent = /*#__PURE__*/function (_ColumnBase) {\n  _inherits(ColumnComponent, _ColumnBase);\n\n  var _super = _createSuper(ColumnComponent);\n\n  function ColumnComponent(parent) {\n    _classCallCheck(this, ColumnComponent);\n\n    return _super.call(this, parent);\n  }\n\n  return ColumnComponent;\n}(ColumnBase);\n\nColumnComponent.ɵfac = function ColumnComponent_Factory(t) {\n  return new (t || ColumnComponent)(ɵngcc0.ɵɵdirectiveInject(ColumnBase, 13));\n};\n\nColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: ColumnComponent,\n  selectors: [[\"kendo-excelexport-column\"]],\n  contentQueries: function ColumnComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, GroupHeaderTemplateDirective, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, GroupHeaderColumnTemplateDirective, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, GroupFooterTemplateDirective, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, FooterTemplateDirective, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupHeaderTemplate = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupHeaderColumnTemplate = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupFooterTemplate = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerTemplate = _t.first);\n    }\n  },\n  inputs: {\n    field: \"field\",\n    cellOptions: \"cellOptions\",\n    groupHeaderCellOptions: \"groupHeaderCellOptions\",\n    groupFooterCellOptions: \"groupFooterCellOptions\",\n    footerCellOptions: \"footerCellOptions\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: ColumnBase,\n    useExisting: forwardRef(function () {\n      return ColumnComponent;\n    }) // tslint:disable-line:no-forward-ref\n\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function ColumnComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\n/** @nocollapse */\n\nColumnComponent.ctorParameters = function () {\n  return [{\n    type: ColumnBase,\n    decorators: [{\n      type: SkipSelf\n    }, {\n      type: Host\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\nColumnComponent.propDecorators = {\n  field: [{\n    type: Input\n  }],\n  cellOptions: [{\n    type: Input\n  }],\n  groupHeaderCellOptions: [{\n    type: Input\n  }],\n  groupFooterCellOptions: [{\n    type: Input\n  }],\n  footerCellOptions: [{\n    type: Input\n  }],\n  groupHeaderTemplate: [{\n    type: ContentChild,\n    args: [GroupHeaderTemplateDirective]\n  }],\n  groupHeaderColumnTemplate: [{\n    type: ContentChild,\n    args: [GroupHeaderColumnTemplateDirective]\n  }],\n  groupFooterTemplate: [{\n    type: ContentChild,\n    args: [GroupFooterTemplateDirective]\n  }],\n  footerTemplate: [{\n    type: ContentChild,\n    args: [FooterTemplateDirective]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ColumnComponent, [{\n    type: Component,\n    args: [{\n      providers: [{\n        provide: ColumnBase,\n        useExisting: forwardRef(function () {\n          return ColumnComponent;\n        }) // tslint:disable-line:no-forward-ref\n\n      }],\n      selector: 'kendo-excelexport-column',\n      template: \"\"\n    }]\n  }], function () {\n    return [{\n      type: ColumnBase,\n      decorators: [{\n        type: SkipSelf\n      }, {\n        type: Host\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    field: [{\n      type: Input\n    }],\n    cellOptions: [{\n      type: Input\n    }],\n    groupHeaderCellOptions: [{\n      type: Input\n    }],\n    groupFooterCellOptions: [{\n      type: Input\n    }],\n    footerCellOptions: [{\n      type: Input\n    }],\n    groupHeaderTemplate: [{\n      type: ContentChild,\n      args: [GroupHeaderTemplateDirective]\n    }],\n    groupHeaderColumnTemplate: [{\n      type: ContentChild,\n      args: [GroupHeaderColumnTemplateDirective]\n    }],\n    groupFooterTemplate: [{\n      type: ContentChild,\n      args: [GroupFooterTemplateDirective]\n    }],\n    footerTemplate: [{\n      type: ContentChild,\n      args: [FooterTemplateDirective]\n    }]\n  });\n})();\n/**\n * Represents the column group component of the Kendo UI Excel Export component.\n */\n\n\nvar ColumnGroupComponent = /*#__PURE__*/function (_ColumnBase2) {\n  _inherits(ColumnGroupComponent, _ColumnBase2);\n\n  var _super2 = _createSuper(ColumnGroupComponent);\n\n  function ColumnGroupComponent(parent) {\n    var _this;\n\n    _classCallCheck(this, ColumnGroupComponent);\n\n    _this = _super2.call(this, parent);\n    _this.parent = parent;\n    return _this;\n  }\n\n  return ColumnGroupComponent;\n}(ColumnBase);\n\nColumnGroupComponent.ɵfac = function ColumnGroupComponent_Factory(t) {\n  return new (t || ColumnGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ColumnBase, 13));\n};\n\nColumnGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: ColumnGroupComponent,\n  selectors: [[\"kendo-excelexport-column-group\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: ColumnBase,\n    useExisting: forwardRef(function () {\n      return ColumnGroupComponent;\n    }) // tslint:disable-line:no-forward-ref\n\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function ColumnGroupComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\n/** @nocollapse */\n\nColumnGroupComponent.ctorParameters = function () {\n  return [{\n    type: ColumnBase,\n    decorators: [{\n      type: SkipSelf\n    }, {\n      type: Host\n    }, {\n      type: Optional\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ColumnGroupComponent, [{\n    type: Component,\n    args: [{\n      providers: [{\n        provide: ColumnBase,\n        useExisting: forwardRef(function () {\n          return ColumnGroupComponent;\n        }) // tslint:disable-line:no-forward-ref\n\n      }],\n      selector: 'kendo-excelexport-column-group',\n      template: \"\"\n    }]\n  }], function () {\n    return [{\n      type: ColumnBase,\n      decorators: [{\n        type: SkipSelf\n      }, {\n        type: Host\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nvar declarations = [ExcelExportComponent, ColumnComponent, ColumnGroupComponent, FooterTemplateDirective, GroupFooterTemplateDirective, GroupHeaderTemplateDirective, GroupHeaderColumnTemplateDirective];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Excel Export component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the ExcelExportModule module\n * import { ExcelExportModule } from '@progress/kendo-angular-excel-export';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, ExcelExportModule], // import ExcelExportModule module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\n\nvar ExcelExportModule = function ExcelExportModule() {\n  _classCallCheck(this, ExcelExportModule);\n};\n\nExcelExportModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ExcelExportModule\n});\nExcelExportModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ExcelExportModule_Factory(t) {\n    return new (t || ExcelExportModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ExcelExportModule, {\n    declarations: [ExcelExportComponent, ColumnComponent, ColumnGroupComponent, FooterTemplateDirective, GroupFooterTemplateDirective, GroupHeaderTemplateDirective, GroupHeaderColumnTemplateDirective],\n    exports: [ExcelExportComponent, ColumnComponent, ColumnGroupComponent, FooterTemplateDirective, GroupFooterTemplateDirective, GroupHeaderTemplateDirective, GroupHeaderColumnTemplateDirective]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ExcelExportModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [declarations],\n      exports: [declarations]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { GroupHeaderColumnTemplateDirective, ExcelExportComponent, ExcelExportModule, ColumnBase, ColumnComponent, ColumnGroupComponent, FooterTemplateDirective, GroupFooterTemplateDirective, GroupHeaderTemplateDirective, _workbookOptions as workbookOptions, _toDataURL as toDataURL, isWorkbookOptions };","map":{"version":3,"sources":["index.js"],"names":[],"mappings":"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","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright © 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { Input, ContentChildren, QueryList, Component, NgZone, Directive, TemplateRef, Optional, forwardRef, SkipSelf, Host, ContentChild, NgModule } from '@angular/core';\nimport { saveAs } from '@progress/kendo-file-saver';\nimport { IntlService, ExcelExporter, Workbook } from '@progress/kendo-ooxml';\nexport * from '@progress/kendo-ooxml';\nimport { toString } from '@telerik/kendo-intl';\nimport { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\n\n/* tslint:disable align */\n/* tslint:disable:no-use-before-declare */\nconst compileTemplate = (templateRef, context, updateContext) => {\n    let embeddedView = templateRef.createEmbeddedView(context);\n    const result = (data) => {\n        updateContext(context, data);\n        embeddedView.detectChanges();\n        return embeddedView.rootNodes.reduce((content, rootNode) => {\n            return content + rootNode.textContent;\n        }, '').trim();\n    };\n    result.destroy = () => {\n        embeddedView.destroy();\n        embeddedView = null;\n    };\n    return result;\n};\nconst updateGroupHeaderContext = (context, data) => {\n    context.$implicit = context.group = data;\n    context.field = data.field;\n    context.value = data.value;\n    context.aggregates = data.aggregates;\n};\nconst updateGroupFooterContext = (context, data) => {\n    context.group = data.group;\n    context.$implicit = context.aggregates = data;\n};\nconst updateFooterContext = (context, data) => {\n    context.aggregates = data.aggregates;\n};\n/**\n * @hidden\n */\nconst toExporterColumns = (sourceColumns) => {\n    const exporterColumns = [];\n    let columnIndex = 0;\n    const addColumns = (columns, result, level) => {\n        columns.forEach((column) => {\n            if (column.level === level) {\n                const exporterColumn = new ExporterColumn(column, columnIndex);\n                result.push(exporterColumn);\n                if (column.children && column.children.some(c => c !== column)) {\n                    const children = exporterColumn.columns = [];\n                    addColumns(column.children, children, level + 1);\n                }\n                else {\n                    columnIndex++;\n                }\n            }\n        });\n    };\n    addColumns(sourceColumns, exporterColumns, 0);\n    return exporterColumns;\n};\n/**\n * @hidden\n */\nconst destroyColumns = (columns) => {\n    if (columns) {\n        columns.forEach(column => {\n            column.destroy();\n        });\n    }\n};\n/**\n * @hidden\n */\nclass ExporterColumn {\n    constructor(column, columnIndex) {\n        this.title = column.title;\n        this.field = column.field;\n        this.hidden = column.hidden;\n        this.locked = column.locked;\n        this.width = column.width;\n        this.headerCellOptions = column.headerCellOptions;\n        this.cellOptions = column.cellOptions;\n        this.groupHeaderCellOptions = column.groupHeaderCellOptions;\n        this.groupFooterCellOptions = column.groupFooterCellOptions;\n        this.footerCellOptions = column.footerCellOptions;\n        if (column.footerTemplate) {\n            this.footerTemplate = compileTemplate(column.footerTemplate.templateRef, {\n                $implicit: column,\n                column: column,\n                columnIndex: columnIndex\n            }, updateFooterContext);\n        }\n        if (column.groupFooterTemplate) {\n            this.groupFooterTemplate = compileTemplate(column.groupFooterTemplate.templateRef, {\n                column: column,\n                field: column.field\n            }, updateGroupFooterContext);\n        }\n        if (column.groupHeaderTemplate) {\n            this.groupHeaderTemplate = compileTemplate(column.groupHeaderTemplate.templateRef, {}, updateGroupHeaderContext);\n        }\n        if (column.groupHeaderColumnTemplate) {\n            this.groupHeaderColumnTemplate = compileTemplate(column.groupHeaderColumnTemplate.templateRef, {}, updateGroupHeaderContext);\n        }\n    }\n    destroy() {\n        if (this.footerTemplate) {\n            this.footerTemplate.destroy();\n        }\n        if (this.groupFooterTemplate) {\n            this.groupFooterTemplate.destroy();\n        }\n        if (this.groupHeaderTemplate) {\n            this.groupHeaderTemplate.destroy();\n        }\n        if (this.groupHeaderColumnTemplate) {\n            this.groupHeaderColumnTemplate.destroy();\n        }\n        destroyColumns(this.columns);\n    }\n}\n\nIntlService.register({ toString });\n/**\n *\n * @hidden\n */\nconst workbookOptions = (options) => {\n    const columns = toExporterColumns(options.columns);\n    const exporter = new ExcelExporter({\n        columns: columns,\n        data: options.data,\n        filterable: options.filterable,\n        groups: options.group,\n        paddingCellOptions: options.paddingCellOptions,\n        headerPaddingCellOptions: options.headerPaddingCellOptions,\n        collapsible: options.collapsible,\n        hierarchy: options.hierarchy,\n        aggregates: options.aggregates\n    });\n    const result = exporter.workbook();\n    result.creator = options.creator;\n    result.date = options.date;\n    result.rtl = options.rtl;\n    destroyColumns(columns);\n    return result;\n};\n/**\n * @hidden\n */\nconst toDataURL = (options) => {\n    const workbook = new Workbook(options);\n    return workbook.toDataURL();\n};\n/**\n * @hidden\n */\nconst isWorkbookOptions = (value) => {\n    return value && value.sheets;\n};\n\n/**\n * @hidden\n */\nclass ColumnBase {\n    constructor(parent) {\n        this.parent = parent;\n    }\n    /**\n     * @hidden\n     */\n    get level() {\n        return this.parent ? this.parent.level + 1 : 0;\n    }\n}\nColumnBase.propDecorators = {\n    title: [{ type: Input }],\n    width: [{ type: Input }],\n    locked: [{ type: Input }],\n    hidden: [{ type: Input }],\n    headerCellOptions: [{ type: Input }],\n    children: [{ type: ContentChildren, args: [ColumnBase,] }]\n};\n\n// tslint:disable:max-line-length\n/**\n * Represents the [Kendo UI Excel Export component for Angular]({% slug overview_excelexport %}).\n * Configures the settings for the Excel export of the Kendo UI Grid.\n */\nclass ExcelExportComponent {\n    constructor(localization, zone) {\n        this.localization = localization;\n        this.zone = zone;\n        /**\n         * Specifies the name of the file that is exported to Excel.\n         * @default \"Export.xlsx\"\n         */\n        this.fileName = 'Export.xlsx';\n        /**\n         * @hidden\n         */\n        this.columns = new QueryList();\n        this.saveFile = this.saveFile.bind(this);\n    }\n    /**\n     * Saves the data to Excel.\n     *\n     * @param exportData - An optional parameter. Can be the data that will be exported or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}).\n     */\n    save(exportData) {\n        this.toDataURL(exportData).then(this.saveFile);\n    }\n    /**\n     * Based on the specified columns and data, returns\n     * [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %})\n     * ([see example]({% slug customrowsandcells_excelexport %})).\n     *\n     * @param exportData - The optional data to be exported.\n     * @returns {WorkbookOptions} - The workbook options.\n     */\n    workbookOptions(exportData) {\n        const currentData = this.getExportData(exportData);\n        const options = workbookOptions({\n            columns: this.columns,\n            data: currentData.data,\n            group: currentData.group,\n            filterable: this.filterable,\n            creator: this.creator,\n            date: this.date,\n            rtl: this.localization.rtl,\n            paddingCellOptions: this.paddingCellOptions,\n            headerPaddingCellOptions: this.headerPaddingCellOptions,\n            collapsible: this.collapsible\n        });\n        return options;\n    }\n    /**\n     * Returns a promise which will be resolved with the file data URI\n     * ([see example]({% slug filesaving_excelexport %})).\n     *\n     * @param exportData - The optional data or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}) that will be used to generate the data URI.\n     * @returns {Promise<string>} - The promise that will be resolved by the file data URI.\n     */\n    toDataURL(exportData) {\n        const options = isWorkbookOptions(exportData) ?\n            exportData :\n            this.workbookOptions(exportData);\n        return this.zone.runOutsideAngular(() => toDataURL(options));\n    }\n    getExportData(exportData) {\n        let result;\n        if (exportData) {\n            if (Array.isArray(exportData)) {\n                result = {\n                    data: exportData\n                };\n            }\n            else {\n                result = exportData;\n            }\n        }\n        else {\n            result = {\n                data: this.data,\n                group: this.group\n            };\n        }\n        return result;\n    }\n    saveFile(dataURL) {\n        saveAs(dataURL, this.fileName, {\n            forceProxy: this.forceProxy,\n            proxyURL: this.proxyURL\n        });\n    }\n}\nExcelExportComponent.decorators = [\n    { type: Component, args: [{\n                exportAs: 'kendoExcelExport',\n                selector: 'kendo-excelexport',\n                providers: [\n                    LocalizationService,\n                    {\n                        provide: L10N_PREFIX,\n                        useValue: 'kendo.excelexport'\n                    }\n                ],\n                template: ``\n            },] },\n];\n/** @nocollapse */\nExcelExportComponent.ctorParameters = () => [\n    { type: LocalizationService },\n    { type: NgZone }\n];\nExcelExportComponent.propDecorators = {\n    fileName: [{ type: Input }],\n    filterable: [{ type: Input }],\n    collapsible: [{ type: Input }],\n    creator: [{ type: Input }],\n    date: [{ type: Input }],\n    forceProxy: [{ type: Input }],\n    proxyURL: [{ type: Input }],\n    data: [{ type: Input }],\n    group: [{ type: Input }],\n    paddingCellOptions: [{ type: Input }],\n    headerPaddingCellOptions: [{ type: Input }],\n    columns: [{ type: ContentChildren, args: [ColumnBase, { descendants: true },] }]\n};\n\n/**\n * Represents the group header cell template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-group-header-template)).\n * Enables you to customize the content of the group header item.\n */\nclass GroupHeaderTemplateDirective {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nGroupHeaderTemplateDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[kendoExcelExportGroupHeaderTemplate]'\n            },] },\n];\n/** @nocollapse */\nGroupHeaderTemplateDirective.ctorParameters = () => [\n    { type: TemplateRef, decorators: [{ type: Optional }] }\n];\n\n/**\n * Represents the group header column template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-group-header-column-template)).\n */\nclass GroupHeaderColumnTemplateDirective {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nGroupHeaderColumnTemplateDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[kendoExcelExportGroupHeaderColumnTemplate]'\n            },] },\n];\n/** @nocollapse */\nGroupHeaderColumnTemplateDirective.ctorParameters = () => [\n    { type: TemplateRef, decorators: [{ type: Optional }] }\n];\n\n/**\n * Represents the group footer cell template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-group-footer-template)).\n * Enables you to customize the group footer cell of the column.\n */\nclass GroupFooterTemplateDirective {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nGroupFooterTemplateDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[kendoExcelExportGroupFooterTemplate]'\n            },] },\n];\n/** @nocollapse */\nGroupFooterTemplateDirective.ctorParameters = () => [\n    { type: TemplateRef, decorators: [{ type: Optional }] }\n];\n\n/**\n * Represents the footer cell template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-footer-template)).\n * Enables you to customize the footer cell of the column.\n */\nclass FooterTemplateDirective {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nFooterTemplateDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[kendoExcelExportFooterTemplate]'\n            },] },\n];\n/** @nocollapse */\nFooterTemplateDirective.ctorParameters = () => [\n    { type: TemplateRef, decorators: [{ type: Optional }] }\n];\n\n/**\n * Represents the columns of the Kendo UI Excel Export component for Angular.\n */\nclass ColumnComponent extends ColumnBase {\n    constructor(parent) {\n        super(parent);\n    }\n}\nColumnComponent.decorators = [\n    { type: Component, args: [{\n                providers: [\n                    {\n                        provide: ColumnBase,\n                        useExisting: forwardRef(() => ColumnComponent) // tslint:disable-line:no-forward-ref\n                    }\n                ],\n                selector: 'kendo-excelexport-column',\n                template: ``\n            },] },\n];\n/** @nocollapse */\nColumnComponent.ctorParameters = () => [\n    { type: ColumnBase, decorators: [{ type: SkipSelf }, { type: Host }, { type: Optional }] }\n];\nColumnComponent.propDecorators = {\n    field: [{ type: Input }],\n    cellOptions: [{ type: Input }],\n    groupHeaderCellOptions: [{ type: Input }],\n    groupFooterCellOptions: [{ type: Input }],\n    footerCellOptions: [{ type: Input }],\n    groupHeaderTemplate: [{ type: ContentChild, args: [GroupHeaderTemplateDirective,] }],\n    groupHeaderColumnTemplate: [{ type: ContentChild, args: [GroupHeaderColumnTemplateDirective,] }],\n    groupFooterTemplate: [{ type: ContentChild, args: [GroupFooterTemplateDirective,] }],\n    footerTemplate: [{ type: ContentChild, args: [FooterTemplateDirective,] }]\n};\n\n/**\n * Represents the column group component of the Kendo UI Excel Export component.\n */\nclass ColumnGroupComponent extends ColumnBase {\n    constructor(parent) {\n        super(parent);\n        this.parent = parent;\n    }\n}\nColumnGroupComponent.decorators = [\n    { type: Component, args: [{\n                providers: [\n                    {\n                        provide: ColumnBase,\n                        useExisting: forwardRef(() => ColumnGroupComponent) // tslint:disable-line:no-forward-ref\n                    }\n                ],\n                selector: 'kendo-excelexport-column-group',\n                template: ``\n            },] },\n];\n/** @nocollapse */\nColumnGroupComponent.ctorParameters = () => [\n    { type: ColumnBase, decorators: [{ type: SkipSelf }, { type: Host }, { type: Optional }] }\n];\n\nconst declarations = [\n    ExcelExportComponent,\n    ColumnComponent,\n    ColumnGroupComponent,\n    FooterTemplateDirective,\n    GroupFooterTemplateDirective,\n    GroupHeaderTemplateDirective,\n    GroupHeaderColumnTemplateDirective\n];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Excel Export component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the ExcelExportModule module\n * import { ExcelExportModule } from '@progress/kendo-angular-excel-export';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, ExcelExportModule], // import ExcelExportModule module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nclass ExcelExportModule {\n}\nExcelExportModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [declarations],\n                exports: [declarations]\n            },] },\n];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GroupHeaderColumnTemplateDirective, ExcelExportComponent, ExcelExportModule, ColumnBase, ColumnComponent, ColumnGroupComponent, FooterTemplateDirective, GroupFooterTemplateDirective, GroupHeaderTemplateDirective, workbookOptions, toDataURL, isWorkbookOptions };\n"]},"metadata":{},"sourceType":"module"}