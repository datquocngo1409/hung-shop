{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { MS_PER_HOUR, MS_PER_MINUTE } from '../constants';\nimport { cloneDate } from '../clone-date';\nimport { abbrTimezone } from './abbr-timezone';\nimport { offset } from './offset';\nimport { toLocalDate } from './to-local-date';\n\nvar addMinutes = function addMinutes(date, minutes) {\n  return new Date(date.getTime() + minutes * MS_PER_MINUTE);\n};\n\nvar addHours = function addHours(date, hours) {\n  return new Date(date.getTime() + hours * MS_PER_HOUR);\n};\n\nvar dayAbbr = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nvar monthAbbr = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dev'];\n\nvar datePrefix = function datePrefix(utcDate) {\n  return dayAbbr[utcDate.getUTCDay()] + ' ' + monthAbbr[utcDate.getUTCMonth()];\n};\n\nvar padNumber = function padNumber(num) {\n  var len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var sign = num < 0 ? '-' : '';\n  return sign + new Array(len).concat([Math.abs(num)]).join('0').slice(-len);\n};\n\nfunction isZoneMissingHour(date, timezone) {\n  var currentOffset = offset(timezone, date);\n  var prevHour = addHours(date, -1);\n  var prevOffset = offset(timezone, prevHour);\n  return currentOffset < prevOffset;\n}\n\nfunction shiftZoneMissingHour(utcDate, timezone) {\n  // Adjust for missing hour during DST transition in timezone.\n  var dstOffset = isZoneMissingHour(utcDate, timezone) ? 1 : 0;\n  return addHours(utcDate, dstOffset);\n}\n\nfunction convertTimezoneUTC(utcLocal, fromTimezone, toTimezone) {\n  if (fromTimezone === toTimezone) {\n    return utcLocal;\n  }\n\n  var fromOffset = offset(fromTimezone, utcLocal);\n  var toOffset = offset(toTimezone, utcLocal);\n  var baseDiff = fromOffset - toOffset;\n  var midDate = addMinutes(utcLocal, baseDiff);\n  var midOffset = offset(toTimezone, midDate);\n  var dstDiff = toOffset - midOffset;\n  return addMinutes(utcLocal, baseDiff + dstDiff);\n}\n\nfunction formatOffset(tzOffset) {\n  var sign = tzOffset <= 0 ? '+' : '-';\n  var value = Math.abs(tzOffset);\n  var hours = padNumber(Math.floor(value / 60));\n  var minutes = padNumber(value % 60);\n  return \"GMT\".concat(sign).concat(hours).concat(minutes);\n}\n/**\n * Represents a local date in a specified timezone.\n *\n * The following example demonstrates how to convert a local date to the specified timezone.\n *\n * @example\n * ```ts\n * import { ZonedDate } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/America/New_York';\n *\n * const date = new Date('2018-03-13T00:00:00Z');\n * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n *\n * // If you run this example in GMT+0200,\n * // the output will be '2018-03-12T22:00:00.000Z'.\n * console.log(tzDate.toISOString());\n * ```\n *\n * The following example demonstrates how to convert between timezones.\n *\n * @example\n * ```ts\n * import { ZonedDate } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/America/New_York';\n * import '@progress/kendo-date-math/tz/America/Los_Angeles';\n *\n * // Note the \"Z\" suffix for UTC dates.\n * const date = new Date('2018-03-12T22:00:00Z');\n *\n * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n * const result = tzDate.toTimezone('America/Los_Angeles');\n *\n * // Regardless of the browser timezone\n * // the output will be '2018-03-12T15:00:00.000Z'.\n * console.log(tzDate.toUTCDate());\n * ```\n */\n\n\nexport var ZonedDate = /*#__PURE__*/function () {\n  _createClass(ZonedDate, [{\n    key: \"toLocalDate\",\n\n    /**\n     * Returns a local date that denotes the exact time in the set timezone.\n     *\n     * @return Date - A local date that denotes the exact time in the set timezone.\n     *\n     * @example\n     * ```ts\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     *\n     * // Note the \"Z\" suffix for UTC dates.\n     * const date = new Date('2018-03-12T18:00:00Z');\n     * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n     *\n     * // The local date represents the same moment in time as the ZonedDate:\n     * // `2018-03-12T22:00:00.000Z`.\n     * console.log(tzDate.toLocalDate().toISOString());\n     *\n     * // The local date will apply the timezone of the browser. For example,\n     * // `Tue Mar 13 2018 00:00:00 GMT+0200 (Eastern European Standard Time)`.\n     * console.log(tzDate.toLocalDate().toString())\n     * ```\n     */\n    value: function toLocalDate() {\n      return cloneDate(this._localDate);\n    }\n    /**\n     * Returns a `Date` instance with UTC date parts that are set to the local time in the set timezone.\n     *\n     * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.\n     *\n     * @example\n     * ```ts\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     *\n     * // Note the \"Z\" suffix for UTC dates.\n     * const date = new Date('2018-03-12T18:00:00Z');\n     * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n     *\n     * // Regardless of the browser timezone\n     * // the output will be '2018-03-12T18:00:00.000Z'.\n     * console.log(tzDate.toUTCDate());\n     * ```\n     */\n\n  }, {\n    key: \"toUTCDate\",\n    value: function toUTCDate() {\n      return cloneDate(this._utcDate);\n    }\n    /**\n     * Converts the date to the specified timezone.\n     *\n     * @param toTimezone - The timezone to which the values will be converted. For example, `America/Los_Angeles`.\n     * @returns ZonedDate - The resulting zoned date.\n     *\n     * @example\n     * ```ts\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     * import '@progress/kendo-date-math/tz/America/Los_Angeles';\n     *\n     * // Note the \"Z\" suffix for UTC dates.\n     * const date = new Date('2018-03-12T22:00:00Z');\n     *\n     * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n     * const result = tzDate.toTimezone('America/Los_Angeles');\n     *\n     * // Regardless of the browser timezone\n     * // the output will be '2018-03-12T15:00:00.000Z'.\n     * console.log(tzDate.toUTCDate());\n     * ```\n     */\n\n  }, {\n    key: \"toTimezone\",\n    value: function toTimezone(_toTimezone) {\n      if (this.timezone === _toTimezone) {\n        return this.clone();\n      }\n\n      var tzOffset = offset(this.timezone, this._utcDate);\n      var date = addMinutes(this._utcDate, tzOffset);\n      return ZonedDate.fromLocalDate(date, _toTimezone);\n    }\n    /**\n     * Returns a new instance that represents the same date.\n     *\n     * @returns Date - A copy of the instance of the current zoned date.\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return ZonedDate.fromUTCDate(this._utcDate, this.timezone);\n    } // tslint:disable:max-line-length\n\n    /**\n     * Adds the specified number of days and returns a new instance with the resulting date in the same timezone.\n     *\n     * @param days - The number of days that will be added.\n     * @returns ZonedDate - The resulting date.\n     */\n    // tslint:enable:max-line-length\n\n  }, {\n    key: \"addDays\",\n    value: function addDays(days) {\n      var newDate = new Date(this._utcDate.getTime());\n      newDate.setUTCDate(newDate.getUTCDate() + days);\n      return ZonedDate.fromUTCDate(newDate, this.timezone);\n    } // tslint:disable:max-line-length\n\n    /**\n     * Adds the specified number of milliseconds and returns a new instance with the resulting date in the same timezone.\n     *\n     * The method compensates for DST transitions and ensures that the resulting date occurs exactly after the set amount of time in the timezone.\n     *\n     * @param milliseconds - The number of days that will be added.\n     * @returns ZonedDate - The resulting date.\n     */\n    // tslint:enable:max-line-length\n\n  }, {\n    key: \"addTime\",\n    value: function addTime(milliseconds) {\n      var utcDate = new Date(this._utcDate.getTime());\n      var utcMid = shiftZoneMissingHour(utcDate, this.timezone);\n      utcMid.setTime(utcMid.getTime() + milliseconds);\n      var utcResult = shiftZoneMissingHour(utcMid, this.timezone);\n      return ZonedDate.fromUTCDate(utcResult, this.timezone);\n    } // tslint:disable:max-line-length\n\n    /**\n     * Returns a new instance of the same zoned date having its time parts set to `00:00:00.000`.\n     *\n     * @returns ZonedDate - The same date having its time parts set to `00:00:00.000`.\n     */\n    // tslint:enable:max-line-length\n\n  }, {\n    key: \"stripTime\",\n    value: function stripTime() {\n      var date = this._utcDate;\n      var ticks = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);\n      return ZonedDate.fromUTCDate(new Date(ticks), this.timezone);\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"getTime\",\n    value: function getTime() {\n      return this._localDate.getTime();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"getTimezoneOffset\",\n    value: function getTimezoneOffset() {\n      return this.timezoneOffset;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"getFullYear\",\n    value: function getFullYear() {\n      return this._utcDate.getUTCFullYear();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"getMonth\",\n    value: function getMonth() {\n      return this._utcDate.getUTCMonth();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"getDate\",\n    value: function getDate() {\n      return this._utcDate.getUTCDate();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"getDay\",\n    value: function getDay() {\n      return this._utcDate.getUTCDay();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"getHours\",\n    value: function getHours() {\n      return this._utcDate.getUTCHours();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"getMinutes\",\n    value: function getMinutes() {\n      return this._utcDate.getUTCMinutes();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"getSeconds\",\n    value: function getSeconds() {\n      return this._utcDate.getUTCSeconds();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"getMilliseconds\",\n    value: function getMilliseconds() {\n      return this._utcDate.getUTCMilliseconds();\n    } // The local date UTC parts represent actual UTC time\n\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"getUTCDate\",\n    value: function getUTCDate() {\n      return this._localDate.getUTCDate();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"getUTCDay\",\n    value: function getUTCDay() {\n      return this._localDate.getUTCDay();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"getUTCFullYear\",\n    value: function getUTCFullYear() {\n      return this._localDate.getUTCFullYear();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"getUTCHours\",\n    value: function getUTCHours() {\n      return this._localDate.getUTCHours();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"getUTCMilliseconds\",\n    value: function getUTCMilliseconds() {\n      return this._localDate.getUTCMilliseconds();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"getUTCMinutes\",\n    value: function getUTCMinutes() {\n      return this._localDate.getUTCMinutes();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"getUTCMonth\",\n    value: function getUTCMonth() {\n      return this._localDate.getUTCMonth();\n    }\n    /** @hidden */\n\n  }, {\n    key: \"getUTCSeconds\",\n    value: function getUTCSeconds() {\n      return this._localDate.getUTCSeconds();\n    }\n    /** @hidden */\n\n  }, {\n    key: \"setTime\",\n    value: function setTime(time) {\n      throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n\n  }, {\n    key: \"setMilliseconds\",\n    value: function setMilliseconds(ms) {\n      throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n\n  }, {\n    key: \"setUTCMilliseconds\",\n    value: function setUTCMilliseconds(ms) {\n      throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n\n  }, {\n    key: \"setSeconds\",\n    value: function setSeconds(sec, ms) {\n      throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n\n  }, {\n    key: \"setUTCSeconds\",\n    value: function setUTCSeconds(sec, ms) {\n      throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n\n  }, {\n    key: \"setMinutes\",\n    value: function setMinutes(min, sec, ms) {\n      throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n\n  }, {\n    key: \"setUTCMinutes\",\n    value: function setUTCMinutes(min, sec, ms) {\n      throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n\n  }, {\n    key: \"setHours\",\n    value: function setHours(hours, min, sec, ms) {\n      throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n\n  }, {\n    key: \"setUTCHours\",\n    value: function setUTCHours(hours, min, sec, ms) {\n      throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n\n  }, {\n    key: \"setDate\",\n    value: function setDate(date) {\n      throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n\n  }, {\n    key: \"setUTCDate\",\n    value: function setUTCDate(date) {\n      throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n\n  }, {\n    key: \"setMonth\",\n    value: function setMonth(month, date) {\n      throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n\n  }, {\n    key: \"setUTCMonth\",\n    value: function setUTCMonth(month, date) {\n      throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n\n  }, {\n    key: \"setFullYear\",\n    value: function setFullYear(year, month, date) {\n      throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n\n  }, {\n    key: \"setUTCFullYear\",\n    value: function setUTCFullYear(year, month, date) {\n      throw new Error(\"Method not implemented.\");\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"toISOString\",\n    value: function toISOString() {\n      return this._localDate.toISOString();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this._localDate.toJSON();\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var dateString = datePrefix(this._utcDate);\n      var timeString = this.toTimeString();\n      return \"\".concat(dateString, \" \").concat(this.getDate(), \" \").concat(this.getFullYear(), \" \").concat(timeString);\n    }\n    /** @hidden */\n\n  }, {\n    key: \"toDateString\",\n    value: function toDateString() {\n      return toLocalDate(this._utcDate).toDateString();\n    }\n    /** @hidden */\n\n  }, {\n    key: \"toTimeString\",\n    value: function toTimeString() {\n      var hours = padNumber(this.getHours());\n      var minutes = padNumber(this.getMinutes());\n      var seconds = padNumber(this.getSeconds());\n      var time = \"\".concat(hours, \":\").concat(minutes, \":\").concat(seconds);\n      var tzOffset = formatOffset(this.timezoneOffset);\n      var abbrev = abbrTimezone(this.timezone, this._utcDate);\n\n      if (abbrev) {\n        abbrev = \" (\".concat(abbrev, \")\");\n      }\n\n      return \"\".concat(time, \" \").concat(tzOffset).concat(abbrev);\n    }\n  }, {\n    key: \"toLocaleString\",\n    value: function toLocaleString(locales, options) {\n      return this._localDate.toLocaleString(locales, options);\n    }\n  }, {\n    key: \"toLocaleDateString\",\n    value: function toLocaleDateString(locales, options) {\n      return this._localDate.toLocaleDateString(locales, options);\n    }\n  }, {\n    key: \"toLocaleTimeString\",\n    value: function toLocaleTimeString(locales, options) {\n      return this._localDate.toLocaleTimeString(locales, options);\n    }\n    /** @hidden */\n\n  }, {\n    key: \"toUTCString\",\n    value: function toUTCString() {\n      return this.toTimezone('Etc/UTC').toString();\n    }\n  }, {\n    key: Symbol.toPrimitive,\n    value: function value(hint) {\n      if (hint === 'string' || hint === 'default') {\n        return this.toString();\n      }\n\n      return this._localDate.getTime();\n    }\n    /** @hidden */\n\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.getTime();\n    }\n    /** @hidden */\n\n  }, {\n    key: \"getVarDate\",\n    value: function getVarDate() {\n      throw new Error('Not implemented.');\n    }\n    /** @hidden */\n\n  }, {\n    key: \"format\",\n    value: function format(_) {\n      throw new Error('Not implemented.');\n    }\n    /** @hidden */\n\n  }, {\n    key: \"formatUTC\",\n    value: function formatUTC(_) {\n      throw new Error('Not implemented.');\n    } // The constructor is aliased as a static fromUTCDate method\n    // to clarify the meaning of the utcDate parameter.\n    //\n    // It can be confused for a local date time while it is in fact\n    // treated as a UTC date that represents the local date in the timezone.\n\n  }, {\n    key: \"cachedLocalDate\",\n\n    /**\n     * Returns a cached local date that denotes the exact time in the set timezone.\n     *\n     * @return Date - A local date that denotes the exact time in the set timezone.\n     *\n     * This property is an alternative to `toLocalDate()` that returns a cached value instead of cloning it.\n     *\n     * > Modifying the returned instance will corrupt the `ZonedDate` state.\n     */\n    get: function get() {\n      return this._localDate;\n    }\n    /**\n     * Returns a cached `Date` instance with UTC date parts that are set to the local time in the set timezone.\n     *\n     * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.\n     *\n     * This property is an alternative to `toUTCDate()` that returns a cached value instead of cloning it.\n     *\n     * > Modifying the returned instance will corrupt the `ZonedDate` state.\n     */\n\n  }, {\n    key: \"cachedUTCDate\",\n    get: function get() {\n      return this._utcDate;\n    } // tslint:disable:max-line-length\n\n    /**\n     * Converts an existing date to a specified timezone.\n     *\n     * If the `timezone` parameter is omitted, the `ZonedDate` defaults to the timezone of the browser. This concept is known as \"floating date\" because it does not represent a particular moment in time. Instead, its actual value depends on the current timezone of the browser.\n     *\n     * @param date - The local date that represents the actual time instance.\n     * @param timezone - The ID of the timezone that will be assumed. For example, `Europe/Sofia`.\n     * @return ZonedDate - The date in the specified timezone.\n     *\n     * @example\n     * ```ts\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     *\n     * const date = new Date('2018-03-13T00:00:00');\n     * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n     *\n     * // If you run this example in GMT+0200,\n     * // the output will be 'Mon Mar 12 2018 18:00:00 GMT+0200 (EET)'.\n     * console.log(tzDate.toString());\n     *\n     * // If you run this example in UTC,\n     * // the output will be '2018-03-12T22:00:00.000Z'.\n     * console.log(tzDate.toISOString());\n     * ```\n     */\n    // tslint:enable:max-line-length\n\n  }], [{\n    key: \"fromLocalDate\",\n    value: function fromLocalDate(date) {\n      var timezone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var utcDate = convertTimezoneUTC(date, 'Etc/UTC', timezone);\n      var shiftZone = isZoneMissingHour(utcDate, timezone);\n      var zoneOffset = offset(timezone, utcDate);\n      var fixedOffset = 0;\n\n      if (shiftZone) {\n        // Adjust for the missing hour during the DST transition in the timezone.\n        fixedOffset = zoneOffset > 0 ? -1 : 1;\n      }\n\n      var adjDate = addHours(utcDate, fixedOffset);\n      return ZonedDate.fromUTCDate(adjDate, timezone);\n    } // tslint:disable:max-line-length\n\n    /**\n     * Creates a date in a specific timezone from the UTC date parts of the supplied `Date`.\n     *\n     * If the `timezone` parameter is omitted, the `ZonedDate` defaults to the timezone of the browser. This concept is known as \"floating date\" because it does not represent a particular moment in time. Instead, its actual value depends on the current timezone of the browser.\n     *\n     * @param date - The UTC date that represents the time in the target zone. This time is not the actual time instant in UTC.\n     * @param timezone - The ID of the timezone that will be assumed. For example, `Europe/Sofia`.\n     * @return ZonedDate - The date in the specified timezone.\n     *\n     * @example\n     * ```ts\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     *\n     * // Note the \"Z\" suffix for UTC dates.\n     * const date = new Date('2018-03-12T18:00:00Z');\n     *\n     * // Alternative syntax using Date.UTC\n     * // const date = new Date(Date.UTC(2018, 2, 12, 18, 0));\n     *\n     * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n     *\n     * // Regardless of the browser timezone\n     * // the output will be 'Mon Mar 12 2018 18:00:00 GMT+0200 (EET)'.\n     * console.log(tzDate.toString());\n     *\n     * // Regardless of the browser timezone\n     * // the output in UTC will be '2018-03-12T22:00:00.000Z'.\n     * console.log(tzDate.toISOString());\n     * ```\n     */\n    // tslint:enable:max-line-length\n\n  }, {\n    key: \"fromUTCDate\",\n    value: function fromUTCDate(utcDate) {\n      var timezone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      return new ZonedDate(utcDate, timezone);\n    }\n  }]);\n\n  function ZonedDate(utcDate, timezone) {\n    _classCallCheck(this, ZonedDate);\n\n    this._utcDate = cloneDate(utcDate);\n    this.timezone = timezone;\n    var tzOffset = offset(timezone, utcDate);\n    this.timezoneOffset = tzOffset;\n    var localDate = shiftZoneMissingHour(utcDate, timezone);\n    this._localDate = convertTimezoneUTC(localDate, timezone, 'Etc/UTC');\n  }\n\n  return ZonedDate;\n}();","map":{"version":3,"sources":["/home/datquocngo/Project/UET/gts-fe/node_modules/@progress/kendo-date-math/dist/es2015/tz/zoned-date.js"],"names":["MS_PER_HOUR","MS_PER_MINUTE","cloneDate","abbrTimezone","offset","toLocalDate","addMinutes","date","minutes","Date","getTime","addHours","hours","dayAbbr","monthAbbr","datePrefix","utcDate","getUTCDay","getUTCMonth","padNumber","num","len","sign","Array","concat","Math","abs","join","slice","isZoneMissingHour","timezone","currentOffset","prevHour","prevOffset","shiftZoneMissingHour","dstOffset","convertTimezoneUTC","utcLocal","fromTimezone","toTimezone","fromOffset","toOffset","baseDiff","midDate","midOffset","dstDiff","formatOffset","tzOffset","value","floor","ZonedDate","_localDate","_utcDate","clone","fromLocalDate","fromUTCDate","days","newDate","setUTCDate","getUTCDate","milliseconds","utcMid","setTime","utcResult","ticks","UTC","getUTCFullYear","timezoneOffset","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","time","Error","ms","sec","min","month","year","toISOString","toJSON","dateString","timeString","toTimeString","getDate","getFullYear","toDateString","getHours","getMinutes","seconds","getSeconds","abbrev","locales","options","toLocaleString","toLocaleDateString","toLocaleTimeString","toString","Symbol","toPrimitive","hint","_","shiftZone","zoneOffset","fixedOffset","adjDate","localDate"],"mappings":"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","sourcesContent":["import { MS_PER_HOUR, MS_PER_MINUTE } from '../constants';\nimport { cloneDate } from '../clone-date';\nimport { abbrTimezone } from './abbr-timezone';\nimport { offset } from './offset';\nimport { toLocalDate } from './to-local-date';\nconst addMinutes = (date, minutes) => new Date(date.getTime() + minutes * MS_PER_MINUTE);\nconst addHours = (date, hours) => new Date(date.getTime() + hours * MS_PER_HOUR);\nconst dayAbbr = [\n    'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'\n];\nconst monthAbbr = [\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dev'\n];\nconst datePrefix = (utcDate) => dayAbbr[utcDate.getUTCDay()] + ' ' + monthAbbr[utcDate.getUTCMonth()];\nconst padNumber = (num, len = 2) => {\n    const sign = num < 0 ? '-' : '';\n    return sign + new Array(len).concat([Math.abs(num)]).join('0').slice(-len);\n};\nfunction isZoneMissingHour(date, timezone) {\n    const currentOffset = offset(timezone, date);\n    const prevHour = addHours(date, -1);\n    const prevOffset = offset(timezone, prevHour);\n    return currentOffset < prevOffset;\n}\nfunction shiftZoneMissingHour(utcDate, timezone) {\n    // Adjust for missing hour during DST transition in timezone.\n    const dstOffset = isZoneMissingHour(utcDate, timezone) ? 1 : 0;\n    return addHours(utcDate, dstOffset);\n}\nfunction convertTimezoneUTC(utcLocal, fromTimezone, toTimezone) {\n    if (fromTimezone === toTimezone) {\n        return utcLocal;\n    }\n    const fromOffset = offset(fromTimezone, utcLocal);\n    const toOffset = offset(toTimezone, utcLocal);\n    const baseDiff = fromOffset - toOffset;\n    const midDate = addMinutes(utcLocal, baseDiff);\n    const midOffset = offset(toTimezone, midDate);\n    const dstDiff = toOffset - midOffset;\n    return addMinutes(utcLocal, baseDiff + dstDiff);\n}\nfunction formatOffset(tzOffset) {\n    const sign = tzOffset <= 0 ? '+' : '-';\n    const value = Math.abs(tzOffset);\n    const hours = padNumber(Math.floor(value / 60));\n    const minutes = padNumber(value % 60);\n    return `GMT${sign}${hours}${minutes}`;\n}\n/**\n * Represents a local date in a specified timezone.\n *\n * The following example demonstrates how to convert a local date to the specified timezone.\n *\n * @example\n * ```ts\n * import { ZonedDate } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/America/New_York';\n *\n * const date = new Date('2018-03-13T00:00:00Z');\n * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n *\n * // If you run this example in GMT+0200,\n * // the output will be '2018-03-12T22:00:00.000Z'.\n * console.log(tzDate.toISOString());\n * ```\n *\n * The following example demonstrates how to convert between timezones.\n *\n * @example\n * ```ts\n * import { ZonedDate } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/America/New_York';\n * import '@progress/kendo-date-math/tz/America/Los_Angeles';\n *\n * // Note the \"Z\" suffix for UTC dates.\n * const date = new Date('2018-03-12T22:00:00Z');\n *\n * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n * const result = tzDate.toTimezone('America/Los_Angeles');\n *\n * // Regardless of the browser timezone\n * // the output will be '2018-03-12T15:00:00.000Z'.\n * console.log(tzDate.toUTCDate());\n * ```\n */\nexport class ZonedDate {\n    /**\n     * Returns a cached local date that denotes the exact time in the set timezone.\n     *\n     * @return Date - A local date that denotes the exact time in the set timezone.\n     *\n     * This property is an alternative to `toLocalDate()` that returns a cached value instead of cloning it.\n     *\n     * > Modifying the returned instance will corrupt the `ZonedDate` state.\n     */\n    get cachedLocalDate() {\n        return this._localDate;\n    }\n    /**\n     * Returns a cached `Date` instance with UTC date parts that are set to the local time in the set timezone.\n     *\n     * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.\n     *\n     * This property is an alternative to `toUTCDate()` that returns a cached value instead of cloning it.\n     *\n     * > Modifying the returned instance will corrupt the `ZonedDate` state.\n     */\n    get cachedUTCDate() {\n        return this._utcDate;\n    }\n    // tslint:disable:max-line-length\n    /**\n     * Converts an existing date to a specified timezone.\n     *\n     * If the `timezone` parameter is omitted, the `ZonedDate` defaults to the timezone of the browser. This concept is known as \"floating date\" because it does not represent a particular moment in time. Instead, its actual value depends on the current timezone of the browser.\n     *\n     * @param date - The local date that represents the actual time instance.\n     * @param timezone - The ID of the timezone that will be assumed. For example, `Europe/Sofia`.\n     * @return ZonedDate - The date in the specified timezone.\n     *\n     * @example\n     * ```ts\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     *\n     * const date = new Date('2018-03-13T00:00:00');\n     * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n     *\n     * // If you run this example in GMT+0200,\n     * // the output will be 'Mon Mar 12 2018 18:00:00 GMT+0200 (EET)'.\n     * console.log(tzDate.toString());\n     *\n     * // If you run this example in UTC,\n     * // the output will be '2018-03-12T22:00:00.000Z'.\n     * console.log(tzDate.toISOString());\n     * ```\n     */\n    // tslint:enable:max-line-length\n    static fromLocalDate(date, timezone = '') {\n        const utcDate = convertTimezoneUTC(date, 'Etc/UTC', timezone);\n        const shiftZone = isZoneMissingHour(utcDate, timezone);\n        const zoneOffset = offset(timezone, utcDate);\n        let fixedOffset = 0;\n        if (shiftZone) {\n            // Adjust for the missing hour during the DST transition in the timezone.\n            fixedOffset = zoneOffset > 0 ? -1 : 1;\n        }\n        const adjDate = addHours(utcDate, fixedOffset);\n        return ZonedDate.fromUTCDate(adjDate, timezone);\n    }\n    // tslint:disable:max-line-length\n    /**\n     * Creates a date in a specific timezone from the UTC date parts of the supplied `Date`.\n     *\n     * If the `timezone` parameter is omitted, the `ZonedDate` defaults to the timezone of the browser. This concept is known as \"floating date\" because it does not represent a particular moment in time. Instead, its actual value depends on the current timezone of the browser.\n     *\n     * @param date - The UTC date that represents the time in the target zone. This time is not the actual time instant in UTC.\n     * @param timezone - The ID of the timezone that will be assumed. For example, `Europe/Sofia`.\n     * @return ZonedDate - The date in the specified timezone.\n     *\n     * @example\n     * ```ts\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     *\n     * // Note the \"Z\" suffix for UTC dates.\n     * const date = new Date('2018-03-12T18:00:00Z');\n     *\n     * // Alternative syntax using Date.UTC\n     * // const date = new Date(Date.UTC(2018, 2, 12, 18, 0));\n     *\n     * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n     *\n     * // Regardless of the browser timezone\n     * // the output will be 'Mon Mar 12 2018 18:00:00 GMT+0200 (EET)'.\n     * console.log(tzDate.toString());\n     *\n     * // Regardless of the browser timezone\n     * // the output in UTC will be '2018-03-12T22:00:00.000Z'.\n     * console.log(tzDate.toISOString());\n     * ```\n     */\n    // tslint:enable:max-line-length\n    static fromUTCDate(utcDate, timezone = '') {\n        return new ZonedDate(utcDate, timezone);\n    }\n    /**\n     * Returns a local date that denotes the exact time in the set timezone.\n     *\n     * @return Date - A local date that denotes the exact time in the set timezone.\n     *\n     * @example\n     * ```ts\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     *\n     * // Note the \"Z\" suffix for UTC dates.\n     * const date = new Date('2018-03-12T18:00:00Z');\n     * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n     *\n     * // The local date represents the same moment in time as the ZonedDate:\n     * // `2018-03-12T22:00:00.000Z`.\n     * console.log(tzDate.toLocalDate().toISOString());\n     *\n     * // The local date will apply the timezone of the browser. For example,\n     * // `Tue Mar 13 2018 00:00:00 GMT+0200 (Eastern European Standard Time)`.\n     * console.log(tzDate.toLocalDate().toString())\n     * ```\n     */\n    toLocalDate() {\n        return cloneDate(this._localDate);\n    }\n    /**\n     * Returns a `Date` instance with UTC date parts that are set to the local time in the set timezone.\n     *\n     * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.\n     *\n     * @example\n     * ```ts\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     *\n     * // Note the \"Z\" suffix for UTC dates.\n     * const date = new Date('2018-03-12T18:00:00Z');\n     * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n     *\n     * // Regardless of the browser timezone\n     * // the output will be '2018-03-12T18:00:00.000Z'.\n     * console.log(tzDate.toUTCDate());\n     * ```\n     */\n    toUTCDate() {\n        return cloneDate(this._utcDate);\n    }\n    /**\n     * Converts the date to the specified timezone.\n     *\n     * @param toTimezone - The timezone to which the values will be converted. For example, `America/Los_Angeles`.\n     * @returns ZonedDate - The resulting zoned date.\n     *\n     * @example\n     * ```ts\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     * import '@progress/kendo-date-math/tz/America/Los_Angeles';\n     *\n     * // Note the \"Z\" suffix for UTC dates.\n     * const date = new Date('2018-03-12T22:00:00Z');\n     *\n     * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n     * const result = tzDate.toTimezone('America/Los_Angeles');\n     *\n     * // Regardless of the browser timezone\n     * // the output will be '2018-03-12T15:00:00.000Z'.\n     * console.log(tzDate.toUTCDate());\n     * ```\n     */\n    toTimezone(toTimezone) {\n        if (this.timezone === toTimezone) {\n            return this.clone();\n        }\n        const tzOffset = offset(this.timezone, this._utcDate);\n        const date = addMinutes(this._utcDate, tzOffset);\n        return ZonedDate.fromLocalDate(date, toTimezone);\n    }\n    /**\n     * Returns a new instance that represents the same date.\n     *\n     * @returns Date - A copy of the instance of the current zoned date.\n     */\n    clone() {\n        return ZonedDate.fromUTCDate(this._utcDate, this.timezone);\n    }\n    // tslint:disable:max-line-length\n    /**\n     * Adds the specified number of days and returns a new instance with the resulting date in the same timezone.\n     *\n     * @param days - The number of days that will be added.\n     * @returns ZonedDate - The resulting date.\n     */\n    // tslint:enable:max-line-length\n    addDays(days) {\n        const newDate = new Date(this._utcDate.getTime());\n        newDate.setUTCDate(newDate.getUTCDate() + days);\n        return ZonedDate.fromUTCDate(newDate, this.timezone);\n    }\n    // tslint:disable:max-line-length\n    /**\n     * Adds the specified number of milliseconds and returns a new instance with the resulting date in the same timezone.\n     *\n     * The method compensates for DST transitions and ensures that the resulting date occurs exactly after the set amount of time in the timezone.\n     *\n     * @param milliseconds - The number of days that will be added.\n     * @returns ZonedDate - The resulting date.\n     */\n    // tslint:enable:max-line-length\n    addTime(milliseconds) {\n        const utcDate = new Date(this._utcDate.getTime());\n        const utcMid = shiftZoneMissingHour(utcDate, this.timezone);\n        utcMid.setTime(utcMid.getTime() + milliseconds);\n        const utcResult = shiftZoneMissingHour(utcMid, this.timezone);\n        return ZonedDate.fromUTCDate(utcResult, this.timezone);\n    }\n    // tslint:disable:max-line-length\n    /**\n     * Returns a new instance of the same zoned date having its time parts set to `00:00:00.000`.\n     *\n     * @returns ZonedDate - The same date having its time parts set to `00:00:00.000`.\n     */\n    // tslint:enable:max-line-length\n    stripTime() {\n        const date = this._utcDate;\n        const ticks = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);\n        return ZonedDate.fromUTCDate(new Date(ticks), this.timezone);\n    }\n    /**\n     * @hidden\n     */\n    getTime() {\n        return this._localDate.getTime();\n    }\n    /**\n     * @hidden\n     */\n    getTimezoneOffset() {\n        return this.timezoneOffset;\n    }\n    /**\n     * @hidden\n     */\n    getFullYear() {\n        return this._utcDate.getUTCFullYear();\n    }\n    /**\n     * @hidden\n     */\n    getMonth() {\n        return this._utcDate.getUTCMonth();\n    }\n    /**\n     * @hidden\n     */\n    getDate() {\n        return this._utcDate.getUTCDate();\n    }\n    /**\n     * @hidden\n     */\n    getDay() {\n        return this._utcDate.getUTCDay();\n    }\n    /**\n     * @hidden\n     */\n    getHours() {\n        return this._utcDate.getUTCHours();\n    }\n    /**\n     * @hidden\n     */\n    getMinutes() {\n        return this._utcDate.getUTCMinutes();\n    }\n    /**\n     * @hidden\n     */\n    getSeconds() {\n        return this._utcDate.getUTCSeconds();\n    }\n    /**\n     * @hidden\n     */\n    getMilliseconds() {\n        return this._utcDate.getUTCMilliseconds();\n    }\n    // The local date UTC parts represent actual UTC time\n    /**\n     * @hidden\n     */\n    getUTCDate() {\n        return this._localDate.getUTCDate();\n    }\n    /**\n     * @hidden\n     */\n    getUTCDay() {\n        return this._localDate.getUTCDay();\n    }\n    /**\n     * @hidden\n     */\n    getUTCFullYear() {\n        return this._localDate.getUTCFullYear();\n    }\n    /**\n     * @hidden\n     */\n    getUTCHours() {\n        return this._localDate.getUTCHours();\n    }\n    /**\n     * @hidden\n     */\n    getUTCMilliseconds() {\n        return this._localDate.getUTCMilliseconds();\n    }\n    /**\n     * @hidden\n     */\n    getUTCMinutes() {\n        return this._localDate.getUTCMinutes();\n    }\n    /**\n     * @hidden\n     */\n    getUTCMonth() {\n        return this._localDate.getUTCMonth();\n    }\n    /** @hidden */\n    getUTCSeconds() {\n        return this._localDate.getUTCSeconds();\n    }\n    /** @hidden */\n    setTime(time) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n    setMilliseconds(ms) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n    setUTCMilliseconds(ms) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n    setSeconds(sec, ms) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n    setUTCSeconds(sec, ms) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n    setMinutes(min, sec, ms) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n    setUTCMinutes(min, sec, ms) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n    setHours(hours, min, sec, ms) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n    setUTCHours(hours, min, sec, ms) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n    setDate(date) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n    setUTCDate(date) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n    setMonth(month, date) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n    setUTCMonth(month, date) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n    setFullYear(year, month, date) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @hidden */\n    setUTCFullYear(year, month, date) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /**\n     * @hidden\n     */\n    toISOString() {\n        return this._localDate.toISOString();\n    }\n    /**\n     * @hidden\n     */\n    toJSON() {\n        return this._localDate.toJSON();\n    }\n    /**\n     * @hidden\n     */\n    toString() {\n        const dateString = datePrefix(this._utcDate);\n        const timeString = this.toTimeString();\n        return `${dateString} ${this.getDate()} ${this.getFullYear()} ${timeString}`;\n    }\n    /** @hidden */\n    toDateString() {\n        return toLocalDate(this._utcDate).toDateString();\n    }\n    /** @hidden */\n    toTimeString() {\n        const hours = padNumber(this.getHours());\n        const minutes = padNumber(this.getMinutes());\n        const seconds = padNumber(this.getSeconds());\n        const time = `${hours}:${minutes}:${seconds}`;\n        const tzOffset = formatOffset(this.timezoneOffset);\n        let abbrev = abbrTimezone(this.timezone, this._utcDate);\n        if (abbrev) {\n            abbrev = ` (${abbrev})`;\n        }\n        return `${time} ${tzOffset}${abbrev}`;\n    }\n    toLocaleString(locales, options) {\n        return this._localDate.toLocaleString(locales, options);\n    }\n    toLocaleDateString(locales, options) {\n        return this._localDate.toLocaleDateString(locales, options);\n    }\n    toLocaleTimeString(locales, options) {\n        return this._localDate.toLocaleTimeString(locales, options);\n    }\n    /** @hidden */\n    toUTCString() {\n        return this.toTimezone('Etc/UTC').toString();\n    }\n    [Symbol.toPrimitive](hint) {\n        if (hint === 'string' || hint === 'default') {\n            return this.toString();\n        }\n        return this._localDate.getTime();\n    }\n    /** @hidden */\n    valueOf() {\n        return this.getTime();\n    }\n    /** @hidden */\n    getVarDate() {\n        throw new Error('Not implemented.');\n    }\n    /** @hidden */\n    format(_) {\n        throw new Error('Not implemented.');\n    }\n    /** @hidden */\n    formatUTC(_) {\n        throw new Error('Not implemented.');\n    }\n    // The constructor is aliased as a static fromUTCDate method\n    // to clarify the meaning of the utcDate parameter.\n    //\n    // It can be confused for a local date time while it is in fact\n    // treated as a UTC date that represents the local date in the timezone.\n    constructor(utcDate, timezone) {\n        this._utcDate = cloneDate(utcDate);\n        this.timezone = timezone;\n        const tzOffset = offset(timezone, utcDate);\n        this.timezoneOffset = tzOffset;\n        let localDate = shiftZoneMissingHour(utcDate, timezone);\n        this._localDate = convertTimezoneUTC(localDate, timezone, 'Etc/UTC');\n    }\n}\n"]},"metadata":{},"sourceType":"module"}