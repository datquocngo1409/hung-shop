{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport TemplateService from './services/template-service';\nimport getter from './utils/getter';\nimport map from './utils/map';\n\nfunction defaultGroupHeaderTemplate(data) {\n  return \"\".concat(data.title, \": \").concat(data.value);\n}\n\nfunction createArray(length, callback) {\n  var result = [];\n\n  for (var idx = 0; idx < length; idx++) {\n    result.push(callback(idx));\n  }\n\n  return result;\n}\n\nfunction defaultItemId(item) {\n  return item.id;\n}\n\nvar ExcelExporter = /*#__PURE__*/function () {\n  function ExcelExporter(options) {\n    _classCallCheck(this, ExcelExporter);\n\n    options.columns = this._trimColumns(options.columns || []);\n    this.allColumns = map(this._leafColumns(options.columns || []), this._prepareColumn);\n    this.columns = this.allColumns.filter(function (column) {\n      return !column.hidden;\n    });\n    this.options = options;\n    this.data = options.data || [];\n    this.aggregates = options.aggregates || {};\n    this.groups = [].concat(options.groups || []);\n    this.hasGroups = this.groups.length > 0;\n    this.hierarchy = options.hierarchy;\n    this.hasGroupHeaderColumn = this.columns.some(function (column) {\n      return column.groupHeaderColumnTemplate;\n    });\n    this.collapsible = this.options.collapsible;\n  }\n\n  _createClass(ExcelExporter, [{\n    key: \"workbook\",\n    value: function workbook() {\n      var workbook = {\n        sheets: [{\n          columns: this._columns(),\n          rows: this.hierarchy ? this._hierarchyRows() : this._rows(),\n          freezePane: this._freezePane(),\n          filter: this._filter()\n        }]\n      };\n      return workbook;\n    }\n  }, {\n    key: \"_trimColumns\",\n    value: function _trimColumns(columns) {\n      var _this = this;\n\n      return columns.filter(function (column) {\n        var result = Boolean(column.field);\n\n        if (!result && column.columns) {\n          result = _this._trimColumns(column.columns).length > 0;\n        }\n\n        return result;\n      });\n    }\n  }, {\n    key: \"_leafColumns\",\n    value: function _leafColumns(columns) {\n      var result = [];\n\n      for (var idx = 0; idx < columns.length; idx++) {\n        if (!columns[idx].columns) {\n          result.push(columns[idx]);\n        } else {\n          result = result.concat(this._leafColumns(columns[idx].columns));\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_prepareColumn\",\n    value: function _prepareColumn(column) {\n      if (!column.field) {\n        return null;\n      }\n\n      var value = function value(dataItem) {\n        return getter(column.field, true)(dataItem);\n      };\n\n      var values = null;\n\n      if (column.values) {\n        values = {};\n        column.values.forEach(function (item) {\n          values[item.value] = item.text;\n        });\n\n        value = function value(dataItem) {\n          return values[getter(column.field, true)(dataItem)];\n        };\n      }\n\n      return Object.assign({}, column, {\n        value: value,\n        values: values,\n        groupHeaderTemplate: column.groupHeaderTemplate ? TemplateService.compile(column.groupHeaderTemplate) : defaultGroupHeaderTemplate,\n        groupHeaderColumnTemplate: column.groupHeaderColumnTemplate ? TemplateService.compile(column.groupHeaderColumnTemplate) : null,\n        groupFooterTemplate: column.groupFooterTemplate ? TemplateService.compile(column.groupFooterTemplate) : null,\n        footerTemplate: column.footerTemplate ? TemplateService.compile(column.footerTemplate) : null\n      });\n    }\n  }, {\n    key: \"_filter\",\n    value: function _filter() {\n      if (!this.options.filterable) {\n        return null;\n      }\n\n      var depth = this._depth();\n\n      return {\n        from: depth,\n        to: depth + this.columns.length - 1\n      };\n    }\n  }, {\n    key: \"_createPaddingCells\",\n    value: function _createPaddingCells(length) {\n      var _this2 = this;\n\n      return createArray(length, function () {\n        return Object.assign({\n          background: \"#dfdfdf\",\n          color: \"#333\"\n        }, _this2.options.paddingCellOptions);\n      });\n    }\n  }, {\n    key: \"_dataRow\",\n    value: function _dataRow(dataItem, level, depth) {\n      var cells = this._createPaddingCells(level); // grouped\n\n\n      if (this.hasGroups && depth && dataItem.items) {\n        cells = cells.concat(this._groupHeaderCells(dataItem, level, depth));\n\n        var rows = this._dataRows(dataItem.items, level + 1);\n\n        rows.unshift({\n          type: \"group-header\",\n          cells: cells,\n          level: this.collapsible ? level : null\n        });\n        return rows.concat(this._footer(dataItem, level));\n      }\n\n      var dataCells = [];\n\n      for (var cellIdx = 0; cellIdx < this.columns.length; cellIdx++) {\n        dataCells[cellIdx] = this._cell(dataItem, this.columns[cellIdx]);\n      }\n\n      if (this.hierarchy) {\n        dataCells[0].colSpan = depth - level + 1;\n      }\n\n      return [{\n        type: \"data\",\n        cells: cells.concat(dataCells),\n        level: this.collapsible ? level : null\n      }];\n    }\n  }, {\n    key: \"_groupHeaderCells\",\n    value: function _groupHeaderCells(dataItem, level, depth) {\n      var cells = [];\n      var column = this.allColumns.filter(function (column) {\n        return column.field === dataItem.field;\n      })[0] || {};\n      var title = column && column.title ? column.title : dataItem.field;\n      var template = column ? column.groupHeaderTemplate || column.groupHeaderColumnTemplate : null;\n      var group = Object.assign({\n        title: title,\n        field: dataItem.field,\n        value: column && column.values ? column.values[dataItem.value] : dataItem.value,\n        aggregates: dataItem.aggregates,\n        items: dataItem.items\n      }, dataItem.aggregates[dataItem.field]);\n      var value = template ? template(group) : \"\".concat(title, \": \").concat(dataItem.value);\n      cells.push(Object.assign({\n        value: value,\n        background: \"#dfdfdf\",\n        color: \"#333\",\n        colSpan: (this.hasGroupHeaderColumn ? 1 : this.columns.length) + depth - level\n      }, column.groupHeaderCellOptions));\n\n      if (this.hasGroupHeaderColumn) {\n        this.columns.forEach(function (column, index) {\n          if (index > 0) {\n            cells.push(Object.assign({\n              background: \"#dfdfdf\",\n              color: \"#333\",\n              value: column.groupHeaderColumnTemplate ? column.groupHeaderColumnTemplate(Object.assign({\n                group: group\n              }, group, dataItem.aggregates[column.field])) : undefined\n            }, column.groupHeaderCellOptions));\n          }\n        });\n      }\n\n      return cells;\n    }\n  }, {\n    key: \"_dataRows\",\n    value: function _dataRows(dataItems, level) {\n      var depth = this._depth();\n\n      var rows = [];\n\n      for (var idx = 0; idx < dataItems.length; idx++) {\n        rows.push.apply(rows, this._dataRow(dataItems[idx], level, depth));\n      }\n\n      return rows;\n    }\n  }, {\n    key: \"_hierarchyRows\",\n    value: function _hierarchyRows() {\n      var depth = this._depth();\n\n      var data = this.data;\n      var itemLevel = this.hierarchy.itemLevel;\n      var itemId = this.hierarchy.itemId || defaultItemId;\n\n      var hasFooter = this._hasFooterTemplate();\n\n      var rows = [];\n      var parents = [];\n      var previousLevel = 0;\n      var previousItemId;\n\n      if (!hasFooter) {\n        this.collapsible = false;\n      }\n\n      for (var idx = 0; idx < data.length; idx++) {\n        var item = data[idx];\n        var level = itemLevel(item, idx);\n\n        if (hasFooter) {\n          if (level > previousLevel) {\n            parents.push({\n              id: previousItemId,\n              level: previousLevel\n            });\n          } else if (level < previousLevel) {\n            rows.push.apply(rows, this._hierarchyFooterRows(parents, level, depth));\n          }\n\n          previousLevel = level;\n          previousItemId = itemId(item, idx);\n        }\n\n        rows.push.apply(rows, this._dataRow(item, level + 1, depth));\n      }\n\n      if (hasFooter) {\n        rows.push.apply(rows, this._hierarchyFooterRows(parents, 0, depth));\n        var rootAggregate = data.length ? this.aggregates[data[0].parentId] : {};\n        rows.push(this._hierarchyFooter(rootAggregate, 0, depth));\n      }\n\n      this._prependHeaderRows(rows);\n\n      return rows;\n    }\n  }, {\n    key: \"_hierarchyFooterRows\",\n    value: function _hierarchyFooterRows(parents, currentLevel, depth) {\n      var rows = [];\n\n      while (parents.length && parents[parents.length - 1].level >= currentLevel) {\n        var parent = parents.pop();\n        rows.push(this._hierarchyFooter(this.aggregates[parent.id], parent.level + 1, depth));\n      }\n\n      return rows;\n    }\n  }, {\n    key: \"_hasFooterTemplate\",\n    value: function _hasFooterTemplate() {\n      var columns = this.columns;\n\n      for (var idx = 0; idx < columns.length; idx++) {\n        if (columns[idx].footerTemplate) {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"_hierarchyFooter\",\n    value: function _hierarchyFooter(aggregates, level, depth) {\n      var cells = this.columns.map(function (column, index) {\n        var colSpan = index ? 1 : depth - level + 1;\n\n        if (column.footerTemplate) {\n          var fieldAggregates = (aggregates || {})[column.field];\n          return Object.assign({\n            background: \"#dfdfdf\",\n            color: \"#333\",\n            colSpan: colSpan,\n            value: column.footerTemplate(Object.assign({\n              aggregates: aggregates\n            }, fieldAggregates))\n          }, column.footerCellOptions);\n        }\n\n        return Object.assign({\n          background: \"#dfdfdf\",\n          color: \"#333\",\n          colSpan: colSpan\n        }, column.footerCellOptions);\n      });\n      return {\n        type: \"footer\",\n        cells: this._createPaddingCells(level).concat(cells),\n        level: this.collapsible ? level : null\n      };\n    }\n  }, {\n    key: \"_footer\",\n    value: function _footer(dataItem, level) {\n      var rows = [];\n      var footer = this.columns.some(function (column) {\n        return column.groupFooterTemplate;\n      });\n      var templateData, group;\n\n      if (footer) {\n        group = {\n          group: {\n            items: dataItem.items,\n            field: dataItem.field,\n            value: dataItem.value\n          }\n        };\n        templateData = {};\n        Object.keys(dataItem.aggregates).forEach(function (key) {\n          templateData[key] = Object.assign({}, dataItem.aggregates[key], group);\n        });\n      }\n\n      var cells = this.columns.map(function (column) {\n        if (column.groupFooterTemplate) {\n          var data = Object.assign({}, templateData, dataItem.aggregates[column.field], group);\n          return Object.assign({\n            background: \"#dfdfdf\",\n            color: \"#333\",\n            value: column.groupFooterTemplate(data)\n          }, column.groupFooterCellOptions);\n        }\n\n        return Object.assign({\n          background: \"#dfdfdf\",\n          color: \"#333\"\n        }, column.groupFooterCellOptions);\n      });\n\n      if (footer) {\n        rows.push({\n          type: \"group-footer\",\n          cells: this._createPaddingCells(this.groups.length).concat(cells),\n          level: this.collapsible ? level : null\n        });\n      }\n\n      return rows;\n    }\n  }, {\n    key: \"_isColumnVisible\",\n    value: function _isColumnVisible(column) {\n      return this._visibleColumns([column]).length > 0 && (column.field || column.columns);\n    }\n  }, {\n    key: \"_visibleColumns\",\n    value: function _visibleColumns(columns) {\n      var _this3 = this;\n\n      return columns.filter(function (column) {\n        var result = !column.hidden;\n\n        if (result && column.columns) {\n          result = _this3._visibleColumns(column.columns).length > 0;\n        }\n\n        return result;\n      });\n    }\n  }, {\n    key: \"_headerRow\",\n    value: function _headerRow(row, groups) {\n      var _this4 = this;\n\n      var headers = row.cells.map(function (cell) {\n        return Object.assign(cell, {\n          colSpan: cell.colSpan > 1 ? cell.colSpan : 1,\n          rowSpan: row.rowSpan > 1 && !cell.colSpan ? row.rowSpan : 1\n        });\n      });\n\n      if (this.hierarchy && headers[0].firstCell) {\n        headers[0].colSpan += this._depth();\n      }\n\n      return {\n        type: \"header\",\n        cells: createArray(groups.length, function () {\n          return Object.assign({\n            background: \"#7a7a7a\",\n            color: \"#fff\"\n          }, _this4.options.headerPaddingCellOptions);\n        }).concat(headers)\n      };\n    }\n  }, {\n    key: \"_prependHeaderRows\",\n    value: function _prependHeaderRows(rows) {\n      var groups = this.groups;\n      var headerRows = [{\n        rowSpan: 1,\n        cells: [],\n        index: 0\n      }];\n\n      this._prepareHeaderRows(headerRows, this.options.columns);\n\n      for (var idx = headerRows.length - 1; idx >= 0; idx--) {\n        rows.unshift(this._headerRow(headerRows[idx], groups));\n      }\n    }\n  }, {\n    key: \"_prepareHeaderRows\",\n    value: function _prepareHeaderRows(rows, columns, parentCell, parentRow) {\n      var row = parentRow || rows[rows.length - 1];\n      var childRow = rows[row.index + 1];\n      var totalColSpan = 0;\n\n      for (var idx = 0; idx < columns.length; idx++) {\n        var column = columns[idx];\n\n        if (this._isColumnVisible(column)) {\n          var cell = Object.assign({\n            background: \"#7a7a7a\",\n            color: \"#fff\",\n            value: column.title || column.field,\n            colSpan: 0,\n            firstCell: idx === 0 && (!parentCell || parentCell.firstCell)\n          }, column.headerCellOptions);\n          row.cells.push(cell);\n\n          if (column.columns && column.columns.length) {\n            if (!childRow) {\n              childRow = {\n                rowSpan: 0,\n                cells: [],\n                index: rows.length\n              };\n              rows.push(childRow);\n            }\n\n            cell.colSpan = this._trimColumns(this._visibleColumns(column.columns)).length;\n\n            this._prepareHeaderRows(rows, column.columns, cell, childRow);\n\n            totalColSpan += cell.colSpan - 1;\n            row.rowSpan = rows.length - row.index;\n          }\n        }\n      }\n\n      if (parentCell) {\n        parentCell.colSpan += totalColSpan;\n      }\n    }\n  }, {\n    key: \"_rows\",\n    value: function _rows() {\n      var _this5 = this;\n\n      var rows = this._dataRows(this.data, 0);\n\n      if (this.columns.length) {\n        this._prependHeaderRows(rows);\n\n        var footer = false;\n        var cells = this.columns.map(function (column) {\n          if (column.footerTemplate) {\n            footer = true;\n            return Object.assign({\n              background: \"#dfdfdf\",\n              color: \"#333\",\n              value: column.footerTemplate(Object.assign({}, _this5.aggregates, _this5.aggregates[column.field]))\n            }, column.footerCellOptions);\n          }\n\n          return Object.assign({\n            background: \"#dfdfdf\",\n            color: \"#333\"\n          }, column.footerCellOptions);\n        });\n\n        if (footer) {\n          rows.push({\n            type: \"footer\",\n            cells: this._createPaddingCells(this.groups.length).concat(cells)\n          });\n        }\n      }\n\n      return rows;\n    }\n  }, {\n    key: \"_headerDepth\",\n    value: function _headerDepth(columns) {\n      var result = 1;\n      var max = 0;\n\n      for (var idx = 0; idx < columns.length; idx++) {\n        if (columns[idx].columns) {\n          var temp = this._headerDepth(columns[idx].columns);\n\n          if (temp > max) {\n            max = temp;\n          }\n        }\n      }\n\n      return result + max;\n    }\n  }, {\n    key: \"_freezePane\",\n    value: function _freezePane() {\n      var columns = this._visibleColumns(this.options.columns || []);\n\n      var colSplit = this._visibleColumns(this._trimColumns(this._leafColumns(columns.filter(function (column) {\n        return column.locked;\n      })))).length;\n\n      return {\n        rowSplit: this._headerDepth(columns),\n        colSplit: colSplit ? colSplit + this.groups.length : 0\n      };\n    }\n  }, {\n    key: \"_cell\",\n    value: function _cell(dataItem, column) {\n      return Object.assign({\n        value: column.value(dataItem)\n      }, column.cellOptions);\n    }\n  }, {\n    key: \"_depth\",\n    value: function _depth() {\n      var depth = 0;\n\n      if (this.hierarchy) {\n        depth = this.hierarchy.depth;\n      } else {\n        depth = this.groups.length;\n      }\n\n      return depth;\n    }\n  }, {\n    key: \"_columns\",\n    value: function _columns() {\n      var depth = this._depth();\n\n      var columns = createArray(depth, function () {\n        return {\n          width: 20\n        };\n      });\n      return columns.concat(this.columns.map(function (column) {\n        return {\n          width: parseInt(column.width, 10),\n          autoWidth: column.width ? false : true\n        };\n      }));\n    }\n  }]);\n\n  return ExcelExporter;\n}();\n\nexport default ExcelExporter;","map":{"version":3,"sources":["/home/datquocngo/Project/Hung/gts-fe/node_modules/@progress/kendo-ooxml/dist/es2015/excel-exporter.js"],"names":["TemplateService","getter","map","defaultGroupHeaderTemplate","data","title","value","createArray","length","callback","result","idx","push","defaultItemId","item","id","ExcelExporter","options","columns","_trimColumns","allColumns","_leafColumns","_prepareColumn","filter","column","hidden","aggregates","groups","concat","hasGroups","hierarchy","hasGroupHeaderColumn","some","groupHeaderColumnTemplate","collapsible","workbook","sheets","_columns","rows","_hierarchyRows","_rows","freezePane","_freezePane","_filter","Boolean","field","dataItem","values","forEach","text","Object","assign","groupHeaderTemplate","compile","groupFooterTemplate","footerTemplate","filterable","depth","_depth","from","to","background","color","paddingCellOptions","level","cells","_createPaddingCells","items","_groupHeaderCells","_dataRows","unshift","type","_footer","dataCells","cellIdx","_cell","colSpan","template","group","groupHeaderCellOptions","index","undefined","dataItems","apply","_dataRow","itemLevel","itemId","hasFooter","_hasFooterTemplate","parents","previousLevel","previousItemId","_hierarchyFooterRows","rootAggregate","parentId","_hierarchyFooter","_prependHeaderRows","currentLevel","parent","pop","fieldAggregates","footerCellOptions","footer","templateData","keys","key","groupFooterCellOptions","_visibleColumns","row","headers","cell","rowSpan","firstCell","headerPaddingCellOptions","headerRows","_prepareHeaderRows","_headerRow","parentCell","parentRow","childRow","totalColSpan","_isColumnVisible","headerCellOptions","max","temp","_headerDepth","colSplit","locked","rowSplit","cellOptions","width","parseInt","autoWidth"],"mappings":"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","sourcesContent":["import TemplateService from './services/template-service';\nimport getter from './utils/getter';\nimport map from './utils/map';\n\nfunction defaultGroupHeaderTemplate(data) {\n    return `${ data.title }: ${ data.value }`;\n}\n\nfunction createArray(length, callback) {\n    const result = [];\n\n    for (let idx = 0; idx < length; idx++) {\n        result.push(callback(idx));\n    }\n\n    return result;\n}\n\nfunction defaultItemId(item) {\n    return item.id;\n}\n\nclass ExcelExporter {\n    constructor(options) {\n        options.columns = this._trimColumns(options.columns || []);\n\n        this.allColumns = map(this._leafColumns(options.columns || []), this._prepareColumn);\n\n        this.columns = this.allColumns.filter(function(column) { return !column.hidden; });\n\n        this.options = options;\n        this.data = options.data || [];\n        this.aggregates = options.aggregates || {};\n        this.groups = [].concat(options.groups || []);\n        this.hasGroups = this.groups.length > 0;\n        this.hierarchy = options.hierarchy;\n        this.hasGroupHeaderColumn = this.columns.some(column => column.groupHeaderColumnTemplate);\n        this.collapsible = this.options.collapsible;\n    }\n\n    workbook() {\n        const workbook = {\n            sheets: [ {\n                columns: this._columns(),\n                rows: this.hierarchy ? this._hierarchyRows() : this._rows(),\n                freezePane: this._freezePane(),\n                filter: this._filter()\n            } ]\n        };\n\n        return workbook;\n    }\n\n    _trimColumns(columns) {\n        return columns.filter((column) => {\n            let result = Boolean(column.field);\n\n            if (!result && column.columns) {\n                result = this._trimColumns(column.columns).length > 0;\n            }\n\n            return result;\n        });\n    }\n\n    _leafColumns(columns) {\n        let result = [];\n\n        for (let idx = 0; idx < columns.length; idx++) {\n            if (!columns[idx].columns) {\n                result.push(columns[idx]);\n            } else {\n                result = result.concat(this._leafColumns(columns[idx].columns));\n            }\n        }\n\n        return result;\n    }\n\n    _prepareColumn(column) {\n        if (!column.field) {\n            return null;\n        }\n\n        let value = function(dataItem) {\n            return getter(column.field, true)(dataItem);\n        };\n\n        let values = null;\n\n        if (column.values) {\n            values = {};\n\n            column.values.forEach(function(item) {\n                values[item.value] = item.text;\n            });\n\n            value = function(dataItem) {\n                return values[getter(column.field, true)(dataItem)];\n            };\n        }\n\n        return Object.assign({}, column, {\n            value: value,\n            values: values,\n            groupHeaderTemplate: column.groupHeaderTemplate ? TemplateService.compile(column.groupHeaderTemplate) : defaultGroupHeaderTemplate,\n            groupHeaderColumnTemplate: column.groupHeaderColumnTemplate ? TemplateService.compile(column.groupHeaderColumnTemplate) : null,\n            groupFooterTemplate: column.groupFooterTemplate ? TemplateService.compile(column.groupFooterTemplate) : null,\n            footerTemplate: column.footerTemplate ? TemplateService.compile(column.footerTemplate) : null\n        });\n    }\n\n    _filter() {\n        if (!this.options.filterable) {\n            return null;\n        }\n\n        const depth = this._depth();\n\n        return {\n            from: depth,\n            to: depth + this.columns.length - 1\n        };\n    }\n\n    _createPaddingCells(length) {\n        return createArray(length, () => Object.assign({\n            background: \"#dfdfdf\",\n            color: \"#333\"\n        }, this.options.paddingCellOptions));\n    }\n\n    _dataRow(dataItem, level, depth) {\n        let cells = this._createPaddingCells(level);\n\n        // grouped\n        if (this.hasGroups && depth && dataItem.items) {\n            cells = cells.concat(this._groupHeaderCells(dataItem, level, depth));\n            const rows = this._dataRows(dataItem.items, level + 1);\n\n            rows.unshift({\n                type: \"group-header\",\n                cells: cells,\n                level: this.collapsible ? level : null\n            });\n\n            return rows.concat(this._footer(dataItem, level));\n        }\n\n        const dataCells = [];\n\n        for (let cellIdx = 0; cellIdx < this.columns.length; cellIdx++) {\n            dataCells[cellIdx] = this._cell(dataItem, this.columns[cellIdx]);\n        }\n\n        if (this.hierarchy) {\n            dataCells[0].colSpan = depth - level + 1;\n        }\n\n        return [ {\n            type: \"data\",\n            cells: cells.concat(dataCells),\n            level: this.collapsible ? level : null\n        } ];\n    }\n\n    _groupHeaderCells(dataItem, level, depth) {\n        const cells = [];\n\n        const column = this.allColumns.filter(function(column) {\n            return column.field === dataItem.field;\n        })[0] || {};\n\n        const title = column && column.title ? column.title : dataItem.field;\n        const template = column ? column.groupHeaderTemplate || column.groupHeaderColumnTemplate : null;\n        const group = Object.assign({\n            title: title,\n            field: dataItem.field,\n            value: column && column.values ? column.values[dataItem.value] : dataItem.value,\n            aggregates: dataItem.aggregates,\n            items: dataItem.items\n        }, dataItem.aggregates[dataItem.field]);\n\n        const value = template ? template(group) : `${ title }: ${ dataItem.value }`;\n\n        cells.push(Object.assign({\n            value: value,\n            background: \"#dfdfdf\",\n            color: \"#333\",\n            colSpan: (this.hasGroupHeaderColumn ? 1 : this.columns.length) + depth - level\n        }, column.groupHeaderCellOptions));\n\n        if (this.hasGroupHeaderColumn) {\n            this.columns.forEach(function(column, index) {\n                if (index > 0) {\n                    cells.push(Object.assign({\n                        background: \"#dfdfdf\",\n                        color: \"#333\",\n                        value: column.groupHeaderColumnTemplate ?\n                            column.groupHeaderColumnTemplate(Object.assign({ group: group }, group, dataItem.aggregates[column.field])) :\n                            undefined\n                    }, column.groupHeaderCellOptions));\n                }\n            });\n        }\n\n        return cells;\n    }\n\n    _dataRows(dataItems, level) {\n        const depth = this._depth();\n        const rows = [];\n\n        for (let idx = 0; idx < dataItems.length; idx++) {\n            rows.push.apply(rows, this._dataRow(dataItems[idx], level, depth));\n        }\n\n        return rows;\n    }\n\n    _hierarchyRows() {\n        const depth = this._depth();\n        const data = this.data;\n        const itemLevel = this.hierarchy.itemLevel;\n        const itemId = this.hierarchy.itemId || defaultItemId;\n        const hasFooter = this._hasFooterTemplate();\n        const rows = [];\n        const parents = [];\n        let previousLevel = 0;\n        let previousItemId;\n\n        if (!hasFooter) {\n            this.collapsible = false;\n        }\n\n        for (let idx = 0; idx < data.length; idx++) {\n            const item = data[idx];\n            const level = itemLevel(item, idx);\n\n            if (hasFooter) {\n                if (level > previousLevel) {\n                    parents.push({ id: previousItemId, level: previousLevel });\n                } else if (level < previousLevel) {\n                    rows.push.apply(rows, this._hierarchyFooterRows(parents, level, depth));\n                }\n\n                previousLevel = level;\n                previousItemId = itemId(item, idx);\n            }\n\n            rows.push.apply(rows, this._dataRow(item, level + 1, depth));\n        }\n\n        if (hasFooter) {\n            rows.push.apply(rows, this._hierarchyFooterRows(parents, 0, depth));\n\n            const rootAggregate = data.length ? this.aggregates[data[0].parentId] : {};\n            rows.push(this._hierarchyFooter(rootAggregate, 0, depth));\n        }\n\n        this._prependHeaderRows(rows);\n\n        return rows;\n    }\n\n    _hierarchyFooterRows(parents, currentLevel, depth) {\n        const rows = [];\n        while (parents.length && parents[parents.length - 1].level >= currentLevel) {\n            const parent = parents.pop();\n            rows.push(this._hierarchyFooter(this.aggregates[parent.id], parent.level + 1, depth));\n        }\n\n        return rows;\n    }\n\n    _hasFooterTemplate() {\n        const columns = this.columns;\n        for (let idx = 0; idx < columns.length; idx++) {\n            if (columns[idx].footerTemplate) {\n                return true;\n            }\n        }\n    }\n\n    _hierarchyFooter(aggregates, level, depth) {\n        const cells = this.columns.map(function(column, index) {\n            const colSpan = index ? 1 : depth - level + 1;\n            if (column.footerTemplate) {\n                const fieldAggregates = (aggregates || {})[column.field];\n                return Object.assign({\n                    background: \"#dfdfdf\",\n                    color: \"#333\",\n                    colSpan: colSpan,\n                    value: column.footerTemplate(Object.assign({ aggregates: aggregates }, fieldAggregates))\n                }, column.footerCellOptions);\n            }\n\n            return Object.assign({\n                background: \"#dfdfdf\",\n                color: \"#333\",\n                colSpan: colSpan\n            }, column.footerCellOptions);\n        });\n\n        return {\n            type: \"footer\",\n            cells: this._createPaddingCells(level).concat(cells),\n            level: this.collapsible ? level : null\n        };\n    }\n\n    _footer(dataItem, level) {\n        const rows = [];\n        const footer = this.columns.some(column => column.groupFooterTemplate);\n\n        let templateData, group;\n        if (footer) {\n            group = {\n                group: { items: dataItem.items,\n                         field: dataItem.field,\n                         value: dataItem.value }\n            };\n            templateData = {};\n            Object.keys(dataItem.aggregates).forEach(key => {\n                templateData[key] = Object.assign({}, dataItem.aggregates[key], group);\n            });\n        }\n\n        const cells = this.columns.map((column) => {\n            if (column.groupFooterTemplate) {\n                let data = Object.assign({}, templateData, dataItem.aggregates[column.field], group);\n                return Object.assign({\n                    background: \"#dfdfdf\",\n                    color: \"#333\",\n                    value: column.groupFooterTemplate(data)\n                }, column.groupFooterCellOptions);\n            }\n\n            return Object.assign({\n                background: \"#dfdfdf\",\n                color: \"#333\"\n            }, column.groupFooterCellOptions);\n        });\n\n        if (footer) {\n            rows.push({\n                type: \"group-footer\",\n                cells: this._createPaddingCells(this.groups.length).concat(cells),\n                level: this.collapsible ? level : null\n            });\n        }\n\n        return rows;\n    }\n\n    _isColumnVisible(column) {\n        return this._visibleColumns([ column ]).length > 0 && (column.field || column.columns);\n    }\n\n    _visibleColumns(columns) {\n        return columns.filter((column) => {\n            let result = !column.hidden;\n            if (result && column.columns) {\n                result = this._visibleColumns(column.columns).length > 0;\n            }\n            return result;\n        });\n    }\n\n    _headerRow(row, groups) {\n        const headers = row.cells.map(function(cell) {\n            return Object.assign(cell, {\n                colSpan: cell.colSpan > 1 ? cell.colSpan : 1,\n                rowSpan: row.rowSpan > 1 && !cell.colSpan ? row.rowSpan : 1\n            });\n        });\n\n        if (this.hierarchy && headers[0].firstCell) {\n            headers[0].colSpan += this._depth();\n        }\n\n        return {\n            type: \"header\",\n            cells: createArray(groups.length, () => Object.assign({\n                background: \"#7a7a7a\",\n                color: \"#fff\"\n            }, this.options.headerPaddingCellOptions)).concat(headers)\n        };\n    }\n\n    _prependHeaderRows(rows) {\n        const groups = this.groups;\n\n        const headerRows = [ { rowSpan: 1, cells: [], index: 0 } ];\n\n        this._prepareHeaderRows(headerRows, this.options.columns);\n\n        for (let idx = headerRows.length - 1; idx >= 0; idx--) {\n            rows.unshift(this._headerRow(headerRows[idx], groups));\n        }\n    }\n\n    _prepareHeaderRows(rows, columns, parentCell, parentRow) {\n        const row = parentRow || rows[rows.length - 1];\n        let childRow = rows[row.index + 1];\n        let totalColSpan = 0;\n\n        for (let idx = 0; idx < columns.length; idx++) {\n            const column = columns[idx];\n            if (this._isColumnVisible(column)) {\n\n                const cell = Object.assign({\n                    background: \"#7a7a7a\",\n                    color: \"#fff\",\n                    value: column.title || column.field,\n                    colSpan: 0,\n                    firstCell: idx === 0 && (!parentCell || parentCell.firstCell)\n                }, column.headerCellOptions);\n                row.cells.push(cell);\n\n                if (column.columns && column.columns.length) {\n                    if (!childRow) {\n                        childRow = { rowSpan: 0, cells: [], index: rows.length };\n                        rows.push(childRow);\n                    }\n                    cell.colSpan = this._trimColumns(this._visibleColumns(column.columns)).length;\n                    this._prepareHeaderRows(rows, column.columns, cell, childRow);\n                    totalColSpan += cell.colSpan - 1;\n                    row.rowSpan = rows.length - row.index;\n                }\n            }\n        }\n\n        if (parentCell) {\n            parentCell.colSpan += totalColSpan;\n        }\n    }\n\n    _rows() {\n        const rows = this._dataRows(this.data, 0);\n\n        if (this.columns.length) {\n            this._prependHeaderRows(rows);\n            let footer = false;\n\n            const cells = this.columns.map((column) => {\n                if (column.footerTemplate) {\n                    footer = true;\n\n                    return Object.assign({\n                        background: \"#dfdfdf\",\n                        color: \"#333\",\n                        value: column.footerTemplate(Object.assign({}, this.aggregates, this.aggregates[column.field]))\n                    }, column.footerCellOptions);\n                }\n\n                return Object.assign({\n                    background: \"#dfdfdf\",\n                    color: \"#333\"\n                }, column.footerCellOptions);\n            });\n\n            if (footer) {\n                rows.push({\n                    type: \"footer\",\n                    cells: this._createPaddingCells(this.groups.length).concat(cells)\n                });\n            }\n        }\n\n        return rows;\n    }\n\n    _headerDepth(columns) {\n        const result = 1;\n        let max = 0;\n\n        for (let idx = 0; idx < columns.length; idx++) {\n            if (columns[idx].columns) {\n                const temp = this._headerDepth(columns[idx].columns);\n                if (temp > max) {\n                    max = temp;\n                }\n            }\n        }\n        return result + max;\n    }\n\n    _freezePane() {\n        const columns = this._visibleColumns(this.options.columns || []);\n\n        const colSplit = this._visibleColumns(this._trimColumns(this._leafColumns(columns.filter(function(column) {\n            return column.locked;\n        })))).length;\n\n        return {\n            rowSplit: this._headerDepth(columns),\n            colSplit: colSplit ? colSplit + this.groups.length : 0\n        };\n    }\n\n    _cell(dataItem, column) {\n        return Object.assign({\n            value: column.value(dataItem)\n        }, column.cellOptions);\n    }\n\n    _depth() {\n        let depth = 0;\n\n        if (this.hierarchy) {\n            depth = this.hierarchy.depth;\n        } else {\n            depth = this.groups.length;\n        }\n\n        return depth;\n    }\n\n    _columns() {\n        const depth = this._depth();\n        const columns = createArray(depth, () => ({ width: 20 }));\n\n        return columns.concat(this.columns.map(function(column) {\n            return {\n                width: parseInt(column.width, 10),\n                autoWidth: column.width ? false : true\n            };\n        }));\n    }\n}\n\nexport default ExcelExporter;\n"]},"metadata":{},"sourceType":"module"}