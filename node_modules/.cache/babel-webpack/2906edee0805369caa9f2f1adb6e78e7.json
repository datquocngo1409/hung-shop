{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createClass from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { EventEmitter, Component, ElementRef, Inject, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { timer } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction CircleProgressComponent__svg_svg_0__svg_linearGradient_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"linearGradient\");\n    ɵngcc0.ɵɵelement(1, \"stop\", 5);\n    ɵngcc0.ɵɵelement(2, \"stop\", 6);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r1.svg.outerLinearGradient.id);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"stop-color\", ctx_r1.svg.outerLinearGradient.colorStop1)(\"stop-opacity\", 1);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"stop-color\", ctx_r1.svg.outerLinearGradient.colorStop2)(\"stop-opacity\", 1);\n  }\n}\n\nfunction CircleProgressComponent__svg_svg_0__svg_radialGradient_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"radialGradient\");\n    ɵngcc0.ɵɵelement(1, \"stop\", 5);\n    ɵngcc0.ɵɵelement(2, \"stop\", 6);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r2.svg.radialGradient.id);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"stop-color\", ctx_r2.svg.radialGradient.colorStop1)(\"stop-opacity\", 1);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"stop-color\", ctx_r2.svg.radialGradient.colorStop2)(\"stop-opacity\", 1);\n  }\n}\n\nfunction CircleProgressComponent__svg_svg_0__svg_ng_container_4__svg_circle_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\");\n  }\n\n  if (rf & 2) {\n    var ctx_r8 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵattribute(\"cx\", ctx_r8.svg.backgroundCircle.cx)(\"cy\", ctx_r8.svg.backgroundCircle.cy)(\"r\", ctx_r8.svg.backgroundCircle.r)(\"fill\", ctx_r8.svg.backgroundCircle.fill)(\"fill-opacity\", ctx_r8.svg.backgroundCircle.fillOpacity)(\"stroke\", ctx_r8.svg.backgroundCircle.stroke)(\"stroke-width\", ctx_r8.svg.backgroundCircle.strokeWidth);\n  }\n}\n\nfunction CircleProgressComponent__svg_svg_0__svg_ng_container_4__svg_circle_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\");\n  }\n\n  if (rf & 2) {\n    var ctx_r9 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵattributeInterpolate1(\"fill\", \"url(#\", ctx_r9.svg.radialGradient.id, \")\");\n    ɵngcc0.ɵɵattribute(\"cx\", ctx_r9.svg.backgroundCircle.cx)(\"cy\", ctx_r9.svg.backgroundCircle.cy)(\"r\", ctx_r9.svg.backgroundCircle.r)(\"fill-opacity\", ctx_r9.svg.backgroundCircle.fillOpacity)(\"stroke\", ctx_r9.svg.backgroundCircle.stroke)(\"stroke-width\", ctx_r9.svg.backgroundCircle.strokeWidth);\n  }\n}\n\nfunction CircleProgressComponent__svg_svg_0__svg_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, CircleProgressComponent__svg_svg_0__svg_ng_container_4__svg_circle_1_Template, 1, 7, \"circle\", 2);\n    ɵngcc0.ɵɵtemplate(2, CircleProgressComponent__svg_svg_0__svg_ng_container_4__svg_circle_2_Template, 1, 7, \"circle\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r3.options.backgroundGradient);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r3.options.backgroundGradient);\n  }\n}\n\nfunction CircleProgressComponent__svg_svg_0__svg_circle_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\");\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵattribute(\"cx\", ctx_r4.svg.circle.cx)(\"cy\", ctx_r4.svg.circle.cy)(\"r\", ctx_r4.svg.circle.r)(\"fill\", ctx_r4.svg.circle.fill)(\"stroke\", ctx_r4.svg.circle.stroke)(\"stroke-width\", ctx_r4.svg.circle.strokeWidth);\n  }\n}\n\nfunction CircleProgressComponent__svg_svg_0__svg_ng_container_6__svg_path_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"path\");\n  }\n\n  if (rf & 2) {\n    var ctx_r10 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵattribute(\"d\", ctx_r10.svg.path.d)(\"stroke\", ctx_r10.svg.path.stroke)(\"stroke-width\", ctx_r10.svg.path.strokeWidth)(\"stroke-linecap\", ctx_r10.svg.path.strokeLinecap)(\"fill\", ctx_r10.svg.path.fill);\n  }\n}\n\nfunction CircleProgressComponent__svg_svg_0__svg_ng_container_6__svg_path_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"path\");\n  }\n\n  if (rf & 2) {\n    var ctx_r11 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵattributeInterpolate1(\"stroke\", \"url(#\", ctx_r11.svg.outerLinearGradient.id, \")\");\n    ɵngcc0.ɵɵattribute(\"d\", ctx_r11.svg.path.d)(\"stroke-width\", ctx_r11.svg.path.strokeWidth)(\"stroke-linecap\", ctx_r11.svg.path.strokeLinecap)(\"fill\", ctx_r11.svg.path.fill);\n  }\n}\n\nfunction CircleProgressComponent__svg_svg_0__svg_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, CircleProgressComponent__svg_svg_0__svg_ng_container_6__svg_path_1_Template, 1, 5, \"path\", 2);\n    ɵngcc0.ɵɵtemplate(2, CircleProgressComponent__svg_svg_0__svg_ng_container_6__svg_path_2_Template, 1, 5, \"path\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r5.options.outerStrokeGradient);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r5.options.outerStrokeGradient);\n  }\n}\n\nfunction CircleProgressComponent__svg_svg_0__svg_text_7__svg_ng_container_1__svg_tspan_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"tspan\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var tspan_r16 = ctx.$implicit;\n    var ctx_r15 = ɵngcc0.ɵɵnextContext(4);\n    ɵngcc0.ɵɵattribute(\"x\", ctx_r15.svg.title.x)(\"y\", ctx_r15.svg.title.y)(\"dy\", tspan_r16.dy)(\"font-size\", ctx_r15.svg.title.fontSize)(\"font-weight\", ctx_r15.svg.title.fontWeight)(\"fill\", ctx_r15.svg.title.color);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(tspan_r16.span);\n  }\n}\n\nfunction CircleProgressComponent__svg_svg_0__svg_text_7__svg_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, CircleProgressComponent__svg_svg_0__svg_text_7__svg_ng_container_1__svg_tspan_1_Template, 2, 7, \"tspan\", 8);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r12 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r12.svg.title.tspans);\n  }\n}\n\nfunction CircleProgressComponent__svg_svg_0__svg_text_7__svg_tspan_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"tspan\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r13 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵattribute(\"font-size\", ctx_r13.svg.units.fontSize)(\"font-weight\", ctx_r13.svg.units.fontWeight)(\"fill\", ctx_r13.svg.units.color);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r13.svg.units.text);\n  }\n}\n\nfunction CircleProgressComponent__svg_svg_0__svg_text_7__svg_ng_container_3__svg_tspan_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"tspan\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var tspan_r18 = ctx.$implicit;\n    var ctx_r17 = ɵngcc0.ɵɵnextContext(4);\n    ɵngcc0.ɵɵattribute(\"x\", ctx_r17.svg.subtitle.x)(\"y\", ctx_r17.svg.subtitle.y)(\"dy\", tspan_r18.dy)(\"font-size\", ctx_r17.svg.subtitle.fontSize)(\"font-weight\", ctx_r17.svg.subtitle.fontWeight)(\"fill\", ctx_r17.svg.subtitle.color);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(tspan_r18.span);\n  }\n}\n\nfunction CircleProgressComponent__svg_svg_0__svg_text_7__svg_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, CircleProgressComponent__svg_svg_0__svg_text_7__svg_ng_container_3__svg_tspan_1_Template, 2, 7, \"tspan\", 8);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r14 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r14.svg.subtitle.tspans);\n  }\n}\n\nfunction CircleProgressComponent__svg_svg_0__svg_text_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"text\", 7);\n    ɵngcc0.ɵɵtemplate(1, CircleProgressComponent__svg_svg_0__svg_text_7__svg_ng_container_1_Template, 2, 1, \"ng-container\", 2);\n    ɵngcc0.ɵɵtemplate(2, CircleProgressComponent__svg_svg_0__svg_text_7__svg_tspan_2_Template, 2, 4, \"tspan\", 2);\n    ɵngcc0.ɵɵtemplate(3, CircleProgressComponent__svg_svg_0__svg_text_7__svg_ng_container_3_Template, 2, 1, \"ng-container\", 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵattribute(\"x\", ctx_r6.svg.circle.cx)(\"y\", ctx_r6.svg.circle.cy)(\"text-anchor\", ctx_r6.svg.title.textAnchor);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r6.options.showTitle);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r6.options.showUnits);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r6.options.showSubtitle);\n  }\n}\n\nfunction CircleProgressComponent__svg_svg_0__svg_image_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"image\", 9);\n  }\n\n  if (rf & 2) {\n    var ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵattribute(\"height\", ctx_r7.svg.image.height)(\"width\", ctx_r7.svg.image.width)(\"href\", ctx_r7.svg.image.src, null, \"xlink\")(\"x\", ctx_r7.svg.image.x)(\"y\", ctx_r7.svg.image.y);\n  }\n}\n\nfunction CircleProgressComponent__svg_svg_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r20 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 1);\n    ɵngcc0.ɵɵlistener(\"click\", function CircleProgressComponent__svg_svg_0_Template__svg_svg_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r20);\n      var ctx_r19 = ɵngcc0.ɵɵnextContext();\n      return ctx_r19.emitClickEvent($event);\n    });\n    ɵngcc0.ɵɵelementStart(1, \"defs\");\n    ɵngcc0.ɵɵtemplate(2, CircleProgressComponent__svg_svg_0__svg_linearGradient_2_Template, 3, 5, \"linearGradient\", 2);\n    ɵngcc0.ɵɵtemplate(3, CircleProgressComponent__svg_svg_0__svg_radialGradient_3_Template, 3, 5, \"radialGradient\", 2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(4, CircleProgressComponent__svg_svg_0__svg_ng_container_4_Template, 3, 2, \"ng-container\", 2);\n    ɵngcc0.ɵɵtemplate(5, CircleProgressComponent__svg_svg_0__svg_circle_5_Template, 1, 6, \"circle\", 2);\n    ɵngcc0.ɵɵtemplate(6, CircleProgressComponent__svg_svg_0__svg_ng_container_6_Template, 3, 2, \"ng-container\", 2);\n    ɵngcc0.ɵɵtemplate(7, CircleProgressComponent__svg_svg_0__svg_text_7_Template, 4, 6, \"text\", 3);\n    ɵngcc0.ɵɵtemplate(8, CircleProgressComponent__svg_svg_0__svg_image_8_Template, 1, 5, \"image\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"viewBox\", ctx_r0.svg.viewBox)(\"height\", ctx_r0.svg.height)(\"width\", ctx_r0.svg.width)(\"class\", ctx_r0.options.class);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.options.outerStrokeGradient);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.options.backgroundGradient);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.options.showBackground);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.options.showInnerStroke);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", +ctx_r0.options.percent !== 0 || ctx_r0.options.showZeroOuterStroke);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.options.showImage && (ctx_r0.options.showTitle || ctx_r0.options.showUnits || ctx_r0.options.showSubtitle));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.options.showImage);\n  }\n}\n\nvar CircleProgressOptions = function CircleProgressOptions() {\n  _classCallCheck(this, CircleProgressOptions);\n\n  this.class = '';\n  this.backgroundGradient = false;\n  this.backgroundColor = 'transparent';\n  this.backgroundGradientStopColor = 'transparent';\n  this.backgroundOpacity = 1;\n  this.backgroundStroke = 'transparent';\n  this.backgroundStrokeWidth = 0;\n  this.backgroundPadding = 5;\n  this.percent = 0;\n  this.radius = 90;\n  this.space = 4;\n  this.toFixed = 0;\n  this.maxPercent = 1000;\n  this.renderOnClick = true;\n  this.units = '%';\n  this.unitsFontSize = '10';\n  this.unitsFontWeight = 'normal';\n  this.unitsColor = '#444444';\n  this.outerStrokeGradient = false;\n  this.outerStrokeWidth = 8;\n  this.outerStrokeColor = '#78C000';\n  this.outerStrokeGradientStopColor = 'transparent';\n  this.outerStrokeLinecap = 'round';\n  this.innerStrokeColor = '#C7E596';\n  this.innerStrokeWidth = 4;\n  this.titleFormat = undefined;\n  this.title = 'auto';\n  this.titleColor = '#444444';\n  this.titleFontSize = '20';\n  this.titleFontWeight = 'normal';\n  this.subtitleFormat = undefined;\n  this.subtitle = 'progress';\n  this.subtitleColor = '#A9A9A9';\n  this.subtitleFontSize = '10';\n  this.subtitleFontWeight = 'normal';\n  this.imageSrc = undefined;\n  this.imageHeight = undefined;\n  this.imageWidth = undefined;\n  this.animation = true;\n  this.animateTitle = true;\n  this.animateSubtitle = false;\n  this.animationDuration = 500;\n  this.showTitle = true;\n  this.showSubtitle = true;\n  this.showUnits = true;\n  this.showImage = false;\n  this.showBackground = true;\n  this.showInnerStroke = true;\n  this.clockwise = true;\n  this.responsive = false;\n  this.startFromZero = true;\n  this.showZeroOuterStroke = true;\n  this.lazy = false;\n};\n/** @dynamic Prevent compiling error when using type `Document` https://github.com/angular/angular/issues/20351 */\n\n\nvar CircleProgressComponent = /*#__PURE__*/function () {\n  function CircleProgressComponent(defaultOptions, elRef, document) {\n    var _this = this;\n\n    _classCallCheck(this, CircleProgressComponent);\n\n    this.elRef = elRef;\n    this.document = document;\n    this.onClick = new EventEmitter(); // <svg> of component\n\n    this.svgElement = null; // whether <svg> is in viewport\n\n    this.isInViewport = false; // event for notifying viewport change caused by scrolling or resizing\n\n    this.onViewportChanged = new EventEmitter();\n    this._viewportChangedSubscriber = null;\n    this.options = new CircleProgressOptions();\n    this.defaultOptions = new CircleProgressOptions();\n    this._lastPercent = 0;\n    this._gradientUUID = null;\n\n    this.render = function () {\n      _this.applyOptions();\n\n      if (_this.options.lazy) {\n        // Draw svg if it doesn't exist\n        _this.svgElement === null && _this.draw(_this._lastPercent); // Draw it only when it's in the viewport\n\n        if (_this.isInViewport) {\n          // Draw it at the latest position when I am in.\n          if (_this.options.animation && _this.options.animationDuration > 0) {\n            _this.animate(_this._lastPercent, _this.options.percent);\n          } else {\n            _this.draw(_this.options.percent);\n          }\n\n          _this._lastPercent = _this.options.percent;\n        }\n      } else {\n        if (_this.options.animation && _this.options.animationDuration > 0) {\n          _this.animate(_this._lastPercent, _this.options.percent);\n        } else {\n          _this.draw(_this.options.percent);\n        }\n\n        _this._lastPercent = _this.options.percent;\n      }\n    };\n\n    this.polarToCartesian = function (centerX, centerY, radius, angleInDegrees) {\n      var angleInRadius = angleInDegrees * Math.PI / 180;\n      var x = centerX + Math.sin(angleInRadius) * radius;\n      var y = centerY - Math.cos(angleInRadius) * radius;\n      return {\n        x: x,\n        y: y\n      };\n    };\n\n    this.draw = function (percent) {\n      // make percent reasonable\n      percent = percent === undefined ? _this.options.percent : Math.abs(percent); // circle percent shouldn't be greater than 100%.\n\n      var circlePercent = percent > 100 ? 100 : percent; // determine box size\n\n      var boxSize = _this.options.radius * 2 + _this.options.outerStrokeWidth * 2;\n\n      if (_this.options.showBackground) {\n        boxSize += _this.options.backgroundStrokeWidth * 2 + _this.max(0, _this.options.backgroundPadding * 2);\n      } // the centre of the circle\n\n\n      var centre = {\n        x: boxSize / 2,\n        y: boxSize / 2\n      }; // the start point of the arc\n\n      var startPoint = {\n        x: centre.x,\n        y: centre.y - _this.options.radius\n      }; // get the end point of the arc\n\n      var endPoint = _this.polarToCartesian(centre.x, centre.y, _this.options.radius, 360 * (_this.options.clockwise ? circlePercent : 100 - circlePercent) / 100); // ####################\n      // We'll get an end point with the same [x, y] as the start point when percent is 100%, so move x a little bit.\n\n\n      if (circlePercent === 100) {\n        endPoint.x = endPoint.x + (_this.options.clockwise ? -0.01 : +0.01);\n      } // largeArcFlag and sweepFlag\n\n\n      var largeArcFlag, sweepFlag;\n\n      if (circlePercent > 50) {\n        var _ref = _this.options.clockwise ? [1, 1] : [1, 0];\n\n        var _ref2 = _slicedToArray(_ref, 2);\n\n        largeArcFlag = _ref2[0];\n        sweepFlag = _ref2[1];\n      } else {\n        var _ref3 = _this.options.clockwise ? [0, 1] : [0, 0];\n\n        var _ref4 = _slicedToArray(_ref3, 2);\n\n        largeArcFlag = _ref4[0];\n        sweepFlag = _ref4[1];\n      } // percent may not equal the actual percent\n\n\n      var titlePercent = _this.options.animateTitle ? percent : _this.options.percent;\n      var titleTextPercent = titlePercent > _this.options.maxPercent ? \"\".concat(_this.options.maxPercent.toFixed(_this.options.toFixed), \"+\") : titlePercent.toFixed(_this.options.toFixed);\n      var subtitlePercent = _this.options.animateSubtitle ? percent : _this.options.percent; // get title object\n\n      var title = {\n        x: centre.x,\n        y: centre.y,\n        textAnchor: 'middle',\n        color: _this.options.titleColor,\n        fontSize: _this.options.titleFontSize,\n        fontWeight: _this.options.titleFontWeight,\n        texts: [],\n        tspans: []\n      }; // from v0.9.9, both title and titleFormat(...) may be an array of string.\n\n      if (_this.options.titleFormat !== undefined && _this.options.titleFormat.constructor.name === 'Function') {\n        var formatted = _this.options.titleFormat(titlePercent);\n\n        if (formatted instanceof Array) {\n          title.texts = _toConsumableArray(formatted);\n        } else {\n          title.texts.push(formatted.toString());\n        }\n      } else {\n        if (_this.options.title === 'auto') {\n          title.texts.push(titleTextPercent);\n        } else {\n          if (_this.options.title instanceof Array) {\n            title.texts = _toConsumableArray(_this.options.title);\n          } else {\n            title.texts.push(_this.options.title.toString());\n          }\n        }\n      } // get subtitle object\n\n\n      var subtitle = {\n        x: centre.x,\n        y: centre.y,\n        textAnchor: 'middle',\n        color: _this.options.subtitleColor,\n        fontSize: _this.options.subtitleFontSize,\n        fontWeight: _this.options.subtitleFontWeight,\n        texts: [],\n        tspans: []\n      }; // from v0.9.9, both subtitle and subtitleFormat(...) may be an array of string.\n\n      if (_this.options.subtitleFormat !== undefined && _this.options.subtitleFormat.constructor.name === 'Function') {\n        var _formatted = _this.options.subtitleFormat(subtitlePercent);\n\n        if (_formatted instanceof Array) {\n          subtitle.texts = _toConsumableArray(_formatted);\n        } else {\n          subtitle.texts.push(_formatted.toString());\n        }\n      } else {\n        if (_this.options.subtitle instanceof Array) {\n          subtitle.texts = _toConsumableArray(_this.options.subtitle);\n        } else {\n          subtitle.texts.push(_this.options.subtitle.toString());\n        }\n      } // get units object\n\n\n      var units = {\n        text: \"\".concat(_this.options.units),\n        fontSize: _this.options.unitsFontSize,\n        fontWeight: _this.options.unitsFontWeight,\n        color: _this.options.unitsColor\n      }; // get total count of text lines to be shown\n\n      var rowCount = 0,\n          rowNum = 1;\n      _this.options.showTitle && (rowCount += title.texts.length);\n      _this.options.showSubtitle && (rowCount += subtitle.texts.length); // calc dy for each tspan for title\n\n      if (_this.options.showTitle) {\n        var _iterator = _createForOfIteratorHelper(title.texts),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var span = _step.value;\n            title.tspans.push({\n              span: span,\n              dy: _this.getRelativeY(rowNum, rowCount)\n            });\n            rowNum++;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } // calc dy for each tspan for subtitle\n\n\n      if (_this.options.showSubtitle) {\n        var _iterator2 = _createForOfIteratorHelper(subtitle.texts),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _span = _step2.value;\n            subtitle.tspans.push({\n              span: _span,\n              dy: _this.getRelativeY(rowNum, rowCount)\n            });\n            rowNum++;\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      } // create ID for gradient element\n\n\n      if (null === _this._gradientUUID) {\n        _this._gradientUUID = _this.uuid();\n      } // Bring it all together\n\n\n      _this.svg = {\n        viewBox: \"0 0 \".concat(boxSize, \" \").concat(boxSize),\n        // Set both width and height to '100%' if it's responsive\n        width: _this.options.responsive ? '100%' : boxSize,\n        height: _this.options.responsive ? '100%' : boxSize,\n        backgroundCircle: {\n          cx: centre.x,\n          cy: centre.y,\n          r: _this.options.radius + _this.options.outerStrokeWidth / 2 + _this.options.backgroundPadding,\n          fill: _this.options.backgroundColor,\n          fillOpacity: _this.options.backgroundOpacity,\n          stroke: _this.options.backgroundStroke,\n          strokeWidth: _this.options.backgroundStrokeWidth\n        },\n        path: {\n          // A rx ry x-axis-rotation large-arc-flag sweep-flag x y (https://developer.mozilla.org/en/docs/Web/SVG/Tutorial/Paths#Arcs)\n          d: \"M \".concat(startPoint.x, \" \").concat(startPoint.y, \"\\n        A \").concat(_this.options.radius, \" \").concat(_this.options.radius, \" 0 \").concat(largeArcFlag, \" \").concat(sweepFlag, \" \").concat(endPoint.x, \" \").concat(endPoint.y),\n          stroke: _this.options.outerStrokeColor,\n          strokeWidth: _this.options.outerStrokeWidth,\n          strokeLinecap: _this.options.outerStrokeLinecap,\n          fill: 'none'\n        },\n        circle: {\n          cx: centre.x,\n          cy: centre.y,\n          r: _this.options.radius - _this.options.space - _this.options.outerStrokeWidth / 2 - _this.options.innerStrokeWidth / 2,\n          fill: 'none',\n          stroke: _this.options.innerStrokeColor,\n          strokeWidth: _this.options.innerStrokeWidth\n        },\n        title: title,\n        units: units,\n        subtitle: subtitle,\n        image: {\n          x: centre.x - _this.options.imageWidth / 2,\n          y: centre.y - _this.options.imageHeight / 2,\n          src: _this.options.imageSrc,\n          width: _this.options.imageWidth,\n          height: _this.options.imageHeight\n        },\n        outerLinearGradient: {\n          id: 'outer-linear-' + _this._gradientUUID,\n          colorStop1: _this.options.outerStrokeColor,\n          colorStop2: _this.options.outerStrokeGradientStopColor === 'transparent' ? '#FFF' : _this.options.outerStrokeGradientStopColor\n        },\n        radialGradient: {\n          id: 'radial-' + _this._gradientUUID,\n          colorStop1: _this.options.backgroundColor,\n          colorStop2: _this.options.backgroundGradientStopColor === 'transparent' ? '#FFF' : _this.options.backgroundGradientStopColor\n        }\n      };\n    };\n\n    this.getAnimationParameters = function (previousPercent, currentPercent) {\n      var MIN_INTERVAL = 10;\n      var times, step, interval;\n      var fromPercent = _this.options.startFromZero ? 0 : previousPercent < 0 ? 0 : previousPercent;\n      var toPercent = currentPercent < 0 ? 0 : _this.min(currentPercent, _this.options.maxPercent);\n      var delta = Math.abs(Math.round(toPercent - fromPercent));\n\n      if (delta >= 100) {\n        // we will finish animation in 100 times\n        times = 100;\n\n        if (!_this.options.animateTitle && !_this.options.animateSubtitle) {\n          step = 1;\n        } else {\n          // show title or subtitle animation even if the arc is full, we also need to finish it in 100 times.\n          step = Math.round(delta / times);\n        }\n      } else {\n        // we will finish in as many times as the number of percent.\n        times = delta;\n        step = 1;\n      } // Get the interval of timer\n\n\n      interval = Math.round(_this.options.animationDuration / times); // Readjust all values if the interval of timer is extremely small.\n\n      if (interval < MIN_INTERVAL) {\n        interval = MIN_INTERVAL;\n        times = _this.options.animationDuration / interval;\n\n        if (!_this.options.animateTitle && !_this.options.animateSubtitle && delta > 100) {\n          step = Math.round(100 / times);\n        } else {\n          step = Math.round(delta / times);\n        }\n      } // step must be greater than 0.\n\n\n      if (step < 1) {\n        step = 1;\n      }\n\n      return {\n        times: times,\n        step: step,\n        interval: interval\n      };\n    };\n\n    this.animate = function (previousPercent, currentPercent) {\n      if (_this._timerSubscription && !_this._timerSubscription.closed) {\n        _this._timerSubscription.unsubscribe();\n      }\n\n      var fromPercent = _this.options.startFromZero ? 0 : previousPercent;\n      var toPercent = currentPercent;\n\n      var _this$getAnimationPar = _this.getAnimationParameters(fromPercent, toPercent),\n          step = _this$getAnimationPar.step,\n          interval = _this$getAnimationPar.interval;\n\n      var count = fromPercent;\n\n      if (fromPercent < toPercent) {\n        _this._timerSubscription = timer(0, interval).subscribe(function () {\n          count += step;\n\n          if (count <= toPercent) {\n            if (!_this.options.animateTitle && !_this.options.animateSubtitle && count >= 100) {\n              _this.draw(toPercent);\n\n              _this._timerSubscription.unsubscribe();\n            } else {\n              _this.draw(count);\n            }\n          } else {\n            _this.draw(toPercent);\n\n            _this._timerSubscription.unsubscribe();\n          }\n        });\n      } else {\n        _this._timerSubscription = timer(0, interval).subscribe(function () {\n          count -= step;\n\n          if (count >= toPercent) {\n            if (!_this.options.animateTitle && !_this.options.animateSubtitle && toPercent >= 100) {\n              _this.draw(toPercent);\n\n              _this._timerSubscription.unsubscribe();\n            } else {\n              _this.draw(count);\n            }\n          } else {\n            _this.draw(toPercent);\n\n            _this._timerSubscription.unsubscribe();\n          }\n        });\n      }\n    };\n\n    this.emitClickEvent = function (event) {\n      if (_this.options.renderOnClick) {\n        _this.animate(0, _this.options.percent);\n      }\n\n      _this.onClick.emit(event);\n    };\n\n    this.applyOptions = function () {\n      // the options of <circle-progress> may change already\n      for (var _i = 0, _Object$keys = Object.keys(_this.options); _i < _Object$keys.length; _i++) {\n        var name = _Object$keys[_i];\n\n        if (_this.hasOwnProperty(name) && _this[name] !== undefined) {\n          _this.options[name] = _this[name];\n        } else if (_this.templateOptions && _this.templateOptions[name] !== undefined) {\n          _this.options[name] = _this.templateOptions[name];\n        }\n      } // make sure key options valid\n\n\n      _this.options.radius = Math.abs(+_this.options.radius);\n      _this.options.space = +_this.options.space;\n      _this.options.percent = +_this.options.percent > 0 ? +_this.options.percent : 0;\n      _this.options.maxPercent = Math.abs(+_this.options.maxPercent);\n      _this.options.animationDuration = Math.abs(_this.options.animationDuration);\n      _this.options.outerStrokeWidth = Math.abs(+_this.options.outerStrokeWidth);\n      _this.options.innerStrokeWidth = Math.abs(+_this.options.innerStrokeWidth);\n      _this.options.backgroundPadding = +_this.options.backgroundPadding;\n    };\n\n    this.getRelativeY = function (rowNum, rowCount) {\n      // why '-0.18em'? It's a magic number when property 'alignment-baseline' equals 'baseline'. :)\n      var initialOffset = -0.18,\n          offset = 1;\n      return (initialOffset + offset * (rowNum - rowCount / 2)).toFixed(2) + 'em';\n    };\n\n    this.min = function (a, b) {\n      return a < b ? a : b;\n    };\n\n    this.max = function (a, b) {\n      return a > b ? a : b;\n    };\n\n    this.uuid = function () {\n      // https://www.w3resource.com/javascript-exercises/javascript-math-exercise-23.php\n      var dt = new Date().getTime();\n      var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (dt + Math.random() * 16) % 16 | 0;\n        dt = Math.floor(dt / 16);\n        return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n      });\n      return uuid;\n    };\n\n    this.findSvgElement = function () {\n      if (this.svgElement === null) {\n        var tags = this.elRef.nativeElement.getElementsByTagName('svg');\n\n        if (tags.length > 0) {\n          this.svgElement = tags[0];\n        }\n      }\n    };\n\n    this.checkViewport = function () {\n      _this.findSvgElement();\n\n      var previousValue = _this.isInViewport;\n      _this.isInViewport = _this.isElementInViewport(_this.svgElement);\n\n      if (previousValue !== _this.isInViewport) {\n        _this.onViewportChanged.emit({\n          oldValue: previousValue,\n          newValue: _this.isInViewport\n        });\n      }\n    };\n\n    this.onScroll = function (event) {\n      _this.checkViewport();\n    };\n\n    this.loadEventsForLazyMode = function () {\n      if (_this.options.lazy) {\n        _this.document.addEventListener('scroll', _this.onScroll, true);\n\n        _this.window.addEventListener('resize', _this.onScroll, true);\n\n        if (_this._viewportChangedSubscriber === null) {\n          _this._viewportChangedSubscriber = _this.onViewportChanged.subscribe(function (_ref5) {\n            var oldValue = _ref5.oldValue,\n                newValue = _ref5.newValue;\n            newValue ? _this.render() : null;\n          });\n        } // svgElement must be created in DOM before being checked.\n        // Is there a better way to check the existence of svgElemnt?\n\n\n        var _timer = timer(0, 50).subscribe(function () {\n          _this.svgElement === null ? _this.checkViewport() : _timer.unsubscribe();\n        });\n      }\n    };\n\n    this.unloadEventsForLazyMode = function () {\n      // Remove event listeners\n      _this.document.removeEventListener('scroll', _this.onScroll, true);\n\n      _this.window.removeEventListener('resize', _this.onScroll, true); // Unsubscribe onViewportChanged\n\n\n      if (_this._viewportChangedSubscriber !== null) {\n        _this._viewportChangedSubscriber.unsubscribe();\n\n        _this._viewportChangedSubscriber = null;\n      }\n    };\n\n    this.document = document;\n    this.window = this.document.defaultView;\n    Object.assign(this.options, defaultOptions);\n    Object.assign(this.defaultOptions, defaultOptions);\n  }\n\n  _createClass(CircleProgressComponent, [{\n    key: \"isDrawing\",\n    value: function isDrawing() {\n      return this._timerSubscription && !this._timerSubscription.closed;\n    }\n  }, {\n    key: \"isElementInViewport\",\n    value: function isElementInViewport(el) {\n      // Return false if el has not been created in page.\n      if (el === null || el === undefined) return false; // Check if the element is out of view due to a container scrolling\n\n      var rect = el.getBoundingClientRect(),\n          parent = el.parentNode,\n          parentRect;\n\n      do {\n        parentRect = parent.getBoundingClientRect();\n        if (rect.top >= parentRect.bottom) return false;\n        if (rect.bottom <= parentRect.top) return false;\n        if (rect.left >= parentRect.right) return false;\n        if (rect.right <= parentRect.left) return false;\n        parent = parent.parentNode;\n      } while (parent != this.document.body); // Check its within the document viewport\n\n\n      if (rect.top >= (this.window.innerHeight || this.document.documentElement.clientHeight)) return false;\n      if (rect.bottom <= 0) return false;\n      if (rect.left >= (this.window.innerWidth || this.document.documentElement.clientWidth)) return false;\n      if (rect.right <= 0) return false;\n      return true;\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.loadEventsForLazyMode();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.unloadEventsForLazyMode();\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.render();\n\n      if ('lazy' in changes) {\n        changes.lazy.currentValue ? this.loadEventsForLazyMode() : this.unloadEventsForLazyMode();\n      }\n    }\n  }]);\n\n  return CircleProgressComponent;\n}();\n\nCircleProgressComponent.ɵfac = function CircleProgressComponent_Factory(t) {\n  return new (t || CircleProgressComponent)(ɵngcc0.ɵɵdirectiveInject(CircleProgressOptions), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nCircleProgressComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CircleProgressComponent,\n  selectors: [[\"circle-progress\"]],\n  inputs: {\n    name: \"name\",\n    class: \"class\",\n    backgroundGradient: \"backgroundGradient\",\n    backgroundColor: \"backgroundColor\",\n    backgroundGradientStopColor: \"backgroundGradientStopColor\",\n    backgroundOpacity: \"backgroundOpacity\",\n    backgroundStroke: \"backgroundStroke\",\n    backgroundStrokeWidth: \"backgroundStrokeWidth\",\n    backgroundPadding: \"backgroundPadding\",\n    radius: \"radius\",\n    space: \"space\",\n    percent: \"percent\",\n    toFixed: \"toFixed\",\n    maxPercent: \"maxPercent\",\n    renderOnClick: \"renderOnClick\",\n    units: \"units\",\n    unitsFontSize: \"unitsFontSize\",\n    unitsFontWeight: \"unitsFontWeight\",\n    unitsColor: \"unitsColor\",\n    outerStrokeGradient: \"outerStrokeGradient\",\n    outerStrokeWidth: \"outerStrokeWidth\",\n    outerStrokeColor: \"outerStrokeColor\",\n    outerStrokeGradientStopColor: \"outerStrokeGradientStopColor\",\n    outerStrokeLinecap: \"outerStrokeLinecap\",\n    innerStrokeColor: \"innerStrokeColor\",\n    innerStrokeWidth: \"innerStrokeWidth\",\n    titleFormat: \"titleFormat\",\n    title: \"title\",\n    titleColor: \"titleColor\",\n    titleFontSize: \"titleFontSize\",\n    titleFontWeight: \"titleFontWeight\",\n    subtitleFormat: \"subtitleFormat\",\n    subtitle: \"subtitle\",\n    subtitleColor: \"subtitleColor\",\n    subtitleFontSize: \"subtitleFontSize\",\n    subtitleFontWeight: \"subtitleFontWeight\",\n    imageSrc: \"imageSrc\",\n    imageHeight: \"imageHeight\",\n    imageWidth: \"imageWidth\",\n    animation: \"animation\",\n    animateTitle: \"animateTitle\",\n    animateSubtitle: \"animateSubtitle\",\n    animationDuration: \"animationDuration\",\n    showTitle: \"showTitle\",\n    showSubtitle: \"showSubtitle\",\n    showUnits: \"showUnits\",\n    showImage: \"showImage\",\n    showBackground: \"showBackground\",\n    showInnerStroke: \"showInnerStroke\",\n    clockwise: \"clockwise\",\n    responsive: \"responsive\",\n    startFromZero: \"startFromZero\",\n    showZeroOuterStroke: \"showZeroOuterStroke\",\n    lazy: \"lazy\",\n    templateOptions: [\"options\", \"templateOptions\"]\n  },\n  outputs: {\n    onClick: \"onClick\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[\"xmlns\", \"http://www.w3.org/2000/svg\", \"preserveAspectRatio\", \"xMidYMid meet\", 3, \"click\", 4, \"ngIf\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"preserveAspectRatio\", \"xMidYMid meet\", 3, \"click\"], [4, \"ngIf\"], [\"alignment-baseline\", \"baseline\", 4, \"ngIf\"], [\"preserveAspectRatio\", \"none\", 4, \"ngIf\"], [\"offset\", \"5%\"], [\"offset\", \"95%\"], [\"alignment-baseline\", \"baseline\"], [4, \"ngFor\", \"ngForOf\"], [\"preserveAspectRatio\", \"none\"]],\n  template: function CircleProgressComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, CircleProgressComponent__svg_svg_0_Template, 9, 11, \"svg\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.svg);\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf],\n  encapsulation: 2\n});\n\nCircleProgressComponent.ctorParameters = function () {\n  return [{\n    type: CircleProgressOptions\n  }, {\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\nCircleProgressComponent.propDecorators = {\n  onClick: [{\n    type: Output\n  }],\n  name: [{\n    type: Input\n  }],\n  class: [{\n    type: Input\n  }],\n  backgroundGradient: [{\n    type: Input\n  }],\n  backgroundColor: [{\n    type: Input\n  }],\n  backgroundGradientStopColor: [{\n    type: Input\n  }],\n  backgroundOpacity: [{\n    type: Input\n  }],\n  backgroundStroke: [{\n    type: Input\n  }],\n  backgroundStrokeWidth: [{\n    type: Input\n  }],\n  backgroundPadding: [{\n    type: Input\n  }],\n  radius: [{\n    type: Input\n  }],\n  space: [{\n    type: Input\n  }],\n  percent: [{\n    type: Input\n  }],\n  toFixed: [{\n    type: Input\n  }],\n  maxPercent: [{\n    type: Input\n  }],\n  renderOnClick: [{\n    type: Input\n  }],\n  units: [{\n    type: Input\n  }],\n  unitsFontSize: [{\n    type: Input\n  }],\n  unitsFontWeight: [{\n    type: Input\n  }],\n  unitsColor: [{\n    type: Input\n  }],\n  outerStrokeGradient: [{\n    type: Input\n  }],\n  outerStrokeWidth: [{\n    type: Input\n  }],\n  outerStrokeColor: [{\n    type: Input\n  }],\n  outerStrokeGradientStopColor: [{\n    type: Input\n  }],\n  outerStrokeLinecap: [{\n    type: Input\n  }],\n  innerStrokeColor: [{\n    type: Input\n  }],\n  innerStrokeWidth: [{\n    type: Input\n  }],\n  titleFormat: [{\n    type: Input\n  }],\n  title: [{\n    type: Input\n  }],\n  titleColor: [{\n    type: Input\n  }],\n  titleFontSize: [{\n    type: Input\n  }],\n  titleFontWeight: [{\n    type: Input\n  }],\n  subtitleFormat: [{\n    type: Input\n  }],\n  subtitle: [{\n    type: Input\n  }],\n  subtitleColor: [{\n    type: Input\n  }],\n  subtitleFontSize: [{\n    type: Input\n  }],\n  subtitleFontWeight: [{\n    type: Input\n  }],\n  imageSrc: [{\n    type: Input\n  }],\n  imageHeight: [{\n    type: Input\n  }],\n  imageWidth: [{\n    type: Input\n  }],\n  animation: [{\n    type: Input\n  }],\n  animateTitle: [{\n    type: Input\n  }],\n  animateSubtitle: [{\n    type: Input\n  }],\n  animationDuration: [{\n    type: Input\n  }],\n  showTitle: [{\n    type: Input\n  }],\n  showSubtitle: [{\n    type: Input\n  }],\n  showUnits: [{\n    type: Input\n  }],\n  showImage: [{\n    type: Input\n  }],\n  showBackground: [{\n    type: Input\n  }],\n  showInnerStroke: [{\n    type: Input\n  }],\n  clockwise: [{\n    type: Input\n  }],\n  responsive: [{\n    type: Input\n  }],\n  startFromZero: [{\n    type: Input\n  }],\n  showZeroOuterStroke: [{\n    type: Input\n  }],\n  lazy: [{\n    type: Input\n  }],\n  templateOptions: [{\n    type: Input,\n    args: ['options']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CircleProgressComponent, [{\n    type: Component,\n    args: [{\n      selector: 'circle-progress',\n      template: \"\\n        <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" *ngIf=\\\"svg\\\"\\n             [attr.viewBox]=\\\"svg.viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\"\\n             [attr.height]=\\\"svg.height\\\" [attr.width]=\\\"svg.width\\\" (click)=\\\"emitClickEvent($event)\\\" [attr.class]=\\\"options.class\\\">\\n            <defs>\\n                <linearGradient *ngIf=\\\"options.outerStrokeGradient\\\" [attr.id]=\\\"svg.outerLinearGradient.id\\\">\\n                    <stop offset=\\\"5%\\\" [attr.stop-color]=\\\"svg.outerLinearGradient.colorStop1\\\"  [attr.stop-opacity]=\\\"1\\\"/>\\n                    <stop offset=\\\"95%\\\" [attr.stop-color]=\\\"svg.outerLinearGradient.colorStop2\\\" [attr.stop-opacity]=\\\"1\\\"/>\\n                </linearGradient>\\n                <radialGradient *ngIf=\\\"options.backgroundGradient\\\" [attr.id]=\\\"svg.radialGradient.id\\\">\\n                    <stop offset=\\\"5%\\\" [attr.stop-color]=\\\"svg.radialGradient.colorStop1\\\" [attr.stop-opacity]=\\\"1\\\"/>\\n                    <stop offset=\\\"95%\\\" [attr.stop-color]=\\\"svg.radialGradient.colorStop2\\\" [attr.stop-opacity]=\\\"1\\\"/>\\n                </radialGradient>\\n            </defs>\\n            <ng-container *ngIf=\\\"options.showBackground\\\">\\n                <circle *ngIf=\\\"!options.backgroundGradient\\\"\\n                        [attr.cx]=\\\"svg.backgroundCircle.cx\\\"\\n                        [attr.cy]=\\\"svg.backgroundCircle.cy\\\"\\n                        [attr.r]=\\\"svg.backgroundCircle.r\\\"\\n                        [attr.fill]=\\\"svg.backgroundCircle.fill\\\"\\n                        [attr.fill-opacity]=\\\"svg.backgroundCircle.fillOpacity\\\"\\n                        [attr.stroke]=\\\"svg.backgroundCircle.stroke\\\"\\n                        [attr.stroke-width]=\\\"svg.backgroundCircle.strokeWidth\\\"/>\\n                <circle *ngIf=\\\"options.backgroundGradient\\\"\\n                        [attr.cx]=\\\"svg.backgroundCircle.cx\\\"\\n                        [attr.cy]=\\\"svg.backgroundCircle.cy\\\"\\n                        [attr.r]=\\\"svg.backgroundCircle.r\\\"\\n                        attr.fill=\\\"url(#{{svg.radialGradient.id}})\\\"\\n                        [attr.fill-opacity]=\\\"svg.backgroundCircle.fillOpacity\\\"\\n                        [attr.stroke]=\\\"svg.backgroundCircle.stroke\\\"\\n                        [attr.stroke-width]=\\\"svg.backgroundCircle.strokeWidth\\\"/>\\n            </ng-container>            \\n            <circle *ngIf=\\\"options.showInnerStroke\\\"\\n                    [attr.cx]=\\\"svg.circle.cx\\\"\\n                    [attr.cy]=\\\"svg.circle.cy\\\"\\n                    [attr.r]=\\\"svg.circle.r\\\"\\n                    [attr.fill]=\\\"svg.circle.fill\\\"\\n                    [attr.stroke]=\\\"svg.circle.stroke\\\"\\n                    [attr.stroke-width]=\\\"svg.circle.strokeWidth\\\"/>\\n            <ng-container *ngIf=\\\"+options.percent!==0 || options.showZeroOuterStroke\\\">\\n                <path *ngIf=\\\"!options.outerStrokeGradient\\\"\\n                        [attr.d]=\\\"svg.path.d\\\"\\n                        [attr.stroke]=\\\"svg.path.stroke\\\"\\n                        [attr.stroke-width]=\\\"svg.path.strokeWidth\\\"\\n                        [attr.stroke-linecap]=\\\"svg.path.strokeLinecap\\\"\\n                        [attr.fill]=\\\"svg.path.fill\\\"/>\\n                <path *ngIf=\\\"options.outerStrokeGradient\\\"\\n                        [attr.d]=\\\"svg.path.d\\\"\\n                        attr.stroke=\\\"url(#{{svg.outerLinearGradient.id}})\\\"\\n                        [attr.stroke-width]=\\\"svg.path.strokeWidth\\\"\\n                        [attr.stroke-linecap]=\\\"svg.path.strokeLinecap\\\"\\n                        [attr.fill]=\\\"svg.path.fill\\\"/>\\n            </ng-container>\\n            <text *ngIf=\\\"!options.showImage && (options.showTitle || options.showUnits || options.showSubtitle)\\\"\\n                  alignment-baseline=\\\"baseline\\\"\\n                  [attr.x]=\\\"svg.circle.cx\\\"\\n                  [attr.y]=\\\"svg.circle.cy\\\"\\n                  [attr.text-anchor]=\\\"svg.title.textAnchor\\\">\\n                <ng-container *ngIf=\\\"options.showTitle\\\">\\n                    <tspan *ngFor=\\\"let tspan of svg.title.tspans\\\"\\n                           [attr.x]=\\\"svg.title.x\\\"\\n                           [attr.y]=\\\"svg.title.y\\\"\\n                           [attr.dy]=\\\"tspan.dy\\\"\\n                           [attr.font-size]=\\\"svg.title.fontSize\\\"\\n                           [attr.font-weight]=\\\"svg.title.fontWeight\\\"\\n                           [attr.fill]=\\\"svg.title.color\\\">{{tspan.span}}</tspan>\\n                </ng-container>\\n                <tspan *ngIf=\\\"options.showUnits\\\"\\n                       [attr.font-size]=\\\"svg.units.fontSize\\\"\\n                       [attr.font-weight]=\\\"svg.units.fontWeight\\\"\\n                       [attr.fill]=\\\"svg.units.color\\\">{{svg.units.text}}</tspan>\\n                <ng-container *ngIf=\\\"options.showSubtitle\\\">\\n                    <tspan *ngFor=\\\"let tspan of svg.subtitle.tspans\\\"\\n                           [attr.x]=\\\"svg.subtitle.x\\\"\\n                           [attr.y]=\\\"svg.subtitle.y\\\"\\n                           [attr.dy]=\\\"tspan.dy\\\"\\n                           [attr.font-size]=\\\"svg.subtitle.fontSize\\\"\\n                           [attr.font-weight]=\\\"svg.subtitle.fontWeight\\\"\\n                           [attr.fill]=\\\"svg.subtitle.color\\\">{{tspan.span}}</tspan>\\n                </ng-container>\\n            </text>\\n            <image *ngIf=\\\"options.showImage\\\" preserveAspectRatio=\\\"none\\\" \\n                [attr.height]=\\\"svg.image.height\\\"\\n                [attr.width]=\\\"svg.image.width\\\"\\n                [attr.xlink:href]=\\\"svg.image.src\\\"\\n                [attr.x]=\\\"svg.image.x\\\"\\n                [attr.y]=\\\"svg.image.y\\\"\\n            />\\n        </svg>\\n    \"\n    }]\n  }], function () {\n    return [{\n      type: CircleProgressOptions\n    }, {\n      type: ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    onClick: [{\n      type: Output\n    }],\n    name: [{\n      type: Input\n    }],\n    class: [{\n      type: Input\n    }],\n    backgroundGradient: [{\n      type: Input\n    }],\n    backgroundColor: [{\n      type: Input\n    }],\n    backgroundGradientStopColor: [{\n      type: Input\n    }],\n    backgroundOpacity: [{\n      type: Input\n    }],\n    backgroundStroke: [{\n      type: Input\n    }],\n    backgroundStrokeWidth: [{\n      type: Input\n    }],\n    backgroundPadding: [{\n      type: Input\n    }],\n    radius: [{\n      type: Input\n    }],\n    space: [{\n      type: Input\n    }],\n    percent: [{\n      type: Input\n    }],\n    toFixed: [{\n      type: Input\n    }],\n    maxPercent: [{\n      type: Input\n    }],\n    renderOnClick: [{\n      type: Input\n    }],\n    units: [{\n      type: Input\n    }],\n    unitsFontSize: [{\n      type: Input\n    }],\n    unitsFontWeight: [{\n      type: Input\n    }],\n    unitsColor: [{\n      type: Input\n    }],\n    outerStrokeGradient: [{\n      type: Input\n    }],\n    outerStrokeWidth: [{\n      type: Input\n    }],\n    outerStrokeColor: [{\n      type: Input\n    }],\n    outerStrokeGradientStopColor: [{\n      type: Input\n    }],\n    outerStrokeLinecap: [{\n      type: Input\n    }],\n    innerStrokeColor: [{\n      type: Input\n    }],\n    innerStrokeWidth: [{\n      type: Input\n    }],\n    titleFormat: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    titleColor: [{\n      type: Input\n    }],\n    titleFontSize: [{\n      type: Input\n    }],\n    titleFontWeight: [{\n      type: Input\n    }],\n    subtitleFormat: [{\n      type: Input\n    }],\n    subtitle: [{\n      type: Input\n    }],\n    subtitleColor: [{\n      type: Input\n    }],\n    subtitleFontSize: [{\n      type: Input\n    }],\n    subtitleFontWeight: [{\n      type: Input\n    }],\n    imageSrc: [{\n      type: Input\n    }],\n    imageHeight: [{\n      type: Input\n    }],\n    imageWidth: [{\n      type: Input\n    }],\n    animation: [{\n      type: Input\n    }],\n    animateTitle: [{\n      type: Input\n    }],\n    animateSubtitle: [{\n      type: Input\n    }],\n    animationDuration: [{\n      type: Input\n    }],\n    showTitle: [{\n      type: Input\n    }],\n    showSubtitle: [{\n      type: Input\n    }],\n    showUnits: [{\n      type: Input\n    }],\n    showImage: [{\n      type: Input\n    }],\n    showBackground: [{\n      type: Input\n    }],\n    showInnerStroke: [{\n      type: Input\n    }],\n    clockwise: [{\n      type: Input\n    }],\n    responsive: [{\n      type: Input\n    }],\n    startFromZero: [{\n      type: Input\n    }],\n    showZeroOuterStroke: [{\n      type: Input\n    }],\n    lazy: [{\n      type: Input\n    }],\n    templateOptions: [{\n      type: Input,\n      args: ['options']\n    }]\n  });\n})();\n\nvar NgCircleProgressModule = /*#__PURE__*/function () {\n  function NgCircleProgressModule() {\n    _classCallCheck(this, NgCircleProgressModule);\n  }\n\n  _createClass(NgCircleProgressModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: NgCircleProgressModule,\n        providers: [{\n          provide: CircleProgressOptions,\n          useValue: options\n        }]\n      };\n    }\n  }]);\n\n  return NgCircleProgressModule;\n}();\n\nNgCircleProgressModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NgCircleProgressModule\n});\nNgCircleProgressModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NgCircleProgressModule_Factory(t) {\n    return new (t || NgCircleProgressModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgCircleProgressModule, {\n    declarations: function declarations() {\n      return [CircleProgressComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [CircleProgressComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgCircleProgressModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CircleProgressComponent],\n      imports: [CommonModule],\n      exports: [CircleProgressComponent]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of ng-circle-progress\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { CircleProgressComponent, CircleProgressOptions, NgCircleProgressModule };","map":{"version":3,"sources":["../../../projects/ng-circle-progress/src/lib/ng-circle-progress.component.ts","../../../projects/ng-circle-progress/src/lib/ng-circle-progress.module.ts","../../../projects/ng-circle-progress/src/public-api.ts","../../../projects/ng-circle-progress/src/ng-circle-progress.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, OnChanges, Output, Inject, OnInit, OnDestroy, ElementRef, SimpleChanges } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Subscription, timer } from 'rxjs';\n\nexport interface CircleProgressOptionsInterface {\n    class?: string;\n    backgroundGradient?: boolean;\n    backgroundColor?: string;\n    backgroundGradientStopColor?: string;\n    backgroundOpacity?: number;\n    backgroundStroke?: string;\n    backgroundStrokeWidth?: number;\n    backgroundPadding?: number;\n    percent?: number;\n    radius?: number;\n    space?: number;\n    toFixed?: number;\n    maxPercent?: number;\n    renderOnClick?: boolean;\n    units?: string;\n    unitsFontSize?: string;\n    unitsFontWeight?: string;\n    unitsColor?: string;\n    outerStrokeGradient?: boolean;\n    outerStrokeWidth?: number;\n    outerStrokeColor?: string;\n    outerStrokeGradientStopColor?: string;\n    outerStrokeLinecap?: string;\n    innerStrokeColor?: string;\n    innerStrokeWidth?: number;\n    titleFormat?: Function;\n    title?: string | Array<String>;\n    titleColor?: string;\n    titleFontSize?: string;\n    titleFontWeight?: string;\n    subtitleFormat?: Function;\n    subtitle?: string | Array<String>;\n    subtitleColor?: string;\n    subtitleFontSize?: string;\n    subtitleFontWeight?: string;\n    imageSrc?: string;\n    imageHeight?: number;\n    imageWidth?: number;\n    animation?: boolean;\n    animateTitle?: boolean;\n    animateSubtitle?: boolean;\n    animationDuration?: number;\n    showTitle?: boolean;\n    showSubtitle?: boolean;\n    showUnits?: boolean;\n    showImage?: boolean;\n    showBackground?: boolean;\n    showInnerStroke?: boolean;\n    clockwise?: boolean;\n    responsive?: boolean;\n    startFromZero?: boolean;\n    showZeroOuterStroke?: boolean;\n    lazy?: boolean;\n}\n\nexport class CircleProgressOptions implements CircleProgressOptionsInterface {\n    class = '';\n    backgroundGradient = false;\n    backgroundColor = 'transparent';\n    backgroundGradientStopColor = 'transparent';\n    backgroundOpacity = 1;\n    backgroundStroke = 'transparent';\n    backgroundStrokeWidth = 0;\n    backgroundPadding = 5;\n    percent = 0;\n    radius = 90;\n    space = 4;\n    toFixed = 0;\n    maxPercent = 1000;\n    renderOnClick = true;\n    units = '%';\n    unitsFontSize = '10';\n    unitsFontWeight = 'normal';\n    unitsColor = '#444444';\n    outerStrokeGradient = false;\n    outerStrokeWidth = 8;\n    outerStrokeColor = '#78C000';\n    outerStrokeGradientStopColor = 'transparent';\n    outerStrokeLinecap = 'round';\n    innerStrokeColor = '#C7E596';\n    innerStrokeWidth = 4;\n    titleFormat = undefined;\n    title: string | Array<String> = 'auto';\n    titleColor = '#444444';\n    titleFontSize = '20';\n    titleFontWeight = 'normal';\n    subtitleFormat = undefined;\n    subtitle: string | Array<String> = 'progress';\n    subtitleColor = '#A9A9A9';\n    subtitleFontSize = '10';\n    subtitleFontWeight = 'normal';\n    imageSrc = undefined;\n    imageHeight = undefined;\n    imageWidth = undefined;\n    animation = true;\n    animateTitle = true;\n    animateSubtitle = false;\n    animationDuration = 500;\n    showTitle = true;\n    showSubtitle = true;\n    showUnits = true;\n    showImage = false;\n    showBackground = true;\n    showInnerStroke = true;\n    clockwise = true;\n    responsive = false;\n    startFromZero = true;\n    showZeroOuterStroke = true;\n    lazy = false;\n}\n\n/** @dynamic Prevent compiling error when using type `Document` https://github.com/angular/angular/issues/20351 */\n@Component({\n    selector: 'circle-progress',\n    template: `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" *ngIf=\"svg\"\n             [attr.viewBox]=\"svg.viewBox\" preserveAspectRatio=\"xMidYMid meet\"\n             [attr.height]=\"svg.height\" [attr.width]=\"svg.width\" (click)=\"emitClickEvent($event)\" [attr.class]=\"options.class\">\n            <defs>\n                <linearGradient *ngIf=\"options.outerStrokeGradient\" [attr.id]=\"svg.outerLinearGradient.id\">\n                    <stop offset=\"5%\" [attr.stop-color]=\"svg.outerLinearGradient.colorStop1\"  [attr.stop-opacity]=\"1\"/>\n                    <stop offset=\"95%\" [attr.stop-color]=\"svg.outerLinearGradient.colorStop2\" [attr.stop-opacity]=\"1\"/>\n                </linearGradient>\n                <radialGradient *ngIf=\"options.backgroundGradient\" [attr.id]=\"svg.radialGradient.id\">\n                    <stop offset=\"5%\" [attr.stop-color]=\"svg.radialGradient.colorStop1\" [attr.stop-opacity]=\"1\"/>\n                    <stop offset=\"95%\" [attr.stop-color]=\"svg.radialGradient.colorStop2\" [attr.stop-opacity]=\"1\"/>\n                </radialGradient>\n            </defs>\n            <ng-container *ngIf=\"options.showBackground\">\n                <circle *ngIf=\"!options.backgroundGradient\"\n                        [attr.cx]=\"svg.backgroundCircle.cx\"\n                        [attr.cy]=\"svg.backgroundCircle.cy\"\n                        [attr.r]=\"svg.backgroundCircle.r\"\n                        [attr.fill]=\"svg.backgroundCircle.fill\"\n                        [attr.fill-opacity]=\"svg.backgroundCircle.fillOpacity\"\n                        [attr.stroke]=\"svg.backgroundCircle.stroke\"\n                        [attr.stroke-width]=\"svg.backgroundCircle.strokeWidth\"/>\n                <circle *ngIf=\"options.backgroundGradient\"\n                        [attr.cx]=\"svg.backgroundCircle.cx\"\n                        [attr.cy]=\"svg.backgroundCircle.cy\"\n                        [attr.r]=\"svg.backgroundCircle.r\"\n                        attr.fill=\"url(#{{svg.radialGradient.id}})\"\n                        [attr.fill-opacity]=\"svg.backgroundCircle.fillOpacity\"\n                        [attr.stroke]=\"svg.backgroundCircle.stroke\"\n                        [attr.stroke-width]=\"svg.backgroundCircle.strokeWidth\"/>\n            </ng-container>            \n            <circle *ngIf=\"options.showInnerStroke\"\n                    [attr.cx]=\"svg.circle.cx\"\n                    [attr.cy]=\"svg.circle.cy\"\n                    [attr.r]=\"svg.circle.r\"\n                    [attr.fill]=\"svg.circle.fill\"\n                    [attr.stroke]=\"svg.circle.stroke\"\n                    [attr.stroke-width]=\"svg.circle.strokeWidth\"/>\n            <ng-container *ngIf=\"+options.percent!==0 || options.showZeroOuterStroke\">\n                <path *ngIf=\"!options.outerStrokeGradient\"\n                        [attr.d]=\"svg.path.d\"\n                        [attr.stroke]=\"svg.path.stroke\"\n                        [attr.stroke-width]=\"svg.path.strokeWidth\"\n                        [attr.stroke-linecap]=\"svg.path.strokeLinecap\"\n                        [attr.fill]=\"svg.path.fill\"/>\n                <path *ngIf=\"options.outerStrokeGradient\"\n                        [attr.d]=\"svg.path.d\"\n                        attr.stroke=\"url(#{{svg.outerLinearGradient.id}})\"\n                        [attr.stroke-width]=\"svg.path.strokeWidth\"\n                        [attr.stroke-linecap]=\"svg.path.strokeLinecap\"\n                        [attr.fill]=\"svg.path.fill\"/>\n            </ng-container>\n            <text *ngIf=\"!options.showImage && (options.showTitle || options.showUnits || options.showSubtitle)\"\n                  alignment-baseline=\"baseline\"\n                  [attr.x]=\"svg.circle.cx\"\n                  [attr.y]=\"svg.circle.cy\"\n                  [attr.text-anchor]=\"svg.title.textAnchor\">\n                <ng-container *ngIf=\"options.showTitle\">\n                    <tspan *ngFor=\"let tspan of svg.title.tspans\"\n                           [attr.x]=\"svg.title.x\"\n                           [attr.y]=\"svg.title.y\"\n                           [attr.dy]=\"tspan.dy\"\n                           [attr.font-size]=\"svg.title.fontSize\"\n                           [attr.font-weight]=\"svg.title.fontWeight\"\n                           [attr.fill]=\"svg.title.color\">{{tspan.span}}</tspan>\n                </ng-container>\n                <tspan *ngIf=\"options.showUnits\"\n                       [attr.font-size]=\"svg.units.fontSize\"\n                       [attr.font-weight]=\"svg.units.fontWeight\"\n                       [attr.fill]=\"svg.units.color\">{{svg.units.text}}</tspan>\n                <ng-container *ngIf=\"options.showSubtitle\">\n                    <tspan *ngFor=\"let tspan of svg.subtitle.tspans\"\n                           [attr.x]=\"svg.subtitle.x\"\n                           [attr.y]=\"svg.subtitle.y\"\n                           [attr.dy]=\"tspan.dy\"\n                           [attr.font-size]=\"svg.subtitle.fontSize\"\n                           [attr.font-weight]=\"svg.subtitle.fontWeight\"\n                           [attr.fill]=\"svg.subtitle.color\">{{tspan.span}}</tspan>\n                </ng-container>\n            </text>\n            <image *ngIf=\"options.showImage\" preserveAspectRatio=\"none\" \n                [attr.height]=\"svg.image.height\"\n                [attr.width]=\"svg.image.width\"\n                [attr.xlink:href]=\"svg.image.src\"\n                [attr.x]=\"svg.image.x\"\n                [attr.y]=\"svg.image.y\"\n            />\n        </svg>\n    `\n})\nexport class CircleProgressComponent implements OnChanges, OnInit, OnDestroy {\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n\n    @Input() name: string;\n    @Input() class: string;\n    @Input() backgroundGradient: boolean;\n    @Input() backgroundColor: string;\n    @Input() backgroundGradientStopColor: String;\n    @Input() backgroundOpacity: number;\n    @Input() backgroundStroke: string;\n    @Input() backgroundStrokeWidth: number;\n    @Input() backgroundPadding: number;\n\n    @Input() radius: number;\n    @Input() space: number;\n    @Input() percent: number;\n    @Input() toFixed: number;\n    @Input() maxPercent: number;\n    @Input() renderOnClick: boolean;\n\n    @Input() units: string;\n    @Input() unitsFontSize: string;\n    @Input() unitsFontWeight: string;\n    @Input() unitsColor: string;\n\n    @Input() outerStrokeGradient: boolean;\n    @Input() outerStrokeWidth: number;\n    @Input() outerStrokeColor: string;\n    @Input() outerStrokeGradientStopColor: String;\n    @Input() outerStrokeLinecap: string;\n\n    @Input() innerStrokeColor: string;\n    @Input() innerStrokeWidth: string | number;\n\n    @Input() titleFormat: Function;\n    @Input() title: string | Array<String>;\n    @Input() titleColor: string;\n    @Input() titleFontSize: string;\n    @Input() titleFontWeight: string;\n\n    @Input() subtitleFormat: Function;\n    @Input() subtitle: string | string[];\n    @Input() subtitleColor: string;\n    @Input() subtitleFontSize: string;\n    @Input() subtitleFontWeight: string;\n\n    @Input() imageSrc: string;\n    @Input() imageHeight: number;\n    @Input() imageWidth: number;\n\n    @Input() animation: boolean;\n    @Input() animateTitle: boolean;\n    @Input() animateSubtitle: boolean;\n    @Input() animationDuration: number;\n\n    @Input() showTitle: boolean;\n    @Input() showSubtitle: boolean;\n    @Input() showUnits: boolean;\n    @Input() showImage: boolean;\n    @Input() showBackground: boolean;\n    @Input() showInnerStroke: boolean;\n    @Input() clockwise: boolean;\n    @Input() responsive: boolean;\n    @Input() startFromZero: boolean;\n    @Input() showZeroOuterStroke: boolean;\n\n    @Input() lazy: boolean;\n\n    @Input('options') templateOptions: CircleProgressOptions;\n\n    // <svg> of component\n    svgElement: HTMLElement = null;\n    // whether <svg> is in viewport\n    isInViewport: Boolean = false;\n    // event for notifying viewport change caused by scrolling or resizing\n    onViewportChanged: EventEmitter<{ oldValue: Boolean, newValue: Boolean }> = new EventEmitter;\n    window: Window;\n    _viewportChangedSubscriber: Subscription = null;\n\n    svg: any;\n\n    options: CircleProgressOptions = new CircleProgressOptions();\n    defaultOptions: CircleProgressOptions = new CircleProgressOptions();\n    _lastPercent: number = 0;\n    _gradientUUID: string = null;\n    render = () => {\n\n        this.applyOptions();\n\n        if (this.options.lazy) {\n            // Draw svg if it doesn't exist\n            this.svgElement === null && this.draw(this._lastPercent);\n            // Draw it only when it's in the viewport\n            if (this.isInViewport) {\n                // Draw it at the latest position when I am in.\n                if (this.options.animation && this.options.animationDuration > 0) {\n                    this.animate(this._lastPercent, this.options.percent);\n                } else {\n                    this.draw(this.options.percent);\n                }\n                this._lastPercent = this.options.percent;\n            }\n        } else {\n            if (this.options.animation && this.options.animationDuration > 0) {\n                this.animate(this._lastPercent, this.options.percent);\n            } else {\n                this.draw(this.options.percent);\n            }\n            this._lastPercent = this.options.percent;\n        }\n    };\n    polarToCartesian = (centerX: number, centerY: number, radius: number, angleInDegrees: number) => {\n        let angleInRadius = angleInDegrees * Math.PI / 180;\n        let x = centerX + Math.sin(angleInRadius) * radius;\n        let y = centerY - Math.cos(angleInRadius) * radius;\n        return { x: x, y: y };\n    };\n    draw = (percent: number) => {\n        // make percent reasonable\n        percent = (percent === undefined) ? this.options.percent : Math.abs(percent);\n        // circle percent shouldn't be greater than 100%.\n        let circlePercent = (percent > 100) ? 100 : percent;\n        // determine box size\n        let boxSize = this.options.radius * 2 + this.options.outerStrokeWidth * 2;\n        if (this.options.showBackground) {\n            boxSize += (this.options.backgroundStrokeWidth * 2 + this.max(0, this.options.backgroundPadding * 2));\n        }\n        // the centre of the circle\n        let centre = { x: boxSize / 2, y: boxSize / 2 };\n        // the start point of the arc\n        let startPoint = { x: centre.x, y: centre.y - this.options.radius };\n        // get the end point of the arc\n        let endPoint = this.polarToCartesian(centre.x, centre.y, this.options.radius, 360 * (this.options.clockwise ?\n            circlePercent :\n            (100 - circlePercent)) / 100);  // ####################\n        // We'll get an end point with the same [x, y] as the start point when percent is 100%, so move x a little bit.\n        if (circlePercent === 100) {\n            endPoint.x = endPoint.x + (this.options.clockwise ? -0.01 : +0.01);\n        }\n        // largeArcFlag and sweepFlag\n        let largeArcFlag: any, sweepFlag: any;\n        if (circlePercent > 50) {\n            [largeArcFlag, sweepFlag] = this.options.clockwise ? [1, 1] : [1, 0];\n        } else {\n            [largeArcFlag, sweepFlag] = this.options.clockwise ? [0, 1] : [0, 0];\n        }\n        // percent may not equal the actual percent\n        let titlePercent = this.options.animateTitle ? percent : this.options.percent;\n        let titleTextPercent = titlePercent > this.options.maxPercent ?\n            `${this.options.maxPercent.toFixed(this.options.toFixed)}+` : titlePercent.toFixed(this.options.toFixed);\n        let subtitlePercent = this.options.animateSubtitle ? percent : this.options.percent;\n        // get title object\n        let title = {\n            x: centre.x,\n            y: centre.y,\n            textAnchor: 'middle',\n            color: this.options.titleColor,\n            fontSize: this.options.titleFontSize,\n            fontWeight: this.options.titleFontWeight,\n            texts: [],\n            tspans: []\n        };\n        // from v0.9.9, both title and titleFormat(...) may be an array of string.\n        if (this.options.titleFormat !== undefined && this.options.titleFormat.constructor.name === 'Function') {\n            let formatted = this.options.titleFormat(titlePercent);\n            if (formatted instanceof Array) {\n                title.texts = [...formatted];\n            } else {\n                title.texts.push(formatted.toString());\n            }\n        } else {\n            if (this.options.title === 'auto') {\n                title.texts.push(titleTextPercent);\n            } else {\n                if (this.options.title instanceof Array) {\n                    title.texts = [...this.options.title]\n                } else {\n                    title.texts.push(this.options.title.toString());\n                }\n            }\n        }\n        // get subtitle object\n        let subtitle = {\n            x: centre.x,\n            y: centre.y,\n            textAnchor: 'middle',\n            color: this.options.subtitleColor,\n            fontSize: this.options.subtitleFontSize,\n            fontWeight: this.options.subtitleFontWeight,\n            texts: [],\n            tspans: []\n        }\n        // from v0.9.9, both subtitle and subtitleFormat(...) may be an array of string.\n        if (this.options.subtitleFormat !== undefined && this.options.subtitleFormat.constructor.name === 'Function') {\n            let formatted = this.options.subtitleFormat(subtitlePercent);\n            if (formatted instanceof Array) {\n                subtitle.texts = [...formatted];\n            } else {\n                subtitle.texts.push(formatted.toString());\n            }\n        } else {\n            if (this.options.subtitle instanceof Array) {\n                subtitle.texts = [...this.options.subtitle]\n            } else {\n                subtitle.texts.push(this.options.subtitle.toString());\n            }\n        }\n        // get units object\n        let units = {\n            text: `${this.options.units}`,\n            fontSize: this.options.unitsFontSize,\n            fontWeight: this.options.unitsFontWeight,\n            color: this.options.unitsColor\n        };\n        // get total count of text lines to be shown\n        let rowCount = 0, rowNum = 1;\n        this.options.showTitle && (rowCount += title.texts.length);\n        this.options.showSubtitle && (rowCount += subtitle.texts.length);\n        // calc dy for each tspan for title\n        if (this.options.showTitle) {\n            for (let span of title.texts) {\n                title.tspans.push({ span: span, dy: this.getRelativeY(rowNum, rowCount) });\n                rowNum++;\n            }\n        }\n        // calc dy for each tspan for subtitle\n        if (this.options.showSubtitle) {\n            for (let span of subtitle.texts) {\n                subtitle.tspans.push({ span: span, dy: this.getRelativeY(rowNum, rowCount) })\n                rowNum++;\n            }\n        }\n        // create ID for gradient element\n        if (null === this._gradientUUID) {\n            this._gradientUUID = this.uuid();\n        }\n        // Bring it all together\n        this.svg = {\n            viewBox: `0 0 ${boxSize} ${boxSize}`,\n            // Set both width and height to '100%' if it's responsive\n            width: this.options.responsive ? '100%' : boxSize,\n            height: this.options.responsive ? '100%' : boxSize,\n            backgroundCircle: {\n                cx: centre.x,\n                cy: centre.y,\n                r: this.options.radius + this.options.outerStrokeWidth / 2 + this.options.backgroundPadding,\n                fill: this.options.backgroundColor,\n                fillOpacity: this.options.backgroundOpacity,\n                stroke: this.options.backgroundStroke,\n                strokeWidth: this.options.backgroundStrokeWidth,\n            },\n            path: {\n                // A rx ry x-axis-rotation large-arc-flag sweep-flag x y (https://developer.mozilla.org/en/docs/Web/SVG/Tutorial/Paths#Arcs)\n                d: `M ${startPoint.x} ${startPoint.y}\n        A ${this.options.radius} ${this.options.radius} 0 ${largeArcFlag} ${sweepFlag} ${endPoint.x} ${endPoint.y}`,\n                stroke: this.options.outerStrokeColor,\n                strokeWidth: this.options.outerStrokeWidth,\n                strokeLinecap: this.options.outerStrokeLinecap,\n                fill: 'none'\n            },\n            circle: {\n                cx: centre.x,\n                cy: centre.y,\n                r: this.options.radius - this.options.space - this.options.outerStrokeWidth / 2 - this.options.innerStrokeWidth / 2,\n                fill: 'none',\n                stroke: this.options.innerStrokeColor,\n                strokeWidth: this.options.innerStrokeWidth,\n            },\n            title: title,\n            units: units,\n            subtitle: subtitle,\n            image: {\n                x: centre.x - this.options.imageWidth / 2,\n                y: centre.y - this.options.imageHeight / 2,\n                src: this.options.imageSrc,\n                width: this.options.imageWidth,\n                height: this.options.imageHeight,\n            },\n            outerLinearGradient: {\n                id: 'outer-linear-' + this._gradientUUID,\n                colorStop1: this.options.outerStrokeColor,\n                colorStop2: this.options.outerStrokeGradientStopColor === 'transparent' ? '#FFF' : this.options.outerStrokeGradientStopColor,\n            },\n            radialGradient: {\n                id: 'radial-' + this._gradientUUID,\n                colorStop1: this.options.backgroundColor,\n                colorStop2: this.options.backgroundGradientStopColor === 'transparent' ? '#FFF' : this.options.backgroundGradientStopColor,\n            }\n        };\n    };\n    getAnimationParameters = (previousPercent: number, currentPercent: number) => {\n        const MIN_INTERVAL = 10;\n        let times: number, step: number, interval: number;\n        let fromPercent = this.options.startFromZero ? 0 : (previousPercent < 0 ? 0 : previousPercent);\n        let toPercent = currentPercent < 0 ? 0 : this.min(currentPercent, this.options.maxPercent);\n        let delta = Math.abs(Math.round(toPercent - fromPercent));\n\n        if (delta >= 100) {\n            // we will finish animation in 100 times\n            times = 100;\n            if (!this.options.animateTitle && !this.options.animateSubtitle) {\n                step = 1;\n            } else {\n                // show title or subtitle animation even if the arc is full, we also need to finish it in 100 times.\n                step = Math.round(delta / times);\n            }\n        } else {\n            // we will finish in as many times as the number of percent.\n            times = delta;\n            step = 1;\n        }\n        // Get the interval of timer\n        interval = Math.round(this.options.animationDuration / times);\n        // Readjust all values if the interval of timer is extremely small.\n        if (interval < MIN_INTERVAL) {\n            interval = MIN_INTERVAL;\n            times = this.options.animationDuration / interval;\n            if (!this.options.animateTitle && !this.options.animateSubtitle && delta > 100) {\n                step = Math.round(100 / times);\n            } else {\n                step = Math.round(delta / times);\n            }\n        }\n        // step must be greater than 0.\n        if (step < 1) {\n            step = 1;\n        }\n        return { times: times, step: step, interval: interval };\n    };\n    animate = (previousPercent: number, currentPercent: number) => {\n        if (this._timerSubscription && !this._timerSubscription.closed) {\n            this._timerSubscription.unsubscribe();\n        }\n        let fromPercent = this.options.startFromZero ? 0 : previousPercent;\n        let toPercent = currentPercent;\n        let { step: step, interval: interval } = this.getAnimationParameters(fromPercent, toPercent);\n        let count = fromPercent;\n        if (fromPercent < toPercent) {\n            this._timerSubscription = timer(0, interval).subscribe(() => {\n                count += step;\n                if (count <= toPercent) {\n                    if (!this.options.animateTitle && !this.options.animateSubtitle && count >= 100) {\n                        this.draw(toPercent);\n                        this._timerSubscription.unsubscribe();\n                    } else {\n                        this.draw(count);\n                    }\n                } else {\n                    this.draw(toPercent);\n                    this._timerSubscription.unsubscribe();\n                }\n            });\n        } else {\n            this._timerSubscription = timer(0, interval).subscribe(() => {\n                count -= step;\n                if (count >= toPercent) {\n                    if (!this.options.animateTitle && !this.options.animateSubtitle && toPercent >= 100) {\n                        this.draw(toPercent);\n                        this._timerSubscription.unsubscribe();\n                    } else {\n                        this.draw(count);\n                    }\n                } else {\n                    this.draw(toPercent);\n                    this._timerSubscription.unsubscribe();\n                }\n            });\n        }\n    };\n    emitClickEvent = (event: any) => {\n        if (this.options.renderOnClick) {\n            this.animate(0, this.options.percent);\n        }\n        this.onClick.emit(event);\n    };\n    private _timerSubscription: Subscription;\n    private applyOptions = () => {\n        // the options of <circle-progress> may change already\n        for (let name of Object.keys(this.options)) {\n            if (this.hasOwnProperty(name) && this[name] !== undefined) {\n                this.options[name] = this[name];\n            } else if (this.templateOptions && this.templateOptions[name] !== undefined) {\n                this.options[name] = this.templateOptions[name];\n            }\n        }\n        // make sure key options valid\n        this.options.radius = Math.abs(+this.options.radius);\n        this.options.space = +this.options.space;\n        this.options.percent = +this.options.percent > 0 ? +this.options.percent : 0;\n        this.options.maxPercent = Math.abs(+this.options.maxPercent);\n        this.options.animationDuration = Math.abs(this.options.animationDuration);\n        this.options.outerStrokeWidth = Math.abs(+this.options.outerStrokeWidth);\n        this.options.innerStrokeWidth = Math.abs(+this.options.innerStrokeWidth);\n        this.options.backgroundPadding = +this.options.backgroundPadding;\n    };\n    private getRelativeY = (rowNum: number, rowCount: number): string => {\n        // why '-0.18em'? It's a magic number when property 'alignment-baseline' equals 'baseline'. :)\n        let initialOffset = -0.18, offset = 1;\n        return (initialOffset + offset * (rowNum - rowCount / 2)).toFixed(2) + 'em';\n    };\n\n    private min = (a: number, b: number) => {\n        return a < b ? a : b;\n    };\n\n    private max = (a: number, b: number) => {\n        return a > b ? a : b;\n    };\n\n    private uuid = () => {\n        // https://www.w3resource.com/javascript-exercises/javascript-math-exercise-23.php\n        var dt = new Date().getTime();\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    public isDrawing(): boolean {\n        return (this._timerSubscription && !this._timerSubscription.closed);\n    }\n\n    public findSvgElement = function () {\n        if (this.svgElement === null) {\n            let tags = this.elRef.nativeElement.getElementsByTagName('svg');\n            if (tags.length > 0) {\n                this.svgElement = tags[0];\n            }\n        }\n    }\n\n    private isElementInViewport(el): Boolean {\n        // Return false if el has not been created in page.\n        if (el === null || el === undefined) return false;\n        // Check if the element is out of view due to a container scrolling\n        let rect = el.getBoundingClientRect(), parent = el.parentNode, parentRect;\n        do {\n            parentRect = parent.getBoundingClientRect();\n            if (rect.top >= parentRect.bottom) return false;\n            if (rect.bottom <= parentRect.top) return false;\n            if (rect.left >= parentRect.right) return false;\n            if (rect.right <= parentRect.left) return false;\n            parent = parent.parentNode;\n        } while (parent != this.document.body);\n        // Check its within the document viewport\n        if (rect.top >= (this.window.innerHeight || this.document.documentElement.clientHeight)) return false;\n        if (rect.bottom <= 0) return false;\n        if (rect.left >= (this.window.innerWidth || this.document.documentElement.clientWidth)) return false;\n        if (rect.right <= 0) return false;\n        return true;\n    }\n\n    checkViewport = () => {\n        this.findSvgElement();\n        let previousValue = this.isInViewport;\n        this.isInViewport = this.isElementInViewport(this.svgElement);\n        if (previousValue !== this.isInViewport) {\n            this.onViewportChanged.emit({ oldValue: previousValue, newValue: this.isInViewport });\n        }\n    }\n\n    onScroll = (event: Event) => {\n        this.checkViewport();\n    }\n\n    loadEventsForLazyMode = () => {\n        if (this.options.lazy) {\n            this.document.addEventListener('scroll', this.onScroll, true);\n            this.window.addEventListener('resize', this.onScroll, true);\n            if (this._viewportChangedSubscriber === null) {\n                this._viewportChangedSubscriber = this.onViewportChanged.subscribe(({ oldValue, newValue }) => {\n                    newValue ? this.render() : null;\n                });\n            }\n            // svgElement must be created in DOM before being checked.\n            // Is there a better way to check the existence of svgElemnt?\n            let _timer = timer(0, 50).subscribe(() => {\n                this.svgElement === null ? this.checkViewport() : _timer.unsubscribe();\n            })\n        }\n    }\n\n    unloadEventsForLazyMode = () => {\n        // Remove event listeners\n        this.document.removeEventListener('scroll', this.onScroll, true);\n        this.window.removeEventListener('resize', this.onScroll, true);\n        // Unsubscribe onViewportChanged\n        if (this._viewportChangedSubscriber !== null) {\n            this._viewportChangedSubscriber.unsubscribe();\n            this._viewportChangedSubscriber = null;\n        }\n    }\n\n    ngOnInit() {\n        this.loadEventsForLazyMode();\n    }\n\n    ngOnDestroy() {\n        this.unloadEventsForLazyMode();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        this.render();\n\n        if ('lazy' in changes) {\n            changes.lazy.currentValue ? this.loadEventsForLazyMode() : this.unloadEventsForLazyMode();\n        }\n\n    }\n\n    constructor(defaultOptions: CircleProgressOptions, private elRef: ElementRef, @Inject(DOCUMENT) private document: any) {\n        this.document = document;\n        this.window = this.document.defaultView;\n        Object.assign(this.options, defaultOptions);\n        Object.assign(this.defaultOptions, defaultOptions);\n    }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CircleProgressComponent, CircleProgressOptionsInterface, CircleProgressOptions } from './ng-circle-progress.component';\n\n\n@NgModule({\n  declarations: [CircleProgressComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [CircleProgressComponent]\n})\nexport class NgCircleProgressModule {\n  static forRoot(options: CircleProgressOptionsInterface = {}): ModuleWithProviders<NgCircleProgressModule> {\n    return {\n      ngModule: NgCircleProgressModule,\n      providers: [\n        { provide: CircleProgressOptions, useValue: options }\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of ng-circle-progress\n */\n\nexport * from './lib/ng-circle-progress.component';\nexport * from './lib/ng-circle-progress.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}