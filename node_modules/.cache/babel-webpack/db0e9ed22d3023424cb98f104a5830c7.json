{"ast":null,"code":"/** @hidden */\nexport var NO_TZ_INFO = 'The required {0} timezone information is not provided!';\n/** @hidden */\n\nexport var INVALID_TZ_STRUCTURE = 'The provided timezone information has invalid stucture!';\nvar formatRegExp = /\\{(\\d+)}?\\}/g;\n\nvar flatten = function flatten(arr) {\n  return arr.reduce(function (a, b) {\n    return a.concat(b);\n  }, []);\n};\n/** @hidden */\n\n\nexport var formatMessage = function formatMessage(message) {\n  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n\n  var flattenValues = flatten(values);\n  return message.replace(formatRegExp, function (_, index) {\n    return flattenValues[parseInt(index, 10)];\n  });\n};","map":{"version":3,"sources":["/home/datquocngo/Project/UET/gts-fe/node_modules/@progress/kendo-date-math/dist/es2015/errors.js"],"names":["NO_TZ_INFO","INVALID_TZ_STRUCTURE","formatRegExp","flatten","arr","reduce","a","b","concat","formatMessage","message","values","flattenValues","replace","_","index","parseInt"],"mappings":"AAAA;AACA,OAAO,IAAMA,UAAU,GAAG,wDAAnB;AACP;;AACA,OAAO,IAAMC,oBAAoB,GAAG,yDAA7B;AACP,IAAMC,YAAY,GAAG,cAArB;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD;AAAA,SAASA,GAAG,CAACC,MAAJ,CAAW,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,CAAC,CAACE,MAAF,CAASD,CAAT,CAAV;AAAA,GAAX,EAAkC,EAAlC,CAAT;AAAA,CAAhB;AACA;;;AACA,OAAO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAwB;AAAA,oCAAXC,MAAW;AAAXA,IAAAA,MAAW;AAAA;;AACjD,MAAMC,aAAa,GAAGT,OAAO,CAACQ,MAAD,CAA7B;AACA,SAAOD,OAAO,CAACG,OAAR,CAAgBX,YAAhB,EAA8B,UAACY,CAAD,EAAIC,KAAJ;AAAA,WAAcH,aAAa,CAACI,QAAQ,CAACD,KAAD,EAAQ,EAAR,CAAT,CAA3B;AAAA,GAA9B,CAAP;AACH,CAHM","sourcesContent":["/** @hidden */\nexport const NO_TZ_INFO = 'The required {0} timezone information is not provided!';\n/** @hidden */\nexport const INVALID_TZ_STRUCTURE = 'The provided timezone information has invalid stucture!';\nconst formatRegExp = /\\{(\\d+)}?\\}/g;\nconst flatten = (arr) => arr.reduce((a, b) => a.concat(b), []);\n/** @hidden */\nexport const formatMessage = (message, ...values) => {\n    const flattenValues = flatten(values);\n    return message.replace(formatRegExp, (_, index) => flattenValues[parseInt(index, 10)]);\n};\n"]},"metadata":{},"sourceType":"module"}