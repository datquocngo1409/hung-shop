{"ast":null,"code":"import { zoneAndRule } from './zone-and-rule';\n/**\n * @hidden\n *\n * A function that calculates the time offset based on zone name.\n *\n * @param timezone - The timezone name. For example, `America/Chicago`, `Europe/Sofia`.\n * @param date - A date for which the zone rule will be located.\n *\n * @return - Returns the timezone offset in minutes at the specified time.\n */\n\nexport var offset = function offset(timezone) {\n  var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n\n  if (timezone === 'Etc/UTC' || timezone === 'Etc/GMT') {\n    return 0;\n  }\n\n  if (timezone === '') {\n    return date.getTimezoneOffset();\n  }\n\n  var _zoneAndRule = zoneAndRule(timezone, date),\n      rule = _zoneAndRule.rule,\n      zone = _zoneAndRule.zone;\n\n  return parseFloat(rule ? zone[0] - rule[6] : zone[0]);\n};","map":{"version":3,"sources":["/home/datquocngo/Project/Hung/gts-fe/node_modules/@progress/kendo-date-math/dist/es2015/tz/offset.js"],"names":["zoneAndRule","offset","timezone","date","Date","getTimezoneOffset","rule","zone","parseFloat"],"mappings":"AAAA,SAASA,WAAT,QAA4B,iBAA5B;AACA;;;;;;;;;;;AAUA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,QAAD,EAAiC;AAAA,MAAtBC,IAAsB,uEAAf,IAAIC,IAAJ,EAAe;;AACnD,MAAIF,QAAQ,KAAK,SAAb,IAA0BA,QAAQ,KAAK,SAA3C,EAAsD;AAClD,WAAO,CAAP;AACH;;AACD,MAAIA,QAAQ,KAAK,EAAjB,EAAqB;AACjB,WAAOC,IAAI,CAACE,iBAAL,EAAP;AACH;;AANkD,qBAO5BL,WAAW,CAACE,QAAD,EAAWC,IAAX,CAPiB;AAAA,MAO3CG,IAP2C,gBAO3CA,IAP2C;AAAA,MAOrCC,IAPqC,gBAOrCA,IAPqC;;AAQnD,SAAOC,UAAU,CAACF,IAAI,GAAGC,IAAI,CAAC,CAAD,CAAJ,GAAUD,IAAI,CAAC,CAAD,CAAjB,GAAuBC,IAAI,CAAC,CAAD,CAAhC,CAAjB;AACH,CATM","sourcesContent":["import { zoneAndRule } from './zone-and-rule';\n/**\n * @hidden\n *\n * A function that calculates the time offset based on zone name.\n *\n * @param timezone - The timezone name. For example, `America/Chicago`, `Europe/Sofia`.\n * @param date - A date for which the zone rule will be located.\n *\n * @return - Returns the timezone offset in minutes at the specified time.\n */\nexport const offset = (timezone, date = new Date()) => {\n    if (timezone === 'Etc/UTC' || timezone === 'Etc/GMT') {\n        return 0;\n    }\n    if (timezone === '') {\n        return date.getTimezoneOffset();\n    }\n    const { rule, zone } = zoneAndRule(timezone, date);\n    return parseFloat(rule ? zone[0] - rule[6] : zone[0]);\n};\n"]},"metadata":{},"sourceType":"module"}