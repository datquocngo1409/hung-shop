{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as easingFunctions from './easing-functions';\nimport { limitValue, now } from '../util';\nimport { animationFrame, Class } from '../common';\nimport AnimationFactory from './animation-factory';\n\nvar Animation = /*#__PURE__*/function (_Class) {\n  _inherits(Animation, _Class);\n\n  var _super = _createSuper(Animation);\n\n  _createClass(Animation, [{\n    key: \"options\",\n    get: function get() {\n      return this._options || {\n        duration: 500,\n        easing: \"swing\"\n      };\n    },\n    set: function set(value) {\n      this._options = value;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(type, element, options) {\n      return AnimationFactory.current.create(type, element, options);\n    }\n  }]);\n\n  function Animation(element, options) {\n    var _this;\n\n    _classCallCheck(this, Animation);\n\n    _this = _super.call(this);\n    _this.options = Object.assign({}, _this.options, options);\n    _this.element = element;\n    return _this;\n  }\n\n  _createClass(Animation, [{\n    key: \"setup\",\n    value: function setup() {}\n  }, {\n    key: \"step\",\n    value: function step() {}\n  }, {\n    key: \"play\",\n    value: function play() {\n      var _this2 = this;\n\n      var options = this.options;\n      var duration = options.duration,\n          _options$delay = options.delay,\n          delay = _options$delay === void 0 ? 0 : _options$delay;\n      var easing = easingFunctions[options.easing];\n      var start = now() + delay;\n      var finish = start + duration;\n\n      if (duration === 0) {\n        this.step(1);\n        this.abort();\n      } else {\n        setTimeout(function () {\n          var loop = function loop() {\n            if (_this2._stopped) {\n              return;\n            }\n\n            var wallTime = now();\n            var time = limitValue(wallTime - start, 0, duration);\n            var position = time / duration;\n            var easingPosition = easing(position, time, 0, 1, duration);\n\n            _this2.step(easingPosition);\n\n            if (wallTime < finish) {\n              animationFrame(loop);\n            } else {\n              _this2.abort();\n            }\n          };\n\n          loop();\n        }, delay);\n      }\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      this._stopped = true;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.abort();\n    }\n  }]);\n\n  return Animation;\n}(Class);\n\nexport default Animation;","map":{"version":3,"sources":["/home/datquocngo/Project/Hung/gts-fe/node_modules/@progress/kendo-drawing/dist/es2015/animations/animation.js"],"names":["easingFunctions","limitValue","now","animationFrame","Class","AnimationFactory","Animation","_options","duration","easing","value","type","element","options","current","create","Object","assign","delay","start","finish","step","abort","setTimeout","loop","_stopped","wallTime","time","position","easingPosition"],"mappings":";;;;AAAA,OAAO,KAAKA,eAAZ,MAAiC,oBAAjC;AACA,SAASC,UAAT,EAAqBC,GAArB,QAAgC,SAAhC;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,WAAtC;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;;IAEMC,S;;;;;;;wBAKY;AACV,aAAO,KAAKC,QAAL,IAAiB;AACpBC,QAAAA,QAAQ,EAAE,GADU;AAEpBC,QAAAA,MAAM,EAAE;AAFY,OAAxB;AAIH,K;sBAEWC,K,EAAO;AACf,WAAKH,QAAL,GAAgBG,KAAhB;AACH;;;2BAbaC,I,EAAMC,O,EAASC,O,EAAS;AAClC,aAAOR,gBAAgB,CAACS,OAAjB,CAAyBC,MAAzB,CAAgCJ,IAAhC,EAAsCC,OAAtC,EAA+CC,OAA/C,CAAP;AACH;;;AAaD,qBAAYD,OAAZ,EAAqBC,OAArB,EAA8B;AAAA;;AAAA;;AAC1B;AAEA,UAAKA,OAAL,GAAeG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,MAAKJ,OAAvB,EAAgCA,OAAhC,CAAf;AACA,UAAKD,OAAL,GAAeA,OAAf;AAJ0B;AAK7B;;;;4BAEO,CAAE;;;2BACH,CAAE;;;2BAEF;AAAA;;AACH,UAAMC,OAAO,GAAG,KAAKA,OAArB;AADG,UAEKL,QAFL,GAE6BK,OAF7B,CAEKL,QAFL;AAAA,2BAE6BK,OAF7B,CAEeK,KAFf;AAAA,UAEeA,KAFf,+BAEuB,CAFvB;AAGH,UAAMT,MAAM,GAAGT,eAAe,CAACa,OAAO,CAACJ,MAAT,CAA9B;AACA,UAAMU,KAAK,GAAGjB,GAAG,KAAKgB,KAAtB;AACA,UAAME,MAAM,GAAGD,KAAK,GAAGX,QAAvB;;AAEA,UAAIA,QAAQ,KAAK,CAAjB,EAAoB;AAChB,aAAKa,IAAL,CAAU,CAAV;AACA,aAAKC,KAAL;AACH,OAHD,MAGO;AACHC,QAAAA,UAAU,CAAC,YAAM;AACb,cAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACf,gBAAI,MAAI,CAACC,QAAT,EAAmB;AACf;AACH;;AAED,gBAAMC,QAAQ,GAAGxB,GAAG,EAApB;AAEA,gBAAMyB,IAAI,GAAG1B,UAAU,CAACyB,QAAQ,GAAGP,KAAZ,EAAmB,CAAnB,EAAsBX,QAAtB,CAAvB;AACA,gBAAMoB,QAAQ,GAAGD,IAAI,GAAGnB,QAAxB;AACA,gBAAMqB,cAAc,GAAGpB,MAAM,CAACmB,QAAD,EAAWD,IAAX,EAAiB,CAAjB,EAAoB,CAApB,EAAuBnB,QAAvB,CAA7B;;AAEA,YAAA,MAAI,CAACa,IAAL,CAAUQ,cAAV;;AAEA,gBAAIH,QAAQ,GAAGN,MAAf,EAAuB;AACnBjB,cAAAA,cAAc,CAACqB,IAAD,CAAd;AACH,aAFD,MAEO;AACH,cAAA,MAAI,CAACF,KAAL;AACH;AACJ,WAlBD;;AAoBAE,UAAAA,IAAI;AACP,SAtBS,EAsBPN,KAtBO,CAAV;AAuBH;AACJ;;;4BAEO;AACJ,WAAKO,QAAL,GAAgB,IAAhB;AACH;;;8BAES;AACN,WAAKH,KAAL;AACH;;;;EArEmBlB,K;;AAwExB,eAAeE,SAAf","sourcesContent":["import * as easingFunctions from './easing-functions';\nimport { limitValue, now } from '../util';\nimport { animationFrame, Class } from '../common';\nimport AnimationFactory from './animation-factory';\n\nclass Animation extends Class {\n    static create(type, element, options) {\n        return AnimationFactory.current.create(type, element, options);\n    }\n\n    get options() {\n        return this._options || {\n            duration: 500,\n            easing: \"swing\"\n        };\n    }\n\n    set options(value) {\n        this._options = value;\n    }\n\n    constructor(element, options) {\n        super();\n\n        this.options = Object.assign({}, this.options, options);\n        this.element = element;\n    }\n\n    setup() {}\n    step() {}\n\n    play() {\n        const options = this.options;\n        const { duration, delay = 0 } = options;\n        const easing = easingFunctions[options.easing];\n        const start = now() + delay;\n        const finish = start + duration;\n\n        if (duration === 0) {\n            this.step(1);\n            this.abort();\n        } else {\n            setTimeout(() => {\n                const loop = () => {\n                    if (this._stopped) {\n                        return;\n                    }\n\n                    const wallTime = now();\n\n                    const time = limitValue(wallTime - start, 0, duration);\n                    const position = time / duration;\n                    const easingPosition = easing(position, time, 0, 1, duration);\n\n                    this.step(easingPosition);\n\n                    if (wallTime < finish) {\n                        animationFrame(loop);\n                    } else {\n                        this.abort();\n                    }\n                };\n\n                loop();\n            }, delay);\n        }\n    }\n\n    abort() {\n        this._stopped = true;\n    }\n\n    destroy() {\n        this.abort();\n    }\n}\n\nexport default Animation;\n"]},"metadata":{},"sourceType":"module"}