{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport Class from '../class';\nimport namedColors from './named-colors';\nimport { Bytes, RGB, HSV, HSL } from './parse-color';\nvar DARK_TRESHOLD = 180;\n\nvar Color = /*#__PURE__*/function (_Class) {\n  _inherits(Color, _Class);\n\n  var _super = _createSuper(Color);\n\n  function Color(value) {\n    var _this;\n\n    _classCallCheck(this, Color);\n\n    _this = _super.call(this);\n\n    if (arguments.length === 1) {\n      var formats = Color.formats;\n\n      var resolvedColor = _this.resolveColor(value);\n\n      for (var idx = 0; idx < formats.length; idx++) {\n        var formatRegex = formats[idx].re;\n        var processor = formats[idx].process;\n        var parts = formatRegex.exec(resolvedColor);\n\n        if (parts) {\n          var channels = processor(parts);\n          _this.r = channels[0];\n          _this.g = channels[1];\n          _this.b = channels[2];\n        }\n      }\n    } else {\n      _this.r = arguments[0];\n      _this.g = arguments[1];\n      _this.b = arguments[2];\n    }\n\n    _this.r = _this.normalizeByte(_this.r);\n    _this.g = _this.normalizeByte(_this.g);\n    _this.b = _this.normalizeByte(_this.b);\n    return _this;\n  }\n\n  _createClass(Color, [{\n    key: \"toHex\",\n    value: function toHex() {\n      var pad = this.padDigit;\n      var r = this.r.toString(16);\n      var g = this.g.toString(16);\n      var b = this.b.toString(16);\n      return \"#\" + pad(r) + pad(g) + pad(b);\n    }\n  }, {\n    key: \"resolveColor\",\n    value: function resolveColor(value) {\n      var color = value || \"black\";\n\n      if (color.charAt(0) === \"#\") {\n        color = color.substr(1, 6);\n      }\n\n      color = color.replace(/ /g, \"\");\n      color = color.toLowerCase();\n      color = Color.namedColors[color] || color;\n      return color;\n    }\n  }, {\n    key: \"normalizeByte\",\n    value: function normalizeByte(value) {\n      if (value < 0 || isNaN(value)) {\n        return 0;\n      }\n\n      return value > 255 ? 255 : value;\n    }\n  }, {\n    key: \"padDigit\",\n    value: function padDigit(value) {\n      return value.length === 1 ? \"0\" + value : value;\n    }\n  }, {\n    key: \"brightness\",\n    value: function brightness(value) {\n      var round = Math.round;\n      this.r = round(this.normalizeByte(this.r * value));\n      this.g = round(this.normalizeByte(this.g * value));\n      this.b = round(this.normalizeByte(this.b * value));\n      return this;\n    }\n  }, {\n    key: \"percBrightness\",\n    value: function percBrightness() {\n      return Math.sqrt(0.241 * this.r * this.r + 0.691 * this.g * this.g + 0.068 * this.b * this.b);\n    }\n  }, {\n    key: \"isDark\",\n    value: function isDark() {\n      return this.percBrightness() < DARK_TRESHOLD;\n    }\n  }], [{\n    key: \"fromBytes\",\n    value: function fromBytes(r, g, b, a) {\n      return new Bytes(r, g, b, a != null ? a : 1);\n    }\n  }, {\n    key: \"fromRGB\",\n    value: function fromRGB(r, g, b, a) {\n      return new RGB(r, g, b, a != null ? a : 1);\n    }\n  }, {\n    key: \"fromHSV\",\n    value: function fromHSV(h, s, v, a) {\n      return new HSV(h, s, v, a != null ? a : 1);\n    }\n  }, {\n    key: \"fromHSL\",\n    value: function fromHSL(h, s, l, a) {\n      return new HSL(h, s, l, a != null ? a : 1);\n    }\n  }]);\n\n  return Color;\n}(Class);\n\nColor.formats = [{\n  re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n  process: function process(parts) {\n    return [parseInt(parts[1], 10), parseInt(parts[2], 10), parseInt(parts[3], 10)];\n  }\n}, {\n  re: /^(\\w{2})(\\w{2})(\\w{2})$/,\n  process: function process(parts) {\n    return [parseInt(parts[1], 16), parseInt(parts[2], 16), parseInt(parts[3], 16)];\n  }\n}, {\n  re: /^(\\w{1})(\\w{1})(\\w{1})$/,\n  process: function process(parts) {\n    return [parseInt(parts[1] + parts[1], 16), parseInt(parts[2] + parts[2], 16), parseInt(parts[3] + parts[3], 16)];\n  }\n}];\nColor.namedColors = namedColors;\nexport default Color;","map":{"version":3,"sources":["/home/datquocngo/Project/Hung/gts-fe/node_modules/@progress/kendo-drawing/dist/es2015/common/color/color.js"],"names":["Class","namedColors","Bytes","RGB","HSV","HSL","DARK_TRESHOLD","Color","value","arguments","length","formats","resolvedColor","resolveColor","idx","formatRegex","re","processor","process","parts","exec","channels","r","g","b","normalizeByte","pad","padDigit","toString","color","charAt","substr","replace","toLowerCase","isNaN","round","Math","sqrt","percBrightness","a","h","s","v","l","parseInt"],"mappings":"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","sourcesContent":["import Class from '../class';\nimport namedColors from './named-colors';\nimport { Bytes, RGB, HSV, HSL } from './parse-color';\n\nconst DARK_TRESHOLD = 180;\n\nclass Color extends Class {\n    constructor(value) {\n        super();\n\n        if (arguments.length === 1) {\n            const formats = Color.formats;\n            const resolvedColor = this.resolveColor(value);\n\n            for (let idx = 0; idx < formats.length; idx++) {\n                const formatRegex = formats[idx].re;\n                const processor = formats[idx].process;\n                const parts = formatRegex.exec(resolvedColor);\n\n                if (parts) {\n                    const channels = processor(parts);\n                    this.r = channels[0];\n                    this.g = channels[1];\n                    this.b = channels[2];\n                }\n            }\n        } else {\n            this.r = arguments[0];\n            this.g = arguments[1];\n            this.b = arguments[2];\n        }\n\n        this.r = this.normalizeByte(this.r);\n        this.g = this.normalizeByte(this.g);\n        this.b = this.normalizeByte(this.b);\n    }\n\n    toHex() {\n        const pad = this.padDigit;\n        const r = this.r.toString(16);\n        const g = this.g.toString(16);\n        const b = this.b.toString(16);\n\n        return \"#\" + pad(r) + pad(g) + pad(b);\n    }\n\n    resolveColor(value) {\n        let color = value || \"black\";\n\n        if (color.charAt(0) === \"#\") {\n            color = color.substr(1, 6);\n        }\n\n        color = color.replace(/ /g, \"\");\n        color = color.toLowerCase();\n        color = Color.namedColors[color] || color;\n\n        return color;\n    }\n\n    normalizeByte(value) {\n        if (value < 0 || isNaN(value)) {\n            return 0;\n        }\n\n        return value > 255 ? 255 : value;\n    }\n\n    padDigit(value) {\n        return (value.length === 1) ? \"0\" + value : value;\n    }\n\n    brightness(value) {\n        const round = Math.round;\n\n        this.r = round(this.normalizeByte(this.r * value));\n        this.g = round(this.normalizeByte(this.g * value));\n        this.b = round(this.normalizeByte(this.b * value));\n\n        return this;\n    }\n\n    percBrightness() {\n        return Math.sqrt(0.241 * this.r * this.r + 0.691 * this.g * this.g + 0.068 * this.b * this.b);\n    }\n\n    isDark() {\n        return this.percBrightness() < DARK_TRESHOLD;\n    }\n\n    static fromBytes(r, g, b, a) {\n        return new Bytes(r, g, b, a != null ? a : 1);\n    }\n\n    static fromRGB(r, g, b, a) {\n        return new RGB(r, g, b, a != null ? a : 1);\n    }\n\n    static fromHSV(h, s, v, a) {\n        return new HSV(h, s, v, a != null ? a : 1);\n    }\n\n    static fromHSL(h, s, l, a) {\n        return new HSL(h, s, l, a != null ? a : 1);\n    }\n}\n\nColor.formats = [ {\n    re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n    process: function(parts) {\n        return [\n            parseInt(parts[1], 10), parseInt(parts[2], 10), parseInt(parts[3], 10)\n        ];\n    }\n}, {\n    re: /^(\\w{2})(\\w{2})(\\w{2})$/,\n    process: function(parts) {\n        return [\n            parseInt(parts[1], 16), parseInt(parts[2], 16), parseInt(parts[3], 16)\n        ];\n    }\n}, {\n    re: /^(\\w{1})(\\w{1})(\\w{1})$/,\n    process: function(parts) {\n        return [\n            parseInt(parts[1] + parts[1], 16),\n            parseInt(parts[2] + parts[2], 16),\n            parseInt(parts[3] + parts[3], 16)\n        ];\n    }\n} ];\n\nColor.namedColors = namedColors;\n\nexport default Color;"]},"metadata":{},"sourceType":"module"}