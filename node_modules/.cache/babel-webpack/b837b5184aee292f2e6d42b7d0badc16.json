{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport errorDetails from './error-details';\nvar formatRegExp = /\\{(\\d+)}?\\}/g;\n\nvar IntlError = /*#__PURE__*/function () {\n  function IntlError(_ref) {\n    var name = _ref.name,\n        message = _ref.message;\n\n    _classCallCheck(this, IntlError);\n\n    if (!name || !message) {\n      throw new Error(\"{ name: string, message: string } object is required!\");\n    }\n\n    this.name = name;\n    this.message = message;\n  }\n\n  _createClass(IntlError, [{\n    key: \"formatMessage\",\n    value: function formatMessage() {\n      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n        values[_key] = arguments[_key];\n      }\n\n      var flattenValues = flatten(values);\n      var formattedMessage = this.message.replace(formatRegExp, function (match, index) {\n        return flattenValues[parseInt(index, 10)];\n      });\n      return \"\".concat(this.name, \": \").concat(formattedMessage);\n    }\n  }, {\n    key: \"error\",\n    value: function error() {\n      for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        values[_key2] = arguments[_key2];\n      }\n\n      return new Error(this.formatMessage(values));\n    }\n  }]);\n\n  return IntlError;\n}();\n\nvar flatten = function flatten(arr) {\n  return arr.reduce(function (a, b) {\n    return a.concat(b);\n  }, []);\n};\n\nvar toIntlErrors = function toIntlErrors(errors) {\n  var predicate = function predicate(prev, name) {\n    prev[name] = new IntlError({\n      name: name,\n      message: errors[name]\n    });\n    return prev;\n  };\n\n  return Object.keys(errors).reduce(predicate, {});\n};\n\nvar errors = toIntlErrors(errorDetails);\nexport { errors, IntlError, toIntlErrors };","map":{"version":3,"sources":["/home/datquocngo/Project/Hung/gts-fe/node_modules/@telerik/kendo-intl/dist/es2015/errors.js"],"names":["errorDetails","formatRegExp","IntlError","name","message","Error","values","flattenValues","flatten","formattedMessage","replace","match","index","parseInt","formatMessage","arr","reduce","a","b","concat","toIntlErrors","errors","predicate","prev","Object","keys"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,iBAAzB;AAEA,IAAMC,YAAY,GAAG,cAArB;;IAEMC,S;AACF,2BAA+B;AAAA,QAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,QAAXC,OAAW,QAAXA,OAAW;;AAAA;;AAC3B,QAAI,CAACD,IAAD,IAAS,CAACC,OAAd,EAAuB;AACnB,YAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACH;;AAED,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACH;;;;oCAEwB;AAAA,wCAARE,MAAQ;AAARA,QAAAA,MAAQ;AAAA;;AACrB,UAAMC,aAAa,GAAGC,OAAO,CAACF,MAAD,CAA7B;AAEA,UAAMG,gBAAgB,GAAG,KAAKL,OAAL,CAAaM,OAAb,CAAqBT,YAArB,EAAmC,UAASU,KAAT,EAAgBC,KAAhB,EAAuB;AAC/E,eAAOL,aAAa,CAACM,QAAQ,CAACD,KAAD,EAAQ,EAAR,CAAT,CAApB;AACH,OAFwB,CAAzB;AAIA,uBAAU,KAAKT,IAAf,eAAwBM,gBAAxB;AACH;;;4BAEgB;AAAA,yCAARH,MAAQ;AAARA,QAAAA,MAAQ;AAAA;;AACb,aAAO,IAAID,KAAJ,CAAU,KAAKS,aAAL,CAAmBR,MAAnB,CAAV,CAAP;AACH;;;;;;AAGL,IAAME,OAAO,GAAG,SAAVA,OAAU,CAASO,GAAT,EAAc;AAC1B,SAAOA,GAAG,CAACC,MAAJ,CAAW,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,CAAC,CAACE,MAAF,CAASD,CAAT,CAAV;AAAA,GAAX,EAAkC,EAAlC,CAAP;AACH,CAFD;;AAIA,IAAME,YAAY,GAAG,SAAfA,YAAe,CAASC,MAAT,EAAiB;AAClC,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAASC,IAAT,EAAepB,IAAf,EAAqB;AACnCoB,IAAAA,IAAI,CAACpB,IAAD,CAAJ,GAAa,IAAID,SAAJ,CAAc;AAAEC,MAAAA,IAAI,EAAJA,IAAF;AAAQC,MAAAA,OAAO,EAAEiB,MAAM,CAAClB,IAAD;AAAvB,KAAd,CAAb;AACA,WAAOoB,IAAP;AACH,GAHD;;AAKA,SAAOC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBL,MAApB,CAA2BM,SAA3B,EAAsC,EAAtC,CAAP;AACH,CAPD;;AASA,IAAMD,MAAM,GAAGD,YAAY,CAACpB,YAAD,CAA3B;AAEA,SACIqB,MADJ,EAEInB,SAFJ,EAGIkB,YAHJ","sourcesContent":["import errorDetails from './error-details';\n\nconst formatRegExp = /\\{(\\d+)}?\\}/g;\n\nclass IntlError {\n    constructor({ name, message }) {\n        if (!name || !message) {\n            throw new Error(\"{ name: string, message: string } object is required!\");\n        }\n\n        this.name = name;\n        this.message = message;\n    }\n\n    formatMessage(...values) {\n        const flattenValues = flatten(values);\n\n        const formattedMessage = this.message.replace(formatRegExp, function(match, index) {\n            return flattenValues[parseInt(index, 10)];\n        });\n\n        return `${this.name}: ${formattedMessage}`;\n    }\n\n    error(...values) {\n        return new Error(this.formatMessage(values));\n    }\n}\n\nconst flatten = function(arr) {\n    return arr.reduce((a, b) => a.concat(b), []);\n};\n\nconst toIntlErrors = function(errors) {\n    const predicate = function(prev, name) {\n        prev[name] = new IntlError({ name, message: errors[name] });\n        return prev;\n    };\n\n    return Object.keys(errors).reduce(predicate, {});\n};\n\nconst errors = toIntlErrors(errorDetails);\n\nexport {\n    errors,\n    IntlError,\n    toIntlErrors\n};\n"]},"metadata":{},"sourceType":"module"}