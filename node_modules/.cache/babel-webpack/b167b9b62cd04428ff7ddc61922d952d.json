{"ast":null,"code":"import { getZoneRules } from './get-zone';\nimport { formatMessage, NO_TZ_INFO } from '../errors';\n/**\n * @hidden\n *\n * A function that finds zone rules which become applicable after specific time.\n */\n\nexport var findZone = function findZone(timezone) {\n  var utcTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date().getTime();\n\n  if (timezone === 'Etc/UTC' || timezone === 'Etc/GMT') {\n    return [0, \"-\", \"UTC\", null];\n  }\n\n  var zoneRules = getZoneRules(timezone);\n  var idx = zoneRules.length - 1;\n\n  for (; idx >= 0; idx--) {\n    var until = zoneRules[idx][3];\n\n    if (until && utcTime > until) {\n      break;\n    }\n  }\n\n  var zone = zoneRules[idx + 1];\n\n  if (!zone) {\n    throw new Error(formatMessage(NO_TZ_INFO, timezone));\n  }\n\n  return zone;\n};","map":{"version":3,"sources":["/home/datquocngo/Project/Hung/gts-fe/node_modules/@progress/kendo-date-math/dist/es2015/tz/find-zone.js"],"names":["getZoneRules","formatMessage","NO_TZ_INFO","findZone","timezone","utcTime","Date","getTime","zoneRules","idx","length","until","zone","Error"],"mappings":"AAAA,SAASA,YAAT,QAA6B,YAA7B;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,WAA1C;AACA;;;;;;AAKA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAA8C;AAAA,MAAnCC,OAAmC,uEAAzB,IAAIC,IAAJ,GAAWC,OAAX,EAAyB;;AAClE,MAAIH,QAAQ,KAAK,SAAb,IAA0BA,QAAQ,KAAK,SAA3C,EAAsD;AAClD,WAAO,CAAC,CAAD,EAAI,GAAJ,EAAS,KAAT,EAAgB,IAAhB,CAAP;AACH;;AACD,MAAMI,SAAS,GAAGR,YAAY,CAACI,QAAD,CAA9B;AACA,MAAIK,GAAG,GAAGD,SAAS,CAACE,MAAV,GAAmB,CAA7B;;AACA,SAAOD,GAAG,IAAI,CAAd,EAAiBA,GAAG,EAApB,EAAwB;AACpB,QAAME,KAAK,GAAGH,SAAS,CAACC,GAAD,CAAT,CAAe,CAAf,CAAd;;AACA,QAAIE,KAAK,IAAIN,OAAO,GAAGM,KAAvB,EAA8B;AAC1B;AACH;AACJ;;AACD,MAAMC,IAAI,GAAGJ,SAAS,CAACC,GAAG,GAAG,CAAP,CAAtB;;AACA,MAAI,CAACG,IAAL,EAAW;AACP,UAAM,IAAIC,KAAJ,CAAUZ,aAAa,CAACC,UAAD,EAAaE,QAAb,CAAvB,CAAN;AACH;;AACD,SAAOQ,IAAP;AACH,CAjBM","sourcesContent":["import { getZoneRules } from './get-zone';\nimport { formatMessage, NO_TZ_INFO } from '../errors';\n/**\n * @hidden\n *\n * A function that finds zone rules which become applicable after specific time.\n */\nexport const findZone = (timezone, utcTime = new Date().getTime()) => {\n    if (timezone === 'Etc/UTC' || timezone === 'Etc/GMT') {\n        return [0, \"-\", \"UTC\", null];\n    }\n    const zoneRules = getZoneRules(timezone);\n    let idx = zoneRules.length - 1;\n    for (; idx >= 0; idx--) {\n        const until = zoneRules[idx][3];\n        if (until && utcTime > until) {\n            break;\n        }\n    }\n    const zone = zoneRules[idx + 1];\n    if (!zone) {\n        throw new Error(formatMessage(NO_TZ_INFO, timezone));\n    }\n    return zone;\n};\n"]},"metadata":{},"sourceType":"module"}