{"ast":null,"code":"import _createClass from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Injectable, Component, Input, ElementRef, NgModule, defineInjectable } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar NgxEasypiechartService = function NgxEasypiechartService() {\n  _classCallCheck(this, NgxEasypiechartService);\n};\n\nNgxEasypiechartService.ɵfac = function NgxEasypiechartService_Factory(t) {\n  return new (t || NgxEasypiechartService)();\n};\n\nNgxEasypiechartService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: NgxEasypiechartService,\n  factory: NgxEasypiechartService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nNgxEasypiechartService.ctorParameters = function () {\n  return [];\n};\n/** @nocollapse */\n\n\nNgxEasypiechartService.ngInjectableDef = defineInjectable({\n  factory: function NgxEasypiechartService_Factory() {\n    return new NgxEasypiechartService();\n  },\n  token: NgxEasypiechartService,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgxEasypiechartService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n\n\nvar NgxEasypiechartComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} element\n   */\n  function NgxEasypiechartComponent(element) {\n    _classCallCheck(this, NgxEasypiechartComponent);\n\n    this.element = element;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(NgxEasypiechartComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {}\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      /** @type {?} */\n      var optionsChanged = false;\n\n      if (changes.percent) {\n        this.percent = changes.percent.currentValue;\n      }\n\n      if (changes.options) {\n        this.options = changes.options.currentValue;\n        optionsChanged = true;\n      }\n\n      this.loadChart(optionsChanged);\n    }\n    /**\n     * @param {?} optionsChanged\n     * @return {?}\n     */\n\n  }, {\n    key: \"loadChart\",\n    value: function loadChart(optionsChanged) {\n      if (this.options && this.percent) {\n        if (optionsChanged) {\n          /** @type {?} */\n          var node = this.element.nativeElement; // TODO: For some reason , 'EasyPieChart' constructor creates a new chart / canvas everytime it is instantiated.\n          // wish there were a method to update options from an existing 'EasyPieChart' instance / object.\n          // Until then - we remove all existing children under the given div of the component and then recreate altogether if there are new options\n\n          while (node.hasChildNodes()) {\n            node.removeChild(node.lastChild);\n          }\n\n          this.pieChart = new EasyPieChart(node, this.options);\n        }\n\n        if (this.pieChart) {\n          this.pieChart.update(this.percent);\n        }\n      }\n    }\n  }]);\n\n  return NgxEasypiechartComponent;\n}();\n\nNgxEasypiechartComponent.ɵfac = function NgxEasypiechartComponent_Factory(t) {\n  return new (t || NgxEasypiechartComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef));\n};\n\nNgxEasypiechartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NgxEasypiechartComponent,\n  selectors: [[\"ngx-easypiechart\"]],\n  inputs: {\n    percent: \"percent\",\n    options: \"options\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  template: function NgxEasypiechartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\");\n      ɵngcc0.ɵɵtext(1, \"Loading ngx-easypiechart...\");\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\n\nNgxEasypiechartComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nNgxEasypiechartComponent.propDecorators = {\n  options: [{\n    type: Input\n  }],\n  percent: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgxEasypiechartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-easypiechart',\n      template: \"<div>Loading ngx-easypiechart...</div>\"\n    }]\n  }], function () {\n    return [{\n      type: ElementRef\n    }];\n  }, {\n    percent: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n\n\nvar NgxEasypiechartModule = function NgxEasypiechartModule() {\n  _classCallCheck(this, NgxEasypiechartModule);\n};\n\nNgxEasypiechartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NgxEasypiechartModule\n});\nNgxEasypiechartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NgxEasypiechartModule_Factory(t) {\n    return new (t || NgxEasypiechartModule)();\n  },\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxEasypiechartModule, {\n    declarations: [NgxEasypiechartComponent],\n    exports: [NgxEasypiechartComponent]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgxEasypiechartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [NgxEasypiechartComponent],\n      exports: [NgxEasypiechartComponent]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n\n\nexport { NgxEasypiechartService, NgxEasypiechartComponent, NgxEasypiechartModule };","map":{"version":3,"sources":["ngx-easypiechart/lib/ngx-easypiechart.service.ts","ngx-easypiechart/lib/ngx-easypiechart.component.ts","ngx-easypiechart/lib/ngx-easypiechart.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxEasypiechartService {\n\n  constructor() { }\n}\n","import { Component, OnInit, Input, OnChanges, SimpleChanges, ElementRef } from '@angular/core';\ndeclare var EasyPieChart: any;\n\n@Component({\n  selector: 'ngx-easypiechart',\n  template: `<div>Loading ngx-easypiechart...</div>`\n})\nexport class NgxEasypiechartComponent implements OnInit, OnChanges {\n\n  @Input()\n  options: any;\n\n  @Input()\n  percent: number;\n\n  private pieChart: any;\n\n  constructor(private element: ElementRef<HTMLDivElement>) {\n  }\n\n  ngOnInit() {\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    let optionsChanged = false;\n    if (changes.percent) {\n      this.percent = changes.percent.currentValue;\n    }\n    if (changes.options) {\n      this.options = changes.options.currentValue;\n      optionsChanged = true;\n    }\n    this.loadChart(optionsChanged);\n  }\n\n  loadChart(optionsChanged: boolean) {\n    if (this.options && this.percent) {\n      if (optionsChanged) {\n        const node = this.element.nativeElement;\n        // TODO: For some reason , 'EasyPieChart' constructor creates a new chart / canvas everytime it is instantiated.\n        // wish there were a method to update options from an existing 'EasyPieChart' instance / object.\n        // Until then - we remove all existing children under the given div of the component and then recreate altogether if there are new options\n        while (node.hasChildNodes()) {\n          node.removeChild(node.lastChild);\n        }\n        this.pieChart = new EasyPieChart(node, this.options);\n      }\n      if (this.pieChart) {\n        this.pieChart.update(this.percent);\n      }\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxEasypiechartComponent } from './ngx-easypiechart.component';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [NgxEasypiechartComponent],\n  exports: [NgxEasypiechartComponent]\n})\nexport class NgxEasypiechartModule { }\n"]},"metadata":{},"sourceType":"module"}