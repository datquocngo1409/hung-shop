{"ast":null,"code":"import elementStyles from './element-styles';\nimport defined from './defined';\n\nfunction getPixels(value) {\n  if (isNaN(value)) {\n    return value;\n  }\n\n  return value + \"px\";\n}\n\nexport default function elementSize(element, size) {\n  if (size) {\n    var width = size.width,\n        height = size.height;\n\n    if (defined(width)) {\n      element.style.width = getPixels(width);\n    }\n\n    if (defined(height)) {\n      element.style.height = getPixels(height);\n    }\n  } else {\n    var _size = elementStyles(element, ['width', 'height']);\n\n    return {\n      width: parseInt(_size.width, 10),\n      height: parseInt(_size.height, 10)\n    };\n  }\n}","map":{"version":3,"sources":["/home/datquocngo/Project/Hung/gts-fe/node_modules/@progress/kendo-drawing/dist/es2015/util/element-size.js"],"names":["elementStyles","defined","getPixels","value","isNaN","elementSize","element","size","width","height","style","parseInt"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,kBAA1B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,MAAIC,KAAK,CAACD,KAAD,CAAT,EAAkB;AACd,WAAOA,KAAP;AACH;;AACD,SAAOA,KAAK,GAAG,IAAf;AACH;;AAED,eAAe,SAASE,WAAT,CAAqBC,OAArB,EAA8BC,IAA9B,EAAoC;AAC/C,MAAIA,IAAJ,EAAU;AAAA,QACEC,KADF,GACoBD,IADpB,CACEC,KADF;AAAA,QACSC,MADT,GACoBF,IADpB,CACSE,MADT;;AAGN,QAAIR,OAAO,CAACO,KAAD,CAAX,EAAoB;AAChBF,MAAAA,OAAO,CAACI,KAAR,CAAcF,KAAd,GAAsBN,SAAS,CAACM,KAAD,CAA/B;AACH;;AAED,QAAIP,OAAO,CAACQ,MAAD,CAAX,EAAqB;AACjBH,MAAAA,OAAO,CAACI,KAAR,CAAcD,MAAd,GAAuBP,SAAS,CAACO,MAAD,CAAhC;AACH;AAEJ,GAXD,MAWO;AACH,QAAMF,KAAI,GAAGP,aAAa,CAACM,OAAD,EAAU,CAAE,OAAF,EAAW,QAAX,CAAV,CAA1B;;AAEA,WAAO;AACHE,MAAAA,KAAK,EAAEG,QAAQ,CAACJ,KAAI,CAACC,KAAN,EAAa,EAAb,CADZ;AAEHC,MAAAA,MAAM,EAAEE,QAAQ,CAACJ,KAAI,CAACE,MAAN,EAAc,EAAd;AAFb,KAAP;AAIH;AACJ","sourcesContent":["import elementStyles from './element-styles';\nimport defined from './defined';\n\nfunction getPixels(value) {\n    if (isNaN(value)) {\n        return value;\n    }\n    return value + \"px\";\n}\n\nexport default function elementSize(element, size) {\n    if (size) {\n        const { width, height } = size;\n\n        if (defined(width)) {\n            element.style.width = getPixels(width);\n        }\n\n        if (defined(height)) {\n            element.style.height = getPixels(height);\n        }\n\n    } else {\n        const size = elementStyles(element, [ 'width', 'height' ]);\n\n        return {\n            width: parseInt(size.width, 10),\n            height: parseInt(size.height, 10)\n        };\n    }\n}"]},"metadata":{},"sourceType":"module"}