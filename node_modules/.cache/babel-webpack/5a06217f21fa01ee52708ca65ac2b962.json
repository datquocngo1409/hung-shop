{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport BaseNode from '../core/base-node';\nimport renderAllAttr from './utils/render-all-attributes';\nimport renderAttr from './utils/render-attribute';\nimport _renderStyle from './utils/render-style';\nimport NODE_MAP from './node-map';\nimport renderSVG from './utils/render-svg';\nimport { SVG_NS, NONE } from './constants';\nimport { support } from '../common';\nimport { defined } from '../util';\nvar TRANSFORM = \"transform\";\nvar DefinitionMap = {\n  clip: \"clip-path\",\n  fill: \"fill\"\n};\n\nfunction isDefinition(type, value) {\n  return type === \"clip\" || type === \"fill\" && (!value || value.nodeType === \"Gradient\");\n}\n\nfunction _baseUrl() {\n  var base = document.getElementsByTagName(\"base\")[0];\n  var href = document.location.href;\n  var url = \"\";\n\n  if (base && !(support.browser || {}).msie) {\n    var hashIndex = href.indexOf(\"#\");\n\n    if (hashIndex !== -1) {\n      href = href.substring(0, hashIndex);\n    }\n\n    url = href;\n  }\n\n  return url;\n}\n\nvar Node = /*#__PURE__*/function (_BaseNode) {\n  _inherits(Node, _BaseNode);\n\n  var _super = _createSuper(Node);\n\n  function Node(srcElement, options) {\n    var _this;\n\n    _classCallCheck(this, Node);\n\n    _this = _super.call(this, srcElement);\n    _this.definitions = {};\n    _this.options = options;\n    return _this;\n  }\n\n  _createClass(Node, [{\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.element) {\n        this.element._kendoNode = null;\n        this.element = null;\n      }\n\n      this.clearDefinitions();\n\n      _get(_getPrototypeOf(Node.prototype), \"destroy\", this).call(this);\n    }\n  }, {\n    key: \"load\",\n    value: function load(elements, pos) {\n      for (var i = 0; i < elements.length; i++) {\n        var srcElement = elements[i];\n        var children = srcElement.children;\n        var childNode = new NODE_MAP[srcElement.nodeType](srcElement, this.options);\n\n        if (defined(pos)) {\n          this.insertAt(childNode, pos);\n        } else {\n          this.append(childNode);\n        }\n\n        childNode.createDefinitions();\n\n        if (children && children.length > 0) {\n          childNode.load(children);\n        }\n\n        var element = this.element;\n\n        if (element) {\n          childNode.attachTo(element, pos);\n        }\n      }\n    }\n  }, {\n    key: \"root\",\n    value: function root() {\n      var root = this;\n\n      while (root.parent) {\n        root = root.parent;\n      }\n\n      return root;\n    }\n  }, {\n    key: \"attachTo\",\n    value: function attachTo(domElement, pos) {\n      var container = document.createElement(\"div\");\n      renderSVG(container, \"<svg xmlns='\" + SVG_NS + \"' version='1.1'>\" + this.render() + \"</svg>\");\n      var element = container.firstChild.firstChild;\n\n      if (element) {\n        if (defined(pos)) {\n          domElement.insertBefore(element, domElement.childNodes[pos] || null);\n        } else {\n          domElement.appendChild(element);\n        }\n\n        this.setElement(element);\n      }\n    }\n  }, {\n    key: \"setElement\",\n    value: function setElement(element) {\n      if (this.element) {\n        this.element._kendoNode = null;\n      }\n\n      this.element = element;\n      this.element._kendoNode = this;\n      var nodes = this.childNodes;\n\n      for (var i = 0; i < nodes.length; i++) {\n        var childElement = element.childNodes[i];\n        nodes[i].setElement(childElement);\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.clearDefinitions();\n\n      if (this.element) {\n        this.element.innerHTML = \"\";\n      }\n\n      var children = this.childNodes;\n\n      for (var i = 0; i < children.length; i++) {\n        children[i].destroy();\n      }\n\n      this.childNodes = [];\n    }\n  }, {\n    key: \"removeSelf\",\n    value: function removeSelf() {\n      if (this.element) {\n        var parentNode = this.element.parentNode;\n\n        if (parentNode) {\n          parentNode.removeChild(this.element);\n        }\n\n        this.element = null;\n      }\n\n      _get(_getPrototypeOf(Node.prototype), \"removeSelf\", this).call(this);\n    }\n  }, {\n    key: \"template\",\n    value: function template() {\n      return this.renderChildren();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.template();\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var nodes = this.childNodes;\n      var output = \"\";\n\n      for (var i = 0; i < nodes.length; i++) {\n        output += nodes[i].render();\n      }\n\n      return output;\n    }\n  }, {\n    key: \"optionsChange\",\n    value: function optionsChange(e) {\n      var field = e.field,\n          value = e.value;\n\n      if (field === \"visible\") {\n        this.css(\"display\", value ? \"\" : NONE);\n      } else if (DefinitionMap[field] && isDefinition(field, value)) {\n        this.updateDefinition(field, value);\n      } else if (field === \"opacity\") {\n        this.attr(\"opacity\", value);\n      } else if (field === \"cursor\") {\n        this.css(\"cursor\", value);\n      } else if (field === \"id\") {\n        if (value) {\n          this.attr(\"id\", value);\n        } else {\n          this.removeAttr(\"id\");\n        }\n      }\n\n      _get(_getPrototypeOf(Node.prototype), \"optionsChange\", this).call(this, e);\n    }\n  }, {\n    key: \"attr\",\n    value: function attr(name, value) {\n      if (this.element) {\n        this.element.setAttribute(name, value);\n      }\n    }\n  }, {\n    key: \"allAttr\",\n    value: function allAttr(attrs) {\n      for (var i = 0; i < attrs.length; i++) {\n        this.attr(attrs[i][0], attrs[i][1]);\n      }\n    }\n  }, {\n    key: \"css\",\n    value: function css(name, value) {\n      if (this.element) {\n        this.element.style[name] = value;\n      }\n    }\n  }, {\n    key: \"allCss\",\n    value: function allCss(styles) {\n      for (var i = 0; i < styles.length; i++) {\n        this.css(styles[i][0], styles[i][1]);\n      }\n    }\n  }, {\n    key: \"removeAttr\",\n    value: function removeAttr(name) {\n      if (this.element) {\n        this.element.removeAttribute(name);\n      }\n    }\n  }, {\n    key: \"mapTransform\",\n    value: function mapTransform(transform) {\n      var attrs = [];\n\n      if (transform) {\n        attrs.push([TRANSFORM, \"matrix(\" + transform.matrix().toString(6) + \")\"]);\n      }\n\n      return attrs;\n    }\n  }, {\n    key: \"renderTransform\",\n    value: function renderTransform() {\n      return renderAllAttr(this.mapTransform(this.srcElement.transform()));\n    }\n  }, {\n    key: \"transformChange\",\n    value: function transformChange(value) {\n      if (value) {\n        this.allAttr(this.mapTransform(value));\n      } else {\n        this.removeAttr(TRANSFORM);\n      }\n    }\n  }, {\n    key: \"mapStyle\",\n    value: function mapStyle() {\n      var options = this.srcElement.options;\n      var style = [[\"cursor\", options.cursor]];\n\n      if (options.visible === false) {\n        style.push([\"display\", NONE]);\n      }\n\n      return style;\n    }\n  }, {\n    key: \"renderStyle\",\n    value: function renderStyle() {\n      return renderAttr(\"style\", _renderStyle(this.mapStyle(true)));\n    }\n  }, {\n    key: \"renderOpacity\",\n    value: function renderOpacity() {\n      return renderAttr(\"opacity\", this.srcElement.options.opacity);\n    }\n  }, {\n    key: \"renderId\",\n    value: function renderId() {\n      return renderAttr(\"id\", this.srcElement.options.id);\n    }\n  }, {\n    key: \"createDefinitions\",\n    value: function createDefinitions() {\n      var srcElement = this.srcElement;\n      var definitions = this.definitions;\n\n      if (srcElement) {\n        var options = srcElement.options;\n        var hasDefinitions;\n\n        for (var field in DefinitionMap) {\n          var definition = options.get(field);\n\n          if (definition && isDefinition(field, definition)) {\n            definitions[field] = definition;\n            hasDefinitions = true;\n          }\n        }\n\n        if (hasDefinitions) {\n          this.definitionChange({\n            action: \"add\",\n            definitions: definitions\n          });\n        }\n      }\n    }\n  }, {\n    key: \"definitionChange\",\n    value: function definitionChange(e) {\n      if (this.parent) {\n        this.parent.definitionChange(e);\n      }\n    }\n  }, {\n    key: \"updateDefinition\",\n    value: function updateDefinition(type, value) {\n      var definitions = this.definitions;\n      var current = definitions[type];\n      var attr = DefinitionMap[type];\n      var definition = {};\n\n      if (current) {\n        definition[type] = current;\n        this.definitionChange({\n          action: \"remove\",\n          definitions: definition\n        });\n        delete definitions[type];\n      }\n\n      if (!value) {\n        if (current) {\n          this.removeAttr(attr);\n        }\n      } else {\n        definition[type] = value;\n        this.definitionChange({\n          action: \"add\",\n          definitions: definition\n        });\n        definitions[type] = value;\n        this.attr(attr, this.refUrl(value.id));\n      }\n    }\n  }, {\n    key: \"clearDefinitions\",\n    value: function clearDefinitions() {\n      var definitions = this.definitions;\n      this.definitionChange({\n        action: \"remove\",\n        definitions: definitions\n      });\n      this.definitions = {};\n    }\n  }, {\n    key: \"renderDefinitions\",\n    value: function renderDefinitions() {\n      return renderAllAttr(this.mapDefinitions());\n    }\n  }, {\n    key: \"mapDefinitions\",\n    value: function mapDefinitions() {\n      var definitions = this.definitions;\n      var attrs = [];\n\n      for (var field in definitions) {\n        attrs.push([DefinitionMap[field], this.refUrl(definitions[field].id)]);\n      }\n\n      return attrs;\n    }\n  }, {\n    key: \"refUrl\",\n    value: function refUrl(id) {\n      var skipBaseHref = (this.options || {}).skipBaseHref;\n      var baseHref = this.baseUrl().replace(/'/g, \"\\\\'\");\n      var base = skipBaseHref ? '' : baseHref;\n      return \"url(\".concat(base, \"#\").concat(id, \")\");\n    }\n  }, {\n    key: \"baseUrl\",\n    value: function baseUrl() {\n      return _baseUrl();\n    }\n  }]);\n\n  return Node;\n}(BaseNode);\n\nexport default Node;","map":{"version":3,"sources":["/home/datquocngo/Project/UET/gts-fe/node_modules/@progress/kendo-drawing/dist/es2015/svg/node.js"],"names":["BaseNode","renderAllAttr","renderAttr","renderStyle","NODE_MAP","renderSVG","SVG_NS","NONE","support","defined","TRANSFORM","DefinitionMap","clip","fill","isDefinition","type","value","nodeType","baseUrl","base","document","getElementsByTagName","href","location","url","browser","msie","hashIndex","indexOf","substring","Node","srcElement","options","definitions","element","_kendoNode","clearDefinitions","elements","pos","i","length","children","childNode","insertAt","append","createDefinitions","load","attachTo","root","parent","domElement","container","createElement","render","firstChild","insertBefore","childNodes","appendChild","setElement","nodes","childElement","innerHTML","destroy","parentNode","removeChild","renderChildren","template","output","e","field","css","updateDefinition","attr","removeAttr","name","setAttribute","attrs","style","styles","removeAttribute","transform","push","matrix","toString","mapTransform","allAttr","cursor","visible","mapStyle","opacity","id","hasDefinitions","definition","get","definitionChange","action","current","refUrl","mapDefinitions","skipBaseHref","baseHref","replace"],"mappings":"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","sourcesContent":["import BaseNode from '../core/base-node';\nimport renderAllAttr from './utils/render-all-attributes';\nimport renderAttr from './utils/render-attribute';\nimport renderStyle from './utils/render-style';\nimport NODE_MAP from './node-map';\nimport renderSVG from './utils/render-svg';\nimport { SVG_NS, NONE } from './constants';\nimport { support } from '../common';\nimport { defined } from '../util';\n\nconst TRANSFORM = \"transform\";\nconst DefinitionMap = {\n    clip: \"clip-path\",\n    fill: \"fill\"\n};\n\nfunction isDefinition(type, value) {\n    return type === \"clip\" || (type === \"fill\" && (!value || value.nodeType === \"Gradient\"));\n}\n\nfunction baseUrl() {\n    const base = document.getElementsByTagName(\"base\")[0];\n    let href = document.location.href;\n    let url = \"\";\n\n    if (base && !(support.browser || {}).msie) {\n        const hashIndex = href.indexOf(\"#\");\n        if (hashIndex !== -1) {\n            href = href.substring(0, hashIndex);\n        }\n\n        url = href;\n    }\n\n    return url;\n}\n\nclass Node extends BaseNode {\n\n    constructor(srcElement, options) {\n        super(srcElement);\n        this.definitions = {};\n\n        this.options = options;\n    }\n\n    destroy() {\n        if (this.element) {\n            this.element._kendoNode = null;\n            this.element = null;\n        }\n\n        this.clearDefinitions();\n        super.destroy();\n    }\n\n    load(elements, pos) {\n        for (let i = 0; i < elements.length; i++) {\n            const srcElement = elements[i];\n            const children = srcElement.children;\n\n            const childNode = new NODE_MAP[srcElement.nodeType](srcElement, this.options);\n\n            if (defined(pos)) {\n                this.insertAt(childNode, pos);\n            } else {\n                this.append(childNode);\n            }\n\n            childNode.createDefinitions();\n\n            if (children && children.length > 0) {\n                childNode.load(children);\n            }\n\n            const element = this.element;\n            if (element) {\n                childNode.attachTo(element, pos);\n            }\n        }\n    }\n\n    root() {\n        let root = this;\n\n        while (root.parent) {\n            root = root.parent;\n        }\n\n        return root;\n    }\n\n    attachTo(domElement, pos) {\n        const container = document.createElement(\"div\");\n        renderSVG(container,\n            \"<svg xmlns='\" + SVG_NS + \"' version='1.1'>\" +\n                this.render() +\n            \"</svg>\"\n        );\n\n        const element = container.firstChild.firstChild;\n        if (element) {\n            if (defined(pos)) {\n                domElement.insertBefore(element, domElement.childNodes[pos] || null);\n            } else {\n                domElement.appendChild(element);\n            }\n            this.setElement(element);\n        }\n    }\n\n    setElement(element) {\n        if (this.element) {\n            this.element._kendoNode = null;\n        }\n\n        this.element = element;\n        this.element._kendoNode = this;\n\n        const nodes = this.childNodes;\n        for (let i = 0; i < nodes.length; i++) {\n            let childElement = element.childNodes[i];\n            nodes[i].setElement(childElement);\n        }\n    }\n\n    clear() {\n        this.clearDefinitions();\n\n        if (this.element) {\n            this.element.innerHTML = \"\";\n        }\n\n        const children = this.childNodes;\n        for (let i = 0; i < children.length; i++) {\n            children[i].destroy();\n        }\n\n        this.childNodes = [];\n    }\n\n    removeSelf() {\n        if (this.element) {\n            const parentNode = this.element.parentNode;\n            if (parentNode) {\n                parentNode.removeChild(this.element);\n            }\n            this.element = null;\n        }\n\n        super.removeSelf();\n    }\n\n    template() {\n        return this.renderChildren();\n    }\n\n    render() {\n        return this.template();\n    }\n\n    renderChildren() {\n        const nodes = this.childNodes;\n        let output = \"\";\n\n        for (let i = 0; i < nodes.length; i++) {\n            output += nodes[i].render();\n        }\n\n        return output;\n    }\n\n    optionsChange(e) {\n        const { field, value } = e;\n\n        if (field === \"visible\") {\n            this.css(\"display\", value ? \"\" : NONE);\n        } else if (DefinitionMap[field] && isDefinition(field, value)) {\n            this.updateDefinition(field, value);\n        } else if (field === \"opacity\") {\n            this.attr(\"opacity\", value);\n        } else if (field === \"cursor\") {\n            this.css(\"cursor\", value);\n        } else if (field === \"id\") {\n            if (value) {\n                this.attr(\"id\", value);\n            } else {\n                this.removeAttr(\"id\");\n            }\n        }\n\n        super.optionsChange(e);\n    }\n\n    attr(name, value) {\n        if (this.element) {\n            this.element.setAttribute(name, value);\n        }\n    }\n\n    allAttr(attrs) {\n        for (let i = 0; i < attrs.length; i++) {\n            this.attr(attrs[i][0], attrs[i][1]);\n        }\n    }\n\n    css(name, value) {\n        if (this.element) {\n            this.element.style[name] = value;\n        }\n    }\n\n    allCss(styles) {\n        for (let i = 0; i < styles.length; i++) {\n            this.css(styles[i][0], styles[i][1]);\n        }\n    }\n\n    removeAttr(name) {\n        if (this.element) {\n            this.element.removeAttribute(name);\n        }\n    }\n\n    mapTransform(transform) {\n        const attrs = [];\n        if (transform) {\n            attrs.push([\n                TRANSFORM,\n                \"matrix(\" + transform.matrix().toString(6) + \")\"\n            ]);\n        }\n\n        return attrs;\n    }\n\n    renderTransform() {\n        return renderAllAttr(\n            this.mapTransform(this.srcElement.transform())\n        );\n    }\n\n    transformChange(value) {\n        if (value) {\n            this.allAttr(this.mapTransform(value));\n        } else {\n            this.removeAttr(TRANSFORM);\n        }\n    }\n\n    mapStyle() {\n        const options = this.srcElement.options;\n        const style = [ [ \"cursor\", options.cursor ] ];\n\n        if (options.visible === false) {\n            style.push([ \"display\", NONE ]);\n        }\n\n        return style;\n    }\n\n    renderStyle() {\n        return renderAttr(\"style\", renderStyle(this.mapStyle(true)));\n    }\n\n    renderOpacity() {\n        return renderAttr(\"opacity\", this.srcElement.options.opacity);\n    }\n\n    renderId() {\n        return renderAttr(\"id\", this.srcElement.options.id);\n    }\n\n    createDefinitions() {\n        const srcElement = this.srcElement;\n        const definitions = this.definitions;\n        if (srcElement) {\n            const options = srcElement.options;\n            let hasDefinitions;\n\n            for (let field in DefinitionMap) {\n                let definition = options.get(field);\n                if (definition && isDefinition(field, definition)) {\n                    definitions[field] = definition;\n                    hasDefinitions = true;\n                }\n            }\n            if (hasDefinitions) {\n                this.definitionChange({\n                    action: \"add\",\n                    definitions: definitions\n                });\n            }\n        }\n    }\n\n    definitionChange(e) {\n        if (this.parent) {\n            this.parent.definitionChange(e);\n        }\n    }\n\n    updateDefinition(type, value) {\n        const definitions = this.definitions;\n        const current = definitions[type];\n        const attr = DefinitionMap[type];\n        const definition = {};\n        if (current) {\n            definition[type] = current;\n            this.definitionChange({\n                action: \"remove\",\n                definitions: definition\n            });\n            delete definitions[type];\n        }\n\n        if (!value) {\n            if (current) {\n                this.removeAttr(attr);\n            }\n        } else {\n            definition[type] = value;\n            this.definitionChange({\n                action: \"add\",\n                definitions: definition\n            });\n            definitions[type] = value;\n            this.attr(attr, this.refUrl(value.id));\n        }\n    }\n\n    clearDefinitions() {\n        const definitions = this.definitions;\n\n        this.definitionChange({\n            action: \"remove\",\n            definitions: definitions\n        });\n        this.definitions = {};\n    }\n\n    renderDefinitions() {\n        return renderAllAttr(this.mapDefinitions());\n    }\n\n    mapDefinitions() {\n        const definitions = this.definitions;\n        const attrs = [];\n\n        for (let field in definitions) {\n            attrs.push([ DefinitionMap[field], this.refUrl(definitions[field].id) ]);\n        }\n\n        return attrs;\n    }\n\n    refUrl(id) {\n        const skipBaseHref = (this.options || {}).skipBaseHref;\n        const baseHref = this.baseUrl().replace(/'/g, \"\\\\'\");\n        const base = skipBaseHref ? '' : baseHref;\n        return `url(${ base }#${ id })`;\n    }\n\n    baseUrl() {\n        return baseUrl();\n    }\n}\n\nexport default Node;\n"]},"metadata":{},"sourceType":"module"}