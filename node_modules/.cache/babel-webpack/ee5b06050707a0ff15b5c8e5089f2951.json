{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _get from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport BaseSurface from '../core/surface';\nimport RootNode from './root-node';\nimport Group from '../shapes/group';\nimport transform from '../geometry/transform';\nimport renderSVG from './utils/render-svg';\nimport { SVG_NS } from './constants';\nimport { bindEvents, unbindEvents, elementStyles } from '../util';\nvar RTL = 'rtl';\n\nfunction alignToScreen(element) {\n  var ctm;\n\n  try {\n    ctm = element.getScreenCTM ? element.getScreenCTM() : null;\n  } catch (e) {} // eslint-disable-line no-empty\n\n\n  if (ctm) {\n    var left = -ctm.e % 1;\n    var top = -ctm.f % 1;\n    var style = element.style;\n\n    if (left !== 0 || top !== 0) {\n      style.left = left + \"px\";\n      style.top = top + \"px\";\n    }\n  }\n}\n\nvar Surface = /*#__PURE__*/function (_BaseSurface) {\n  _inherits(Surface, _BaseSurface);\n\n  var _super = _createSuper(Surface);\n\n  _createClass(Surface, [{\n    key: \"type\",\n    get: function get() {\n      return \"svg\";\n    }\n  }]);\n\n  function Surface(element, options) {\n    var _this;\n\n    _classCallCheck(this, Surface);\n\n    _this = _super.call(this, element, options);\n    _this._root = new RootNode(Object.assign({\n      rtl: elementStyles(element, 'direction').direction === RTL\n    }, _this.options));\n    renderSVG(_this.element, _this._template());\n    _this._rootElement = _this.element.firstElementChild;\n    alignToScreen(_this._rootElement);\n\n    _this._root.attachTo(_this._rootElement);\n\n    bindEvents(_this.element, {\n      click: _this._click,\n      mouseover: _this._mouseenter,\n      mouseout: _this._mouseleave,\n      mousemove: _this._mousemove\n    });\n\n    _this.resize();\n\n    return _this;\n  }\n\n  _createClass(Surface, [{\n    key: \"destroy\",\n    value: function destroy() {\n      if (this._root) {\n        this._root.destroy();\n\n        this._root = null;\n        this._rootElement = null;\n        unbindEvents(this.element, {\n          click: this._click,\n          mouseover: this._mouseenter,\n          mouseout: this._mouseleave,\n          mousemove: this._mousemove\n        });\n      }\n\n      _get(_getPrototypeOf(Surface.prototype), \"destroy\", this).call(this);\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(offset) {\n      var viewBox = \"\".concat(Math.round(offset.x), \" \").concat(Math.round(offset.y), \" \").concat(this._size.width, \" \").concat(this._size.height);\n      this._offset = offset;\n\n      this._rootElement.setAttribute(\"viewBox\", viewBox);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(element) {\n      _get(_getPrototypeOf(Surface.prototype), \"draw\", this).call(this, element);\n\n      this._root.load([element]);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _get(_getPrototypeOf(Surface.prototype), \"clear\", this).call(this);\n\n      this._root.clear();\n    }\n  }, {\n    key: \"svg\",\n    value: function svg() {\n      return \"<?xml version='1.0' ?>\" + this._template();\n    }\n  }, {\n    key: \"exportVisual\",\n    value: function exportVisual() {\n      var visual = this._visual,\n          offset = this._offset;\n\n      if (offset) {\n        var wrap = new Group();\n        wrap.children.push(visual);\n        wrap.transform(transform().translate(-offset.x, -offset.y));\n        visual = wrap;\n      }\n\n      return visual;\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize() {\n      if (this._offset) {\n        this.translate(this._offset);\n      }\n    }\n  }, {\n    key: \"_template\",\n    value: function _template() {\n      return \"<svg style='width: 100%; height: 100%; overflow: hidden;' xmlns='\".concat(SVG_NS, \"' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1'>\").concat(this._root.render(), \"</svg>\");\n    }\n  }]);\n\n  return Surface;\n}(BaseSurface);\n\nexport default Surface;","map":{"version":3,"sources":["/home/datquocngo/Project/UET/gts-fe/node_modules/@progress/kendo-drawing/dist/es2015/svg/surface.js"],"names":["BaseSurface","RootNode","Group","transform","renderSVG","SVG_NS","bindEvents","unbindEvents","elementStyles","RTL","alignToScreen","element","ctm","getScreenCTM","e","left","top","f","style","Surface","options","_root","Object","assign","rtl","direction","_template","_rootElement","firstElementChild","attachTo","click","_click","mouseover","_mouseenter","mouseout","_mouseleave","mousemove","_mousemove","resize","destroy","offset","viewBox","Math","round","x","y","_size","width","height","_offset","setAttribute","load","clear","visual","_visual","wrap","children","push","translate","render"],"mappings":"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","sourcesContent":["import BaseSurface from '../core/surface';\nimport RootNode from './root-node';\nimport Group from '../shapes/group';\nimport transform from '../geometry/transform';\nimport renderSVG from './utils/render-svg';\nimport { SVG_NS } from './constants';\nimport { bindEvents, unbindEvents, elementStyles } from '../util';\n\nconst RTL = 'rtl';\n\nfunction alignToScreen(element) {\n    let ctm;\n\n    try {\n        ctm = element.getScreenCTM ? element.getScreenCTM() : null;\n    } catch (e) { } // eslint-disable-line no-empty\n\n    if (ctm) {\n        const left = - ctm.e % 1;\n        const top = - ctm.f % 1;\n        const style = element.style;\n\n        if (left !== 0 || top !== 0) {\n            style.left = left + \"px\";\n            style.top = top + \"px\";\n        }\n    }\n}\n\nclass Surface extends BaseSurface {\n    get type() {\n        return \"svg\";\n    }\n\n    constructor(element, options) {\n        super(element, options);\n\n        this._root = new RootNode(Object.assign({\n            rtl: elementStyles(element, 'direction').direction === RTL\n        }, this.options));\n\n        renderSVG(this.element, this._template());\n\n        this._rootElement = this.element.firstElementChild;\n\n        alignToScreen(this._rootElement);\n\n        this._root.attachTo(this._rootElement);\n\n        bindEvents(this.element, {\n            click: this._click,\n            mouseover: this._mouseenter,\n            mouseout: this._mouseleave,\n            mousemove: this._mousemove\n        });\n\n        this.resize();\n    }\n\n    destroy() {\n        if (this._root) {\n            this._root.destroy();\n            this._root = null;\n            this._rootElement = null;\n            unbindEvents(this.element, {\n                click: this._click,\n                mouseover: this._mouseenter,\n                mouseout: this._mouseleave,\n                mousemove: this._mousemove\n            });\n        }\n\n        super.destroy();\n    }\n\n    translate(offset) {\n        const viewBox = `${ Math.round(offset.x) } ${ Math.round(offset.y) } ${ this._size.width } ${ this._size.height }`;\n\n        this._offset = offset;\n        this._rootElement.setAttribute(\"viewBox\", viewBox);\n    }\n\n    draw(element) {\n        super.draw(element);\n        this._root.load([ element ]);\n    }\n\n    clear() {\n        super.clear();\n        this._root.clear();\n    }\n\n    svg() {\n        return \"<?xml version='1.0' ?>\" + this._template();\n    }\n\n    exportVisual() {\n        let { _visual: visual, _offset: offset } = this;\n\n        if (offset) {\n            const wrap = new Group();\n            wrap.children.push(visual);\n\n            wrap.transform(\n                transform().translate(-offset.x, -offset.y)\n            );\n\n            visual = wrap;\n        }\n\n        return visual;\n    }\n\n    _resize() {\n        if (this._offset) {\n            this.translate(this._offset);\n        }\n    }\n\n    _template() {\n        return `<svg style='width: 100%; height: 100%; overflow: hidden;' xmlns='${ SVG_NS }' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1'>${ this._root.render() }</svg>`;\n    }\n}\n\nexport default Surface;\n"]},"metadata":{},"sourceType":"module"}