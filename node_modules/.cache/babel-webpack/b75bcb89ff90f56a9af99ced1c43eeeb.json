{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Class } from '../common';\nimport HasObservers from './has-observers';\nimport { defined } from '../util';\nvar toString = {}.toString;\n\nvar OptionsStore = /*#__PURE__*/function (_HasObservers) {\n  _inherits(OptionsStore, _HasObservers);\n\n  var _super = _createSuper(OptionsStore);\n\n  function OptionsStore(options) {\n    var _this;\n\n    var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n    _classCallCheck(this, OptionsStore);\n\n    _this = _super.call(this);\n    _this.prefix = prefix;\n\n    for (var field in options) {\n      var member = options[field];\n      member = _this._wrap(member, field);\n      _this[field] = member;\n    }\n\n    return _this;\n  }\n\n  _createClass(OptionsStore, [{\n    key: \"get\",\n    value: function get(field) {\n      var parts = field.split(\".\");\n      var result = this;\n\n      while (parts.length && result) {\n        var part = parts.shift();\n        result = result[part];\n      }\n\n      return result;\n    }\n  }, {\n    key: \"set\",\n    value: function set(field, value) {\n      var current = this.get(field);\n\n      if (current !== value) {\n        this._set(field, this._wrap(value, field));\n\n        this.optionsChange({\n          field: this.prefix + field,\n          value: value\n        });\n      }\n    }\n  }, {\n    key: \"_set\",\n    value: function _set(field, value) {\n      var composite = field.indexOf(\".\") >= 0;\n      var parentObj = this;\n      var fieldName = field;\n\n      if (composite) {\n        var parts = fieldName.split(\".\");\n        var prefix = this.prefix;\n\n        while (parts.length > 1) {\n          fieldName = parts.shift();\n          prefix += fieldName + \".\";\n          var obj = parentObj[fieldName];\n\n          if (!obj) {\n            obj = new OptionsStore({}, prefix);\n            obj.addObserver(this);\n            parentObj[fieldName] = obj;\n          }\n\n          parentObj = obj;\n        }\n\n        fieldName = parts[0];\n      }\n\n      parentObj._clear(fieldName);\n\n      parentObj[fieldName] = value;\n    }\n  }, {\n    key: \"_clear\",\n    value: function _clear(field) {\n      var current = this[field];\n\n      if (current && current.removeObserver) {\n        current.removeObserver(this);\n      }\n    }\n  }, {\n    key: \"_wrap\",\n    value: function _wrap(object, field) {\n      var type = toString.call(object);\n      var wrapped = object;\n\n      if (wrapped !== null && defined(wrapped) && type === \"[object Object]\") {\n        if (!(object instanceof OptionsStore) && !(object instanceof Class)) {\n          wrapped = new OptionsStore(wrapped, this.prefix + field + \".\");\n        }\n\n        wrapped.addObserver(this);\n      }\n\n      return wrapped;\n    }\n  }]);\n\n  return OptionsStore;\n}(HasObservers);\n\nexport default OptionsStore;","map":{"version":3,"sources":["/home/datquocngo/Project/Hung/gts-fe/node_modules/@progress/kendo-drawing/dist/es2015/core/options-store.js"],"names":["Class","HasObservers","defined","toString","OptionsStore","options","prefix","field","member","_wrap","parts","split","result","length","part","shift","value","current","get","_set","optionsChange","composite","indexOf","parentObj","fieldName","obj","addObserver","_clear","removeObserver","object","type","call","wrapped"],"mappings":";;;;AAAA,SAASA,KAAT,QAAsB,WAAtB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,SAASC,OAAT,QAAwB,SAAxB;AAGA,IAAMC,QAAQ,GAAG,GAAGA,QAApB;;IAEMC,Y;;;;;AACF,wBAAYC,OAAZ,EAAkC;AAAA;;AAAA,QAAbC,MAAa,uEAAJ,EAAI;;AAAA;;AAC9B;AAEA,UAAKA,MAAL,GAAcA,MAAd;;AAEA,SAAK,IAAIC,KAAT,IAAkBF,OAAlB,EAA2B;AACvB,UAAIG,MAAM,GAAGH,OAAO,CAACE,KAAD,CAApB;AACAC,MAAAA,MAAM,GAAG,MAAKC,KAAL,CAAWD,MAAX,EAAmBD,KAAnB,CAAT;AACA,YAAKA,KAAL,IAAcC,MAAd;AACH;;AAT6B;AAUjC;;;;wBAEGD,K,EAAO;AACP,UAAMG,KAAK,GAAGH,KAAK,CAACI,KAAN,CAAY,GAAZ,CAAd;AACA,UAAIC,MAAM,GAAG,IAAb;;AAEA,aAAOF,KAAK,CAACG,MAAN,IAAgBD,MAAvB,EAA+B;AAC3B,YAAIE,IAAI,GAAGJ,KAAK,CAACK,KAAN,EAAX;AACAH,QAAAA,MAAM,GAAGA,MAAM,CAACE,IAAD,CAAf;AACH;;AAED,aAAOF,MAAP;AACH;;;wBAEGL,K,EAAOS,K,EAAO;AACd,UAAMC,OAAO,GAAG,KAAKC,GAAL,CAASX,KAAT,CAAhB;;AAEA,UAAIU,OAAO,KAAKD,KAAhB,EAAuB;AACnB,aAAKG,IAAL,CAAUZ,KAAV,EAAiB,KAAKE,KAAL,CAAWO,KAAX,EAAkBT,KAAlB,CAAjB;;AACA,aAAKa,aAAL,CAAmB;AACfb,UAAAA,KAAK,EAAE,KAAKD,MAAL,GAAcC,KADN;AAEfS,UAAAA,KAAK,EAAEA;AAFQ,SAAnB;AAIH;AACJ;;;yBAEIT,K,EAAOS,K,EAAO;AACf,UAAMK,SAAS,GAAGd,KAAK,CAACe,OAAN,CAAc,GAAd,KAAsB,CAAxC;AACA,UAAIC,SAAS,GAAG,IAAhB;AACA,UAAIC,SAAS,GAAGjB,KAAhB;;AAEA,UAAIc,SAAJ,EAAe;AACX,YAAMX,KAAK,GAAGc,SAAS,CAACb,KAAV,CAAgB,GAAhB,CAAd;AACA,YAAIL,MAAM,GAAG,KAAKA,MAAlB;;AAEA,eAAOI,KAAK,CAACG,MAAN,GAAe,CAAtB,EAAyB;AACrBW,UAAAA,SAAS,GAAGd,KAAK,CAACK,KAAN,EAAZ;AACAT,UAAAA,MAAM,IAAIkB,SAAS,GAAG,GAAtB;AAEA,cAAIC,GAAG,GAAGF,SAAS,CAACC,SAAD,CAAnB;;AAEA,cAAI,CAACC,GAAL,EAAU;AACNA,YAAAA,GAAG,GAAG,IAAIrB,YAAJ,CAAiB,EAAjB,EAAqBE,MAArB,CAAN;AACAmB,YAAAA,GAAG,CAACC,WAAJ,CAAgB,IAAhB;AACAH,YAAAA,SAAS,CAACC,SAAD,CAAT,GAAuBC,GAAvB;AACH;;AACDF,UAAAA,SAAS,GAAGE,GAAZ;AACH;;AACDD,QAAAA,SAAS,GAAGd,KAAK,CAAC,CAAD,CAAjB;AACH;;AAEDa,MAAAA,SAAS,CAACI,MAAV,CAAiBH,SAAjB;;AACAD,MAAAA,SAAS,CAACC,SAAD,CAAT,GAAuBR,KAAvB;AACH;;;2BAEMT,K,EAAO;AACV,UAAMU,OAAO,GAAG,KAAKV,KAAL,CAAhB;;AACA,UAAIU,OAAO,IAAIA,OAAO,CAACW,cAAvB,EAAuC;AACnCX,QAAAA,OAAO,CAACW,cAAR,CAAuB,IAAvB;AACH;AACJ;;;0BAEKC,M,EAAQtB,K,EAAO;AACjB,UAAMuB,IAAI,GAAG3B,QAAQ,CAAC4B,IAAT,CAAcF,MAAd,CAAb;AACA,UAAIG,OAAO,GAAGH,MAAd;;AAEA,UAAIG,OAAO,KAAK,IAAZ,IAAoB9B,OAAO,CAAC8B,OAAD,CAA3B,IAAwCF,IAAI,KAAK,iBAArD,EAAwE;AACpE,YAAI,EAAED,MAAM,YAAYzB,YAApB,KAAqC,EAAEyB,MAAM,YAAY7B,KAApB,CAAzC,EAAqE;AACjEgC,UAAAA,OAAO,GAAG,IAAI5B,YAAJ,CAAiB4B,OAAjB,EAA0B,KAAK1B,MAAL,GAAcC,KAAd,GAAsB,GAAhD,CAAV;AACH;;AAEDyB,QAAAA,OAAO,CAACN,WAAR,CAAoB,IAApB;AACH;;AAED,aAAOM,OAAP;AACH;;;;EAtFsB/B,Y;;AAyF3B,eAAeG,YAAf","sourcesContent":["import { Class } from '../common';\nimport HasObservers from './has-observers';\nimport { defined } from '../util';\n\n\nconst toString = {}.toString;\n\nclass OptionsStore extends HasObservers {\n    constructor(options, prefix = \"\") {\n        super();\n\n        this.prefix = prefix;\n\n        for (let field in options) {\n            let member = options[field];\n            member = this._wrap(member, field);\n            this[field] = member;\n        }\n    }\n\n    get(field) {\n        const parts = field.split(\".\");\n        let result = this;\n\n        while (parts.length && result) {\n            let part = parts.shift();\n            result = result[part];\n        }\n\n        return result;\n    }\n\n    set(field, value) {\n        const current = this.get(field);\n\n        if (current !== value) {\n            this._set(field, this._wrap(value, field));\n            this.optionsChange({\n                field: this.prefix + field,\n                value: value\n            });\n        }\n    }\n\n    _set(field, value) {\n        const composite = field.indexOf(\".\") >= 0;\n        let parentObj = this;\n        let fieldName = field;\n\n        if (composite) {\n            const parts = fieldName.split(\".\");\n            let prefix = this.prefix;\n\n            while (parts.length > 1) {\n                fieldName = parts.shift();\n                prefix += fieldName + \".\";\n\n                let obj = parentObj[fieldName];\n\n                if (!obj) {\n                    obj = new OptionsStore({}, prefix);\n                    obj.addObserver(this);\n                    parentObj[fieldName] = obj;\n                }\n                parentObj = obj;\n            }\n            fieldName = parts[0];\n        }\n\n        parentObj._clear(fieldName);\n        parentObj[fieldName] = value;\n    }\n\n    _clear(field) {\n        const current = this[field];\n        if (current && current.removeObserver) {\n            current.removeObserver(this);\n        }\n    }\n\n    _wrap(object, field) {\n        const type = toString.call(object);\n        let wrapped = object;\n\n        if (wrapped !== null && defined(wrapped) && type === \"[object Object]\") {\n            if (!(object instanceof OptionsStore) && !(object instanceof Class)) {\n                wrapped = new OptionsStore(wrapped, this.prefix + field + \".\");\n            }\n\n            wrapped.addObserver(this);\n        }\n\n        return wrapped;\n    }\n}\n\nexport default OptionsStore;\n"]},"metadata":{},"sourceType":"module"}