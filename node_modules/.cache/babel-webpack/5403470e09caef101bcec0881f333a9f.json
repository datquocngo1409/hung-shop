{"ast":null,"code":"import { exec, map, aggregatesCombinator, expandAggregates } from '../transducers';\nvar identity = map(function (x) {\n  return x;\n}); // tslint:disable:max-line-length\n\n/**\n * Applies the specified [`AggregateDescriptors`]({% slug api_kendo-data-query_aggregatedescriptor %}) to the data. Returns an [`AggregateResult`]({% slug api_kendo-data-query_aggregateresult %}) instance.\n *\n * @example\n * ```ts-no-run\n * const data = [\n *    { unitPrice: 23, unitsInStock: 21 },\n *    { unitPrice: 10, unitsInStock: 12 },\n *    { unitPrice: 20, unitsInStock: 33 }\n * ];\n *\n * const result = aggregateBy(data, [\n *   { aggregate: \"sum\", field: \"unitPrice\" },\n *   { aggregate: \"sum\", field: \"unitsInStock\" }\n * ]);\n *\n * //output:\n * // {\n * //     \"unitPrice\": { \"sum\": 53 },\n * //     \"unitsInStock\": { \"sum\": 66 }\n * // }\n * ```\n * @param {T[]} data - The data on which the calculation will be executed.\n * @param {AggregateDescriptor[]} descriptors - The aggregate operations that will be executed.\n * @param {any} transformers - For internal use.\n * @returns {AggregateResult} - The aggregated result.\n * For more information, refer to the [`aggregateresult`]({% slug api_kendo-data-query_aggregateresult %}) configuration.\n */\n// tslint:enable:max-line-length\n\nexport var aggregateBy = function aggregateBy(data) {\n  var descriptors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var transformers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : identity;\n  var initialValue = {};\n\n  if (!descriptors.length) {\n    return initialValue;\n  }\n\n  var result = exec(transformers(aggregatesCombinator(descriptors)), initialValue, data);\n  return expandAggregates(result);\n};","map":{"version":3,"sources":["/home/datquocngo/Project/Hung/gts-fe/node_modules/@progress/kendo-data-query/dist/es2015/grouping/aggregate.operators.js"],"names":["exec","map","aggregatesCombinator","expandAggregates","identity","x","aggregateBy","data","descriptors","transformers","initialValue","length","result"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,oBAApB,EAA0CC,gBAA1C,QAAkE,gBAAlE;AACA,IAAMC,QAAQ,GAAGH,GAAG,CAAC,UAAAI,CAAC;AAAA,SAAIA,CAAJ;AAAA,CAAF,CAApB,C,CACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAqD;AAAA,MAA9CC,WAA8C,uEAAhC,EAAgC;AAAA,MAA5BC,YAA4B,uEAAbL,QAAa;AAC5E,MAAMM,YAAY,GAAG,EAArB;;AACA,MAAI,CAACF,WAAW,CAACG,MAAjB,EAAyB;AACrB,WAAOD,YAAP;AACH;;AACD,MAAME,MAAM,GAAGZ,IAAI,CAACS,YAAY,CAACP,oBAAoB,CAACM,WAAD,CAArB,CAAb,EAAkDE,YAAlD,EAAgEH,IAAhE,CAAnB;AACA,SAAOJ,gBAAgB,CAACS,MAAD,CAAvB;AACH,CAPM","sourcesContent":["import { exec, map, aggregatesCombinator, expandAggregates } from '../transducers';\nconst identity = map(x => x);\n// tslint:disable:max-line-length\n/**\n * Applies the specified [`AggregateDescriptors`]({% slug api_kendo-data-query_aggregatedescriptor %}) to the data. Returns an [`AggregateResult`]({% slug api_kendo-data-query_aggregateresult %}) instance.\n *\n * @example\n * ```ts-no-run\n * const data = [\n *    { unitPrice: 23, unitsInStock: 21 },\n *    { unitPrice: 10, unitsInStock: 12 },\n *    { unitPrice: 20, unitsInStock: 33 }\n * ];\n *\n * const result = aggregateBy(data, [\n *   { aggregate: \"sum\", field: \"unitPrice\" },\n *   { aggregate: \"sum\", field: \"unitsInStock\" }\n * ]);\n *\n * //output:\n * // {\n * //     \"unitPrice\": { \"sum\": 53 },\n * //     \"unitsInStock\": { \"sum\": 66 }\n * // }\n * ```\n * @param {T[]} data - The data on which the calculation will be executed.\n * @param {AggregateDescriptor[]} descriptors - The aggregate operations that will be executed.\n * @param {any} transformers - For internal use.\n * @returns {AggregateResult} - The aggregated result.\n * For more information, refer to the [`aggregateresult`]({% slug api_kendo-data-query_aggregateresult %}) configuration.\n */\n// tslint:enable:max-line-length\nexport const aggregateBy = (data, descriptors = [], transformers = identity) => {\n    const initialValue = {};\n    if (!descriptors.length) {\n        return initialValue;\n    }\n    const result = exec(transformers(aggregatesCombinator(descriptors)), initialValue, data);\n    return expandAggregates(result);\n};\n"]},"metadata":{},"sourceType":"module"}