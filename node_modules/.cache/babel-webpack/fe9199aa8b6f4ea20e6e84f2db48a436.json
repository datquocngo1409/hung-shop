{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Class } from '../common';\n\nvar QuadRoot = /*#__PURE__*/function (_Class) {\n  _inherits(QuadRoot, _Class);\n\n  var _super = _createSuper(QuadRoot);\n\n  function QuadRoot() {\n    var _this;\n\n    _classCallCheck(this, QuadRoot);\n\n    _this = _super.call(this);\n    _this.shapes = [];\n    return _this;\n  }\n\n  _createClass(QuadRoot, [{\n    key: \"_add\",\n    value: function _add(shape, bbox) {\n      this.shapes.push({\n        bbox: bbox,\n        shape: shape\n      });\n      shape._quadNode = this;\n    }\n  }, {\n    key: \"pointShapes\",\n    value: function pointShapes(point) {\n      var shapes = this.shapes;\n      var length = shapes.length;\n      var result = [];\n\n      for (var idx = 0; idx < length; idx++) {\n        if (shapes[idx].bbox.containsPoint(point)) {\n          result.push(shapes[idx].shape);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(shape, bbox) {\n      this._add(shape, bbox);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(shape) {\n      var shapes = this.shapes;\n      var length = shapes.length;\n\n      for (var idx = 0; idx < length; idx++) {\n        if (shapes[idx].shape === shape) {\n          shapes.splice(idx, 1);\n          break;\n        }\n      }\n    }\n  }]);\n\n  return QuadRoot;\n}(Class);\n\nexport default QuadRoot;","map":{"version":3,"sources":["/home/datquocngo/Project/Hung/gts-fe/node_modules/@progress/kendo-drawing/dist/es2015/search/quad-root.js"],"names":["Class","QuadRoot","shapes","shape","bbox","push","_quadNode","point","length","result","idx","containsPoint","_add","splice"],"mappings":";;;;AAAA,SAASA,KAAT,QAAsB,WAAtB;;IAEMC,Q;;;;;AACF,sBAAc;AAAA;;AAAA;;AACV;AAEA,UAAKC,MAAL,GAAc,EAAd;AAHU;AAIb;;;;yBAEIC,K,EAAOC,I,EAAM;AACd,WAAKF,MAAL,CAAYG,IAAZ,CAAiB;AACbD,QAAAA,IAAI,EAAEA,IADO;AAEbD,QAAAA,KAAK,EAAEA;AAFM,OAAjB;AAIAA,MAAAA,KAAK,CAACG,SAAN,GAAkB,IAAlB;AACH;;;gCAEWC,K,EAAO;AACf,UAAML,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMM,MAAM,GAAGN,MAAM,CAACM,MAAtB;AACA,UAAMC,MAAM,GAAG,EAAf;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,MAAxB,EAAgCE,GAAG,EAAnC,EAAuC;AACnC,YAAIR,MAAM,CAACQ,GAAD,CAAN,CAAYN,IAAZ,CAAiBO,aAAjB,CAA+BJ,KAA/B,CAAJ,EAA2C;AACvCE,UAAAA,MAAM,CAACJ,IAAP,CAAYH,MAAM,CAACQ,GAAD,CAAN,CAAYP,KAAxB;AACH;AACJ;;AACD,aAAOM,MAAP;AACH;;;2BAEMN,K,EAAOC,I,EAAM;AAChB,WAAKQ,IAAL,CAAUT,KAAV,EAAiBC,IAAjB;AACH;;;2BAEMD,K,EAAO;AACV,UAAMD,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMM,MAAM,GAAGN,MAAM,CAACM,MAAtB;;AAEA,WAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,MAAxB,EAAgCE,GAAG,EAAnC,EAAuC;AACnC,YAAIR,MAAM,CAACQ,GAAD,CAAN,CAAYP,KAAZ,KAAsBA,KAA1B,EAAiC;AAC7BD,UAAAA,MAAM,CAACW,MAAP,CAAcH,GAAd,EAAmB,CAAnB;AACA;AACH;AACJ;AACJ;;;;EAzCkBV,K;;AA4CvB,eAAeC,QAAf","sourcesContent":["import { Class } from '../common';\n\nclass QuadRoot extends Class {\n    constructor() {\n        super();\n\n        this.shapes = [];\n    }\n\n    _add(shape, bbox) {\n        this.shapes.push({\n            bbox: bbox,\n            shape: shape\n        });\n        shape._quadNode = this;\n    }\n\n    pointShapes(point) {\n        const shapes = this.shapes;\n        const length = shapes.length;\n        const result = [];\n        for (let idx = 0; idx < length; idx++) {\n            if (shapes[idx].bbox.containsPoint(point)) {\n                result.push(shapes[idx].shape);\n            }\n        }\n        return result;\n    }\n\n    insert(shape, bbox) {\n        this._add(shape, bbox);\n    }\n\n    remove(shape) {\n        const shapes = this.shapes;\n        const length = shapes.length;\n\n        for (let idx = 0; idx < length; idx++) {\n            if (shapes[idx].shape === shape) {\n                shapes.splice(idx, 1);\n                break;\n            }\n        }\n    }\n}\n\nexport default QuadRoot;"]},"metadata":{},"sourceType":"module"}