{"ast":null,"code":"import alignPoint from './align-point';\nimport collision from './collision';\n\nvar fit = function fit(position, size, viewPortSize) {\n  var output = 0;\n\n  if (position + size > viewPortSize) {\n    output = viewPortSize - (position + size);\n  }\n\n  if (position < 0) {\n    output = -position;\n  }\n\n  return output;\n};\n\nvar flip = function flip(_ref) {\n  var offset = _ref.offset,\n      size = _ref.size,\n      anchorSize = _ref.anchorSize,\n      viewPortSize = _ref.viewPortSize,\n      anchorAlignPoint = _ref.anchorAlignPoint,\n      elementAlignPoint = _ref.elementAlignPoint,\n      margin = _ref.margin;\n  var output = 0;\n  var isPositionCentered = elementAlignPoint === alignPoint.center || elementAlignPoint === alignPoint.middle;\n  var isOriginCentered = anchorAlignPoint === alignPoint.center || anchorAlignPoint === alignPoint.middle;\n  var marginToAdd = 2 * margin; //2x to keep margin after flip\n\n  if (elementAlignPoint !== anchorAlignPoint && !isPositionCentered && !isOriginCentered) {\n    var isBeforeAnchor = anchorAlignPoint === alignPoint.top || anchorAlignPoint === alignPoint.left;\n\n    if (offset < 0 && isBeforeAnchor) {\n      output = size + anchorSize + marginToAdd;\n\n      if (offset + output + size > viewPortSize) {\n        output = 0; //skip flip\n      }\n    } else if (offset >= 0 && !isBeforeAnchor) {\n      if (offset + size > viewPortSize) {\n        output += -(anchorSize + size + marginToAdd);\n      }\n\n      if (offset + output < 0) {\n        output = 0; //skip flip\n      }\n    }\n  }\n\n  return output;\n};\n\nvar restrictToView = function restrictToView(options) {\n  var anchorRect = options.anchorRect,\n      anchorAlign = options.anchorAlign,\n      elementRect = options.elementRect,\n      elementAlign = options.elementAlign,\n      collisions = options.collisions,\n      viewPort = options.viewPort,\n      _options$margin = options.margin,\n      margin = _options$margin === void 0 ? {} : _options$margin;\n  var elementTop = elementRect.top,\n      elementLeft = elementRect.left,\n      elementHeight = elementRect.height,\n      elementWidth = elementRect.width;\n  var viewPortHeight = viewPort.height,\n      viewPortWidth = viewPort.width;\n  var horizontalMargin = margin.horizontal || 0;\n  var verticalMargin = margin.vertical || 0;\n  var left = 0;\n  var top = 0;\n  var isHorizontalFlip = collisions.horizontal === collision.flip;\n  var isVerticalFlip = collisions.vertical === collision.flip;\n\n  if (collisions.vertical === collision.fit) {\n    top += fit(elementTop, elementHeight, viewPortHeight);\n  }\n\n  if (collisions.horizontal === collision.fit) {\n    left += fit(elementLeft, elementWidth, viewPortWidth);\n  }\n\n  if (isVerticalFlip) {\n    top += flip({\n      margin: verticalMargin,\n      offset: elementTop,\n      size: elementHeight,\n      anchorSize: anchorRect.height,\n      viewPortSize: viewPortHeight,\n      anchorAlignPoint: anchorAlign.vertical,\n      elementAlignPoint: elementAlign.vertical\n    });\n  }\n\n  if (isHorizontalFlip) {\n    left += flip({\n      margin: horizontalMargin,\n      offset: elementLeft,\n      size: elementWidth,\n      anchorSize: anchorRect.width,\n      viewPortSize: viewPortWidth,\n      anchorAlignPoint: anchorAlign.horizontal,\n      elementAlignPoint: elementAlign.horizontal\n    });\n  }\n\n  var flippedHorizontal = isHorizontalFlip && left !== 0;\n  var flippedVertical = isVerticalFlip && top !== 0;\n  return {\n    flipped: flippedHorizontal || flippedVertical,\n    flip: {\n      horizontal: flippedHorizontal,\n      vertical: flippedVertical\n    },\n    offset: {\n      left: left,\n      top: top\n    }\n  };\n};\n\nexport default restrictToView;","map":{"version":3,"sources":["/home/datquocngo/Project/UET/gts-fe/node_modules/@progress/kendo-popup-common/dist/es2015/restrict-to-view.js"],"names":["alignPoint","collision","fit","position","size","viewPortSize","output","flip","offset","anchorSize","anchorAlignPoint","elementAlignPoint","margin","isPositionCentered","center","middle","isOriginCentered","marginToAdd","isBeforeAnchor","top","left","restrictToView","options","anchorRect","anchorAlign","elementRect","elementAlign","collisions","viewPort","elementTop","elementLeft","elementHeight","height","elementWidth","width","viewPortHeight","viewPortWidth","horizontalMargin","horizontal","verticalMargin","vertical","isHorizontalFlip","isVerticalFlip","flippedHorizontal","flippedVertical","flipped"],"mappings":"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","sourcesContent":["import alignPoint from './align-point';\nimport collision from './collision';\n\nconst fit = function(position, size, viewPortSize) {\n    let output = 0;\n\n    if (position + size > viewPortSize) {\n        output = viewPortSize - (position + size);\n    }\n\n    if (position < 0) {\n        output = -position;\n    }\n\n    return output;\n};\n\nconst flip = function({ offset, size, anchorSize, viewPortSize, anchorAlignPoint, elementAlignPoint, margin }) {\n    let output = 0;\n\n    const isPositionCentered = elementAlignPoint === alignPoint.center || elementAlignPoint === alignPoint.middle;\n    const isOriginCentered = anchorAlignPoint === alignPoint.center || anchorAlignPoint === alignPoint.middle;\n    const marginToAdd = 2 * margin; //2x to keep margin after flip\n\n    if (elementAlignPoint !== anchorAlignPoint && !isPositionCentered && !isOriginCentered) {\n        const isBeforeAnchor = anchorAlignPoint === alignPoint.top || anchorAlignPoint === alignPoint.left;\n        if (offset < 0 && isBeforeAnchor) {\n            output = size + anchorSize + marginToAdd;\n            if (offset + output + size > viewPortSize) {\n                output = 0; //skip flip\n            }\n        } else if (offset >= 0 && !isBeforeAnchor) {\n            if (offset + size > viewPortSize) {\n                output += -(anchorSize + size + marginToAdd);\n            }\n\n            if (offset + output < 0) {\n                output = 0; //skip flip\n            }\n        }\n    }\n\n    return output;\n};\n\nconst restrictToView = (options) => {\n    const { anchorRect, anchorAlign, elementRect, elementAlign, collisions, viewPort, margin = {} } = options;\n    const { top: elementTop, left: elementLeft, height: elementHeight, width: elementWidth } = elementRect;\n    const { height: viewPortHeight, width: viewPortWidth } = viewPort;\n    const horizontalMargin = margin.horizontal || 0;\n    const verticalMargin = margin.vertical || 0;\n\n    let left = 0;\n    let top = 0;\n\n    const isHorizontalFlip = collisions.horizontal === collision.flip;\n    const isVerticalFlip = collisions.vertical === collision.flip;\n\n    if (collisions.vertical === collision.fit) {\n        top += fit(elementTop, elementHeight, viewPortHeight);\n    }\n\n    if (collisions.horizontal === collision.fit) {\n        left += fit(elementLeft, elementWidth, viewPortWidth);\n    }\n\n    if (isVerticalFlip) {\n        top += flip({\n            margin: verticalMargin,\n            offset: elementTop,\n            size: elementHeight,\n            anchorSize: anchorRect.height,\n            viewPortSize: viewPortHeight,\n            anchorAlignPoint: anchorAlign.vertical,\n            elementAlignPoint: elementAlign.vertical\n        });\n    }\n\n    if (isHorizontalFlip) {\n        left += flip({\n            margin: horizontalMargin,\n            offset: elementLeft,\n            size: elementWidth,\n            anchorSize: anchorRect.width,\n            viewPortSize: viewPortWidth,\n            anchorAlignPoint: anchorAlign.horizontal,\n            elementAlignPoint: elementAlign.horizontal\n        });\n    }\n    const flippedHorizontal = isHorizontalFlip && left !== 0;\n    const flippedVertical = isVerticalFlip && top !== 0;\n\n    return {\n        flipped: flippedHorizontal || flippedVertical,\n        flip: {\n            horizontal: flippedHorizontal,\n            vertical: flippedVertical\n        },\n        offset: {\n            left: left,\n            top: top\n        }\n    };\n};\n\nexport default restrictToView;\n"]},"metadata":{},"sourceType":"module"}