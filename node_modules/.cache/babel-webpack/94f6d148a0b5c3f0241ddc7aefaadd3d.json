{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport BaseSurface from '../core/surface';\nimport { createPromise, promiseAll, bindEvents, elementSize, unbindEvents } from '../util';\nimport RootNode from './root-node';\nimport ShapesQuadTree from '../search/shapes-quad-tree';\nimport SurfaceCursor from './surface-cursor';\n\nvar Surface = /*#__PURE__*/function (_BaseSurface) {\n  _inherits(Surface, _BaseSurface);\n\n  var _super = _createSuper(Surface);\n\n  _createClass(Surface, [{\n    key: \"type\",\n    get: function get() {\n      return \"canvas\";\n    }\n  }]);\n\n  function Surface(element, options) {\n    var _this;\n\n    _classCallCheck(this, Surface);\n\n    _this = _super.call(this, element, options);\n    _this.element.innerHTML = _this._template(_assertThisInitialized(_this));\n    var canvas = _this.element.firstElementChild;\n    var size = elementSize(element);\n    canvas.width = size.width;\n    canvas.height = size.height;\n    _this._rootElement = canvas;\n    _this._root = new RootNode(canvas, size);\n    _this._mouseTrackHandler = _this._trackMouse.bind(_assertThisInitialized(_this));\n    bindEvents(_this.element, {\n      click: _this._mouseTrackHandler,\n      mousemove: _this._mouseTrackHandler\n    });\n    return _this;\n  }\n\n  _createClass(Surface, [{\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(Surface.prototype), \"destroy\", this).call(this);\n\n      if (this._root) {\n        this._root.destroy();\n\n        this._root = null;\n      }\n\n      if (this._searchTree) {\n        this._searchTree.clear();\n\n        delete this._searchTree;\n      }\n\n      if (this._cursor) {\n        this._cursor.destroy();\n\n        delete this._cursor;\n      }\n\n      unbindEvents(this.element, {\n        click: this._mouseTrackHandler,\n        mousemove: this._mouseTrackHandler\n      });\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(element) {\n      _get(_getPrototypeOf(Surface.prototype), \"draw\", this).call(this, element);\n\n      this._root.load([element], undefined, this.options.cors);\n\n      if (this._searchTree) {\n        this._searchTree.add([element]);\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _get(_getPrototypeOf(Surface.prototype), \"clear\", this).call(this);\n\n      this._root.clear();\n\n      if (this._searchTree) {\n        this._searchTree.clear();\n      }\n\n      if (this._cursor) {\n        this._cursor.clear();\n      }\n    }\n  }, {\n    key: \"eventTarget\",\n    value: function eventTarget(e) {\n      if (this._searchTree) {\n        var point = this._surfacePoint(e);\n\n        var shape = this._searchTree.pointShape(point);\n\n        return shape;\n      }\n    }\n  }, {\n    key: \"image\",\n    value: function image() {\n      var root = this._root,\n          rootElement = this._rootElement;\n      var loadingStates = [];\n      root.traverse(function (childNode) {\n        if (childNode.loading) {\n          loadingStates.push(childNode.loading);\n        }\n      });\n      var promise = createPromise();\n\n      var resolveDataURL = function resolveDataURL() {\n        root._invalidate({\n          fixedScale: true\n        });\n\n        try {\n          var data = rootElement.toDataURL();\n          promise.resolve(data);\n        } catch (e) {\n          promise.reject(e);\n        }\n      };\n\n      promiseAll(loadingStates).then(resolveDataURL, resolveDataURL);\n      return promise;\n    }\n  }, {\n    key: \"suspendTracking\",\n    value: function suspendTracking() {\n      _get(_getPrototypeOf(Surface.prototype), \"suspendTracking\", this).call(this);\n\n      if (this._searchTree) {\n        this._searchTree.clear();\n\n        delete this._searchTree;\n      }\n    }\n  }, {\n    key: \"resumeTracking\",\n    value: function resumeTracking() {\n      _get(_getPrototypeOf(Surface.prototype), \"resumeTracking\", this).call(this);\n\n      if (!this._searchTree) {\n        this._searchTree = new ShapesQuadTree();\n        var childNodes = this._root.childNodes;\n        var rootElements = [];\n\n        for (var idx = 0; idx < childNodes.length; idx++) {\n          rootElements.push(childNodes[idx].srcElement);\n        }\n\n        this._searchTree.add(rootElements);\n      }\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize() {\n      this._rootElement.width = this._size.width;\n      this._rootElement.height = this._size.height;\n      this._root.size = this._size;\n\n      this._root.invalidate();\n    }\n  }, {\n    key: \"_template\",\n    value: function _template() {\n      return \"<canvas style='width: 100%; height: 100%;'></canvas>\";\n    }\n  }, {\n    key: \"_enableTracking\",\n    value: function _enableTracking() {\n      this._searchTree = new ShapesQuadTree();\n      this._cursor = new SurfaceCursor(this);\n\n      _get(_getPrototypeOf(Surface.prototype), \"_enableTracking\", this).call(this);\n    }\n  }, {\n    key: \"_trackMouse\",\n    value: function _trackMouse(e) {\n      if (this._suspendedTracking) {\n        return;\n      }\n\n      var shape = this.eventTarget(e);\n\n      if (e.type !== \"click\") {\n        var currentShape = this._currentShape;\n\n        if (currentShape && currentShape !== shape) {\n          this.trigger(\"mouseleave\", {\n            element: currentShape,\n            originalEvent: e,\n            type: \"mouseleave\"\n          });\n        }\n\n        if (shape && currentShape !== shape) {\n          this.trigger(\"mouseenter\", {\n            element: shape,\n            originalEvent: e,\n            type: \"mouseenter\"\n          });\n        }\n\n        this.trigger(\"mousemove\", {\n          element: shape,\n          originalEvent: e,\n          type: \"mousemove\"\n        });\n        this._currentShape = shape;\n      } else if (shape) {\n        this.trigger(\"click\", {\n          element: shape,\n          originalEvent: e,\n          type: \"click\"\n        });\n      }\n    }\n  }]);\n\n  return Surface;\n}(BaseSurface);\n\nexport default Surface;","map":{"version":3,"sources":["/home/datquocngo/Project/UET/gts-fe/node_modules/@progress/kendo-drawing/dist/es2015/canvas/surface.js"],"names":["BaseSurface","createPromise","promiseAll","bindEvents","elementSize","unbindEvents","RootNode","ShapesQuadTree","SurfaceCursor","Surface","element","options","innerHTML","_template","canvas","firstElementChild","size","width","height","_rootElement","_root","_mouseTrackHandler","_trackMouse","bind","click","mousemove","destroy","_searchTree","clear","_cursor","load","undefined","cors","add","e","point","_surfacePoint","shape","pointShape","root","rootElement","loadingStates","traverse","childNode","loading","push","promise","resolveDataURL","_invalidate","fixedScale","data","toDataURL","resolve","reject","then","childNodes","rootElements","idx","length","srcElement","_size","invalidate","_suspendedTracking","eventTarget","type","currentShape","_currentShape","trigger","originalEvent"],"mappings":"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","sourcesContent":["import BaseSurface from '../core/surface';\nimport { createPromise, promiseAll, bindEvents, elementSize, unbindEvents } from '../util';\nimport RootNode from './root-node';\nimport ShapesQuadTree from '../search/shapes-quad-tree';\nimport SurfaceCursor from './surface-cursor';\n\n\nclass Surface extends BaseSurface {\n    get type() {\n        return \"canvas\";\n    }\n\n    constructor(element, options) {\n        super(element, options);\n\n        this.element.innerHTML = this._template(this);\n\n        const canvas = this.element.firstElementChild;\n        const size = elementSize(element);\n\n        canvas.width = size.width;\n        canvas.height = size.height;\n\n        this._rootElement = canvas;\n\n        this._root = new RootNode(canvas, size);\n\n        this._mouseTrackHandler = this._trackMouse.bind(this);\n\n        bindEvents(this.element, {\n            click: this._mouseTrackHandler,\n            mousemove: this._mouseTrackHandler\n        });\n    }\n\n    destroy() {\n        super.destroy();\n\n        if (this._root) {\n            this._root.destroy();\n            this._root = null;\n        }\n\n        if (this._searchTree) {\n            this._searchTree.clear();\n            delete this._searchTree;\n        }\n\n        if (this._cursor) {\n            this._cursor.destroy();\n            delete this._cursor;\n        }\n\n        unbindEvents(this.element, {\n            click: this._mouseTrackHandler,\n            mousemove: this._mouseTrackHandler\n        });\n    }\n\n    draw(element) {\n        super.draw(element);\n        this._root.load([ element ], undefined, this.options.cors);\n\n        if (this._searchTree) {\n            this._searchTree.add([ element ]);\n        }\n    }\n\n    clear() {\n        super.clear();\n        this._root.clear();\n\n        if (this._searchTree) {\n            this._searchTree.clear();\n        }\n\n        if (this._cursor) {\n            this._cursor.clear();\n        }\n    }\n\n    eventTarget(e) {\n        if (this._searchTree) {\n            const point = this._surfacePoint(e);\n            const shape = this._searchTree.pointShape(point);\n            return shape;\n        }\n    }\n\n    image() {\n        const { _root: root, _rootElement: rootElement } = this;\n        const loadingStates = [];\n\n        root.traverse((childNode) => {\n            if (childNode.loading) {\n                loadingStates.push(childNode.loading);\n            }\n        });\n\n        const promise = createPromise();\n        const resolveDataURL = () => {\n            root._invalidate({ fixedScale: true });\n\n            try {\n                const data = rootElement.toDataURL();\n                promise.resolve(data);\n            } catch (e) {\n                promise.reject(e);\n            }\n        };\n\n        promiseAll(loadingStates).then(resolveDataURL, resolveDataURL);\n\n        return promise;\n    }\n\n    suspendTracking() {\n        super.suspendTracking();\n        if (this._searchTree) {\n            this._searchTree.clear();\n            delete this._searchTree;\n        }\n    }\n\n    resumeTracking() {\n        super.resumeTracking();\n        if (!this._searchTree) {\n            this._searchTree = new ShapesQuadTree();\n\n            const childNodes = this._root.childNodes;\n            const rootElements = [];\n            for (let idx = 0; idx < childNodes.length; idx++) {\n                rootElements.push(childNodes[idx].srcElement);\n            }\n            this._searchTree.add(rootElements);\n        }\n    }\n\n    _resize() {\n        this._rootElement.width = this._size.width;\n        this._rootElement.height = this._size.height;\n\n        this._root.size = this._size;\n        this._root.invalidate();\n    }\n\n    _template() {\n        return \"<canvas style='width: 100%; height: 100%;'></canvas>\";\n    }\n\n    _enableTracking() {\n        this._searchTree = new ShapesQuadTree();\n        this._cursor = new SurfaceCursor(this);\n\n        super._enableTracking();\n    }\n\n    _trackMouse(e) {\n        if (this._suspendedTracking) {\n            return;\n        }\n\n        const shape = this.eventTarget(e);\n\n        if (e.type !== \"click\") {\n            const currentShape = this._currentShape;\n            if (currentShape && currentShape !== shape) {\n                this.trigger(\"mouseleave\", {\n                    element: currentShape,\n                    originalEvent: e,\n                    type: \"mouseleave\"\n                });\n            }\n\n            if (shape && currentShape !== shape) {\n                this.trigger(\"mouseenter\", {\n                    element: shape,\n                    originalEvent: e,\n                    type: \"mouseenter\"\n                });\n            }\n\n            this.trigger(\"mousemove\", {\n                element: shape,\n                originalEvent: e,\n                type: \"mousemove\"\n            });\n\n            this._currentShape = shape;\n        } else if (shape) {\n            this.trigger(\"click\", {\n                element: shape,\n                originalEvent: e,\n                type: \"click\"\n            });\n        }\n    }\n}\n\nexport default Surface;\n"]},"metadata":{},"sourceType":"module"}