{"ast":null,"code":"import Point from '../point';\nexport default function lineIntersection(p0, p1, p2, p3) {\n  var s1x = p1.x - p0.x;\n  var s2x = p3.x - p2.x;\n  var s1y = p1.y - p0.y;\n  var s2y = p3.y - p2.y;\n  var nx = p0.x - p2.x;\n  var ny = p0.y - p2.y;\n  var d = s1x * s2y - s2x * s1y;\n  var s = (s1x * ny - s1y * nx) / d;\n  var t = (s2x * ny - s2y * nx) / d;\n\n  if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {\n    return new Point(p0.x + t * s1x, p0.y + t * s1y);\n  }\n}","map":{"version":3,"sources":["/home/datquocngo/Project/UET/gts-fe/node_modules/@progress/kendo-drawing/dist/es2015/geometry/math/line-intersection.js"],"names":["Point","lineIntersection","p0","p1","p2","p3","s1x","x","s2x","s1y","y","s2y","nx","ny","d","s","t"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AAEA,eAAe,SAASC,gBAAT,CAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsCC,EAAtC,EAA0C;AACrD,MAAMC,GAAG,GAAGH,EAAE,CAACI,CAAH,GAAOL,EAAE,CAACK,CAAtB;AACA,MAAMC,GAAG,GAAGH,EAAE,CAACE,CAAH,GAAOH,EAAE,CAACG,CAAtB;AACA,MAAME,GAAG,GAAGN,EAAE,CAACO,CAAH,GAAOR,EAAE,CAACQ,CAAtB;AACA,MAAMC,GAAG,GAAGN,EAAE,CAACK,CAAH,GAAON,EAAE,CAACM,CAAtB;AACA,MAAME,EAAE,GAAGV,EAAE,CAACK,CAAH,GAAOH,EAAE,CAACG,CAArB;AACA,MAAMM,EAAE,GAAGX,EAAE,CAACQ,CAAH,GAAON,EAAE,CAACM,CAArB;AACA,MAAMI,CAAC,GAAGR,GAAG,GAAGK,GAAN,GAAYH,GAAG,GAAGC,GAA5B;AACA,MAAMM,CAAC,GAAG,CAACT,GAAG,GAAGO,EAAN,GAAWJ,GAAG,GAAGG,EAAlB,IAAwBE,CAAlC;AACA,MAAME,CAAC,GAAG,CAACR,GAAG,GAAGK,EAAN,GAAWF,GAAG,GAAGC,EAAlB,IAAwBE,CAAlC;;AAEA,MAAIC,CAAC,IAAI,CAAL,IAAUA,CAAC,IAAI,CAAf,IAAoBC,CAAC,IAAI,CAAzB,IAA8BA,CAAC,IAAI,CAAvC,EAA0C;AACtC,WAAO,IAAIhB,KAAJ,CAAUE,EAAE,CAACK,CAAH,GAAOS,CAAC,GAAGV,GAArB,EAA0BJ,EAAE,CAACQ,CAAH,GAAOM,CAAC,GAAGP,GAArC,CAAP;AACH;AACJ","sourcesContent":["import Point from '../point';\n\nexport default function lineIntersection(p0, p1, p2, p3) {\n    const s1x = p1.x - p0.x;\n    const s2x = p3.x - p2.x;\n    const s1y = p1.y - p0.y;\n    const s2y = p3.y - p2.y;\n    const nx = p0.x - p2.x;\n    const ny = p0.y - p2.y;\n    const d = s1x * s2y - s2x * s1y;\n    const s = (s1x * ny - s1y * nx) / d;\n    const t = (s2x * ny - s2y * nx) / d;\n\n    if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {\n        return new Point(p0.x + t * s1x, p0.y + t * s1y);\n    }\n}"]},"metadata":{},"sourceType":"module"}