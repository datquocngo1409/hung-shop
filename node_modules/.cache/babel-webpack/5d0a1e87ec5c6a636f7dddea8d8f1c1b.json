{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport Group from './group';\nimport Size from '../geometry/size';\nimport Rect from '../geometry/rect';\nimport Point from '../geometry/point';\nimport createTransform from '../geometry/transform';\nimport translateToPoint from '../alignment/translate-to-point';\nimport alignStart from '../alignment/align-start';\nimport alignStartReverse from '../alignment/align-start-reverse';\nvar DEFAULT_OPTIONS = {\n  alignContent: \"start\",\n  justifyContent: \"start\",\n  alignItems: \"start\",\n  spacing: 0,\n  orientation: \"horizontal\",\n  lineSpacing: 0,\n  wrap: true,\n  revers: false\n};\n\nvar forEach = function forEach(elements, callback) {\n  elements.forEach(callback);\n};\n\nvar forEachReverse = function forEachReverse(elements, callback) {\n  var length = elements.length;\n\n  for (var idx = length - 1; idx >= 0; idx--) {\n    callback(elements[idx], idx);\n  }\n};\n\nvar Layout = /*#__PURE__*/function (_Group) {\n  _inherits(Layout, _Group);\n\n  var _super = _createSuper(Layout);\n\n  function Layout(rect, options) {\n    var _this;\n\n    _classCallCheck(this, Layout);\n\n    _this = _super.call(this, Object.assign({}, DEFAULT_OPTIONS, options));\n    _this._rect = rect;\n    _this._fieldMap = {};\n    return _this;\n  }\n\n  _createClass(Layout, [{\n    key: \"rect\",\n    value: function rect(value) {\n      if (value) {\n        this._rect = value;\n        return this;\n      }\n\n      return this._rect;\n    }\n  }, {\n    key: \"_initMap\",\n    value: function _initMap() {\n      var options = this.options;\n      var fieldMap = this._fieldMap;\n\n      if (options.orientation === \"horizontal\") {\n        fieldMap.sizeField = \"width\";\n        fieldMap.groupsSizeField = \"height\";\n        fieldMap.groupAxis = \"x\";\n        fieldMap.groupsAxis = \"y\";\n      } else {\n        fieldMap.sizeField = \"height\";\n        fieldMap.groupsSizeField = \"width\";\n        fieldMap.groupAxis = \"y\";\n        fieldMap.groupsAxis = \"x\";\n      }\n\n      if (options.reverse) {\n        this.forEach = forEachReverse;\n        this.justifyAlign = alignStartReverse;\n      } else {\n        this.forEach = forEach;\n        this.justifyAlign = alignStart;\n      }\n    }\n  }, {\n    key: \"reflow\",\n    value: function reflow() {\n      if (!this._rect || this.children.length === 0) {\n        return;\n      }\n\n      this._initMap();\n\n      if (this.options.transform) {\n        this.transform(null);\n      }\n\n      var options = this.options;\n      var rect = this._rect;\n\n      var _this$_initGroups = this._initGroups(),\n          groups = _this$_initGroups.groups,\n          groupsSize = _this$_initGroups.groupsSize;\n\n      var _this$_fieldMap = this._fieldMap,\n          sizeField = _this$_fieldMap.sizeField,\n          groupsSizeField = _this$_fieldMap.groupsSizeField,\n          groupAxis = _this$_fieldMap.groupAxis,\n          groupsAxis = _this$_fieldMap.groupsAxis;\n      var groupOrigin = new Point();\n      var elementOrigin = new Point();\n      var size = new Size();\n      var groupStart = alignStart(groupsSize, rect, options.alignContent, groupsAxis, groupsSizeField);\n      var elementStart, group, groupBox;\n\n      var arrangeElements = function arrangeElements(bbox, idx) {\n        var element = group.elements[idx];\n        elementOrigin[groupAxis] = elementStart;\n        elementOrigin[groupsAxis] = alignStart(bbox.size[groupsSizeField], groupBox, options.alignItems, groupsAxis, groupsSizeField);\n        translateToPoint(elementOrigin, bbox, element);\n        elementStart += bbox.size[sizeField] + options.spacing;\n      };\n\n      for (var groupIdx = 0; groupIdx < groups.length; groupIdx++) {\n        group = groups[groupIdx];\n        groupOrigin[groupAxis] = elementStart = this.justifyAlign(group.size, rect, options.justifyContent, groupAxis, sizeField);\n        groupOrigin[groupsAxis] = groupStart;\n        size[sizeField] = group.size;\n        size[groupsSizeField] = group.lineSize;\n        groupBox = new Rect(groupOrigin, size);\n        this.forEach(group.bboxes, arrangeElements);\n        groupStart += group.lineSize + options.lineSpacing;\n      }\n\n      if (!options.wrap && group.size > rect.size[sizeField]) {\n        var scale = rect.size[sizeField] / groupBox.size[sizeField];\n        var scaledStart = groupBox.topLeft().scale(scale, scale);\n        var scaledSize = groupBox.size[groupsSizeField] * scale;\n        var newStart = alignStart(scaledSize, rect, options.alignContent, groupsAxis, groupsSizeField);\n        var transform = createTransform();\n\n        if (groupAxis === \"x\") {\n          transform.translate(rect.origin.x - scaledStart.x, newStart - scaledStart.y);\n        } else {\n          transform.translate(newStart - scaledStart.x, rect.origin.y - scaledStart.y);\n        }\n\n        transform.scale(scale, scale);\n        this.transform(transform);\n      }\n    }\n  }, {\n    key: \"_initGroups\",\n    value: function _initGroups() {\n      var options = this.options,\n          children = this.children;\n      var lineSpacing = options.lineSpacing,\n          wrap = options.wrap,\n          spacing = options.spacing;\n      var sizeField = this._fieldMap.sizeField;\n\n      var group = this._newGroup();\n\n      var groups = [];\n\n      var addGroup = function addGroup() {\n        groups.push(group);\n        groupsSize += group.lineSize + lineSpacing;\n      };\n\n      var groupsSize = -lineSpacing;\n\n      for (var idx = 0; idx < children.length; idx++) {\n        var element = children[idx];\n        var bbox = children[idx].clippedBBox();\n\n        if (element.visible() && bbox) {\n          if (wrap && group.size + bbox.size[sizeField] + spacing > this._rect.size[sizeField]) {\n            if (group.bboxes.length === 0) {\n              this._addToGroup(group, bbox, element);\n\n              addGroup();\n              group = this._newGroup();\n            } else {\n              addGroup();\n              group = this._newGroup();\n\n              this._addToGroup(group, bbox, element);\n            }\n          } else {\n            this._addToGroup(group, bbox, element);\n          }\n        }\n      }\n\n      if (group.bboxes.length) {\n        addGroup();\n      }\n\n      return {\n        groups: groups,\n        groupsSize: groupsSize\n      };\n    }\n  }, {\n    key: \"_addToGroup\",\n    value: function _addToGroup(group, bbox, element) {\n      group.size += bbox.size[this._fieldMap.sizeField] + this.options.spacing;\n      group.lineSize = Math.max(bbox.size[this._fieldMap.groupsSizeField], group.lineSize);\n      group.bboxes.push(bbox);\n      group.elements.push(element);\n    }\n  }, {\n    key: \"_newGroup\",\n    value: function _newGroup() {\n      return {\n        lineSize: 0,\n        size: -this.options.spacing,\n        bboxes: [],\n        elements: []\n      };\n    }\n  }]);\n\n  return Layout;\n}(Group);\n\nexport default Layout;","map":{"version":3,"sources":["/home/datquocngo/Project/UET/gts-fe/node_modules/@progress/kendo-drawing/dist/es2015/shapes/layout.js"],"names":["Group","Size","Rect","Point","createTransform","translateToPoint","alignStart","alignStartReverse","DEFAULT_OPTIONS","alignContent","justifyContent","alignItems","spacing","orientation","lineSpacing","wrap","revers","forEach","elements","callback","forEachReverse","length","idx","Layout","rect","options","Object","assign","_rect","_fieldMap","value","fieldMap","sizeField","groupsSizeField","groupAxis","groupsAxis","reverse","justifyAlign","children","_initMap","transform","_initGroups","groups","groupsSize","groupOrigin","elementOrigin","size","groupStart","elementStart","group","groupBox","arrangeElements","bbox","element","groupIdx","lineSize","bboxes","scale","scaledStart","topLeft","scaledSize","newStart","translate","origin","x","y","_newGroup","addGroup","push","clippedBBox","visible","_addToGroup","Math","max"],"mappings":"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","sourcesContent":["import Group from './group';\nimport Size from '../geometry/size';\nimport Rect from '../geometry/rect';\nimport Point from '../geometry/point';\nimport createTransform from '../geometry/transform';\nimport translateToPoint from '../alignment/translate-to-point';\nimport alignStart from '../alignment/align-start';\nimport alignStartReverse from '../alignment/align-start-reverse';\n\nconst DEFAULT_OPTIONS = {\n    alignContent: \"start\",\n    justifyContent: \"start\",\n    alignItems: \"start\",\n    spacing: 0,\n    orientation: \"horizontal\",\n    lineSpacing: 0,\n    wrap: true,\n    revers: false\n};\n\nconst forEach = (elements, callback) => {\n    elements.forEach(callback);\n};\n\nconst forEachReverse = (elements, callback) => {\n    const length = elements.length;\n\n    for (let idx = length - 1; idx >= 0; idx--) {\n        callback(elements[idx], idx);\n    }\n};\n\nclass Layout extends Group {\n\n    constructor(rect, options) {\n        super(Object.assign({}, DEFAULT_OPTIONS, options));\n        this._rect = rect;\n        this._fieldMap = {};\n    }\n\n    rect(value) {\n        if (value) {\n            this._rect = value;\n            return this;\n        }\n\n        return this._rect;\n    }\n\n    _initMap() {\n        const options = this.options;\n        const fieldMap = this._fieldMap;\n        if (options.orientation === \"horizontal\") {\n            fieldMap.sizeField = \"width\";\n            fieldMap.groupsSizeField = \"height\";\n            fieldMap.groupAxis = \"x\";\n            fieldMap.groupsAxis = \"y\";\n        } else {\n            fieldMap.sizeField = \"height\";\n            fieldMap.groupsSizeField = \"width\";\n            fieldMap.groupAxis = \"y\";\n            fieldMap.groupsAxis = \"x\";\n        }\n\n        if (options.reverse) {\n            this.forEach = forEachReverse;\n            this.justifyAlign = alignStartReverse;\n        } else {\n            this.forEach = forEach;\n            this.justifyAlign = alignStart;\n        }\n    }\n\n    reflow() {\n        if (!this._rect || this.children.length === 0) {\n            return;\n        }\n        this._initMap();\n\n        if (this.options.transform) {\n            this.transform(null);\n        }\n\n        const options = this.options;\n        const rect = this._rect;\n        const { groups, groupsSize } = this._initGroups();\n        const { sizeField, groupsSizeField, groupAxis, groupsAxis } = this._fieldMap;\n        const groupOrigin = new Point();\n        const elementOrigin = new Point();\n        const size = new Size();\n        let groupStart = alignStart(groupsSize, rect, options.alignContent, groupsAxis, groupsSizeField);\n        let elementStart, group, groupBox;\n\n        const arrangeElements = (bbox, idx) => {\n            const element = group.elements[idx];\n\n            elementOrigin[groupAxis] = elementStart;\n            elementOrigin[groupsAxis] = alignStart(bbox.size[groupsSizeField], groupBox, options.alignItems, groupsAxis, groupsSizeField);\n            translateToPoint(elementOrigin, bbox, element);\n            elementStart += bbox.size[sizeField] + options.spacing;\n        };\n\n        for (let groupIdx = 0; groupIdx < groups.length; groupIdx++) {\n            group = groups[groupIdx];\n            groupOrigin[groupAxis] = elementStart = this.justifyAlign(group.size, rect, options.justifyContent, groupAxis, sizeField);\n            groupOrigin[groupsAxis] = groupStart;\n            size[sizeField] = group.size;\n            size[groupsSizeField] = group.lineSize;\n            groupBox = new Rect(groupOrigin, size);\n            this.forEach(group.bboxes, arrangeElements);\n\n            groupStart += group.lineSize + options.lineSpacing;\n        }\n\n        if (!options.wrap && group.size > rect.size[sizeField]) {\n            const scale = rect.size[sizeField] / groupBox.size[sizeField];\n            const scaledStart = groupBox.topLeft().scale(scale, scale);\n            const scaledSize = groupBox.size[groupsSizeField] * scale;\n            const newStart = alignStart(scaledSize, rect, options.alignContent, groupsAxis, groupsSizeField);\n            const transform = createTransform();\n            if (groupAxis === \"x\") {\n                transform.translate(rect.origin.x - scaledStart.x, newStart - scaledStart.y);\n            } else {\n                transform.translate(newStart - scaledStart.x, rect.origin.y - scaledStart.y);\n            }\n            transform.scale(scale, scale);\n\n            this.transform(transform);\n        }\n    }\n\n    _initGroups() {\n        const { options, children } = this;\n        const { lineSpacing, wrap, spacing } = options;\n        const sizeField = this._fieldMap.sizeField;\n        let group = this._newGroup();\n        const groups = [];\n        const addGroup = function() {\n            groups.push(group);\n            groupsSize += group.lineSize + lineSpacing;\n        };\n        let groupsSize = -lineSpacing;\n\n        for (let idx = 0; idx < children.length; idx++) {\n            let element = children[idx];\n            let bbox = children[idx].clippedBBox();\n            if (element.visible() && bbox) {\n                if (wrap && group.size + bbox.size[sizeField] + spacing > this._rect.size[sizeField]) {\n                    if (group.bboxes.length === 0) {\n                        this._addToGroup(group, bbox, element);\n                        addGroup();\n                        group = this._newGroup();\n                    } else {\n                        addGroup();\n                        group = this._newGroup();\n                        this._addToGroup(group, bbox, element);\n                    }\n                } else {\n                    this._addToGroup(group, bbox, element);\n                }\n            }\n        }\n\n        if (group.bboxes.length) {\n            addGroup();\n        }\n\n        return {\n            groups: groups,\n            groupsSize: groupsSize\n        };\n    }\n\n    _addToGroup(group, bbox, element) {\n        group.size += bbox.size[this._fieldMap.sizeField] + this.options.spacing;\n        group.lineSize = Math.max(bbox.size[this._fieldMap.groupsSizeField], group.lineSize);\n        group.bboxes.push(bbox);\n        group.elements.push(element);\n    }\n\n    _newGroup() {\n        return {\n            lineSize: 0,\n            size: -this.options.spacing,\n            bboxes: [],\n            elements: []\n        };\n    }\n}\n\nexport default Layout;"]},"metadata":{},"sourceType":"module"}