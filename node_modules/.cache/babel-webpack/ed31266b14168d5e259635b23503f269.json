{"ast":null,"code":"import _classCallCheck from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/Hung/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport Matrix from '../geometry/matrix';\nimport toMatrix from '../geometry/to-matrix';\nvar IDENTITY_MATRIX_HASH = Matrix.IDENTITY.toString();\n\nvar measurable = function measurable(TBase) {\n  return /*#__PURE__*/function (_TBase) {\n    _inherits(_class, _TBase);\n\n    var _super = _createSuper(_class);\n\n    function _class() {\n      _classCallCheck(this, _class);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(_class, [{\n      key: \"bbox\",\n      value: function bbox(transformation) {\n        var combinedMatrix = toMatrix(this.currentTransform(transformation));\n        var matrixHash = combinedMatrix ? combinedMatrix.toString() : IDENTITY_MATRIX_HASH;\n        var bbox;\n\n        if (this._bboxCache && this._matrixHash === matrixHash) {\n          bbox = this._bboxCache.clone();\n        } else {\n          bbox = this._bbox(combinedMatrix);\n          this._bboxCache = bbox ? bbox.clone() : null;\n          this._matrixHash = matrixHash;\n        }\n\n        var strokeWidth = this.options.get(\"stroke.width\");\n\n        if (strokeWidth && bbox) {\n          bbox.expand(strokeWidth / 2);\n        }\n\n        return bbox;\n      }\n    }, {\n      key: \"geometryChange\",\n      value: function geometryChange() {\n        delete this._bboxCache;\n        this.trigger(\"geometryChange\", {\n          element: this\n        });\n      }\n    }]);\n\n    return _class;\n  }(TBase);\n};\n\nexport default measurable;","map":{"version":3,"sources":["/home/datquocngo/Project/Hung/gts-fe/node_modules/@progress/kendo-drawing/dist/es2015/mixins/measurable.js"],"names":["Matrix","toMatrix","IDENTITY_MATRIX_HASH","IDENTITY","toString","measurable","TBase","transformation","combinedMatrix","currentTransform","matrixHash","bbox","_bboxCache","_matrixHash","clone","_bbox","strokeWidth","options","get","expand","trigger","element"],"mappings":";;;;AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AAEA,IAAMC,oBAAoB,GAAGF,MAAM,CAACG,QAAP,CAAgBC,QAAhB,EAA7B;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,KAAK;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,2BAEXC,cAFW,EAEK;AACjB,YAAMC,cAAc,GAAGP,QAAQ,CAAC,KAAKQ,gBAAL,CAAsBF,cAAtB,CAAD,CAA/B;AACA,YAAMG,UAAU,GAAGF,cAAc,GAAGA,cAAc,CAACJ,QAAf,EAAH,GAA+BF,oBAAhE;AACA,YAAIS,IAAJ;;AAEA,YAAI,KAAKC,UAAL,IAAmB,KAAKC,WAAL,KAAqBH,UAA5C,EAAwD;AACpDC,UAAAA,IAAI,GAAG,KAAKC,UAAL,CAAgBE,KAAhB,EAAP;AACH,SAFD,MAEO;AACHH,UAAAA,IAAI,GAAG,KAAKI,KAAL,CAAWP,cAAX,CAAP;AACA,eAAKI,UAAL,GAAkBD,IAAI,GAAGA,IAAI,CAACG,KAAL,EAAH,GAAkB,IAAxC;AACA,eAAKD,WAAL,GAAmBH,UAAnB;AACH;;AAED,YAAMM,WAAW,GAAG,KAAKC,OAAL,CAAaC,GAAb,CAAiB,cAAjB,CAApB;;AACA,YAAIF,WAAW,IAAIL,IAAnB,EAAyB;AACrBA,UAAAA,IAAI,CAACQ,MAAL,CAAYH,WAAW,GAAG,CAA1B;AACH;;AAED,eAAOL,IAAP;AACH;AArBe;AAAA;AAAA,uCAuBC;AACb,eAAO,KAAKC,UAAZ;AACA,aAAKQ,OAAL,CAAa,gBAAb,EAA+B;AAC3BC,UAAAA,OAAO,EAAE;AADkB,SAA/B;AAGH;AA5Be;;AAAA;AAAA,IACNf,KADM;AAAA,CAAxB;;AAgCA,eAAeD,UAAf","sourcesContent":["import Matrix from '../geometry/matrix';\nimport toMatrix from '../geometry/to-matrix';\n\nconst IDENTITY_MATRIX_HASH = Matrix.IDENTITY.toString();\n\nconst measurable = TBase => (\n    class extends TBase {\n        bbox(transformation) {\n            const combinedMatrix = toMatrix(this.currentTransform(transformation));\n            const matrixHash = combinedMatrix ? combinedMatrix.toString() : IDENTITY_MATRIX_HASH;\n            let bbox;\n\n            if (this._bboxCache && this._matrixHash === matrixHash) {\n                bbox = this._bboxCache.clone();\n            } else {\n                bbox = this._bbox(combinedMatrix);\n                this._bboxCache = bbox ? bbox.clone() : null;\n                this._matrixHash = matrixHash;\n            }\n\n            const strokeWidth = this.options.get(\"stroke.width\");\n            if (strokeWidth && bbox) {\n                bbox.expand(strokeWidth / 2);\n            }\n\n            return bbox;\n        }\n\n        geometryChange() {\n            delete this._bboxCache;\n            this.trigger(\"geometryChange\", {\n                element: this\n            });\n        }\n    }\n);\n\nexport default measurable;"]},"metadata":{},"sourceType":"module"}