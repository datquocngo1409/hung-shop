{"ast":null,"code":"import { isPresent, isString, isArray } from '../utils';\nimport { isCompositeFilterDescriptor } from './filter-descriptor.interface';\n\nvar operatorMap = function operatorMap(key) {\n  return {\n    \"!=\": \"neq\",\n    \"<\": \"lt\",\n    \"<=\": \"lte\",\n    \"==\": \"eq\",\n    \">\": \"gt\",\n    \">=\": \"gte\",\n    equal: \"eq\",\n    equals: \"eq\",\n    equalto: \"eq\",\n    ge: \"gte\",\n    greater: \"gt\",\n    greaterthan: \"gt\",\n    greaterthanequal: \"gte\",\n    isempty: \"isempty\",\n    isequalto: \"eq\",\n    isgreaterthan: \"gt\",\n    isgreaterthanorequalto: \"gte\",\n    islessthan: \"lt\",\n    islessthanorequalto: \"lte\",\n    isnotempty: \"isnotempty\",\n    isnotequalto: \"neq\",\n    isnull: \"isnull\",\n    le: \"lte\",\n    less: \"lt\",\n    lessthan: \"lt\",\n    lessthanequal: \"lte\",\n    ne: \"neq\",\n    notequal: \"neq\",\n    notequals: \"neq\",\n    notequalto: \"neq\",\n    notsubstringof: \"doesnotcontain\"\n  }[key.toLowerCase()] || key;\n};\n\nvar normalizeOperator = function normalizeOperator(descriptor) {\n  if (descriptor.filters) {\n    descriptor.filters = descriptor.filters.map(function (filter) {\n      var result = Object.assign({}, filter);\n\n      if (!isCompositeFilterDescriptor(filter) && isString(filter.operator)) {\n        result.operator = operatorMap(filter.operator);\n      }\n\n      if (isCompositeFilterDescriptor(filter)) {\n        normalizeOperator(result);\n      }\n\n      return result;\n    });\n  }\n};\n\nvar normalizeDescriptor = function normalizeDescriptor(descriptor) {\n  if (!isCompositeFilterDescriptor(descriptor)) {\n    return {\n      filters: isArray(descriptor) ? descriptor : [descriptor],\n      logic: \"and\"\n    };\n  }\n\n  return Object.assign({}, descriptor);\n}; // tslint:disable:max-line-length\n\n/**\n * Converts a [`FilterDescriptor`]({% slug api_kendo-data-query_filterdescriptor %}) into a [`CompositeFilterDescriptor`]({% slug api_kendo-data-query_compositefilterdescriptor %}). If a `CompositeFilterDescriptor` is passed, no modifications will be made.\n *\n * @param {CompositeFilterDescriptor | FilterDescriptor} descriptor - The descriptor that will be normalized.\n * @returns {CompositeFilterDescriptor} - The normalized descriptor.\n */\n// tslint:enable:max-line-length\n\n\nexport var normalizeFilters = function normalizeFilters(descriptor) {\n  if (isPresent(descriptor)) {\n    descriptor = normalizeDescriptor(descriptor);\n    normalizeOperator(descriptor);\n  }\n\n  return descriptor;\n};","map":{"version":3,"sources":["/home/datquocngo/Project/Hung/gts-fe/node_modules/@progress/kendo-data-query/dist/es2015/filtering/filter.operators.js"],"names":["isPresent","isString","isArray","isCompositeFilterDescriptor","operatorMap","key","equal","equals","equalto","ge","greater","greaterthan","greaterthanequal","isempty","isequalto","isgreaterthan","isgreaterthanorequalto","islessthan","islessthanorequalto","isnotempty","isnotequalto","isnull","le","less","lessthan","lessthanequal","ne","notequal","notequals","notequalto","notsubstringof","toLowerCase","normalizeOperator","descriptor","filters","map","filter","result","Object","assign","operator","normalizeDescriptor","logic","normalizeFilters"],"mappings":"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","sourcesContent":["import { isPresent, isString, isArray } from '../utils';\nimport { isCompositeFilterDescriptor } from './filter-descriptor.interface';\nconst operatorMap = (key) => ({\n    \"!=\": \"neq\",\n    \"<\": \"lt\",\n    \"<=\": \"lte\",\n    \"==\": \"eq\",\n    \">\": \"gt\",\n    \">=\": \"gte\",\n    equal: \"eq\",\n    equals: \"eq\",\n    equalto: \"eq\",\n    ge: \"gte\",\n    greater: \"gt\",\n    greaterthan: \"gt\",\n    greaterthanequal: \"gte\",\n    isempty: \"isempty\",\n    isequalto: \"eq\",\n    isgreaterthan: \"gt\",\n    isgreaterthanorequalto: \"gte\",\n    islessthan: \"lt\",\n    islessthanorequalto: \"lte\",\n    isnotempty: \"isnotempty\",\n    isnotequalto: \"neq\",\n    isnull: \"isnull\",\n    le: \"lte\",\n    less: \"lt\",\n    lessthan: \"lt\",\n    lessthanequal: \"lte\",\n    ne: \"neq\",\n    notequal: \"neq\",\n    notequals: \"neq\",\n    notequalto: \"neq\",\n    notsubstringof: \"doesnotcontain\"\n}[key.toLowerCase()] || key);\nconst normalizeOperator = (descriptor) => {\n    if (descriptor.filters) {\n        descriptor.filters = descriptor.filters.map(filter => {\n            const result = Object.assign({}, filter);\n            if (!isCompositeFilterDescriptor(filter) && isString(filter.operator)) {\n                result.operator = operatorMap(filter.operator);\n            }\n            if (isCompositeFilterDescriptor(filter)) {\n                normalizeOperator(result);\n            }\n            return result;\n        });\n    }\n};\nconst normalizeDescriptor = (descriptor) => {\n    if (!isCompositeFilterDescriptor(descriptor)) {\n        return {\n            filters: isArray(descriptor) ? descriptor : [descriptor],\n            logic: \"and\"\n        };\n    }\n    return Object.assign({}, descriptor);\n};\n// tslint:disable:max-line-length\n/**\n * Converts a [`FilterDescriptor`]({% slug api_kendo-data-query_filterdescriptor %}) into a [`CompositeFilterDescriptor`]({% slug api_kendo-data-query_compositefilterdescriptor %}). If a `CompositeFilterDescriptor` is passed, no modifications will be made.\n *\n * @param {CompositeFilterDescriptor | FilterDescriptor} descriptor - The descriptor that will be normalized.\n * @returns {CompositeFilterDescriptor} - The normalized descriptor.\n */\n// tslint:enable:max-line-length\nexport const normalizeFilters = (descriptor) => {\n    if (isPresent(descriptor)) {\n        descriptor = normalizeDescriptor(descriptor);\n        normalizeOperator(descriptor);\n    }\n    return descriptor;\n};\n"]},"metadata":{},"sourceType":"module"}