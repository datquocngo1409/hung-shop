{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"$top=\", \"\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"$skip=\", \"\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { isPresent, isNotNullOrEmptyString } from './utils';\nimport { serializeFilter } from './odata-filtering.operators';\nimport { ifElse, constant } from './funcs';\n\nvar serializeSort = function serializeSort(orderby) {\n  var str = orderby.filter(function (sort) {\n    return isPresent(sort.dir);\n  }).map(function (sort) {\n    var order = sort.field.replace(/\\./g, \"/\");\n    return sort.dir === \"desc\" ? order + \" desc\" : order;\n  }).join(\",\");\n  return str ? \"$orderby=\".concat(str) : str;\n};\n\nvar emptyString = constant('');\n\nvar concat = function concat(a) {\n  return function (b) {\n    return a + b;\n  };\n};\n\nvar serializeKey = function serializeKey(strings, val) {\n  return ifElse(isPresent, concat(strings[0]), emptyString)(val);\n};\n\nvar rules = function rules(settings, state) {\n  return function (key) {\n    return {\n      \"filter\": serializeFilter(state.filter || {}, settings),\n      \"skip\": serializeKey(_templateObject(), state.skip),\n      \"sort\": serializeSort(state.sort || []),\n      \"take\": serializeKey(_templateObject2(), state.take)\n    }[key];\n  };\n}; // tslint:enable:max-line-length\n\n/**\n * Converts a [`State`]({% slug api_kendo-data-query_state %}) into an OData v4 compatible string.\n *\n * @param {State} state - The state that will be serialized.\n * @param {ODataSettings} settings - The settings that are used during the serialization.\n * @returns {string} - The serialized state.\n */\n\n\nexport var toODataString = function toODataString(state) {\n  var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Object.keys(state).map(rules(settings, state)).filter(isNotNullOrEmptyString).join('&');\n};","map":{"version":3,"sources":["/home/datquocngo/Project/UET/gts-fe/node_modules/@progress/kendo-data-query/dist/es2015/odata.operators.js"],"names":["isPresent","isNotNullOrEmptyString","serializeFilter","ifElse","constant","serializeSort","orderby","str","filter","sort","dir","map","order","field","replace","join","emptyString","concat","a","b","serializeKey","strings","val","rules","settings","state","key","skip","take","toODataString","Object","keys"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,sBAApB,QAAkD,SAAlD;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,SAAjC;;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAa;AAC/B,MAAMC,GAAG,GAAGD,OAAO,CACdE,MADO,CACA,UAAAC,IAAI;AAAA,WAAIT,SAAS,CAACS,IAAI,CAACC,GAAN,CAAb;AAAA,GADJ,EAEPC,GAFO,CAEH,UAAAF,IAAI,EAAI;AACb,QAAMG,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAWC,OAAX,CAAmB,KAAnB,EAA0B,GAA1B,CAAd;AACA,WAAOL,IAAI,CAACC,GAAL,KAAa,MAAb,GAAsBE,KAAK,GAAG,OAA9B,GAAwCA,KAA/C;AACH,GALW,EAKTG,IALS,CAKJ,GALI,CAAZ;AAMA,SAAOR,GAAG,sBAAeA,GAAf,IAAuBA,GAAjC;AACH,CARD;;AASA,IAAMS,WAAW,GAAGZ,QAAQ,CAAC,EAAD,CAA5B;;AACA,IAAMa,MAAM,GAAG,SAATA,MAAS,CAAAC,CAAC;AAAA,SAAI,UAAAC,CAAC;AAAA,WAAID,CAAC,GAAGC,CAAR;AAAA,GAAL;AAAA,CAAhB;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD,EAAUC,GAAV;AAAA,SAAkBnB,MAAM,CAACH,SAAD,EAAYiB,MAAM,CAACI,OAAO,CAAC,CAAD,CAAR,CAAlB,EAAgCL,WAAhC,CAAN,CAAmDM,GAAnD,CAAlB;AAAA,CAArB;;AACA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,QAAD,EAAWC,KAAX;AAAA,SAAqB,UAACC,GAAD;AAAA,WAAU;AACzC,gBAAUxB,eAAe,CAACuB,KAAK,CAACjB,MAAN,IAAgB,EAAjB,EAAqBgB,QAArB,CADgB;AAEzC,cAAQJ,YAAR,oBAA8BK,KAAK,CAACE,IAApC,CAFyC;AAGzC,cAAQtB,aAAa,CAACoB,KAAK,CAAChB,IAAN,IAAc,EAAf,CAHoB;AAIzC,cAAQW,YAAR,qBAA6BK,KAAK,CAACG,IAAnC;AAJyC,MAK3CF,GAL2C,CAAV;AAAA,GAArB;AAAA,CAAd,C,CAMA;;AACA;;;;;;;;;AAOA,OAAO,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAACJ,KAAD;AAAA,MAAQD,QAAR,uEAAmB,EAAnB;AAAA,SAA2BM,MAAM,CAACC,IAAP,CAAYN,KAAZ,EACnDd,GADmD,CAC/CY,KAAK,CAACC,QAAD,EAAWC,KAAX,CAD0C,EAEnDjB,MAFmD,CAE5CP,sBAF4C,EAGnDc,IAHmD,CAG9C,GAH8C,CAA3B;AAAA,CAAtB","sourcesContent":["import { isPresent, isNotNullOrEmptyString } from './utils';\nimport { serializeFilter } from './odata-filtering.operators';\nimport { ifElse, constant } from './funcs';\nconst serializeSort = (orderby) => {\n    const str = orderby\n        .filter(sort => isPresent(sort.dir))\n        .map(sort => {\n        const order = sort.field.replace(/\\./g, \"/\");\n        return sort.dir === \"desc\" ? order + \" desc\" : order;\n    }).join(\",\");\n    return str ? `$orderby=${str}` : str;\n};\nconst emptyString = constant('');\nconst concat = a => b => a + b;\nconst serializeKey = (strings, val) => ifElse(isPresent, concat(strings[0]), emptyString)(val);\nconst rules = (settings, state) => (key) => ({\n    \"filter\": serializeFilter(state.filter || {}, settings),\n    \"skip\": serializeKey `$skip=${state.skip}`,\n    \"sort\": serializeSort(state.sort || []),\n    \"take\": serializeKey `$top=${state.take}`\n}[key]);\n// tslint:enable:max-line-length\n/**\n * Converts a [`State`]({% slug api_kendo-data-query_state %}) into an OData v4 compatible string.\n *\n * @param {State} state - The state that will be serialized.\n * @param {ODataSettings} settings - The settings that are used during the serialization.\n * @returns {string} - The serialized state.\n */\nexport const toODataString = (state, settings = {}) => (Object.keys(state)\n    .map(rules(settings, state))\n    .filter(isNotNullOrEmptyString)\n    .join('&'));\n"]},"metadata":{},"sourceType":"module"}