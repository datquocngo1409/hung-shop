{"ast":null,"code":"import _toConsumableArray from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _inherits from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createClass from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/datquocngo/Project/UET/gts-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { __decorate, __metadata } from 'tslib';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { NgModule, ɵɵdefineInjectable, Injectable, Injector, ɵɵinject, INJECTOR, EventEmitter, Renderer2, Input, Output, Directive } from '@angular/core';\nimport { utils, write } from 'xlsx';\nimport { saveAs } from 'file-saver';\nimport * as ɵngcc0 from '@angular/core';\n\nvar CdkTableExporterModule = function CdkTableExporterModule() {\n  _classCallCheck(this, CdkTableExporterModule);\n};\n\nCdkTableExporterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CdkTableExporterModule\n});\nCdkTableExporterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function CdkTableExporterModule_Factory(t) {\n    return new (t || CdkTableExporterModule)();\n  },\n  imports: [[CdkTableModule]]\n});\nvar ExportType;\n\n(function (ExportType) {\n  ExportType[\"XLS\"] = \"xls\";\n  ExportType[\"XLSX\"] = \"xlsx\";\n  ExportType[\"CSV\"] = \"csv\";\n  ExportType[\"TXT\"] = \"txt\";\n  ExportType[\"JSON\"] = \"json\";\n  ExportType[\"OTHER\"] = \"other\";\n})(ExportType || (ExportType = {}));\n\nvar DataExtractorService = /*#__PURE__*/function () {\n  function DataExtractorService() {\n    _classCallCheck(this, DataExtractorService);\n  }\n\n  _createClass(DataExtractorService, [{\n    key: \"extractRows\",\n    value: function extractRows(cdkTable, hiddenColumns, outlet) {\n      return this.getRowsAsJsonArray(cdkTable, hiddenColumns, outlet !== null && outlet !== void 0 ? outlet : cdkTable._rowOutlet);\n    }\n  }, {\n    key: \"getRowsAsJsonArray\",\n    value: function getRowsAsJsonArray(cdkTable, hiddenColumns, outlet) {\n      var renderedRows = this.getRenderedRows(cdkTable, outlet);\n      return this.convertToJsonArray(hiddenColumns, renderedRows);\n    }\n  }, {\n    key: \"getRenderedRows\",\n    value: function getRenderedRows(cdkTable, outlet) {\n      return cdkTable._getRenderedRows(outlet);\n    }\n  }, {\n    key: \"convertToJsonArray\",\n    value: function convertToJsonArray(hiddenColumns, rows) {\n      var result = new Array(); // tslint:disable-next-line:prefer-for-of\n\n      for (var i = 0; i < rows.length; i++) {\n        var row = this.convertRow(hiddenColumns, rows[i]);\n        result.push(this.createExcelItem(row));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"convertRow\",\n    value: function convertRow(hiddenColumns, row) {\n      var result = new Array();\n      var cells = row.children;\n\n      for (var i = 0; i < cells.length; i++) {\n        if (!this.shouldHide(hiddenColumns, i)) {\n          var element = cells.item(i).innerText;\n          result.push(element);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"shouldHide\",\n    value: function shouldHide(hiddenColumns, columnIndex) {\n      if (hiddenColumns && hiddenColumns.includes(columnIndex)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"createExcelItem\",\n    value: function createExcelItem(row) {\n      return Object.assign({}, row);\n    }\n  }]);\n\n  return DataExtractorService;\n}();\n\nDataExtractorService.ɵfac = function DataExtractorService_Factory(t) {\n  return new (t || DataExtractorService)();\n};\n\nDataExtractorService.ɵprov = ɵɵdefineInjectable({\n  factory: function DataExtractorService_Factory() {\n    return new DataExtractorService();\n  },\n  token: DataExtractorService,\n  providedIn: \"root\"\n});\nDataExtractorService = __decorate([__metadata(\"design:paramtypes\", [])], DataExtractorService);\n\nvar Mime = function Mime(extension, contentTypeHeader) {\n  _classCallCheck(this, Mime);\n\n  this.extension = extension;\n  this.contentTypeHeader = contentTypeHeader;\n};\n\nvar MAT_TABLE_EXPORTER = 'mat-table-exporter';\nvar TYPE_ARRAY = 'array';\nvar CHAR_SET_UTF = ';charset=utf-';\nvar CHAR_SET_UTF_8 = CHAR_SET_UTF + '8';\nvar CONTENT_TYPE_TEXT = ExportType.TXT + '/';\nvar CONTENT_TYPE_APPLICATION = 'application/';\nvar CONTENT_TYPE_EXCEL = CONTENT_TYPE_APPLICATION + 'octet-stream';\nvar DOT = '.';\nvar COMMA = ',';\nvar EXTENSION_XLS = DOT + ExportType.XLS;\nvar EXTENSION_XLSX = DOT + ExportType.XLSX;\nvar EXTENSION_CSV = DOT + ExportType.CSV;\nvar EXTENSION_JSON = DOT + ExportType.JSON;\nvar EXTENSION_TEXT = DOT + ExportType.TXT;\nvar MIME_EXCEL_XLS = new Mime(EXTENSION_XLS, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\nvar MIME_EXCEL_XLSX = new Mime(EXTENSION_XLSX, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\nvar MIME_JSON = new Mime(EXTENSION_JSON, CONTENT_TYPE_TEXT + JSON + CHAR_SET_UTF_8);\nvar MIME_TXT = new Mime(EXTENSION_TEXT, CONTENT_TYPE_TEXT + ExportType.TXT + CHAR_SET_UTF_8);\nvar MIME_CSV = new Mime(EXTENSION_CSV, CONTENT_TYPE_TEXT + ExportType.CSV + CHAR_SET_UTF_8);\nvar REF = '!ref';\nvar XLS_REGEX = DOT + '*\\.' + ExportType.XLS + '$';\nvar RETURN = '\\n';\nvar TAB = '\\t';\nvar XLSX_COLS = '!cols';\n\nvar FileUtil = /*#__PURE__*/function () {\n  function FileUtil() {\n    _classCallCheck(this, FileUtil);\n  }\n\n  _createClass(FileUtil, null, [{\n    key: \"save\",\n    value: function save(content, mime, options) {\n      var blob = new Blob([content], {\n        type: mime.contentTypeHeader\n      });\n      var fileName = MAT_TABLE_EXPORTER;\n\n      if (options && options.fileName) {\n        fileName = options.fileName;\n      }\n\n      saveAs(blob, fileName + mime.extension);\n    }\n  }, {\n    key: \"isXls\",\n    value: function isXls(fileName) {\n      return fileName.toLowerCase().match(XLS_REGEX) != null;\n    }\n  }, {\n    key: \"identifyExportType\",\n    value: function identifyExportType(fileName) {\n      if (fileName && FileUtil.isXls(fileName)) {\n        return ExportType.XLS;\n      } else {\n        return ExportType.XLSX;\n      }\n    }\n  }, {\n    key: \"removeExtension\",\n    value: function removeExtension(options) {\n      options.fileName = options.fileName.split(DOT)[0];\n    }\n  }]);\n\n  return FileUtil;\n}();\n\nvar FileExporter = /*#__PURE__*/function () {\n  function FileExporter() {\n    _classCallCheck(this, FileExporter);\n  }\n\n  _createClass(FileExporter, [{\n    key: \"export\",\n    value: function _export(rows, options) {\n      if (!rows) {\n        throw new Error('Empty json array is provided, rows parameter is mandatory!');\n      }\n\n      var content = this.createContent(rows, options);\n      var mimeType = this.getMimeType();\n      FileUtil.save(content, mimeType, options);\n    }\n  }]);\n\n  return FileExporter;\n}();\n/**\r\n * An angular service class that is used to create files out of json object arrays.\r\n */\n\n\nvar WorksheetExporter = /*#__PURE__*/function (_FileExporter) {\n  _inherits(WorksheetExporter, _FileExporter);\n\n  var _super = _createSuper(WorksheetExporter);\n\n  function WorksheetExporter() {\n    _classCallCheck(this, WorksheetExporter);\n\n    return _super.call(this);\n  }\n\n  _createClass(WorksheetExporter, [{\n    key: \"createContent\",\n    value: function createContent(rows, options) {\n      var workSheet = utils.json_to_sheet(rows, {\n        skipHeader: true // we don't want to see object properties as our headers\n\n      });\n      return this.workSheetToContent(workSheet, options);\n    }\n  }]);\n\n  return WorksheetExporter;\n}(FileExporter);\n\nvar CsvExporterService = /*#__PURE__*/function (_WorksheetExporter) {\n  _inherits(CsvExporterService, _WorksheetExporter);\n\n  var _super2 = _createSuper(CsvExporterService);\n\n  function CsvExporterService() {\n    _classCallCheck(this, CsvExporterService);\n\n    return _super2.call(this);\n  }\n\n  _createClass(CsvExporterService, [{\n    key: \"workSheetToContent\",\n    value: function workSheetToContent(worksheet, options) {\n      var _a, _b;\n\n      return utils.sheet_to_csv(worksheet, {\n        FS: (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.delimiter, _b !== null && _b !== void 0 ? _b : COMMA)\n      });\n    }\n  }, {\n    key: \"getMimeType\",\n    value: function getMimeType() {\n      return MIME_CSV;\n    }\n  }]);\n\n  return CsvExporterService;\n}(WorksheetExporter);\n\nCsvExporterService.ɵfac = function CsvExporterService_Factory(t) {\n  return new (t || CsvExporterService)();\n};\n\nCsvExporterService.ɵprov = ɵɵdefineInjectable({\n  factory: function CsvExporterService_Factory() {\n    return new CsvExporterService();\n  },\n  token: CsvExporterService,\n  providedIn: \"root\"\n});\nCsvExporterService = __decorate([__metadata(\"design:paramtypes\", [])], CsvExporterService);\n\nvar TxtExporterService = /*#__PURE__*/function (_FileExporter2) {\n  _inherits(TxtExporterService, _FileExporter2);\n\n  var _super3 = _createSuper(TxtExporterService);\n\n  function TxtExporterService() {\n    _classCallCheck(this, TxtExporterService);\n\n    return _super3.call(this);\n  }\n\n  _createClass(TxtExporterService, [{\n    key: \"createContent\",\n    value: function createContent(rows, options) {\n      var _this = this;\n\n      var content = '';\n      rows.forEach(function (element) {\n        content += Object.values(element).join(_this.getDelimiter(options)) + RETURN;\n      });\n      return content;\n    }\n  }, {\n    key: \"getMimeType\",\n    value: function getMimeType() {\n      return MIME_TXT;\n    }\n  }, {\n    key: \"getDelimiter\",\n    value: function getDelimiter(options) {\n      if (options && options.delimiter) {\n        return options.delimiter;\n      } else {\n        return TAB;\n      }\n    }\n  }]);\n\n  return TxtExporterService;\n}(FileExporter);\n\nTxtExporterService.ɵfac = function TxtExporterService_Factory(t) {\n  return new (t || TxtExporterService)();\n};\n\nTxtExporterService.ɵprov = ɵɵdefineInjectable({\n  factory: function TxtExporterService_Factory() {\n    return new TxtExporterService();\n  },\n  token: TxtExporterService,\n  providedIn: \"root\"\n});\nTxtExporterService = __decorate([__metadata(\"design:paramtypes\", [])], TxtExporterService);\n\nvar XlsExporterService = /*#__PURE__*/function (_WorksheetExporter2) {\n  _inherits(XlsExporterService, _WorksheetExporter2);\n\n  var _super4 = _createSuper(XlsExporterService);\n\n  function XlsExporterService() {\n    _classCallCheck(this, XlsExporterService);\n\n    return _super4.call(this);\n  }\n\n  _createClass(XlsExporterService, [{\n    key: \"workSheetToContent\",\n    value: function workSheetToContent(worksheet) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var workBook = utils.book_new();\n\n      if (options.columnWidths) {\n        worksheet[XLSX_COLS] = this.convertToWch(options.columnWidths);\n      }\n\n      this.correctTypes(options);\n      utils.book_append_sheet(workBook, worksheet, options.sheet);\n      return write(workBook, options);\n    }\n  }, {\n    key: \"getMimeType\",\n    value: function getMimeType() {\n      return MIME_EXCEL_XLS;\n    }\n  }, {\n    key: \"correctTypes\",\n    value: function correctTypes(options) {\n      if (!options.type) {\n        options.type = TYPE_ARRAY;\n      }\n\n      options.bookType = this.getMimeType().extension.replace('.', ''); // sheetjs requires bookingType for excel format\n    }\n  }, {\n    key: \"convertToWch\",\n    value: function convertToWch(columnWidths) {\n      return columnWidths.map(function (width) {\n        return {\n          wch: width\n        };\n      });\n    }\n  }]);\n\n  return XlsExporterService;\n}(WorksheetExporter);\n\nXlsExporterService.ɵfac = function XlsExporterService_Factory(t) {\n  return new (t || XlsExporterService)();\n};\n\nXlsExporterService.ɵprov = ɵɵdefineInjectable({\n  factory: function XlsExporterService_Factory() {\n    return new XlsExporterService();\n  },\n  token: XlsExporterService,\n  providedIn: \"root\"\n});\nXlsExporterService = __decorate([__metadata(\"design:paramtypes\", [])], XlsExporterService);\n\nvar JsonExporterService = /*#__PURE__*/function (_FileExporter3) {\n  _inherits(JsonExporterService, _FileExporter3);\n\n  var _super5 = _createSuper(JsonExporterService);\n\n  function JsonExporterService() {\n    _classCallCheck(this, JsonExporterService);\n\n    return _super5.call(this);\n  }\n\n  _createClass(JsonExporterService, [{\n    key: \"createContent\",\n    value: function createContent(rows, options) {\n      return JSON.stringify(rows);\n    }\n  }, {\n    key: \"getMimeType\",\n    value: function getMimeType() {\n      return MIME_JSON;\n    }\n  }]);\n\n  return JsonExporterService;\n}(FileExporter);\n\nJsonExporterService.ɵfac = function JsonExporterService_Factory(t) {\n  return new (t || JsonExporterService)();\n};\n\nJsonExporterService.ɵprov = ɵɵdefineInjectable({\n  factory: function JsonExporterService_Factory() {\n    return new JsonExporterService();\n  },\n  token: JsonExporterService,\n  providedIn: \"root\"\n});\nJsonExporterService = __decorate([__metadata(\"design:paramtypes\", [])], JsonExporterService);\n\nvar XlsxExporterService = /*#__PURE__*/function (_XlsExporterService) {\n  _inherits(XlsxExporterService, _XlsExporterService);\n\n  var _super6 = _createSuper(XlsxExporterService);\n\n  function XlsxExporterService() {\n    _classCallCheck(this, XlsxExporterService);\n\n    return _super6.call(this);\n  } // override\n\n\n  _createClass(XlsxExporterService, [{\n    key: \"getMimeType\",\n    value: function getMimeType() {\n      return MIME_EXCEL_XLSX;\n    }\n  }]);\n\n  return XlsxExporterService;\n}(XlsExporterService);\n\nXlsxExporterService.ɵfac = function XlsxExporterService_Factory(t) {\n  return new (t || XlsxExporterService)();\n};\n\nXlsxExporterService.ɵprov = ɵɵdefineInjectable({\n  factory: function XlsxExporterService_Factory() {\n    return new XlsxExporterService();\n  },\n  token: XlsxExporterService,\n  providedIn: \"root\"\n});\nXlsxExporterService = __decorate([__metadata(\"design:paramtypes\", [])], XlsxExporterService);\n\nvar ServiceLocatorService = /*#__PURE__*/function () {\n  function ServiceLocatorService(injector) {\n    _classCallCheck(this, ServiceLocatorService);\n\n    this.injector = injector;\n  }\n\n  _createClass(ServiceLocatorService, [{\n    key: \"getService\",\n    value: function getService(exportType) {\n      switch (exportType) {\n        case ExportType.XLS.valueOf():\n          return this.injector.get(XlsExporterService);\n\n        case ExportType.XLSX.valueOf():\n          return this.injector.get(XlsxExporterService);\n\n        case ExportType.JSON.valueOf():\n          return this.injector.get(JsonExporterService);\n\n        case ExportType.TXT.valueOf():\n          return this.injector.get(TxtExporterService);\n\n        case ExportType.CSV.valueOf():\n          return this.injector.get(CsvExporterService);\n\n        case ExportType.OTHER.valueOf():\n          return null;\n\n        default:\n          return this.injector.get(XlsxExporterService);\n      }\n    }\n  }]);\n\n  return ServiceLocatorService;\n}();\n\nServiceLocatorService.ɵfac = function ServiceLocatorService_Factory(t) {\n  return new (t || ServiceLocatorService)(ɵngcc0.ɵɵinject(Injector));\n};\n\nServiceLocatorService.ctorParameters = function () {\n  return [{\n    type: Injector\n  }];\n};\n\nServiceLocatorService.ɵprov = ɵɵdefineInjectable({\n  factory: function ServiceLocatorService_Factory() {\n    return new ServiceLocatorService(ɵɵinject(INJECTOR));\n  },\n  token: ServiceLocatorService,\n  providedIn: \"root\"\n});\nServiceLocatorService = __decorate([__metadata(\"design:paramtypes\", [Injector])], ServiceLocatorService);\n/**\r\n * Exporter class for CdkTable. Abstracts the varying behaviors among different CdkTable implementations.\r\n */\n\nvar CdkTableExporter = /*#__PURE__*/function () {\n  function CdkTableExporter(renderer, serviceLocator, dataExtractor, _cdkTable) {\n    _classCallCheck(this, CdkTableExporter);\n\n    this.renderer = renderer;\n    this.serviceLocator = serviceLocator;\n    this.dataExtractor = dataExtractor;\n    this._cdkTable = _cdkTable;\n    this.exportCompleted = new EventEmitter();\n    this.exportStarted = new EventEmitter();\n  }\n  /**\r\n   * Triggers page event chain thus extracting and exporting all the rows in nativetables in pages\r\n   */\n\n\n  _createClass(CdkTableExporter, [{\n    key: \"exportTable\",\n    value: function exportTable(exportType, options) {\n      this.loadExporter(exportType);\n      this._options = options;\n      this.exportStarted.emit();\n      this._isIterating = true;\n      this._isExporting = true;\n      this._data = new Array();\n      this.extractTableHeader();\n\n      try {\n        this.exportWithPagination();\n      } catch (notPaginated) {\n        this.exportSinglePage();\n      }\n    }\n  }, {\n    key: \"toggleRow\",\n    value: function toggleRow(index) {\n      var paginatedRowIndex = this.getPaginatedRowIndex(index);\n\n      if (this.isToggleOn(paginatedRowIndex)) {\n        this.toggleOff(paginatedRowIndex);\n      } else {\n        this.toggleOn(paginatedRowIndex);\n      }\n    }\n    /**\r\n     * This event will clear rows selection done using toggleRow functionality\r\n     *\r\n     */\n\n  }, {\n    key: \"resetToggleRows\",\n    value: function resetToggleRows() {\n      this._selectedRows = [];\n    }\n  }, {\n    key: \"toggleOn\",\n    value: function toggleOn(index) {\n      this._selectedRows = [].concat(_toConsumableArray(this._selectedRows || []), [index]);\n    }\n  }, {\n    key: \"toggleOff\",\n    value: function toggleOff(index) {\n      this._selectedRows = this._selectedRows.filter(function (x) {\n        return x !== index;\n      });\n    }\n  }, {\n    key: \"isToggleOn\",\n    value: function isToggleOn(index) {\n      var _a;\n\n      return (_a = this._selectedRows) === null || _a === void 0 ? void 0 : _a.includes(index);\n    }\n  }, {\n    key: \"loadExporter\",\n    value: function loadExporter(exportType) {\n      if (exportType === ExportType.OTHER.valueOf()) {\n        this._exporterService = this.exporter;\n      } else {\n        this._exporterService = this.serviceLocator.getService(exportType);\n      }\n    }\n  }, {\n    key: \"exportWithPagination\",\n    value: function exportWithPagination() {\n      this._initialPageIndex = this.getCurrentPageIndex();\n      this.initPageHandler();\n      this.goToPage(0);\n    }\n  }, {\n    key: \"exportSinglePage\",\n    value: function exportSinglePage() {\n      this.extractDataOnCurrentPage();\n      this.extractTableFooter();\n      this.exportExtractedData();\n    }\n  }, {\n    key: \"extractDataOnCurrentPage\",\n    value: function extractDataOnCurrentPage() {\n      var rows = this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns);\n      this._data = this._data.concat(this.getSelectedRows(rows));\n    }\n  }, {\n    key: \"getSelectedRows\",\n    value: function getSelectedRows(rows) {\n      var _this2 = this;\n\n      if (this.isSelectiveExport()) {\n        return rows.filter(function (_, i) {\n          return _this2._selectedRows.includes(_this2.getPaginatedRowIndex(i));\n        });\n      } else {\n        return rows;\n      }\n    }\n  }, {\n    key: \"isSelectiveExport\",\n    value: function isSelectiveExport() {\n      return this._selectedRows && !this.isMasterToggleOff() && !this.isMasterToggleOn();\n    }\n  }, {\n    key: \"isMasterToggleOn\",\n    value: function isMasterToggleOn() {\n      return this.compareSelectedRowCount(this.getTotalItemsCount());\n    }\n  }, {\n    key: \"isMasterToggleOff\",\n    value: function isMasterToggleOff() {\n      return this.compareSelectedRowCount(0);\n    }\n  }, {\n    key: \"compareSelectedRowCount\",\n    value: function compareSelectedRowCount(rowCount) {\n      var _a;\n\n      return !!(((_a = this._selectedRows) === null || _a === void 0 ? void 0 : _a.length) === rowCount);\n    }\n  }, {\n    key: \"initPageHandler\",\n    value: function initPageHandler() {\n      var _this3 = this;\n\n      if (!this._subscription) {\n        this._subscription = this.getPageChangeObservable().subscribe(function () {\n          setTimeout(function () {\n            if (_this3._isIterating) {\n              _this3.extractDataOnCurrentPage();\n\n              if (_this3.hasNextPage()) {\n                _this3.nextPage();\n              } else {\n                _this3._isIterating = false;\n\n                _this3.goToPage(_this3._initialPageIndex);\n              }\n            } else if (_this3._isExporting) {\n              _this3._isExporting = false;\n\n              _this3.extractTableFooter();\n\n              _this3.exportExtractedData();\n            }\n          });\n        });\n      }\n    }\n  }, {\n    key: \"exportExtractedData\",\n    value: function exportExtractedData() {\n      this._exporterService.export(this._data, this._options);\n\n      this._data = new Array();\n      this.exportCompleted.emit();\n    }\n  }, {\n    key: \"extractSpecialRows\",\n    value: function extractSpecialRows(outlet) {\n      var _this$_data;\n\n      (_this$_data = this._data).push.apply(_this$_data, _toConsumableArray(this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns, outlet)));\n    }\n  }, {\n    key: \"extractTableHeader\",\n    value: function extractTableHeader() {\n      this.extractSpecialRows(this._cdkTable._headerRowOutlet);\n    }\n  }, {\n    key: \"extractTableFooter\",\n    value: function extractTableFooter() {\n      this.extractSpecialRows(this._cdkTable._footerRowOutlet);\n    }\n  }, {\n    key: \"hasNextPage\",\n    value: function hasNextPage() {\n      if (this.getCurrentPageIndex() < this.getPageCount() - 1) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"nextPage\",\n    value: function nextPage() {\n      this.goToPage(this.getCurrentPageIndex() + 1);\n    }\n  }, {\n    key: \"getPaginatedRowIndex\",\n    value: function getPaginatedRowIndex(index) {\n      return index + this.getPageSize() * this.getCurrentPageIndex();\n    }\n  }]);\n\n  return CdkTableExporter;\n}();\n\nCdkTableExporter.ɵfac = function CdkTableExporter_Factory(t) {\n  return new (t || CdkTableExporter)(ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ServiceLocatorService), ɵngcc0.ɵɵdirectiveInject(DataExtractorService), ɵngcc0.ɵɵdirectiveInject(undefined));\n};\n\nCdkTableExporter.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkTableExporter,\n  inputs: {\n    hiddenColumns: \"hiddenColumns\",\n    exporter: \"exporter\"\n  },\n  outputs: {\n    exportCompleted: \"exportCompleted\",\n    exportStarted: \"exportStarted\"\n  }\n});\n\nCdkTableExporter.ctorParameters = function () {\n  return [{\n    type: Renderer2\n  }, {\n    type: ServiceLocatorService\n  }, {\n    type: DataExtractorService\n  }, {\n    type: undefined\n  }];\n};\n\n__decorate([Input(), __metadata(\"design:type\", Array)], CdkTableExporter.prototype, \"hiddenColumns\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CdkTableExporter.prototype, \"exporter\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], CdkTableExporter.prototype, \"exportCompleted\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], CdkTableExporter.prototype, \"exportStarted\", void 0);\n\nCdkTableExporter = __decorate([__metadata(\"design:paramtypes\", [Renderer2, ServiceLocatorService, DataExtractorService, Object])], CdkTableExporter);\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableExporterModule, {\n    imports: function imports() {\n      return [CdkTableModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkTableExporterModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [],\n      imports: [CdkTableModule],\n      exports: []\n    }]\n  }], null, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(DataExtractorService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CsvExporterService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TxtExporterService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(XlsExporterService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(JsonExporterService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(XlsxExporterService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ServiceLocatorService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Injector\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkTableExporter, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: Renderer2\n    }, {\n      type: ServiceLocatorService\n    }, {\n      type: DataExtractorService\n    }, {\n      type: undefined\n    }];\n  }, {\n    exportCompleted: [{\n      type: Output\n    }],\n    exportStarted: [{\n      type: Output\n    }],\n    hiddenColumns: [{\n      type: Input\n    }],\n    exporter: [{\n      type: Input\n    }]\n  });\n})();\n/*\r\n * Public API Surface of cdk-table-exporter\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { CHAR_SET_UTF, CHAR_SET_UTF_8, COMMA, CONTENT_TYPE_APPLICATION, CONTENT_TYPE_EXCEL, CONTENT_TYPE_TEXT, CdkTableExporter, CdkTableExporterModule, CsvExporterService, DOT, DataExtractorService, EXTENSION_CSV, EXTENSION_JSON, EXTENSION_TEXT, EXTENSION_XLS, EXTENSION_XLSX, ExportType, FileExporter, FileUtil, JsonExporterService, MAT_TABLE_EXPORTER, MIME_CSV, MIME_EXCEL_XLS, MIME_EXCEL_XLSX, MIME_JSON, MIME_TXT, Mime, REF, RETURN, ServiceLocatorService, TAB, TYPE_ARRAY, TxtExporterService, WorksheetExporter, XLSX_COLS, XLS_REGEX, XlsExporterService, XlsxExporterService };","map":{"version":3,"sources":["cdk-table-exporter/lib/cdk-table-exporter.module.ts","cdk-table-exporter/lib/export-type.ts","cdk-table-exporter/lib/services/data-extractor.service.ts","cdk-table-exporter/lib/mime.ts","cdk-table-exporter/lib/constants.ts","cdk-table-exporter/lib/file-util.ts","cdk-table-exporter/lib/services/exporters/file-exporter.ts","cdk-table-exporter/lib/services/exporters/worksheet-exporter.ts","cdk-table-exporter/lib/services/exporters/csv-exporter.service.ts","cdk-table-exporter/lib/services/exporters/txt-exporter.service.ts","cdk-table-exporter/lib/services/exporters/xls-exporter.service.ts","cdk-table-exporter/lib/services/exporters/json-exporter.service.ts","cdk-table-exporter/lib/services/exporters/xlsx-exporter.service.ts","cdk-table-exporter/lib/services/service-locator.service.ts","cdk-table-exporter/lib/cdk-table-exporter.ts","cdk-table-exporter/public-api.ts","cdk-table-exporter/cdk-table-exporter.ts"],"names":["FileSaver.saveAs","XLSX.utils","XLSX.write"],"mappings":"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","sourcesContent":["import { CdkTableModule } from '@angular/cdk/table';\r\nimport { NgModule } from '@angular/core';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CdkTableModule\r\n  ],\r\n  exports: []\r\n})\r\nexport class CdkTableExporterModule { }\r\n","export enum ExportType {\r\n  XLS = 'xls',\r\n  XLSX = 'xlsx',\r\n  CSV = 'csv',\r\n  TXT = 'txt',\r\n  JSON = 'json',\r\n  OTHER = 'other'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DataRowOutlet } from '@angular/cdk/table';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataExtractorService {\r\n\r\n  constructor() { }\r\n\r\n  public extractRows(cdkTable: any, hiddenColumns: Array<any>, outlet?: DataRowOutlet): Array<any> {\r\n    return this.getRowsAsJsonArray(cdkTable, hiddenColumns, outlet ?? cdkTable._rowOutlet);\r\n  }\r\n\r\n  private getRowsAsJsonArray(cdkTable: any, hiddenColumns: Array<any>, outlet: DataRowOutlet): Array<any> {\r\n    const renderedRows = this.getRenderedRows(cdkTable, outlet);\r\n    return this.convertToJsonArray(hiddenColumns, renderedRows);\r\n  }\r\n\r\n  private getRenderedRows(cdkTable: any, outlet: DataRowOutlet): HTMLTableRowElement[] {\r\n    return cdkTable._getRenderedRows(outlet) as HTMLTableRowElement[];\r\n  }\r\n\r\n  private convertToJsonArray(hiddenColumns: Array<any>, rows: HTMLTableRowElement[]): Array<any> {\r\n    const result = new Array<any>();\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < rows.length; i++) {\r\n      const row: Array<string> = this.convertRow(hiddenColumns, rows[i]);\r\n      result.push(this.createExcelItem(row));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private convertRow(hiddenColumns: Array<any>, row: HTMLTableRowElement): Array<string> {\r\n    const result = new Array<string>();\r\n    const cells: any = row.children;\r\n    for (let i = 0; i < cells.length; i++) {\r\n      if (!this.shouldHide(hiddenColumns, i)) {\r\n        const element = cells.item(i).innerText;\r\n        result.push(element);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private shouldHide(hiddenColumns: Array<any>, columnIndex: number) {\r\n    if (hiddenColumns && hiddenColumns.includes(columnIndex)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private createExcelItem(row: Array<string>): any {\r\n    return Object.assign({}, row);\r\n  }\r\n}\r\n","export class Mime {\r\n\r\n  extension: string;\r\n  contentTypeHeader: string;\r\n\r\n  constructor(extension: string, contentTypeHeader: string) {\r\n    this.extension = extension;\r\n    this.contentTypeHeader = contentTypeHeader;\r\n  }\r\n\r\n}\r\n","import { ExportType } from './export-type';\r\nimport { Mime } from './mime';\r\n\r\nexport const MAT_TABLE_EXPORTER = 'mat-table-exporter';\r\nexport const TYPE_ARRAY = 'array';\r\nexport const CHAR_SET_UTF = ';charset=utf-';\r\nexport const CHAR_SET_UTF_8 = CHAR_SET_UTF + '8';\r\nexport const CONTENT_TYPE_TEXT = ExportType.TXT + '/';\r\nexport const CONTENT_TYPE_APPLICATION = 'application/';\r\nexport const CONTENT_TYPE_EXCEL = CONTENT_TYPE_APPLICATION + 'octet-stream';\r\nexport const DOT = '.';\r\nexport const COMMA = ',';\r\nexport const EXTENSION_XLS = DOT + ExportType.XLS;\r\nexport const EXTENSION_XLSX =  DOT + ExportType.XLSX;\r\nexport const EXTENSION_CSV =  DOT + ExportType.CSV;\r\nexport const EXTENSION_JSON =  DOT + ExportType.JSON;\r\nexport const EXTENSION_TEXT =  DOT + ExportType.TXT;\r\nexport const MIME_EXCEL_XLS = new Mime(EXTENSION_XLS, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\r\nexport const MIME_EXCEL_XLSX = new Mime(EXTENSION_XLSX, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\r\nexport const MIME_JSON = new Mime(EXTENSION_JSON, CONTENT_TYPE_TEXT + JSON + CHAR_SET_UTF_8);\r\nexport const MIME_TXT = new Mime(EXTENSION_TEXT, CONTENT_TYPE_TEXT + ExportType.TXT + CHAR_SET_UTF_8);\r\nexport const MIME_CSV = new Mime(EXTENSION_CSV, CONTENT_TYPE_TEXT + ExportType.CSV + CHAR_SET_UTF_8);\r\nexport const REF = '!ref';\r\nexport const XLS_REGEX = DOT + '*\\.' + ExportType.XLS + '$';\r\nexport const RETURN = '\\n';\r\nexport const TAB = '\\t';\r\nexport const XLSX_COLS = '!cols';\r\n","import { ExportType } from './export-type';\r\nimport * as FileSaver from 'file-saver';\r\nimport { MAT_TABLE_EXPORTER, DOT, XLS_REGEX } from './constants';\r\nimport { Mime } from './mime';\r\nimport { Options } from './options';\r\n\r\nexport class FileUtil {\r\n  public static save(content: string, mime: Mime, options?: Options) {\r\n    const blob = new Blob([content], {type: mime.contentTypeHeader});\r\n    let fileName = MAT_TABLE_EXPORTER;\r\n    if (options && options.fileName) {\r\n      fileName = options.fileName;\r\n    }\r\n    FileSaver.saveAs(blob, fileName + mime.extension);\r\n  }\r\n\r\n  public static isXls(fileName: string): boolean {\r\n    return fileName.toLowerCase().match(XLS_REGEX) != null;\r\n  }\r\n\r\n  public static identifyExportType(fileName?: string): ExportType {\r\n    if (fileName && FileUtil.isXls(fileName)) {\r\n      return ExportType.XLS;\r\n    } else {\r\n      return ExportType.XLSX;\r\n    }\r\n  }\r\n\r\n  public static removeExtension(options?: Options) {\r\n    options.fileName = options.fileName.split(DOT)[0];\r\n  }\r\n}\r\n","import { FileUtil } from '../../file-util';\r\nimport { Mime } from '../../mime';\r\nimport { Exporter } from './exporter';\r\n\r\nexport abstract class FileExporter<T> implements Exporter<T> {\r\n  constructor() {}\r\n\r\n  public export(rows: Array<any>, options?: T) {\r\n    if (!rows) {\r\n      throw new Error('Empty json array is provided, rows parameter is mandatory!');\r\n    }\r\n    const content = this.createContent(rows, options);\r\n    const mimeType = this.getMimeType();\r\n    FileUtil.save(content, mimeType, options);\r\n  }\r\n\r\n  public abstract createContent(rows: Array<any>, options?: T): any;\r\n  public abstract getMimeType(): Mime;\r\n}\r\n","import * as XLSX from 'xlsx';\r\nimport { Mime } from '../../mime';\r\nimport { FileExporter } from './file-exporter';\r\n/**\r\n * An angular service class that is used to create files out of json object arrays.\r\n */\r\nexport abstract class WorksheetExporter<T> extends FileExporter<T> {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public createContent(rows: Array<any>, options?: T): any {\r\n    const workSheet: XLSX.WorkSheet =  XLSX.utils.json_to_sheet(rows, {\r\n      skipHeader: true // we don't want to see object properties as our headers\r\n    });\r\n    return this.workSheetToContent(workSheet, options);\r\n  }\r\n  public abstract workSheetToContent(workSheet: XLSX.WorkSheet, options?: T): any;\r\n  public abstract getMimeType(): Mime;\r\n\r\n}\r\n","import { COMMA, MIME_CSV } from './../../constants';\r\nimport { TxtOptions } from '../../options';\r\nimport { Injectable } from '@angular/core';\r\nimport * as XLSX from 'xlsx';\r\nimport { WorksheetExporter } from './worksheet-exporter';\r\nimport { Mime } from '../../mime';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CsvExporterService extends WorksheetExporter<TxtOptions> {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public workSheetToContent(worksheet: XLSX.WorkSheet, options?: TxtOptions): any {\r\n    return XLSX.utils.sheet_to_csv(worksheet, {FS: options?.delimiter ?? COMMA});\r\n  }\r\n\r\n  public getMimeType(): Mime {\r\n    return MIME_CSV;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Mime } from '../../mime';\r\nimport { TxtOptions } from '../../options';\r\nimport { MIME_TXT, RETURN, TAB } from './../../constants';\r\nimport { FileExporter } from './file-exporter';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TxtExporterService extends FileExporter<TxtOptions> {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public createContent(rows: any[], options?: TxtOptions) {\r\n    let content = '';\r\n    rows.forEach(element => {\r\n      content += Object.values(element).join(this.getDelimiter(options)) + RETURN;\r\n    });\r\n    return content;\r\n  }\r\n\r\n  public getMimeType(): Mime {\r\n    return MIME_TXT;\r\n  }\r\n\r\n  private getDelimiter(options?: TxtOptions) {\r\n    if (options && options.delimiter) {\r\n      return options.delimiter;\r\n    } else {\r\n      return TAB;\r\n    }\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport * as XLSX from 'xlsx';\r\nimport { MIME_EXCEL_XLS, TYPE_ARRAY, XLSX_COLS } from '../../constants';\r\nimport { Mime } from '../../mime';\r\nimport { ExcelOptions } from '../../options';\r\nimport { WorksheetExporter } from './worksheet-exporter';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class XlsExporterService extends WorksheetExporter<ExcelOptions> {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public workSheetToContent(worksheet: XLSX.WorkSheet, options: ExcelOptions = {} as ExcelOptions): any {\r\n    const workBook = XLSX.utils.book_new();\r\n    if (options.columnWidths) {\r\n      worksheet[XLSX_COLS] = this.convertToWch(options.columnWidths);\r\n    }\r\n    this.correctTypes(options);\r\n    XLSX.utils.book_append_sheet(workBook, worksheet, options.sheet);\r\n    return XLSX.write(workBook, options);\r\n  }\r\n\r\n  public getMimeType(): Mime {\r\n    return MIME_EXCEL_XLS;\r\n  }\r\n\r\n  private correctTypes(options: ExcelOptions) {\r\n    if (!options.type) {\r\n      options.type = TYPE_ARRAY;\r\n    }\r\n    (options as any).bookType = this.getMimeType().extension.replace('.', ''); // sheetjs requires bookingType for excel format\r\n  }\r\n\r\n  private convertToWch(columnWidths: Array<number>): Array<{wch: number}> {\r\n    return columnWidths.map(width => ({wch: width}));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Options } from '../../options';\r\nimport { FileExporter } from './file-exporter';\r\nimport { Mime } from '../../mime';\r\nimport { MIME_JSON } from '../../constants';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JsonExporterService extends FileExporter<Options> {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public createContent(rows: any[], options?: Options) {\r\n    return JSON.stringify(rows);\r\n  }\r\n   public getMimeType(): Mime {\r\n    return MIME_JSON;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { XlsExporterService } from './xls-exporter.service';\r\nimport { Mime } from '../../mime';\r\nimport { MIME_EXCEL_XLSX } from '../../constants';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class XlsxExporterService extends XlsExporterService {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // override\r\n  public getMimeType(): Mime {\r\n    return MIME_EXCEL_XLSX;\r\n  }\r\n}\r\n","import { CsvExporterService } from './exporters/csv-exporter.service';\r\nimport { TxtExporterService } from './exporters/txt-exporter.service';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Options } from '../options';\r\nimport { ExportType } from './../export-type';\r\nimport { Exporter } from './exporters/exporter';\r\nimport { XlsExporterService } from './exporters/xls-exporter.service';\r\nimport { JsonExporterService } from './exporters/json-exporter.service';\r\nimport { XlsxExporterService } from './exporters/xlsx-exporter.service';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ServiceLocatorService {\r\n\r\n  constructor(private injector: Injector) { }\r\n\r\n  public getService(exportType: ExportType | 'xls' | 'xlsx' | 'csv' | 'txt' | 'json' | 'other'): Exporter<Options> {\r\n    switch (exportType) {\r\n      case ExportType.XLS.valueOf():\r\n        return this.injector.get<XlsExporterService>(XlsExporterService);\r\n      case ExportType.XLSX.valueOf():\r\n          return this.injector.get<XlsxExporterService>(XlsxExporterService);\r\n      case ExportType.JSON.valueOf():\r\n        return this.injector.get<JsonExporterService>(JsonExporterService);\r\n      case ExportType.TXT.valueOf():\r\n        return this.injector.get<TxtExporterService>(TxtExporterService);\r\n      case ExportType.CSV.valueOf():\r\n        return this.injector.get<CsvExporterService>(CsvExporterService);\r\n      case ExportType.OTHER.valueOf():\r\n        return null;\r\n      default:\r\n        return this.injector.get<XlsxExporterService>(XlsxExporterService);\r\n    }\r\n  }\r\n}\r\n","import { DataRowOutlet } from '@angular/cdk/table';\r\nimport { Directive, EventEmitter, Input, Output, Renderer2 } from '@angular/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { ExportType } from './export-type';\r\nimport { ExcelOptions, Options, TxtOptions } from './options';\r\nimport { DataExtractorService } from './services/data-extractor.service';\r\nimport { Exporter } from './services/exporters/exporter';\r\nimport { ServiceLocatorService } from './services/service-locator.service';\r\n\r\n/**\r\n * Exporter class for CdkTable. Abstracts the varying behaviors among different CdkTable implementations.\r\n */\r\n@Directive()\r\nexport abstract class CdkTableExporter {\r\n\r\n  private _exporterService: Exporter<Options>;\r\n\r\n  @Input() hiddenColumns?: Array<number>;\r\n  @Input() exporter?: Exporter<Options>;\r\n  @Output() exportCompleted = new EventEmitter<void>();\r\n  @Output() exportStarted = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Data array which is extracted from nativeTable\r\n   */\r\n  private _data: Array<any>;\r\n\r\n  private _isIterating: boolean;\r\n\r\n  private _initialPageIndex: number;\r\n\r\n  private _isExporting: boolean;\r\n\r\n  private _subscription: Subscription;\r\n\r\n  private _options?: Options;\r\n\r\n  private _selectedRows?: Array<number>;\r\n\r\n  constructor(\r\n    protected renderer: Renderer2,\r\n    private serviceLocator: ServiceLocatorService,\r\n    private dataExtractor: DataExtractorService,\r\n    protected _cdkTable: any\r\n  ) {}\r\n\r\n  /**\r\n   * Must return the number of pages of the table\r\n   */\r\n  public abstract getPageCount(): number;\r\n\r\n  /**\r\n   * Must return the number of items to display on a page\r\n   */\r\n  public abstract getPageSize(): number;\r\n\r\n  /**\r\n   * Must return the index of the current page that's displayed\r\n   */\r\n  public abstract getCurrentPageIndex(): number;\r\n\r\n  /**\r\n   * Must return the total number of items in the table\r\n   */\r\n  public abstract getTotalItemsCount(): number;\r\n\r\n  /**\r\n   * When called, the CdkTable should render the rows inside the page whose index given as parameter\r\n   * @param index page index\r\n   */\r\n  public abstract goToPage(index: number): void;\r\n\r\n  /**\r\n   * Must return an observable that notifies the subscribers about page changes\r\n   */\r\n  public abstract getPageChangeObservable(): Observable<any>;\r\n\r\n  /**\r\n   * Triggers page event chain thus extracting and exporting all the rows in nativetables in pages\r\n   */\r\n  exportTable(exportType?: ExportType | 'xls' | 'xlsx' | 'csv' | 'txt' | 'json' | 'other', options?: Options | ExcelOptions | TxtOptions) {\r\n    this.loadExporter(exportType);\r\n    this._options = options;\r\n    this.exportStarted.emit();\r\n    this._isIterating = true;\r\n    this._isExporting = true;\r\n    this._data = new Array<any>();\r\n    this.extractTableHeader();\r\n    try {\r\n      this.exportWithPagination();\r\n    } catch (notPaginated) {\r\n      this.exportSinglePage();\r\n    }\r\n  }\r\n\r\n  toggleRow(index: number): void {\r\n    const paginatedRowIndex: number = this.getPaginatedRowIndex(index);\r\n    if (this.isToggleOn(paginatedRowIndex)) {\r\n      this.toggleOff(paginatedRowIndex);\r\n    } else {\r\n      this.toggleOn(paginatedRowIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This event will clear rows selection done using toggleRow functionality\r\n   * \r\n   */\r\n  resetToggleRows() {\r\n    this._selectedRows = [];\r\n  }\r\n\r\n  private toggleOn(index: number) {\r\n    this._selectedRows = [...(this._selectedRows || []), index];\r\n  }\r\n\r\n  private toggleOff(index: number) {\r\n    this._selectedRows =  this._selectedRows.filter(x => x !== index);\r\n  }\r\n\r\n  private isToggleOn(index: number): boolean {\r\n    return this._selectedRows?.includes(index);\r\n  }\r\n\r\n\r\n  private loadExporter(exportType: any) {\r\n    if (exportType === ExportType.OTHER.valueOf()) {\r\n      this._exporterService = this.exporter;\r\n    } else {\r\n      this._exporterService = this.serviceLocator.getService(exportType);\r\n    }\r\n  }\r\n\r\n  private exportWithPagination() {\r\n    this._initialPageIndex = this.getCurrentPageIndex();\r\n    this.initPageHandler();\r\n    this.goToPage(0);\r\n  }\r\n\r\n  private exportSinglePage() {\r\n    this.extractDataOnCurrentPage();\r\n    this.extractTableFooter();\r\n    this.exportExtractedData();\r\n  }\r\n\r\n  private extractDataOnCurrentPage() {\r\n    const rows = this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns);\r\n    this._data = this._data.concat(this.getSelectedRows(rows));\r\n  }\r\n\r\n  private getSelectedRows(rows: Array<any>) {\r\n    if (this.isSelectiveExport()) {\r\n      return rows.filter((_, i) => this._selectedRows.includes(this.getPaginatedRowIndex(i)));\r\n    } else {\r\n      return rows;\r\n    }\r\n  }\r\n\r\n  private isSelectiveExport(): boolean {\r\n    return this._selectedRows && !this.isMasterToggleOff() &&  !this.isMasterToggleOn();\r\n  }\r\n\r\n  private isMasterToggleOn(): boolean {\r\n    return this.compareSelectedRowCount(this.getTotalItemsCount());\r\n  }\r\n\r\n  private isMasterToggleOff(): boolean {\r\n    return this.compareSelectedRowCount(0);\r\n  }\r\n\r\n  private compareSelectedRowCount(rowCount: number): boolean {\r\n    return !!(this._selectedRows?.length === rowCount);\r\n  }\r\n\r\n  private initPageHandler(): void {\r\n    if (!this._subscription) {\r\n      this._subscription = this.getPageChangeObservable().subscribe(() => {\r\n        setTimeout(() => {\r\n          if (this._isIterating) {\r\n            this.extractDataOnCurrentPage();\r\n            if (this.hasNextPage()) {\r\n              this.nextPage();\r\n            } else {\r\n              this._isIterating = false;\r\n              this.goToPage(this._initialPageIndex);\r\n            }\r\n          } else if (this._isExporting) {\r\n            this._isExporting = false;\r\n            this.extractTableFooter();\r\n            this.exportExtractedData();\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  private exportExtractedData() {\r\n    this._exporterService.export(this._data, this._options);\r\n    this._data = new Array<any>();\r\n    this.exportCompleted.emit();\r\n  }\r\n\r\n  private extractSpecialRows(outlet: DataRowOutlet) {\r\n    this._data.push(...this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns, outlet));\r\n  }\r\n\r\n  private extractTableHeader() {\r\n    this.extractSpecialRows(this._cdkTable._headerRowOutlet);\r\n  }\r\n\r\n  private extractTableFooter() {\r\n    this.extractSpecialRows(this._cdkTable._footerRowOutlet);\r\n  }\r\n\r\n  private hasNextPage(): boolean {\r\n    if (this.getCurrentPageIndex() < this.getPageCount() - 1) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private nextPage(): void {\r\n    this.goToPage(this.getCurrentPageIndex() + 1);\r\n  }\r\n\r\n  private getPaginatedRowIndex(index: number): number {\r\n    return index + (this.getPageSize() * this.getCurrentPageIndex());\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of cdk-table-exporter\r\n */\r\n\r\nexport * from './lib/cdk-table-exporter.module';\r\nexport { CdkTableExporter } from './lib/cdk-table-exporter';\r\nexport { Exporter } from './lib/services/exporters/exporter';\r\nexport { FileExporter } from './lib/services/exporters/file-exporter';\r\nexport { JsonExporterService } from './lib/services/exporters/json-exporter.service';\r\nexport { TxtExporterService } from './lib/services/exporters/txt-exporter.service';\r\nexport { XlsExporterService } from './lib/services/exporters/xls-exporter.service';\r\nexport { WorksheetExporter } from './lib/services/exporters/worksheet-exporter';\r\nexport { XlsxExporterService } from './lib/services/exporters/xlsx-exporter.service';\r\nexport { CsvExporterService } from './lib/services/exporters/csv-exporter.service';\r\nexport { Options, ExcelOptions } from './lib/options';\r\nexport { ExportType } from './lib/export-type';\r\nexport { ServiceLocatorService } from './lib/services/service-locator.service';\r\nexport { DataExtractorService } from './lib/services/data-extractor.service';\r\nexport { Mime } from './lib/mime';\r\nexport * from './lib/constants';\r\nexport { FileUtil } from './lib/file-util';\r\n\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}