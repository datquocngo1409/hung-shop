import { BaseWidget } from '../base-widget';
import * as ɵngcc0 from '@angular/core';
export declare type RefinementListState = {
    canRefine: boolean;
    canToggleShowMore: boolean;
    createURL: Function;
    isShowingMore: boolean;
    items: {}[];
    refine: Function;
    toggleShowMore: Function;
    searchForItems: Function;
    isFormSearch: boolean;
};
export declare class NgAisRefinementList extends BaseWidget {
    instantSearchParent: any;
    showMoreLabel: string;
    showLessLabel: string;
    transformItems?: Function;
    searchable?: boolean;
    searchPlaceholder: string;
    attribute: string;
    operator: 'or' | 'and';
    limit: number | string;
    showMoreLimit: number | string;
    sortBy: string[] | ((item: object) => number);
    state: RefinementListState;
    readonly isHidden: boolean;
    constructor(instantSearchParent: any);
    readonly items: any;
    ngOnInit(): void;
    refine(event: MouseEvent, item: {
        isRefined: boolean;
        value: string;
    }): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgAisRefinementList, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgAisRefinementList, "ais-refinement-list", never, { "showMoreLabel": "showMoreLabel"; "showLessLabel": "showLessLabel"; "searchPlaceholder": "searchPlaceholder"; "operator": "operator"; "limit": "limit"; "transformItems": "transformItems"; "searchable": "searchable"; "attribute": "attribute"; "showMoreLimit": "showMoreLimit"; "sortBy": "sortBy"; }, {}, never, never>;
}

//# sourceMappingURL=refinement-list.d.ts.map