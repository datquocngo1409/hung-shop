{"version":3,"file":"instantsearch.d.ts","sources":["instantsearch.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, OnInit, OnDestroy, EventEmitter } from '@angular/core';\nimport { AlgoliaSearchHelper } from 'algoliasearch-helper';\nimport { Widget } from '../base-widget';\nexport declare type SearchRequest = {\n    indexName: string;\n    params: SearchRequestParameters;\n};\nexport declare type SearchForFacetValuesRequest = {\n    indexName: string;\n    params: SearchForFacetValuesRequestParameters;\n};\nexport declare type SearchParameters = {\n    attributesToRetrieve?: string[];\n    restrictSearchableAttributes?: string[];\n    filters?: string;\n    facetFilters?: string[];\n    optionalFilters?: string[];\n    numericFilters?: string[];\n    sumOrFiltersScores?: boolean;\n    facets?: string[];\n    maxValuesPerFacet?: number;\n    facetingAfterDistinct?: boolean;\n    sortFacetValuesBy?: string;\n    attributesToHighlight?: string[];\n    attributesToSnippet?: string[];\n    highlightPreTag?: string;\n    highlightPostTag?: string;\n    snippetEllipsisText?: string;\n    restrictHighlightAndSnippetArrays?: boolean;\n    page?: number;\n    hitsPerPage?: number;\n    offset?: number;\n    length?: number;\n    minWordSizefor1Typo?: number;\n    minWordSizefor2Typos?: number;\n    typoTolerance?: string | boolean;\n    allowTyposOnNumericTokens?: boolean;\n    ignorePlurals?: boolean | string[];\n    disableTypoToleranceOnAttributes?: string[];\n    aroundLatLng?: string;\n    aroundLatLngViaIP?: boolean;\n    aroundRadius?: number | 'all';\n    aroundPrecision?: number;\n    minimumAroundRadius?: number;\n    insideBoundingBox?: GeoRectangle | GeoRectangle[];\n    insidePolygon?: GeoPolygon | GeoPolygon[];\n    queryType?: string;\n    removeWordsIfNoResults?: string;\n    advancedSyntax?: boolean;\n    optionalWords?: string | string[];\n    removeStopWords?: boolean | string[];\n    disableExactOnAttributes?: string[];\n    exactOnSingleWordQuery?: string;\n    alternativesAsExact?: string[];\n    enableRules?: boolean;\n    ruleContexts?: string[];\n    minProximity?: number;\n    responseFields?: string[];\n    maxFacetHits?: number;\n    percentileComputation?: boolean;\n    distinct?: number | boolean;\n    getRankingInfo?: boolean;\n    clickAnalytics?: boolean;\n    analytics?: boolean;\n    analyticsTags?: string[];\n    synonyms?: boolean;\n    replaceSynonymsInHighlight?: boolean;\n};\nexport interface SearchRequestParameters extends SearchParameters {\n    query: string;\n}\nexport interface SearchForFacetValuesRequestParameters extends SearchParameters {\n    facetQuery: string;\n    facetName: string;\n}\nexport declare type GeoRectangle = [number, number, number, number];\nexport declare type GeoPolygon = [number, number, number, number, number, number];\nexport declare type SearchResponse = {\n    hits: Hit[];\n    page?: number;\n    nbHits?: number;\n    nbPages?: number;\n    hitsPerPage?: number;\n    processingTimeMS?: number;\n    query?: string;\n    params?: string;\n    index?: string;\n};\nexport declare type Hit = {\n    _highlightResult?: object;\n};\nexport declare type SearchForFacetValuesResponse = {\n    value: string;\n    highlighted?: string;\n    count?: number;\n};\nexport declare type SearchClient = {\n    addAlgoliaAgent?: (agent: string) => void;\n    search: (requests: SearchRequest[]) => Promise<{\n        results: SearchResponse[];\n    }>;\n    searchForFacetValues?: (requests: SearchForFacetValuesRequest[]) => Promise<{\n        facetHits: SearchForFacetValuesResponse[];\n    }[]>;\n};\nexport declare type InstantSearchConfig = {\n    appId?: string;\n    apiKey?: string;\n    indexName: string;\n    numberLocale?: string;\n    searchFunction?: (helper: AlgoliaSearchHelper) => void;\n    createAlgoliaClient?: (algoliasearch: Function, appId: string, apiKey: string) => object;\n    searchClient?: SearchClient;\n    searchParameters?: SearchParameters | void;\n    urlSync?: boolean | {\n        mapping?: object;\n        threshold?: number;\n        trackedParameters?: string[];\n        useHash?: boolean;\n        getHistoryState?: () => object;\n    };\n    routing?: boolean | {\n        router?: {\n            onUpdate: (cb: (object: any) => void) => void;\n            read: () => object;\n            write: (routeState: object) => void;\n            createURL: (routeState: object) => string;\n            dispose: () => void;\n        };\n        stateMapping?: {\n            stateToRoute(object: any): object;\n            routeToState(object: any): object;\n        };\n    };\n};\nexport declare class InstantSearchInstance {\n    start: () => void;\n    addWidget: (widget: Widget) => void;\n    addWidgets: (widgets: Widget[]) => void;\n    removeWidget: (widget: Widget) => void;\n    removeWidgets: (widgets: Widget[]) => void;\n    on: (eventName: string, callback: Function) => void;\n    removeListener: (eventName: string, callback: Function) => void;\n    helper: {\n        lastResults: Object;\n        state: Object;\n    };\n    refresh: () => void;\n    dispose: () => void;\n}\nexport declare class NgAisInstantSearch implements AfterViewInit, OnInit, OnDestroy {\n    private platformId;\n    config: InstantSearchConfig;\n    instanceName: string;\n    change: EventEmitter<{\n        results: {};\n        state: {};\n    }>;\n    instantSearchInstance: InstantSearchInstance;\n    constructor(platformId: Object);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    createInstantSearchInstance(config: InstantSearchConfig): void;\n    addWidget(widget: Widget): void;\n    removeWidget(widget: Widget): void;\n    refresh(): void;\n    onRender: () => void;\n}\n"]}