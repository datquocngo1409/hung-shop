{"version":3,"file":"card.js","sources":["../../temp/inline/card.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, Input, ContentChildren, QueryList, ElementRef} from '@angular/core';\nimport {NgxCardNumberTemplate, NgxCardNameTemplate, NgxCardExpiryTemplate, NgxCardCvcTemplate} from './inputs';\n\ndeclare var Card;\n\nconst defaultPlaceholders = {\n\tnumber: '•••• •••• •••• ••••',\n\tname: 'Full Name',\n\texpiry: '••/••',\n\tcvc: '•••',\n};\n\nconst defaultMessages = {\n\tvalidDate: 'valid\\nthru',\n\tmonthYear: 'month/year',\n};\n\n\nexport class NgxCard {\n\n\t// a selector or DOM element for the container\n\t// where you want the card to appear\n\t container: any;\n\n\t width: number; // optional — default 350px\n\n\t// Strings for translation - optional\n\t_messages;\n\t set messages(_messages: any) {\n\t\tthis._messages = Object.assign({}, defaultMessages, _messages);\n\t}\n\tget messages() {\n\t\treturn this._messages;\n\t}\n\n\t// Default placeholders for rendered fields - optional\n\t_placeholders;\n\t set placeholders(_placeholders: any) {\n\t\tthis._placeholders = Object.assign({}, defaultPlaceholders, _placeholders);\n\t}\n\tget placeholders() {\n\t\treturn this._placeholders;\n\t}\n\n\t masks: any;\n\n\t formatting: boolean = true; // optional - default true\n\n\t// if true, will log helpful messages for setting up Card\n\t debug: boolean = false; // optional - default false\n\n\t numbers: QueryList<NgxCardNumberTemplate>;\n\t names: QueryList<NgxCardNameTemplate>;\n\t expiries: QueryList<NgxCardExpiryTemplate>;\n\t cvcs: QueryList<NgxCardCvcTemplate>;\n\n\tconstructor(private element: ElementRef) {}\n\n\tngAfterViewInit() {\n\t\tnew Card({\n\t\t\tform: this.element.nativeElement,\n\t\t\tcontainer: this.container,\n\t\t\twidth: this.width,\n\t\t\tformSelectors: {\n\t\t\t\tnumberInput: this.findSelectors(this.numbers),\n\t\t\t\texpiryInput: this.findSelectors(this.expiries),\n\t\t\t\tcvcInput: this.findSelectors(this.cvcs),\n\t\t\t\tnameInput: this.findSelectors(this.names),\n\t\t\t},\n\t\t\tformatting: this.formatting,\n\t\t\tmessages: this.messages,\n\t\t\tplaceholders: this.placeholders,\n\t\t\tmasks: this.masks,\n\t\t\tdebug: this.debug,\n\t\t});\n\t}\n\n\tfindSelectors(list: QueryList<any>): string {\n\t\treturn list.map(template => template.elementRef.nativeElement.tagName.toLowerCase() + '[name=\"' + template.name + '\"]')\n\t\t\t\t   .join(', ');\n\t}\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[card]',\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'container': [{ type: Input },],\n'width': [{ type: Input, args: ['card-width', ] },],\n'messages': [{ type: Input },],\n'placeholders': [{ type: Input },],\n'masks': [{ type: Input },],\n'formatting': [{ type: Input },],\n'debug': [{ type: Input },],\n'numbers': [{ type: ContentChildren, args: [NgxCardNumberTemplate, {descendants: true}, ] },],\n'names': [{ type: ContentChildren, args: [NgxCardNameTemplate, {descendants: true}, ] },],\n'expiries': [{ type: ContentChildren, args: [NgxCardExpiryTemplate, {descendants: true}, ] },],\n'cvcs': [{ type: ContentChildren, args: [NgxCardCvcTemplate, {descendants: true}, ] },],\n};\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}