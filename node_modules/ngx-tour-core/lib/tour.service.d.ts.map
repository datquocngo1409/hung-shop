{"version":3,"file":"tour.service.d.ts","sources":["tour.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Router, UrlSegment } from '@angular/router';\nimport { TourAnchorDirective } from './tour-anchor.directive';\nimport { Subject, Observable } from 'rxjs';\nexport interface IStepOption {\n    stepId?: string;\n    anchorId?: string;\n    title?: string;\n    content?: string;\n    route?: string | UrlSegment[];\n    nextStep?: number | string;\n    prevStep?: number | string;\n    placement?: any;\n    preventScrolling?: boolean;\n    prevBtnTitle?: string;\n    nextBtnTitle?: string;\n    endBtnTitle?: string;\n}\nexport declare enum TourState {\n    OFF = 0,\n    ON = 1,\n    PAUSED = 2\n}\nexport declare class TourService<T extends IStepOption = IStepOption> {\n    private router;\n    stepShow$: Subject<T>;\n    stepHide$: Subject<T>;\n    initialize$: Subject<T[]>;\n    start$: Subject<T>;\n    end$: Subject<any>;\n    pause$: Subject<T>;\n    resume$: Subject<T>;\n    anchorRegister$: Subject<string>;\n    anchorUnregister$: Subject<string>;\n    events$: Observable<{\n        name: string;\n        value: any;\n    }>;\n    steps: T[];\n    currentStep: T;\n    anchors: {\n        [anchorId: string]: TourAnchorDirective;\n    };\n    private status;\n    private isHotKeysEnabled;\n    constructor(router: Router);\n    initialize(steps: T[], stepDefaults?: T): void;\n    disableHotkeys(): void;\n    enableHotkeys(): void;\n    start(): void;\n    startAt(stepId: number | string): void;\n    end(): void;\n    pause(): void;\n    resume(): void;\n    toggle(pause?: boolean): void;\n    next(): void;\n    hasNext(step: T): boolean;\n    prev(): void;\n    hasPrev(step: T): boolean;\n    goto(stepId: number | string): void;\n    register(anchorId: string, anchor: TourAnchorDirective): void;\n    unregister(anchorId: string): void;\n    getStatus(): TourState;\n    isHotkeysEnabled(): boolean;\n    private goToStep;\n    private loadStep;\n    private setCurrentStep;\n    private showStep;\n    private hideStep;\n}\n"]}